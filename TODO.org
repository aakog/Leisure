* TODO recursive lets don't work
* TODO make a way to specify the "original contents" of a code block so you can reset it
* TODO try to get megaArity working
* TODO get [[http://textcraft.org:3000/#load=/demo/dice.lorg][dice]] and [[http://textcraft.org:3000/#load=/demo/lib/lenses.lorg][lenses]] pages working again: 
* TODO documentation tooltips
* TODO document version numbers (part of metadocument?)
* TODO Preserve document settings
- theme
- searches
* TODO confirm before disconnect
* TODO tabs should collapse
* TODO convert Lounge source to Lounge documents
* BUG changing hidden from true to false is not updating properly
* TODO infer data types
* TODO show views by default
* TODO single-document monoliths (base-64 inlined parts)
- libraries
- images
- videos
** Let people explode the documents into directories/zip files
* TODO tags
* TODO search is broken
* TODO changes to view definitions don't cause updates
* TODO bring back imports
* TODO make sessions sticky so masters can reload and slaves can take over if master leaves
Make "Become Master" button enable when master disconnects
* TODO block wiring
make "plug bay" in code blocks
- lets you drag a plug to another block
- adds a var code attribute referring to the plug block
* TODO code scope inspector
inspector button on code scope
- highlight view under mouse
- show data, viewdef, & controller
- allow linking codeviews
* TODO factor collaboration & emacs connection up into main editor
* TODO fix list parsing
- make indented lines following a list item part of the list
- lines starting without indent terminate all pending lists
- mark end list items (starts can be determined from those)
* TODO look at task management
- Leisure docs displayed from textcraft can share web storage
- when a doc loads, put its agenda info in web storage
- potentially load docs and update agenda data like Emacs does
* TODO down-arrow next to Emacs icon hangs
* TODO Read-only mode (turn off editing)
* TODO Leisure isn't sending replaced regions properly to Emacs
* TODO on reload, add hash to preserve selection
* TODO Tool to find defs and controllers from views
* TODO nice text color against white bgnd: #4D4D4C
* TODO time slider (use undo/redo)
* BUG splitting a dynamic code block in Emacs causes problems in Leisure
* BUG splitting a code block directly above a dynamic one in Emacs causes problems in Leisure
* BUG toggling show/hide in slide mode dies
* TODO convert source to Leisure files
* TODO announcement form
- melpa package
- screen cast
- demo repo
- start with fresh emacs
* TODO add begin_example/end_example (and more) to org parsing
center, abstract, note, ...
Check [[https://github.com/fniessen/org-html-themes]]
* TODO ditaa doesn't refresh properly
* TODO use Courier for unknown programming languages
* TODO mode to only show blocks with certain tags
hides cruft so you can just look at the code
* TODO indicate the age of each block
* TODO make headlines bigger in plain mode
* TODO when diag is enabled, check inserted text
* TODO slider stays up when you scroll and doesn't scroll with the page
* TODO load parameter so people can view the example without Emacs
  provide plantuml and ditaa files for the current text (use /tmp/blah on the site)
* TODO allow links in simple markup (but not inside other links)        :org:
* TODO load *and save* gists or fiddles
* TODO use :exports to control code appearance
  :exports code
  :exports both
* TODO Check out [[https://disqus.com/][disqus]] for code comments [[https://disqus.com/api/docs/requests/][disqus api]]
* TODO extract doc strings between name and begin_src
* TODO extract doc strings from sourcemap, before code
* BUG problem editing headline in slide mode
* TODO get toolbar theming working (at least get steampunk toolbar to work)
* TODO widgets for Emacs demo
* TODO code block views (replace whole code block)
* TODO code result views (replace results area)
* TODO updating
* BUG search not updating
* TODO teach minimal updates about top-level headlines
* TODO move leisure stuff out of METEOR-OLD
* TODO make errors insert into highlighted syntax (check out Prism's [[http://prismjs.com/extending.html#writing-plugins][hooks]])
* TODO Make editor use docOffsets and domCursors, remove getPositionForBlock, etc.
* TODO erroneous links should have tooltips on the entire link, not just the X
* TODO make p2p use emacs protocol
* Project list
- fix up look and feel
- host services
  - files
  - shell
- tables / spreadsheet
- slide view
- value sliders (numeric, color, weekday, month, etc.)
- metadocuments
- scope chains
- Sorcery integration with CS sourcemaps
- drag and drop images
- updating, result views / test cases
- tab-collapse
- minimal rendering
- multiple cursors / occurrance editing
- block sources (imports, comments, external data)
  - convert a URL to a stream of blocks
    - doesn't edit the file or local storage, just creates a temporary block source
  - import a file
  - local blocks
- comments
  - comment on named blocks
    - autogen source block ids using #+ID: keyword
      - make edits manage the block ID, copies get their own, etc.
    - rename can redirect old comments to new block
  - approval block sources (maybe imports)
    - approve a comment (store a hash of it)
    - approve a user (store a comment block source)
  - users can have local approal block sources
- keybindings for things
  - switch to/from plain mode
* Critical project list
- code scopes
- p2p
- storage
* Search stuff
- switch to suffix list
- search history
- search type drop-down
- case sensitive, regexp
- highlight results
* TODO spreadsheet, table rendering
* TODO make more value editors
- colors
- calendars
- clocks
- region names
- human name pickers
* TODO make UI system to use a data filter to manage view definition
* TODO coffeescript errors should deal with sourcemaps properly [[https://github.com/rich-harris/sorcery][sorcery]]
* TODO use handlebars partials instead of templates[]?
* TODO keep cursor at EOL if collaborative change deletes rest of line
* TODO display symantic errors properly (deal with stack trace and sourcemap)
* TODO Fancy: display results after expressions?
* TODO make a host service (ssh, shell, python, Java, etc.)
Basically tramp for Leisure
- Leisure should ask for confirmation from user before connecting to local/nonpublic services
* TODO more separate projects
- UI system
- evaluator
- scope chains
* TODO scope chains
- make evalScope(str) -> [result, newEval]
- use this for dynamic edits
- keep a currentScope variable for the current evalScope function
- keep the old one around to reuse when people make successive edits to the same block
* TODO check whether we should use browserify instead of requirejs
we'll keep requirejs for now, but browserify looks to be much simpler and friendlier to use
* TODO Look at supporting [[http://sweetjs.org/][sweetjs]]
* TODO verify whether @ needs a fat arrow in runtime.coffee:Leisure_token.prototype.toString()
* TODO code comments and metadocuments
- keep comments in the metadocument?
- secure comment edit/insert using OAuth?
* TODO make editor support hidden blocks
a newline after a block preceding a hidden block should insert a block
immediately after the visible block
* Innovations
** TODO reimplement drop image
*** Add "inline" option in the image context menu
- convert it to a named src block
- present it as a data link
** Code Scopes
use an editor that 
*** TODO select text and create a floating code scope using cursor menu
** TODO Collapsible document outline
Open in a code scope to get a floating outline
* TODO Storage
- checkpointing and loading
  - Github: make a branch for each session?
  - webtorrent: [[https://github.com/feross/webtorrent]]
- local file load/store
* TODO generate monolithic, minified JS file
* Short list -- announcement
** BUG inserting char at start of doc in plain mode makes cursor disappear
** BUG appended slide in plain mode disappears
** TODO make appendData autoappend slide if it doesn't exist
** TODO add ids to data blocks so they are preserved on checkpoint and links continue to work
** TODO - code scope -- set of code boxes retrieved from doc
Need this for the game so you can see things as you play
  - code scope should update even if the data's slide is hidden (modify parent cache?)
  - as many code scopes as you want
  - block/function search
  - filter by tag -- useful for DSL help, etc
  - list of blocks/functions
  - caller/callee functions
    - hovering over a function should pop up a panel with a button for callers/callees
  - block edit history (list of function names which can expand to editable contents)
    - sort history chronologically or alphabetically
    - expand this to a search box, callers, callees
  - contents should be editable
  - attach to
    - document
    - slide
** TODO Special feel: working in Leisure should feel special
- Music and sounds for different themes
- cartoon boinging sounds for errors
- different sounds for changing different types of blocks
** TODO Balkan theme
- Music such as Borino (try to get permission from Beats Antique, Balkan Beat Box)
- Dracula
- dark castles
** TODO probably too many calls to render and restorePosition during event processing
- processChanges calls render (which saves the position)
- changeStructure indirectly calls processChanges
  - calls render at the end
- editBlock calls changeStructure
  - restores dom position manually
** TODO isometric tile game doc
** TODO make Leisure value sliders use the AST to handle nonnumeric data
- notes should increment properly
** TODO rewrite compiler to use a HAMT and remove monads from as much as possible
** TODO defer initial record processing until after Leisure finishes initializing
** TODO data observers
- fire when data changes
- API
  - add(data)
  - remove(data)
  - update(data, oldData)
** TODO index observers
- code block that defines API methods that react to index changes
- API
  - indexChange(newIndex, oldIndex)
  - add(data)
  - remove(data)
  - update(data, oldData)
** TODO Music box document
- multiuser
- songs
  - organize patterns
- patterns
  - monadic
    - chain can handle runtime changes
    - need a way to commit blocks
      - a way to switch from the old definition to the new
      - still saves changes
      - has notion of "currently edited version"
      - maybe allow a #+COMMITED keyword between #+BEGIN_SRC and #+END_SRC
        - code between #+COMMITED and #+END_SRC is the committed code
        - code between #+BEGIN_SRC and #+COMMITTED is the editing version
  - data
    - sorted by position value
    - each pattern defines its own index
    - entries are created muted -- use active flag to turn on a piece of data
    - data controls the song
    - player state is local
- each browser has its own player
- procedures can change the player objects
** TODO AST buttons are inside of number slider elements
** TODO add loot to dice page
** TODO test nested imports
** TODO editing a fancy code block's name slot has problems
- inserting in a blank name slot should create a name keyword
- newlines don't work properly
** TODO redefining a token pack doesn't remove the previous one for that name
** TODO redefining a defCase doesn't work
** TODO adding an import fails to create import property in block (have to revert)
** TODO insert right before a #+BEGIN_SRC fails
** TODO change checkSourceMod
- make changeStructure return existing changed blocks (added or changed, not removed)
- call executeSource from editBlock instead of keyup
** TODO meta-1 inserts a 1
** TODO cache compiled Leisure JS in blocks
- keep change count in info block
- cache code in leisure block and keep change count
- edits recache code and propagate to connected clients
- initial reads recompile code with old counts
  - connected clients can ignore cache updates from reads if block text hasn't changed
** TODO fix game.lorg's layout
** TODO support multiple imports per headline
add support for multiple property values
** TODO headline blocks should contain their properties
Right now, properties are stored in chunks following headlines
** TODO add editor objects
- editor for plain and fancy modes
  - customize key bindings (backspace vs. fancyBackspace, etc.)
- factor out editor into tiny extensible package
  - save other people from this pain
  - list difficulties
  - talk about model-generation solution
** TODO redo value slider creation
base it on org text, not DOM text
** TODO fix ast popup placement
** TODO bring back ast node/code highlighting
** TODO merge root.modCancelled wth root.ignoreModCheck
** TODO pop up a toolbar for code blocks
** TODO make the selection bubble pop up a toolbar
** TODO allow views to markup headlines and meat blocks
- use shadow to rearrange parts, etc. like
- simplify markup for views based on chunks
  - headline boilerplate
  - headline content
  - headline tags
  - headline properties
  - headline contents
    - meat
    - other headlines
** TODO make compiler work for lorg files
- defs run all the time
- notebook-only blocks run only in the notebook
  - HTML & CSS blocks
- integrate compilation into backend for importing -- keep compiled version in Mongo
- in notebooks, newly declared js/cs variables won't add to the scope
  - use a nested eval function to access private variables
  - for new code, use parser check for new variables
    - if there are new variables, generate a new nested eval function
  - a page refresh will probably be needed if nesting level becomes too great
** TODO fix selection bubble in shadow.lorg
- in testShadow view definition
- beginning of 2nd line (under <span>)
** TODO use CSS selectors for event binding, like Meteor does (kudos to Meteor)
** TODO create an STM-like "transaction block" that can redo if there are data conflicts
- record ids of data fetched in the block
- buffer up "puts"
- send puts to the server along with fetched ids
- fail if sent ids are not current ones
** TODO improve monad impl?
- should bind.cons just be a map?
- IO monad could convert values to IOs
  - [(print 1) (print 2)] could print 1 and 2
  - could uncomment and use asIO for this
  - could fix compiler so it works in this model
** TODO rename "Monad" to "IO" in coffeeScript codebase
** TODO make sidebars work for any headline level
** TODO make checkpoint ask for commmit message
** TODO make revert redefine funcs
** TODO define showHtml.parseError to show a small error symbol that hover-expands to the message
** TODO *update jqueryui to get selectmenu widget*
** TODO warning for potentially misspelled index names
- index defs that refer to empty indexes
- data index names for indexes that only contain one piece of data
** TODO disable checkpoint and revert buttons if there are no changes
- use the info record to report changes
** TODO switch from persistent-hash-trie to [[https://github.com/facebook/immutable-js][immutable-js]]
- it's already located in 5-immutable.js
** TODO attach block documentation/properties to JS/CS functions
- parse code to find function names
- add properties to funcs after eval
** TODO use JIT technique for global names?  Maybe V8 will dynamically inline, anyway?
- when a symbol is *redefined*, increment a version counter
- mark top-level functions with the version counter value at compile time
- when a function runs, check the version number
- if the function is out of date, recompile it
- use new name space for evaluated defs
  - L_x is a function
  - L$_ is the result
- this allows funcs to resolve global names in advance
- this trades off one verrsion check for all of the global name function calls
** TODO some way to control access to the root documents
- maybe just a random URL, for now
** TODO warning for controllers that don't define @initializeView
** TODO warning for observers that don't define @update
** TODO fix parsing bugs
- * Caveats slide is not parsed as a slide
- newline at end of list double NL after it is not properly rendered in fancy
** TODO reactivate note button
** TODO reactivete selection bubble
** TODO collaboration
- multple documents on a session
- show users' cursors/selections
- react to adds/changes/removes of widget types in HTML blocks (preparse attributes)
- hooks for programs to react to data changes (subscriptions)
** TODO JavaScript/CoffeeScript source blocks
** TODO fix floaty notes
** DONE get importing working with solomon
   CLOSED: [2015-02-02 Mon 14:11]
** DONE named blocks in doc should override those in imported docs
   CLOSED: [2015-02-01 Sun 22:40]
** DONE fix imported indexed data
   CLOSED: [2015-01-02 Fri 01:06]
** DONE value slider final value isn't always used
   CLOSED: [2015-01-01 Thu 13:07]
** DONE put origin in all blocks & use regular paths for imports (instead of import/)
   CLOSED: [2015-01-01 Thu 10:24]
** DONE editing headline doesn't move cursor
   CLOSED: [2014-12-30 Tue 16:50]
** DONE Document importing
   CLOSED: [2014-12-30 Tue 14:56]
- headline property: import
  - the imported doc may inject data into the headline with copy-on-write
  - blocks have origin set to the document id
  - when there's a change, make a clone if there's an origin
** DONE AST buttons are horked for code containing blank lines
   CLOSED: [2014-12-23 Tue 23:04]
** DONE bad behavior after editing 3 + 4
   CLOSED: [2014-12-23 Tue 09:02]
- delete and reinsert space
- moving forward at EOL requires two key presses
- AST buttons hork
- problems only occur with local editing, not remote
** DONE code view doesn't handle rapid typing when there are numbers and operators
   CLOSED: [2014-12-22 Mon 21:00]
** DONE typing a character on the first new blank line adds another blank line
   CLOSED: [2014-12-22 Mon 20:50]
** DONE handle inserts with org change/regen
   CLOSED: [2014-12-22 Mon 20:50]
** DONE you can delete the newline before the inline html in shadow.lorg, fancy mode
   CLOSED: [2014-12-22 Mon 10:17]
** DONE fix up backspace/del to check org text
   CLOSED: [2014-12-22 Mon 10:17]
- deleting newlines should regen the HTML
- fancy deletes before or after the current block should be disallowed
** DONE error adding newline after headline in fancy mode
   CLOSED: [2014-12-21 Sun 19:36]
- headline is immediately followed by an HTML block
** DONE check out CKEditor
   CLOSED: [2014-12-21 Sun 19:37]
Didn't see an easy way to programmatically define widgets -- need to make files
- inline mode: [[http://ckeditor.com/demo#inline]]
- use [[http://nightly.ckeditor.com/14-12-17-07-09/standard/samples/datafiltering.html][advanced content filter]] for supported markup
- use [[http://stackoverflow.com/a/17760912/1026782][dataProcessor]] to convert HTML/orgFile
- bind arrow keys in editor to move between regions
- make HTML blocks explicitly create an HTML chunk
- blank lines make paragraphs so blocks can be inline
  - like [[http://localhost:3000/#load=/shadow.lorg][the html block in this page]]
- use contenteditable to selectively allow editing in source views, etc.
** DONE change meat to spans
   CLOSED: [2014-12-06 Sat 13:12]
- markup is breaking
- this allows inline views to work
- meat-breaks should be paper-thin divs
** DONE use white-space: pre-line for rich text formattting
   CLOSED: [2014-12-06 Sat 13:13]
- changed approach
** DONE fix inline one-liner code boxes
   CLOSED: [2014-12-07 Sun 13:33]
- an inline code editor
- an inline results box view
- an inline code + results view
- shortcuts to create the two views
** DONE buffered results in fancy mode
   CLOSED: [2014-12-07 Sun 15:06]
- put results in all at once instead of incrementally
* Milestone features
- indexedDB reorg
  - use a single db to store all Leisure data for a site
    - makes it easier to toast data
  - use an object store to register all DBs with expiration dates
    - scan registry whenever a page opens to remove expired dbs
- user accounts
  - prevent spam on announcement
    - protected files (only demo mode allows anonymous editing)
    - metadocuments
      - contain protection info
      - user permissions
      - only owners can directly edit metadocument
- make trivial code block headers/footers hidden and slide out when you focus in the code
- add "index" attribute to yaml blocks
  - :index names[name] numbers[number]
  - format: indexName[attrName]
    - indices[indexName][attrName] = [data...]
  - "index" helper {{#each (index 'cards' player)}} ... {{/each}}
    - uses index on cards: :index cards[player]
    - iterates over a player's cards
- time-travel slider
  - go back in time to any point in the session
  - go back to checkpoints that are earlier than the session
  - keep all changes on server? -- could trim by checkpoint at need
- fix Leisure build process
- optimize fully applied function calls
  - create main func anc call that instead of partial funcs
  - don't use reflection to record args)
- use views for everything
  - slides
  - code blocks
  - Use GUI templates for slides
- hide/show code blocks/block comments
- switch to object.observe() for change monitoring
- cleanup observers[] and codeContexts[] when a code block disappears
- JavaScript/CoffeeScript source blocks
- Leisure "model" type (like html or svg results)
  - useful in code views
- collaboration
  - show users' cursors/selections
  - persistence: git
  - toggle synchronizing
  - document history/branches?  This would require a merge tool...
- multiple documents per session (each document can function as a data channel)
- server-side code can transfer data into a document -- inbox documents
- X GUI templates -- HTML source block defines a new widget type
  - X define handlebars helpers for input, views, etc
  - X widget code blocks (like test cases)
- X draggable images
- X data
- notes
- slide clones
- code scopes
- Compilable notebooks (all Leisure source code in viewable/editable *.lorg format)
- make fancyOrg:getSelectionDescriptor line-based for better selection preservation
* Short-term Leisure-org plan
- collaboration service
  - handle local adds/removes
  - show users' cursors/selections
  - persistence: git
  - Leisure could run on a server or in one of the browsers (in a WebWorker for sandboxing)
  - notebook monadic environment
    - print can patch the notebook
  - some monads can remotely to all notebooks or just the current notebook
  - notebook commands
    - patch notebook
  - Leisure commands
    - broadcast notebook patch
    - eval
  - toggle synchronizing
  - X each document gets local storage for user-local and user-private data
    - X ":local: true" blocks are in the document, initialized for everyone, but stored locally
  - X head record contains unique ID
    - X reinitializes private document when it changes
- JavaScript and CoffeeScript src blocks
- Compilable notebooks
  - into JavaScript module
  - export data sets
- data
  - query
    - use datalog, like datomic?
- security
  - run privileged code only in a web worker
- fancy/basic mode for each slide
- notes
  - Types of slides (value of "note" property)
    - open slide -- can contain sidebar notes (this is the default value of the note property)
    - sidebar
    - float
  - note property changes slide presentation into floating note or sidebar note
  - each slide could have a control to turn it into a note
  - like a Smalltalk workspace, but a full sub-document
- slide clones
  - cannot contain sidebar notes
- event framework -- use script tag to bind events on parent when it is displayed
- local things -- only exist in your browser, not part of the shared doc, but logically part of it
  - treated as part of doc for local user; code scopes index them, etc.
  - local slides
  - local-on-write -- local slide created on editing that overrides slide
    - notify user if original changes (use SHA)
    - allow revert
  - local properties -- useful for private notes, etc
  - defs in local notes should be loud
  - some local slides could be shared across documents
    - import shared local notes by tag
- take HTML markup out of name block and put it in CSS
- make code-names auto-create
  - generate empty div for people to type a name in
- code scope -- set of code boxes retrieved from doc
  - as many code scopes as you want
  - block/function search
  - filter by tag -- useful for DSL help, etc
  - list of blocks/functions
  - caller/callee functions
    - hovering over a function should pop up a panel with a button for callers/callees
  - block edit history (list of function names which can expand to editable contents)
    - sort history chronologically or alphabetically
    - expand this to a search box, callers, callees
  - contents should be editable
  - attach to
    - document
    - slide
- use unlabelled issues for comments, since other people can't add labels
- fix test cases
- bug: expanded test cases will sometimes get double comment blocks added in the DOM
- bug: headline tags don't render properly
- bug: links don't parse right at the beginning of a section
- bug: test cases don't preserve the expected value
- bug: sometimes the click() functions are ignored on the next/prev slide buttons
- bug: doesn't handle empty expressions in a test case
- allow easier creation of code boxes
- allow retroactively adding code name and doc strings to existing code boxes
- doc strings (text after name) -- pop up on mouse over (if mouse stays on word for a while)
- parse lorg files from command line
- list parsing: items are only under a list if they are indented past the dash
- on github save conflict, create temp branch and merge it
- hide comments button when editing a local file
- tutorial
  - use private COW notes for exercises
- key bindings
- link selections in AST display and source text
- toggle button for plain/fancy on boxes?  This would allow editing output
- straighten out root.currentMode and root.orgApi
- session persistence for each Leisure doc
  - save selection and scroll offset of doc
  - save contents and locations open code scopes
  - svae contents and locations of private notes
- libraries
  - copied into the document, not externally referenced
  - should contain their own version and location info so you can update
  - probably copied as a child of a "libraries" slide
- pluggable page elements
  - "#+BEGIN_SRC css :id steampunk" could redefine the steampunk style
  - an HTML block with an id can replace the whole Leisure bar (rebind events afterwards)
- undo tree, like in emacs
- name spaces
- background Leisure execution
  - run monads in a web worker
  - useful for intensive Leisure code that analyzes documents, etc
- Java code generation
- Alternate code generation should speed up execution
 use array values instead of function values -- already getting arguments array, anyway

 [value] or [null, func]

 if length == 2, then it has not been memoized, yet.
- precompiled docs
  - load the doc -- don't run code in the doc
  - load the JS file
- [ ] full-screen app mode (for Leisure button?)
- [ ] recursive let defs don't work
- [ ] forward references in let don't work
- [ ] fix headline tag fancy markup; check property example
- [ ] support Ast display for let blocks
- [ ] scrub ': ' out of expected value tooltips
- [ ] put code into tooltips, above expected value
- [ ] make test case creation run the code?
- [ ] doc comments -> function properties / usage hover help
- [ ] Simple pattern matching
- [ ] Make repl parse org format
- [ ] Make arrow buttons show for non-dynamic code blocks
- [ ] Simplified exprs, like in calc
- [ ] Source maps
- [ ] Make Leisure button show controls
** Environment
*** Cheap to use
- Runs in a browser
- You don't need to own a computer
- No install needed
- Can use Github for storage
*** You can open the hood
- ASTs
- Dynamic expressions (value sliders help)
- Test cases run when code changes
- Display partially applied functions in a way that makes sense!
*** Document interface
- Good for books and tutorials
  - code and examples all work
- better than a REPL
  - REPLs are mostly read-only (except for the bottom line)
- better communication
  - modify/run test cases and example code
  - [ ] (DEMO) HTML in the doc can be accessible to the program
  - maybe actual code reuse, because people can understand how to use your code!
  - pride of ownership -- you can make your source code fun to look at (imagine...)
- Reproducible research
  - programs can contain their own examples and example data
  - data is in the document itself
    - programs can modify the document
*** Social coding
- Get feedback from other people directly on your code
** Document-based concepts
*** The whole project
*** Storage
*** Access to source document as it runs -- it can edit its own code
*** Leisure structure for document (and editing monads)
** Art deco links
http://lindacee.hubpages.com/hub/Toasters-of-the-1920s
https://www.pinterest.com/esmellaca/art-deco/
* Finished for Talk
- [X] save to file & github
- [X] Saving to github/restfulgit -- restfulgit not done
  - [[https://github.com/hulu/restfulgit]]
  - [[http://gitlab.org/]]
- [X] update qr-codes
- [X] change slide controls to page up/down
- [X] ast for myLast leaves out lines after first
- [X] Convert old slide presentation
- [X] Art deco look
- [X] Get "add comment" working
- [X] Test cases (create test case button, etc.)
- [X] Theme switch monad (in case steampunk theme doesn't work with projector)
- [X] markup (images, links)
- [X] markup (bold, italic, underline)
- [X] markup (make bullets look nicer)
- [X] vertically center displayed HTML
- [X] parse list items
- [X] Slide view
- [X] Value sliders
- [X] Make reparsing just reshow the results, not reexecute the exprs
- [X] only execute defs on load or keypress -- don't execute dynamics except on kepress
- [X] ASTs
- [X] make results HTML-friendly
- [X] fix problem with left-right arrows when in number spans
- [X] Talk: Disclaimer
  - work in progress
  - some rough-cuts have already been polished (to some extent)
- Talk: Stuff to play with
  - A new language (with some neat stuff)
  - A new environment (with some neat stuff)
  - For kids!
  - For grownups!
  - Maybe even jaded, expert grownups...
- [X] Talk: Crisis in the field

...current incoming students have grown up with video games and use
iPhones daily.  Furthermore, they now arrive from high school with incredibly
weak backgrounds.  We used to require calculus before beginning CS.  But now
we don't require calculus at all! (Or we'd have no majors.)  When they see
programming, even in very high-level languages, many incoming students recoil.
They really enjoy *using* computers and may have even installed Windows, but
they don't like building things...

-- private communication from a prominent CS professor

  - And yet, Minecraft is so popular...
  - People even build computers inside of Minecraft, like NandToTetris...
    [[http://i1.ytimg.com/vi/zxcpWS-lKDw/mqdefault.jpg]]
  - Programming for me is a lot like Minecraft
  - Can help it be more like Minecraft for other people?

  - Talk: Project Hieroglyph

    I have followed the dwindling of the space program with sadness, even bitterness.
    Where’s my orbiting, donut-shaped space station? Where’s my fleet of colossal
    Nova rockets? Where’s my ticket to Mars?...

    “You’re the ones who’ve been slacking off!” proclaimed Michael Crow, the President
    of Arizona State University, when I ran all of this by him later. He was referring,
    of course, to the science fiction writers. The scientists and engineers, he seemed
    to be saying, were ready, and looking for things to do. Time for the SF writers to
    start pulling their weight!

    -- Neal Stephenson

    Stephenson has put together a project to get write stories that are, "throwbacks, in
    a manner of speaking, to 1950′s-style SF, in that they would depict futures in which
    Big Stuff Got Done"

  - Talk: Dynabook
    - Alan Kay's concept from 1972
      - goes back to his research in the 60s
    - We already have machines powerful enough
    - Maybe a special type of document can provide what's missing...
    - It needs to be free and easy to use (no install, etc.)
    - What if each document was like its own computer?
      - documents can contain media
      - versioning can provide state
    - What the document's source was meant to be part of the document itself
      - End-user multimedia document
      - Interactive
      - Annotated source code (maybe hidden by default)
      - Editable at runtime
    - These concepts aren't /that/ new, they just hasn't been that accessible to people, lately
      - Smalltalk -- a smalltalk image is almost a document (not really linear)
      - Hypercard
      - EMACS, with file-local variables
      - Oberon (Acme, Wily, Ober)
      - Tiddlywiki
    - Mathematica is probably the closest thing to Leisure out there
      - It's far from free
    - HTML5 really has a lot of promise for this!
      - HTML is made for documents (uh... duh?)
      - You can edit HTML in a browser
      - HTML documents can present a lot of different types of media
      - web services can fill in the blanks
    - In Stephenson's book Diamond Age: Or, a Young Lady's Illustrated Primer, the primer is essentially a dynabook
  - [X] Talk: computing education
    - fun is important
    - promote building
      - promote pride of ownership
      - documents, not just source fies
      - media embedded in documents
      - each document can be like a tiny computer
    - improve communication and understanding (human-human and human-computer)
      - REPLs are good, but they are mostly read-only, except for the line at the bottom
      - Watch expressions are good
        - why can't you have some that run */all the time/*
        - watch expressions are almost test cases...
      - Interactive examples directly in the source
      - Interact with the program directly through the source code
      - Interact with the author directly through the source code
      - With better understanding, people might actually reuse code
        - instead of rewriting it
    - promote exploration -- peeking under the hood
      - view ASTs
      - dynamic expression results update as you type (or slide)
      - dynamic test cases update as you type
      - partially applied functions are completely first-class (parameters are visible and usable)

  - [X] Talk: orgMode -- a document-centric view of computing
    - /very/ rich */text/* documents that produce more than just nice looking text
    - Leisure functions inherit block name & tags
    - data storage in document
      - a document can act to some extent like a Smalltalk image
      - remote documents fit well with the web
    - tags for code visibility, categorization
    - docs can run code when loaded (def blocks -- old EMACS trick)
    - JavaScript orgMode parser is a separate open source project
  - [ ] Talk: HTML5, contenteditable, DOM/text conversion
  - [X] Talk: Github hookup
    - storage
    - you see other peoples' comments in your code (Github lets you ban them, too)
    - you can comment on other peoples' code
  - [X] Talk: partial application
  - [ ] Talk: function advice (talk about advice names), defCase
  - [ ] Talk: document storage
  - [ ] Talk: future: code scopes view document as a code database
    - search box lets you edit in-place
    - names and tags for code blocks
  - [ ] Talk: future: code google
    - static inclusion (updatable subdocuments)
* Resources
[[http://orgmode.org/worg/dev/org-syntax.html][Org syntax]]
[[http://phantomjs.org/][PhantomJS]]
[[https://github.com/cemerick/austin][Austin ClojureScript REPL]]
* Todo Items
  :PROPERTIES:
  :ID:       41b927b5-242d-4552-b7ac-5ef44eccf79e
  :END:
** TODO Connect with Floobits
   :PROPERTIES:
   :ID:       07ec1b14-aa7a-4879-845f-64deac6638cf
   :END:
** TODO Make markup regular, so every headline has textborder, etc.
   :PROPERTIES:
   :ID:       3a564b52-b404-415d-b5a7-8eec1715a149
   :END:
** TODO Stream fusion                                               :leisure:
   :PROPERTIES:
   :ID:       5c9ce52c-dce2-4d93-b578-8034bcdb3973
   :END:
** TODO use script elements and document.currentScript for interactive HTML :leisure:org:
   :PROPERTIES:
   :ID:       839f3a8c-bfdb-49d4-b5cc-b22f47607966
   :END:
** TODO simple pattern matching                                     :leisure:
  :PROPERTIES:
  :ID:       fa9ddb5e-20bc-4b5c-beef-348f21864136
  :END:

namespace for pattern match macros

match obj
  left l -> print concat['left ' l]
  right r -> print concat['right ' r]
  -> print concat['bad type: ' either]

left and right are pattern-match macros, defined with defPattern, stored in a pattern alist

defPattern left obj | hasType obj left -> [(obj id id)]
defPattern right obj | hasType obj right -> [(obj id id)]

match uses continuation pattern to build up expr:
\\
  l = obj id id
  r = obj id id
  .
  hasType obj left
    print concat['left ' l]
    hasType obj right
      print concat['left ' l]
      print concat['bad type: ' obj]

*** Matching lists (lists/vectors)
[]

[x y | z]
x is the first item
y is the second item
z is the rest of the list

[|z]
z is the entire list, but it must be a list (or vector, etc.)

*** Matching maps (alists/hamts)
{key:pattern key:pattern ...}
like
{"hello": h}
keys can be any expression and are evaluated in order:
{"hello":h h:x x:y}

{x y z}
same as
{"x":x "y":y "z":z}
** TODO partially parse the doc, parsing collapsed regions on demand? :leisure:org:
   :PROPERTIES:
   :ID:       1edff1e9-8588-4c80-bc1c-c6e11064c909
   :END:
** TODO save viewed comment counts in webstorage                :leisure:org:
   :PROPERTIES:
   :ID:       3efa560e-4c5b-437a-955c-d52976e511fa
   :END:
Add "mark as unread" button
** TODO handle comment issue deletion update                    :leisure:org:
   :PROPERTIES:
   :ID:       cd8513db-fbc6-4a9c-aac4-8002c0d9baa3
   :END:
** TODO make group close tokens ignore indentation rules            :leisure:
   :PROPERTIES:
   :ID:       9ef043e3-9443-49f9-92e0-5e905d287120
   :END:
** TODO Recompute all dynamic blocks when a dynamic or def changes :leisure:org:
   :PROPERTIES:
   :ID:       37b775c1-9659-41fe-9f8e-0b8fe9253cac
   :END:
** TODO Special issue with node-webkit -- need to rebuild stuff   :leisure:
   :PROPERTIES:
   :ID:       9e4930df-7b48-41ec-a464-15dcf6542d6b
   :END:
https://github.com/rogerwang/node-webkit/wiki/Using-Node-modules
** TODO Source maps                                             :leisure:org:
   :PROPERTIES:
   :ID:       a143abd2-a6f9-45e1-a1e7-ac63f2455940
   :END:
** TODO make ESC toggle SRC node?                               :leisure:org:
   :PROPERTIES:
   :ID:       acafa8a3-cf9e-4180-b4ea-4b227a285628
   :END:
** TODO handle HTML pastes properly (get textContent from them) :leisure:org:
   :PROPERTIES:
   :ID:       30c4394a-5b0b-4889-a954-075f8c95db80
   :END:
** TODO run dynamic exprs if a results node is added            :leisure:org:
   :PROPERTIES:
   :ID:       bf43c0ac-8b91-4f90-801a-5fca716764e6
   :END:
** TODO make bs/del reach across hidden content                 :leisure:org:
   :PROPERTIES:
   :ID:       3d47fde6-0484-455a-b903-403ac8692025
   :END:
Should delete empty markup, like *bold* and /italic/
** TODO properties (and drawers) -- indicate the leisure property page :leisure:org:
   :PROPERTIES:
   :ID:       5bc5b050-ee0d-4e36-ac1b-d26325a5a7fd
   :END:
** TODO checkbox list items                                     :leisure:org:
   :PROPERTIES:
   :ID:       7d356f62-4b31-4ac4-b607-baa58fa6b479
   :END:
** TODO reparse immediately on lines with variable markup       :leisure:org:
   :PROPERTIES:
   :ID:       0488f243-1cf6-43e5-b4e5-cd08691c5587
   :END:
** TODO Ascii to svg converter                                  :leisure:org:
   :PROPERTIES:
   :ID:       362dad3f-6003-4266-8ca3-16cabffc16ea
   :END:
*** TODO  asciitosvg [[https://bitbucket.org/dhobsd/asciitosvg]]    :leisure:
    :PROPERTIES:
    :ID:       5a382d67-9852-435c-b42d-1244343f8029
    :END:
*** TODO  ditaa does bitmaps                                        :leisure:
    :PROPERTIES:
    :ID:       0e0f185d-77b9-40c7-8b02-9fe71ba9461b
    :END:
*** TODO JointJS library [[http://www.jointjs.com/]]                :leisure:
    :PROPERTIES:
    :ID:       34aba2e0-b286-446f-b634-1f54ddb65a23
    :END:
*** TODO Graphdracula [[http://www.graphdracula.net/]]              :leisure:
    :PROPERTIES:
    :ID:       63712e9d-fbe5-418d-ab6d-c13d76e76048
    :END:
*** TODO D3 [[http://www.graphdracula.net/]]                        :leisure:
    :PROPERTIES:
    :ID:       4ba65c21-905e-4ce3-a0fc-dddfbdb077f5
    :END:
*** TODO Snap [[http://snapsvg.io/]]                                :leisure:
    :PROPERTIES:
    :ID:       a56c53ad-f06f-4001-9b86-f946d007a2ae
    :END:
** TODO make calc a view that can move around                  :leisure:calc:
   :PROPERTIES:
   :ID:       a74d5340-11a6-43df-b70a-2b07c4a38695
   :END:
** TODO tie input selection to AST selection                   :leisure:calc:
   :PROPERTIES:
   :ID:       36163e54-d9d4-4c27-8fe0-dbea645f0868
   :END:
** TODO Make require check dependencies and write the JS out        :leisure:
   :PROPERTIES:
   :ID:       15c7a41f-6920-40f7-afda-5011823395da
   :END:
** TODO repl restart command                                        :leisure:
   :PROPERTIES:
   :ID:       f13167df-b7c8-45c2-b750-dad97db8fa40
   :END:
** TODO partial application doesn't work with case defs             :leisure:
  :PROPERTIES:
  :ID:       d8b41a2f-d094-4637-8ce0-7d6b81dcdabf
  :END:
equal a b = eq a b
defCase equal.list a b | and (isCons a) (isCons b) -> and (equal (head a) (head b)) (equal (tail a) (tail b))

e=equal [1]

e [1] -> true

e 1 -> function (L_b){return resolve(L_b)} -- looks like it applied the false to something
** TODO optimizations                                               :leisure:
   :PROPERTIES:
   :ID:       d2dfc14c-c287-4b2e-b091-85b03e158e5a
   :END:
*** strict annotation to generate strict code
*** fully-applied functions -- change generated function to prefer all args and curry on-demand
*** rework case defs to just chain booleans
make altDef take two functions, a boolean and the definition
*** strict cons
** TODO redo typechecking                                           :leisure:
  :PROPERTIES:
  :ID:       1334e119-c0cb-4c60-88bc-de9c8b07e51d
  :END:

replace string typechecks with wrappers
move typecheck wrappers into a correctness.lsr file

** TODO error on function redefinition if not in REPL               :leisure:
   :PROPERTIES:
   :ID:       049a4a83-7ac8-4dbd-84a3-fa289285ce70
   :END:
** TODO withProperties func props                                   :leisure:
  :PROPERTIES:
  :ID:       8c066b67-4038-420d-81f9-b735d0fe2ef3
  :END:

create a forwarding func that uses the given properties and reuses the old func's type

Mark it as a forwarder so if you copy it again, you refer to the original, not the forwarder

** TODO remove continuations from code generator                    :leisure:
   :PROPERTIES:
   :ID:       ac44c564-0728-4ec3-9686-bdf100bffcde
   :END:
   So far, increasing the stack is OK for this
* Roadmap
** org features and Leisure
*** social networking -- comment, like, comment acknowledgement, usage
*** function tags -- tabular view
*** issue tracking
*** test cases -- autorun, disableable
* Done
  :PROPERTIES:
  :ID:       55e59f7f-174a-44fc-934c-8bae8a910f82
  :END:
** DONE get collaboration going again
   CLOSED: [2015-10-19 Mon 13:42]
** DONE restore value sliders and make more value editors
   CLOSED: [2015-10-19 Mon 13:43]
** DONE Move advice into a separate file
   CLOSED: [2015-10-19 Mon 13:43]
** DONE PEER.testReplay3() doesn't work
   CLOSED: [2015-10-17 Sat 16:35]
** DONE expanded emacs server
  CLOSED: [2015-08-16 Sun 20:55]
- file message for file links (images, etc.) and imports
- execute message
** DONE render HTML blocks in fancy mode (as opposed to src blocks)
   CLOSED: [2015-08-10 Mon 00:21]
** DONE martini glass not working in plain mode (i.e. second click)
   CLOSED: [2015-08-08 Sat 12:41]
** DONE minimal rendering for changed data
  CLOSED: [2015-07-27 Mon 14:38]
** DONE restore syntax highlighting
   CLOSED: [2015-07-27 Mon 00:16]
** DONE restore theme switching
  CLOSED: [2015-07-26 Sun 20:09]
** DONE emacs connection using [[https://github.com/ahyatt/emacs-websocket][websockets]]
  CLOSED: [2015-07-25 Sat 10:00]
Final choice of message is

"r" changeCount start end text

A load is represented by an end of -1
- emacs runs websocket server
- {type: 'replace', offset: off, length: len, text: text}
- {type: 'load', text: text, filename: name}
- <close> kills emacs buffer
- show in browser
  - sends port to browser with cookie
  - emacs-opened pages close on websocket close
  - changing buffer sends changes to browser
** DONE EditCore: factor Leisure connection (eval, etc.) into separate file
   CLOSED: [2015-07-15 Wed 10:47]
** DONE EditCore: put fancy editor options in 24-editorSupport.litcoffee
   CLOSED: [2015-07-15 Wed 10:47]
** DONE EditCore: put plain editor options in 24-editorSupport.litcoffee
  CLOSED: [2015-07-15 Wed 10:45]
*** TODO make server parse into new block format (sibling links)
*** TODO configure DataStore to use meteor
** DONE port back over the UI stuff
  CLOSED: [2015-07-13 Mon 10:56]
- handlebars
- view system
- data blocks
** DONE Make Leisure run serverless (alternate HTML file that loads meteor client files)
  CLOSED: [2015-07-13 Mon 10:55]
Works from file or static website
*** DONE make Cakefile create local-mode HTML file
    CLOSED: [2015-07-13 Mon 10:53]
    no longer needed
*** DONE configure DataStore to run serverless (initialized from document)
    CLOSED: [2015-07-13 Mon 10:53]
*** DONE Look at WebRTC for peer-to-peer
   CLOSED: [2015-07-13 Mon 10:53]
- WebRTC for notification
  - initiating browser connects to each peer
  - not super scalable but works and handles conflicts (otherwise use something like Gun)

** DONE repatch autoeval
  CLOSED: [2015-07-13 Mon 10:52]
** DONE register handlebars helpers directly with leisure source blocks
  CLOSED: [2015-07-13 Mon 10:50]
** DONE merge PlainEditing into OrgEditing
  CLOSED: [2015-07-05 Sun 19:09]
- add id-prefix
- make default mode (plain/fancy)
- make per-node mode (for martini glass toggle)
** DONE integrate lispyscript into Leisure
  CLOSED: [2015-07-03 Fri 19:23]
** DONE fix AMD library mapping issues
  CLOSED: [2015-07-03 Fri 19:22]
** DONE error inserting a newline at the top of a doc that starts with a headline
  CLOSED: [2015-06-20 Sat 19:28]
** DONE server-based data add -- returns new value
   CLOSED: [2014-09-05 Fri 09:17]
- takes path and delta
- add currentDocument, 'person1.hands.left.fingerCount', -1
** DONE switch to NodePos for all positioning (use mutable)
   CLOSED: [2014-08-27 Wed 16:04]
** DONE batch changes to reduce flickering
   CLOSED: [2014-08-27 Wed 16:03]
** DONE git persistence
   CLOSED: [2014-08-17 Sun 16:00]
** DONE spawn document copies
   CLOSED: [2014-08-17 Sun 16:00]
*** DONE temporary or permanent
    CLOSED: [2014-08-17 Sun 16:00]
** DONE save to local file
   CLOSED: [2014-08-17 Sun 16:01]
** DONE collaboratively edit local file
   CLOSED: [2014-08-17 Sun 16:01]
** DONE switch to custom elements for markup?
- x-tags for polyfills
- make org-based widgets
- use switch for plain/fancy
** DONE add flag to prevent local data from persisting, for testing
   CLOSED: [2014-06-17 Tue 00:01]
** DONE obsolete shadow/light changes
   CLOSED: [2014-06-17 Tue 00:01]
- chuck shadow and use tagged elements for file content
- flip editable content into shadow dom
  - keep HTML/etc in regular dom
  - use content elements to sprinkle decorations
  - easier to use jquery for HTML/views/etc
** DONE script screencast
   CLOSED: [2014-06-17 Tue 00:02]
** DONE add CSS language support
   CLOSED: [2014-06-16 Mon 22:11]
** DONE try to fix test cases!!!
   CLOSED: [2014-06-16 Mon 22:12]
** DONE script screencast -- screencast.lorg
   CLOSED: [2014-06-16 Mon 22:12]
** DONE go through old slides
   CLOSED: [2014-06-16 Mon 22:12]
** DONE GUI templates -- HTML source block defines a new widget type
   CLOSED: [2014-06-16 Mon 22:12]
- X define handlebars helpers for input, views, etc
** DONE collaboration stuff
- collaboration
  - each document gets local storage for user-local and user-private data
    - ":local: true" blocks are in the document, initialized for everyone, but stored locally
  - head record contains unique ID
    - reinitializes private document when it changes
   CLOSED: [2014-05-11 Sun 21:46]
** DONE HTML/image data binding
  - make image dragging and collaboration use data binding -- maybe backbone
** DONE Image dragging
** DONE partial parsing/syncing
  - only reprocess changed parts
  - unreparsed can remain as-is
  - store each slide separately in JS object storage
    - compile JS code
    - each slide gets an object id -- for text and data
    - each slide can be individually parsed
** DONE data
  - text representation
    - :DATA: drawer
    - first line is ID
    - rest of lines are YAML
    - [rejected] stored by ID in a hamt
      - easy functional manipulation
      - handles versioning well
        - functional code can manipulate internal hamt
        - accumulate changes
        - merge them with current data
    - listener fires when data changes
** DONE use meteor for collaboration
- Collaboration engine
  - use meteor for collaboration
    - put org data structure into mongo
    - Use mongo instead of textContent to switch modes
    - Use change processing to handle local structural changes
    - Handle node addition/removal
    - make data live in src blocks with language yaml or json
  - detect where changes are, to avoid rerendering/recomputing data
  - use a switchboard web service, like from p2pmud, with file-patching commands
   CLOSED: [2014-04-14 Mon 09:26]
** DONE this TODO.org should be moved to Leisure Project
** DONE categories                                              :leisure:org:
   CLOSED: [2014-01-23 Thu 00:08]
   :PROPERTIES:
   :ID:       0a75f5a4-7643-402d-9d95-60ee71dc17d5
   :END:
** DONE intelligent printing of partially-applied functions         :leisure:
   CLOSED: [2014-01-23 Thu 00:08]
  :PROPERTIES:
  :ID:       9e88ee51-3023-486f-aae4-2390628dfeea
  :END:

(< 1) should print out as < 1, instead of

#+begin_src javascript
  function (y) {
   return booleanFor(rz(x) < rz(y));
  }
#+end_src

Probably have to change function model to use objects instead of
closures (maybe possible with debugging api?)

** DONE change "wrapper" to "advice"                                :leisure:
   CLOSED: [2014-01-23 Thu 00:06]
   :PROPERTIES:
   :ID:       909a23fa-3fb0-45e6-ac07-49ad95365c89
   :END:
   change caseDefs to use advice instead of options -- i.e. continuation pattern
** DONE parse empty RESULTS: blocks properly                    :leisure:org:
   CLOSED: [2014-01-23 Thu 00:05]
   :PROPERTIES:
   :ID:       1dec25b3-12ae-4777-a319-cb7704780ad5
   :END:
** DONE buttons to control dynamic results, etc                 :leisure:org:
   CLOSED: [2014-01-23 Thu 00:05]
   :PROPERTIES:
   :ID:       f90580ea-7c58-41a2-b339-0a0dc07902c9
   :END:
** DONE Put source block name in property of functions declared in block :leisure:org:
   CLOSED: [2014-01-23 Thu 00:04]
   :PROPERTIES:
   :ID:       fb875314-7a3d-4ed9-bba1-b1deee6fe746
   :END:
** DONE Test cases                                              :leisure:org:
   CLOSED: [2014-01-23 Thu 00:03]
   :PROPERTIES:
   :ID:       b7bfc2ee-287a-4d60-9a21-bfa237d6b8de
   :END:
** DONE Save/load                                               :leisure:org:
   CLOSED: [2014-01-23 Thu 00:03]
   :PROPERTIES:
   :ID:       4b7c73d0-dd87-466b-94b6-536e8633cc6f
   :END:
*** Convenient way to open a file
** DONE convert slides to org format                            :leisure:org:
   CLOSED: [2014-01-22 Wed 23:56]
   :PROPERTIES:
   :ID:       a77ca4ee-8f96-4769-9925-f7ababfbc6cd
   :END:
** DONE slide view                                              :leisure:org:
   CLOSED: [2014-01-22 Wed 23:56]
   :PROPERTIES:
   :ID:       5d1e1a38-0d2c-4d28-bf46-8577f23ce37f
   :END:
** DONE Art-deco look for fancy mode                            :leisure:org:
   CLOSED: [2014-01-22 Wed 23:56]
   :PROPERTIES:
   :ID:       b47976d6-8513-4748-b29a-e577d576ffe7
   :END:
** DONE notebook should only run IO monads, not all monads      :leisure:org:
   CLOSED: [2014-01-22 Wed 23:56]
   :PROPERTIES:
   :ID:       114f4a55-70c6-4eaf-b390-594969c7b902
   :END:
uses L_baseLoadString and that calls countedRunLine
countedRunLine binds each line as moandic value
this strips off options, etc.
** DONE implement fancyOrg.addComment                           :leisure:org:
   CLOSED: [2014-01-22 Wed 23:56]
   :PROPERTIES:
   :ID:       4590fb43-2c73-4991-bcbe-f81cfecb7212
   :END:
** DONE change how backspace and delete disabling works         :leisure:org:
   CLOSED: [2013-11-17 Sun 23:02]
use the new code that checks for invisible content
** DONE make Leisure-org run out of node-webkit for local access :leisure:org:
   CLOSED: [2013-11-07 Thu 20:51]
   :PROPERTIES:
   :ID:       cae867a3-f9ed-474a-8d02-6acfdb423242
   :END:
** DONE trigger reparse when src header changes                 :leisure:org:
   CLOSED: [2013-11-07 Thu 20:51]
** DONE handle backspace at the start of a headline             :org:leisure:
   CLOSED: [2013-11-06 Wed 14:34]
   :PROPERTIES:
   :ID:       cf01c348-d804-49f1-98d3-ddf652649383
   :END:
** DONE when a text span is joined with other text, merge test into span :leisure:org:
   CLOSED: [2013-11-06 Wed 14:34]
   :PROPERTIES:
   :ID:       927504f7-2457-4470-a153-8a3ef1850c1d
   :END:
** DONE newline at the start of a headline should go outside the span :org:leisure:
   CLOSED: [2013-11-06 Wed 14:34]
   :PROPERTIES:
   :ID:       8c89abab-8521-4642-a990-48bfaf5974af
   :END:
** DONE "dynamic" result type that updates as you type          :org:leisure:
   CLOSED: [2013-11-06 Wed 14:33]
   :PROPERTIES:
   :ID:       717c4887-a18a-41f1-b18f-4eff60a10539
   :END:
** DONE output src block into results area                      :org:leisure:
  CLOSED: [2013-11-06 Wed 14:33]

Results go after #+RESULTS:, with : at the start of each line
evaluation clears out the previous : lines right underneath RESULTS, like this...

#+begin_src js
console.log('hello\nthere\n')
return 3
#+end_src

#+RESULTS:
: hello
: there
:
: 3

  :PROPERTIES:
  :ID:       19ccacf7-e234-43a5-82a2-fd8facbab0f1
  :END:
** DONE keep a newline span between outline entries so cursor motion works properly :org:leisure:
   CLOSED: [2013-11-05 Tue 19:12]
   :PROPERTIES:
   :ID:       0d5d8e91-cb1c-42d1-a269-38cdaa88a850
   :END:
** DONE newline at start of hidden text should be ignored       :org:leisure:
   CLOSED: [2013-11-05 Tue 19:11]
** DONE backspace at the end of a collapsed line deletes the contents   :org:
   CLOSED: [2013-10-29 Tue 18:46]
   :PROPERTIES:
   :ID:       c7ec6626-7f3c-4df7-a286-11add3ea82f8
   :END:
** DONE Add handler for #+BEGIN_SRC, #+END_SRC to org-mode-parser   :leisure:
   CLOSED: [2013-10-28 Mon 12:56]
   :PROPERTIES:
   :ID:       78fef2aa-b926-4579-8cb5-1a812dc3ea36
   :END:
** DONE source map files                                            :leisure:
  CLOSED: [2013-10-23 Wed 10:35]

[HTML5 Rocks article](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)
** DONE calc: skin                                                  :leisure:
   CLOSED: [2013-10-23 Wed 10:14]
** DONE calc: buttons to toggle diag views                          :leisure:
    CLOSED: [2013-10-21 Mon 15:34]
** DONE pre/post condition monads                                   :leisure:
   CLOSED: [2013-10-21 Mon 15:08]

replace type checking with preconditions

handle monads (bind the post condition check)

** DONE JS AMT/HAMT                                                 :leisure:
    CLOSED: [2013-10-21 Mon 15:09]

** DONE web interface                                               :leisure:
    CLOSED: [2013-10-21 Mon 15:09]

** DONE optimizations                                               :leisure:
    CLOSED: [2013-10-21 Mon 15:09]

*** Change laziness model
**** make a resolve() function that resolves a lazy arg
**** data is already resolved
**** embedded exprs and variable defs would have a closure -- resolve() can tack a property on the closure, containing the result
** DONE memoized lambdas                                            :leisure:
   CLOSED: [2013-10-21 Mon 15:09]

for the funciton wrapper, set the memo to the lambda and stick a console.log in there to see if something's still calling the func

** DONE reverse order of generated let assignments so that this works: :leisure:
   CLOSED: [2013-10-21 Mon 15:09]

do (x = 1) (y = x) (print concat[x y])

** DONE stack traces                                                :leisure:
   CLOSED: [2013-10-21 Mon 15:09]

add text positions to ast nodes

** DONE Leisure-based calculator (base calc works)                  :leisure:
   CLOSED: [2013-10-21 Mon 15:09]

make world-dominating calculator unlike any ever seen!

[calc image](https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=5a36943e69&view=att&th=1417bbef9c10e224&attid=0.1&disp=inline&realattid=1447832052796751872-local0&safe=1&zw&saduie=AG9B_P_1TGDzI7APFAcWIRyPxv8G&sadet=1380765919695&sads=1M9HZRBtQyV4cPAsLIV3wn9fnuM)
** DONE button to switch between fancy/simple                   :leisure:org:
   CLOSED: [2013-11-28 Thu 11:03]
   :PROPERTIES:
   :ID:       27a2e51c-0ce7-4a39-880c-260b86c3b6fb
   :END:
** DONE comment issues                                          :leisure:org:
  CLOSED: [2013-11-28 Thu 11:04]
   :PROPERTIES:
   :ID:       ef0d404e-7019-4e6c-9832-79632beb6724
   :END:
A comment issue holds the developer comment and shows up in the source file.
Any comments on the comment issue show up in the source file as well.

Issues which reference a function will also show up in the source.
** DONE mark up Leisure-org like notebook                       :leisure:org:
   CLOSED: [2013-11-28 Thu 11:05]
   :PROPERTIES:
   :ID:       53fa8c88-89fe-4dfd-8e72-cb79f2d6e4e3
   :END:
** DONE handle backspace after and delete before hidden content :leisure:org:
   CLOSED: [2013-11-29 Fri 09:22]
   :PROPERTIES:
   :ID:       3e4e6a86-dc0d-42db-afae-e169e923356c
   :END:
need a way to verify that there are no collapsed nodes between the current
position and position +/- 1

nextNode() & prevNode() should do the trick, I think -- see if nextNode(el).prevNode(el) is
el or an ancestor of it

if node.previousSibling/node.nextSibling exists and is visible, then backspace/del is OK
** DONE inherited function properties                           :leisure:org:
   CLOSED: [2013-12-11 Wed 13:20]
- code block name
- headline tags
** DONE tags                                                    :leisure:org:
   CLOSED: [2013-12-11 Wed 13:56]
   :PROPERTIES:
   :ID:       289fff0a-ec3b-4c14-a245-b062730f63ac
   :END:
** DONE ASTs                                                    :leisure:org:
   CLOSED: [2013-12-14 Sat 17:04]
   :PROPERTIES:
   :ID:       30f23918-ec3d-4f88-ad54-74f6360dddf7
   :END:
** DONE make results HTML-friendly                              :leisure:org:
   CLOSED: [2013-12-15 Sun 23:03]
output should be HTML-escaped
* Defs
#+TODO: TODO BUG | DONE
