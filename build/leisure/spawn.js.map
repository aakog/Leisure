{
  "version": 3,
  "file": "spawn.js",
  "sourceRoot": "../../leisure/build",
  "sources": [
    "src/spawn.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Execute commands that can read lines from processes.\n\nThis is sort of a coroutine-based version of select.\n\nKind of.\n\n    Fiber = require 'fibers'\n    {ChildProcess} = require 'child_process'\n\n    # Must be used inside a fiber\n    class FiberReader\n      constructor: ->\n        @commands = []\n        @waiting = false\n        @running = true\n        @fiber = new Fiber =>\n          while @running\n            if !@commands.length then @pause()\n            else\n              try\n                @commands.shift() this\n              catch err\n                console.log \"ERROR IN Reader command\", err\n        @fiber.run()\n      run: (cmd)->\n        @commands.push cmd\n        @resume()\n      stop: ->\n        @running = false\n        @fiber = null\n      addProc: (proc, options)->\n        proc._spawnData = Object.assign {pendingData: '', highWater: 4096}, options\n        proc.stdout.on 'data', (value)=> @addInput proc, value.toString()\n        proc.stdout.on 'close', => @endInput proc\n        proc.stdout.on 'end', => @endInput proc\n        proc.on 'exit', => @endInput proc\n      addStream: (stream, options)->\n        stream._spawnData = Object.assign {pendingData: '', highWater: 4096}, options\n        stream.on 'data', (value)=> @addInput stream, value.toString()\n        stream.on 'close', => @endInput stream\n        stream.on 'end', => @endInput stream\n      addInput: (stream, str)->\n        stream._spawnData.pendingData += str\n        if dataLen(stream) > highWater(stream) && hasLine stream\n          realStream(stream).pause()\n        @resume()\n      endInput: (stream)->\n        stream.done = true\n        @resume()\n      pause: ->\n        @waiting = true\n        Fiber.yield()\n        @waiting = false\n      resume: -> if @waiting then @fiber.run()\n      waitFor: (contFunc)->\n        result = null\n        pendingFiberDone = false\n        process.nextTick => contFunc (res)=>\n          pendingFiberDone = true\n          result = res\n          @resume()\n          res\n        while !pendingFiberDone\n          @pause()\n        result\n      readLine: (stream)->\n        index = stream._spawnData.pendingData.indexOf '\\n'\n        while !stream.done && index == -1\n          @pause()\n          index = stream._spawnData.pendingData.indexOf '\\n'\n        if index == -1 then index = stream._spawnData.pendingData.length else index++\n        line = stream._spawnData.pendingData.substring 0, index\n        stream._spawnData.pendingData = stream._spawnData.pendingData.substring index\n        if !stream.done && realStream(stream).isPaused() && dataLen(stream) < highWater\n          realStream(stream).resume()\n        if stream.done && !line then null else line\n\n    hasLine = (stream)-> stream._spawnData.pendingData.indexOf('\\n') > -1\n\n    dataLen = (stream)-> stream._spawnData.pendingData.length\n\n    highWater = (stream)-> stream._spawnData.highWater\n\n    realStream = (stream)-> if stream instanceof ChildProcess then stream.stdout else stream\n\n    fiberReader = -> new FiberReader()\n\n    module.exports = {\n      fiberReader\n    }\n"
  ]
}