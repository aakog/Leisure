# primitives
#
# eq a b -> true if they are equal or false otherwise
#
# getType value -> an option containing the type
#
# is value type -> true if the value has type type, false otherwise
#
# eval ast -> evaluates ast and returns the result
#
# parse string -> an Either with ast or error msg (give it two functions)
#
# pretty value -> pretty print a value
#
# funcSource func -> option with function's src or none if no source (e.g. primitive or lambda)
#
#    MONADS
#
# bind m binding -> transform a monad with a function and continue with result of function
#
# print string -> print a string and continue with false
#
# prompt string -> ask user for input and continue with value
#
# return value -> continus with value
#
# js string -> run JS code and continue with value
#
# createS -> create a new state variable and continue with it
#
# getS var -> get the value from the state variable var and continue with it
#
# setS var val -> set the state variable var to val and continue with false
#
#    STRING functions
#
# concat list -> string
#
#    AST-constructors
#
# lit value -> a lit AST node, containing value
#
# ref var-name -> a ref AST node, containing var-name
#
# lambda var-name body-ast -> a lambda AST node, with var-name and the body AST
#
# apply func-ast body-ast -> an apply AST node, with func and body ASTs
#
# prim arg rest-ast -> a prim AST node, rest-ast should either be a ref or a prim
#
#    List functions
#
# MORE DOCUMETATION NEEDED :)
#

########################
## convenience functions
########################

defMacro 'write[' \list . ['write' ['strCat' [(listify (head list))]]]

addTokenGroup 'write[' ']'

defMacro 's[' \list . ['strCat' [(listify (head list))]]

addTokenGroup 's[' ']'

defMacro 'err[' \list . ['err' ['strCat' [(listify (head list))]]]

addTokenGroup 'err[' ']'

######
##
######

afetch k alist  = alist (\h t D . h \key value . eq key k value (afetch k t)) nil

#TODO a when macro would be nice inside do, instead of using caseResult, below
#but this old definition doesn't do it right
#defMacro 'when' \line . line \cond rest . [cond 'do':rest 'nil']

addTokenGroup 'js[' ']'

defMacro 'js[' \list . ['js' ['strCat' ['flatten' [(listify (head list))]]]]

html x = \f . f x
getHtml x = x \h . h

# numerics

iszero = eq 0
positive = 0 <

addToken '--'
addToken '++'

-- = (flip (-)) 1
++ = (1 +)

# Strings
intercalate x l = strCat (intersperse x l)
string = show

# Simplification
visit func l = \\
  result = func func l
  .
  isCons result
    result \h t . cons (visit func h) (visit func t)
    result

stripNesting l = isCons l
  l \h t . (isCons h) && (isNil t)
    stripNesting h
    _map stripNesting l
  l


simplify exprString = do
  list <- scanLineM exprString
  stripNesting (visit (\func x . isToken x (tokenString x) ((isParens x) (visit func (parensContent x)) x)) list)

#######################
## Monads
#######################

range a b = \f . f a b

upto n = range 0 n

repeat n = \f . f n

isRepeat r = hasType r repeat

isRange r = hasType r range

runRepeat count limit f = count < limit
  [(f count) | runRepeat (count + 1) limit f]
  []

requireJS file = primBind (getValue 'requiredFiles')
  \files . contains files file
    false
    primBind (loadJS file)
      \result . result
        \x . left x
        \_ . primBind (setValue 'requiredFiles' (cons file files))
          \_ . right true

loadJS file = primBind (readFile file)
  \result . result
    \err . err
    \contents . js contents

#######################
## More list stuff
#######################

findOption func list = do
  result = func (head list)
  isNil list
    none
    isNone result
      findOption func (tail list)
      result

## difference lists
differenceList = \@dataType differenceList .\@type differenceList . \x . x
dlitem item = \@type differenceList . \rest . item : rest
dlpush list item = dlappend list \rest . item : rest
dlappend a b = \@type differenceList . \rest . a (b rest)
dllist l = \@type differenceList . \rest . _append l rest

isDl x = hasType x differenceList

addTokenGroup 'dl[' ']'

defMacro 'dl[' \list .
  ['\\@' 'type' 'differenceList' '.' '\\' 'rest' '.' (listifyDl (head list) 'rest')]

listifyDl list lvar =
  isNil list
    lvar
    partition [] (flip isTokenString '|') list \front middle back .
      isNil middle
        _foldl (\acc el . ['cons' el acc]) lvar (reverse list)
        _foldl (\acc el . ['cons' el acc]) [[back] lvar] (reverse front)

addTokenGroup 'hamt{' '}'

defMacro 'hamt{' \list . (listifyOp 'hamtPair' (head list) 'hamt')

hamtPair keyValue hamt = keyValue \key value . hamtSet key value hamt

isHamt h = hasType h hamt

# remove any x's found in list
remove x l = removeIf (eq x) l

# remove any elements where f evals to true, f must take exactly one argument
removeIf f l = filter (compose not f) l

take n list = positive n
  list
    \h t D . cons h (take (-- n) t)
    nil
  nil

takeWhile predicate list = list
  \h t D . predicate (head list)
    cons h (takeWhile predicate t)
    nil
  nil

drop x list = positive x
  list
    \h t D . drop (-- x) t
    nil
  list

dropWhile predicate list = list
  \h t D . predicate h
    dropWhile predicate t
    list
  nil

dropLast n list = reverse (drop n (reverse list))

box n list = list == nil
  nil
  [(take n list) | box n (drop n list)]

at l x = (x == 0) (head l) (at (tail l) (-- (x) ) )

series func n = n:(series func (func n))
from n = series ++ n
fromBy n inc = series ((+) inc) n
fromTo n m = takeWhile ((>) m) (from n)
fromToBy n m inc = takeWhile ((>) m) (fromBy n inc)

# count returns the number of times x appears in l
count x l = countIf (eq x) l

# countIf returns the number of times x satifies f in l, f must take a single argument
# eg. countIf odd? [3 1] gives number: 2
countIf f l = (eq l nil) 0
  + (f (head l) 1 0) (countIf f (tail l))
countIfNot f l = countIf (\x. not (f x)) l

# list sorting
sort l = sortBy (<=) l
sortBy cmp l = mergeSort cmp l

#################
# YAML and JSON
#################

toJson obj = (isMapList obj)
  toJsonObject (_map (\pair . cons (head pair) (toJson (tail pair))) (toList obj))
  (isListLike obj)
    toJsonArray (_map (\item . toJson item) (toList obj))
    obj

toYaml jsonStuff = jsonToYaml (toJson jsonStuff)

#######################
## Cases
#######################

addToken '->'

mkStr tok = concat['"' (tokenString tok) '"']

defMacro 'defCase' \list . \\
  h1 = head list
  t1 = tail list
  h2 = head t1
  t2 = tail t1
  h3 = head t2
  t3 = tail t2
  .
  and[
    isCons list
    isCons t1
    isCons t2
    isTokenString h2 '.']
      makeCaseArgs list (mkStr h1) (mkStr h3) t3 id
      parseErr "Error in case definition -- expected func.name args | condition -> action, but got " list

makeCaseArgs orig funcName altName rest args = rest
  \h t D . isTokenString h '|'
    makeCaseCondition orig funcName altName (args nil) t id
    makeCaseArgs orig funcName altName t (dlpush args h)
  parseErr "Error in case definition -- expected func.name args | condition -> action, but got " orig

makeCaseCondition orig funcName altName args rest cond = rest
  \h t D . isTokenString h '->'
    ['bind' (_foldr1 _append [['advise' funcName altName (length args) '\\'] args ['.' (cond nil) ['some' t] 'none']]) ['\\' '_' '.' 'unit']]
    makeCaseCondition orig funcName altName args t (dlpush cond h)
 parseErr "Error in case definition -- expected func.name args | condition -> action, but got " orig

######################
# equality
######################

defCase equal.cons a b | and (isCons a) (isCons b) -> and
  equal (head a) (head b)
  equal (tail a) (tail b)

######################
# sequences
######################

zip a b = isNil a
  nil
  isNil b
    nil
    cons (cons (head a) (head b)) (zip (tail a) (tail b))

mapchunks func list =
  isNil list
    nil
    do
      r = func list
      isCons r
        r \result rest . [result | mapchunks func rest]
        [r]

# map, but preserve the old list where possible, so that == works on it
mapSave func l = isNil l
  nil
  \\
    newH = func (head l)
    newT = mapSave func (tail l)
    .
    and (eq newH (head l)) (eq newT (tail l))
      l
      cons newH newT

### this "quicksort" is really, really slow
### so it's renamed to slowsort
slowsort less list = (qs less list) nil
# qs is written using a difference list so it can append in linear time
# sortedFunc must return whether the two args are in sorted order
# \rest . (qs ... makes a difference list.  id is the empty difference list.
qs sortedFunc list = list
  \h t D . \\
    greater = filter (sortedFunc h) t
    lesser = filter (compose not (sortedFunc h)) t
    .
    \rest . (qs sortedFunc lesser) (cons h ((qs sortedFunc greater) rest))
  id

# you can add more cases to isListLike if you want
isListLike l = isSome (find (\f . f l) [isCons isNil isRepeat isRange isOption isEither isString isDl isHamt])
isMapLike l = isSome (find (\f . f l) [isAlist isHamt])

toList x = [x]

defCase toList.list l | isList l -> l
defCase toList.repeat r | isRepeat r -> runRepeat 0 (r id) id
defCase toList.range r | isRange r -> r \a b . runRepeat a b id
defCase toList.opt o | isOption o -> o (\x . [x]) []
defCase toList.either e | isEither e -> e (\_ . []) (\x . [x])
defCase toList.string s | isString s -> strToList s
defCase toList.differenceList l | isDl l -> l []
defCase toList.hamt h | isHamt h -> hamtPairs h

defCase head.any x | not (isList x) -> head (toList x)
defCase head.range r | isRange r -> r \a b . a < b a nil
defCase head.string s | isString s -> strAt s 0

defCase tail.any x | not (isList x) -> tail (toList x)
defCase tail.range r | isRange r -> r \a b . a < b (range a + 1 b) r
defCase tail.string s | isString s -> strSubstring s 1 (strLen s)
defCase tail.differenceList l | isDl l -> dllist (tail (toList l))

defCase append.any x y | not (and (isList x) (isList y)) -> _append (toList x) (toList y)
defCase append.range x y | and[(isRange x) (isRange y) (x \xa xb . y \ya yb . xb == ya)] ->
  x \xa xb . y \ya yb . range xa yb
defCase append.string x y | isString x -> x + y
defCase append.differenceList x y | isDl x -> dlappend x (isDl y y (dllist (toList y)))

defCase map.any func l | not (isList l) -> _map func (toList l)
defCase map.repeat func r | isRepeat r -> runRepeat 0 (r id) func
defCase map.range func r | isRange r -> r \a b . runRepeat a b func
defCase map.opt func o | isOption o -> o (compose some func) none
defCase map.either func e | isEither e -> e (\_ . e) (compose right func)
defCase map.string func s | isString s -> strCat (_map func (strToList s))
defCase map.alist func alist | isAlist alist ->
  _foldr (\el result . set (head el) (func (tail el)) result) nil alist
defCase map.hamt func h | isHamt h ->
  _foldr (\el result . set (head el) (func (tail el)) result) hamt (toList h)
defCase map.dl func l | isDl l -> dllist (_map func (l []))

defCase foldl.any func init l | not (isList l) -> _foldl func init (toList l)
defCase foldl1.any func l | not (isList l) -> _foldl1 func (toList l)
defCase foldr.any func final l | not (isList l) -> _foldr func final (toList l)
defCase foldr1.any func l | not (isList l) -> _foldr1 func (toList l)

######################
# maps
######################
get key alist = find (\el . eq key (head el)) alist (\cell . cell \head tail . tail) unit
getOpt key alist = find (\el . eq key (head el)) alist (\cell . cell \head tail . some tail) none
set key value list = acons key value (aremove key list)
defCase get.hamt key h | isHamt h -> hamtGet key h
defCase getOpt.hamt key h | isHamt h -> hamtGetOpt key h
defCase set.hamt key value h | isHamt h -> hamtSet key value h

######################
# numbers
######################

increasing x = cons x (increasing (+ x 1))
wholes = increasing 0
naturals = tail wholes

######################
# show
######################
## Generic presentation

showBase func obj = func obj

defCase showBase.unit func obj | hasType obj unit -> ''
defCase showBase.some func obj | hasType obj some -> concat["(some " (showBase func (obj id false)) ")"]
defCase showBase.some2 func obj | hasType obj some2 -> concat["(some2 " (obj (\a b . showBase func [a ', ' b]) false) ")"]
defCase showBase.err func obj | hasType obj err -> concat["(err " (obj id) ")"]
defCase showBase.token func obj | hasType obj token -> obj \str pos .
  isFilepos pos
    pos \file line offset . concat['token ' str ' ' file ' ' line ' ' offset]
    concat['(token ' str ' ' pos ')']
defCase showBase.filepos func obj | hasType obj filepos -> obj \file line offset . concat['(filepos ' file ' ' line ' ' offset ')']
defCase showBase.cons func obj | hasType obj cons -> concatFlat['[' (showBase func (head obj)) (showConsElements func (tail obj))  ']']

showConsElements func list = isCons list
  [' ' (showBase func (head list)) (showConsElements func (tail list))]
  isNil list
    ''
    [' | ' (showBase func list)]

defCase showBase.range func obj | hasType obj range -> obj \start end .
  concat['(range ' start ' ' end ')']

defCase showBase.repeat func obj | hasType obj repeat -> concat['(repeat ' (obj id) ')']
defCase showBase.hamt func obj | hasType obj hamt -> concatFlat[
  'hamt{'
  intersperse (_map (\item . [(showBase func (head item)) ':' (showBase func (tail item))]) (hamtPairs obj)) ' '
  '}']

defCase showBase.assoc func obj | (isAlist obj) && (not (isNil obj)) -> concatFlat[
  '{'
  intersperse (_map (\item . [(showBase func (head item)) ':' (showBase func (tail item))]) obj) ' '
  '}']

defCase showBase.left func obj | hasType obj left -> concat["(left " (showBase func (obj id id)) ")"]
defCase showBase.right func obj | hasType obj right -> concat["(right " (showBase func (obj id id)) ")"]
defCase showBase.differenceList func l | isDl l -> concatFlat[
  'dl['
  intersperse (_map (showBase func) (l [])) ' '
  ']']
defCase showBase.triple func obj | hasType obj triple ->
  obj \a b c . concat["(triple " (showBase func a) " " (showBase func b) " " (showBase func c) ")"]

## presentation

showHtml x = showBase presentHtml x

show x = showBase present x

present x = x

presentHtml x = escapeHtml (present x)

defCase present.string obj | (getType obj) == '*string' -> jsonStringify obj id id
defCase present.func obj | (getType obj) == '*function' -> presentFunction obj

presentFunction obj = do
  info = funcInfo obj
  guts = isNil info
    [(funcName obj
      id
      'unknown')]
    and (> (length info) 1) (getFunction (head info) (\func . hasProperty func 'infix') false)
      [(present (head (tail info))) (head info) | _map present (tail (tail info))]
      cons (head info) (_map present (tail info))
  concat["(" (join guts ' ') ")"]

defCase presentHtml.func obj | (getType obj) == '*function' ->
  concat['<span class="partial-application">' (presentFunction obj) '</span>']

defCase present.nil obj | hasType obj nil -> 'nil'

defCase present.none obj | hasType obj none -> "none"

defCase presentHtml.html obj | hasType obj html -> obj id

######################
# binding
######################
# binding false returns unit and the list binding ellides unit values from results
#
# This makes bind useful for list comprehensions, like this:
#
# do
#   x <- [1 2 3]
#   x > 1
#   x + 2

wrapped x = \f . f x

defMacro 'wrap' \list . ['wrapped' list]

defCase showBase.wrapped func v | hasType v wrapped -> concat['wrap ' (showBase func (v id))]

defCase bind.wrapped v cont | hasType v wrapped -> cont (v id)

defCase bind.bool bool cont | or (bool == true) (bool == false) -> bool
  cont true
  false

defCase bind.option opt cont | isOption opt -> log "USING OPTION BIND" opt
  \value . cont value
  none

defCase bind.either either cont | isEither either -> either
  \_ . either
  \value . cont value

defMacro 'for' \list . ['toList' list]

defMacro 'flat' \list . ['flatWrapper' list]

flatWrapper m = \f . f m

defCase showBase.flat func v | hasType v flatWrapper -> concat['flat ' (showBase func (v id))]

defCase bind.flat fe cont | hasType fe flatWrapper -> monadicFlatMap cont (fe id)

defCase bind.list l cont | isList l -> monadicMap cont l

defCase bind.differenceList l cont | isDl l -> primBind (monadicMap cont l) \l . dllist l

# add 2-variable bind for alist and hamt?

fold l i = \f . f l i

defCase showBase.fold func v | hasType v fold ->
  concat['fold ' (showBase func \l i . l) (showBase func \l i . i)]

defCase bind.fold fr cont | hasType fr fold -> fr \list init .
  _foldl (\acc el . maybeBind acc \accVal . do
    ret = cont accVal el
    ret == unit
      accVal
      ret) init (toList list)

monadicFlatMap cont list = _foldr (\el acc . maybeBind (cont el) \elVal . maybeBind acc \accVal .
  elVal == unit
    accVal
    _append elVal accVal) [] (toList list)

monadicMap cont list = _foldr (\el acc . maybeBind (cont el) \elVal . maybeBind acc \accVal .
  elVal == unit
    accVal
    [elVal | accVal]) [] (toList list)

maybeBind item cont = isMonad item
  primBind item cont
  cont item

check condition elseResult = condition true elseResult

defCase bind.err err cont | isErr err -> err

#######################
## running
#######################

defMacro 'run' \list . ['wrappedRun' list]

wrappedRun m = \f . f m

defCase bind.wrappedRun m cont | hasType m wrappedRun -> bind (m id) \x . bind x cont

#######################
## pre/postconditions
#######################

# defWrapper func realFunc x y -> log "Calling func" realFunc x y
defMacro 'defWrapper' \list . partition [] (flip isTokenString '->') list \left arrow right . do
  name = concat["'" (strTokenString (head left)) "'"]
  oldName = head (tail left)
  args = tail (tail left)
  ['override' name (_append ['\\' oldName '.' '\\@' 'arity' (length args) '.' '\\' | args] ['.' | right])]

#defWrapper head oldHead list -> assertType 'head argument' cons list \h t . h
#defWrapper tail oldTail list -> assertType 'tail argument' cons list \h t . t
defWrapper hamtSet oldHamtSet key value aHamt -> oldHamtSet
  key
  value
  assertType 'hamtSet hamt' hamt aHamt

#######################
## output tag functions
#######################

html x = \f . f x

defTokenPack 'util' [['->' '--' '++'] ['js[':']' 'write[':']' 's[':']' 'err[':']' 'dl[':']' 'hamt{':'}'] []]
addStdTokenPacks ['util']

#####
# AST funcs
#####
_1of2 s = s \a b . a
_2of2 s = s \a b . b
_1of3 s = s \a b c . a
_2of3 s = s \a b c . b
_3of3 s = s \a b c . c
_1of4 s = s \a b c d . a
_2of4 s = s \a b c d . b
_3of4 s = s \a b c d . c
_4of4 s = s \a b c d . d
getLitValue ast = _1of2 ast
getLitRange ast = _2of2 ast
getRefName ast = _1of2 ast
getRefRange ast = _2of2 ast
getLambdaName ast = _1of3 ast
getLambdaBody ast = _2of3 ast
getLambdaRange ast = _3of3 ast
getApplyFunc ast = _1of2 ast
getApplyArg ast = _2of2 ast
getLetName ast = _1of4 ast
getLetValue ast = _2of4 ast
getLetBody ast = _3of4 ast
getLetRange ast = _4of4 ast
getAnnoName ast = _1of3 ast
getAnnoData ast = _2of3 ast
getAnnoBody ast = _3of3 ast


####
# Util funcs
####

definitionList = do
  f <- funcList
  m <- getValue 'macroDefs'
  sort (_append f (_map head m))

eval str = do
  ast <- newParseLine 0 nil str
  ifNotErr ast (runAst ast)
