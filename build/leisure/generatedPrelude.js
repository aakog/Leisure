define([], function(){
  return L_runMonads([
    function(){return resolve(L_setNameSpace)("core")},
    function(){return resolve(L_newDefine)("isMonad", 1, "isMonad x = or (eq (getType x) 'monad') (eq (getType x) 'monad2')", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isMonad:21:8'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isMonad:21:16'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isMonad:21:20'); var ret = resolve(L_getType)(L_x); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "monad"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isMonad:21:41'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isMonad:21:45'); var ret = resolve(L_getType)(L_x); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "monad2"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("asIO", 1, "asIO x = x", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'asIO:23:5'); var ret = resolve(L_x); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("fakereturn", 1, "fakereturn x = x", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fakereturn:24:11'); var ret = resolve(L_x); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("wrap", 1, "wrap x = x", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'wrap:25:5'); var ret = resolve(L_x); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("recur", 1, "recur x = \\f . f x", lazy(setDataType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'recur:31:6'); var ret = setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'recur:31:11'); var ret = resolve(L_f)(L_x); L$setThunkStack(old); return ret;}, 'recur'); L$setThunkStack(old); return ret;}, 'recur')))},
    function(){return resolve(L_newDefine)("true", 0, "true = \\a b . a", lazy(setDataType(setType(function(L_a){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'true:41:8'); var ret = function(L_b){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'true:41:10'); var ret = resolve(L_a); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'true'), 'true')))},
    function(){return resolve(L_newDefine)("false", 0, "false = \\a b . b", lazy(setDataType(setType(function(L_a){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'false:42:9'); var ret = function(L_b){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'false:42:11'); var ret = resolve(L_b); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'false'), 'false')))},
    function(){return resolve(L_newDefine)("not", 1, "not b = b false true", lazy(function(L_b){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'not:43:4'); var ret = resolve(L_b)(L_false)(L_true); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("and", 2, "and a b = a b false", lazy((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_a)(L_b)(L_false);
})))},
    function(){return resolve(L_newDefine)("&&", 0, "&& = and", L_and)},
    function(){return resolve(L_newDefine)("or", 2, "or a b = a true b", lazy((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_a)(L_true)(L_b);
})))},
    function(){return resolve(L_newDefine)("||", 0, "|| = or", L_or)},
    function(){return resolve(L_newDefine)("some", 1, "some x = \\someCase noneCase . someCase x", lazy(setDataType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'some:48:5'); var ret = setType(function(L_someCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'some:48:10'); var ret = function(L_noneCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'some:48:19'); var ret = resolve(L_someCase)(L_x); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'some'); L$setThunkStack(old); return ret;}, 'some')))},
    function(){return resolve(L_newDefine)("some2", 2, "some2 a b = \\someCase noneCase . someCase a b", lazy(setDataType((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_someCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'some2:49:13'); var ret = function(L_noneCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'some2:49:22'); var ret = resolve(L_someCase)(L_a)(L_b); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'some2');
}), 'some2')))},
    function(){return resolve(L_newDefine)("none", 0, "none = \\someCase noneCase . noneCase", lazy(setDataType(setType(function(L_someCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'none:50:8'); var ret = function(L_noneCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'none:50:17'); var ret = resolve(L_noneCase); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'none'), 'none')))},
    function(){return resolve(L_newDefine)("isNone", 1, "isNone obj = hasType obj none", lazy(function(L_obj){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isNone:51:7'); var ret = resolve(L_hasType)(L_obj, L_none); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isSome", 1, "isSome obj = hasType obj some", lazy(function(L_obj){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isSome:52:7'); var ret = resolve(L_hasType)(L_obj, L_some); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isSome2", 1, "isSome2 obj = hasType obj some2", lazy(function(L_obj){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isSome2:53:8'); var ret = resolve(L_hasType)(L_obj, L_some2); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isOption", 1, "isOption obj = or (isSome obj) (isNone obj)", lazy(function(L_obj){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isOption:54:9'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isOption:54:19'); var ret = resolve(L_isSome)(L_obj); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isOption:54:32'); var ret = resolve(L_isNone)(L_obj); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("neq", 2, "neq a b = not (eq a b)", lazy((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'neq:55:15'); var ret = resolve(L_eq)(L_a, L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("left", 1, "left x = \\lCase rCase . lCase x", lazy(setDataType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'left:56:5'); var ret = setType(function(L_lCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'left:56:10'); var ret = function(L_rCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'left:56:16'); var ret = resolve(L_lCase)(L_x); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'left'); L$setThunkStack(old); return ret;}, 'left')))},
    function(){return resolve(L_newDefine)("right", 1, "right x = \\lCase rCase . rCase x", lazy(setDataType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'right:57:6'); var ret = setType(function(L_lCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'right:57:11'); var ret = function(L_rCase){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'right:57:17'); var ret = resolve(L_rCase)(L_x); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'right'); L$setThunkStack(old); return ret;}, 'right')))},
    function(){return resolve(L_newDefine)("isEither", 1, "isEither obj = or (hasType obj left) (hasType obj right)", lazy(function(L_obj){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEither:58:9'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEither:58:19'); var ret = resolve(L_hasType)(L_obj, L_left); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEither:58:38'); var ret = resolve(L_hasType)(L_obj, L_right); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isString", 1, "isString s = == (getType s) '*string'", lazy(function(L_s){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isString:64:9'); var ret = resolve(L_$p$p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isString:64:17'); var ret = resolve(L_getType)(L_s); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "*string"); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isNumber", 1, "isNumber s = == (getType s) '*number'", lazy(function(L_s){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isNumber:65:9'); var ret = resolve(L_$p$p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isNumber:65:17'); var ret = resolve(L_getType)(L_s); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "*number"); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strAsc", 1, "strAsc string = _strAsc (assertType 'strAsc string' '*string' string)", lazy(function(L_string){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strAsc:71:7'); var ret = resolve(L__strAsc)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strAsc:71:25'); var ret = resolve(L_assertType)("strAsc string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strChr", 1, "strChr ascii = _strChr (assertType 'strChr string' '*number' ascii)", lazy(function(L_ascii){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strChr:72:7'); var ret = resolve(L__strChr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strChr:72:24'); var ret = resolve(L_assertType)("strChr string", "*number", L_ascii); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strAt", 2, "strAt string index = _strAt\r\n  assertType 'strAt string' '*string' string\r\n  assertType 'strAt index' '*number' index", lazy((function(L_string, L_index) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strAt)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strAt:75:2'); var ret = resolve(L_assertType)("strAt string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strAt:77:2'); var ret = resolve(L_assertType)("strAt index", "*number", L_index); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strStartsWith", 2, "strStartsWith string prefix = _strStartsWith\r\n  assertType 'strStartsWith string' '*string' string\r\n  assertType 'strStartsWith prefix' '*string' prefix", lazy((function(L_string, L_prefix) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strStartsWith)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strStartsWith:80:2'); var ret = resolve(L_assertType)("strStartsWith string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strStartsWith:82:2'); var ret = resolve(L_assertType)("strStartsWith prefix", "*string", L_prefix); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strLen", 1, "strLen string = _strLen (assertType 'strLen string' '*string' string)", lazy(function(L_string){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strLen:83:7'); var ret = resolve(L__strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strLen:83:25'); var ret = resolve(L_assertType)("strLen string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strToLowerCase", 1, "strToLowerCase string = _strToLowerCase (assertType 'strToLowerCase string' '*string' string)", lazy(function(L_string){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strToLowerCase:84:15'); var ret = resolve(L__strToLowerCase)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strToLowerCase:84:41'); var ret = resolve(L_assertType)("strToLowerCase string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strToUpperCase", 1, "strToUpperCase string = _strToUpperCase (assertType 'strToUpperCase string' '*string' string)", lazy(function(L_string){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strToUpperCase:85:15'); var ret = resolve(L__strToUpperCase)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strToUpperCase:85:41'); var ret = resolve(L_assertType)("strToUpperCase string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strReplace", 3, "strReplace string pat repl = _strReplace\r\n  assertType 'strReplace string' '*string' string\r\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strStartsWith pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat\r\n  assertType 'strReplace repl' '*string' repl", lazy((function(L_string, L_pat, L_repl) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strReplace)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:88:2'); var ret = resolve(L_assertType)("strReplace string", "*string", L_string); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:2'); var ret = resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:10'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:14'); var ret = resolve(L_hasType)(L_pat, "*string"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:38'); var ret = resolve(L_hasType)(L_pat, "*RegExp"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:63'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:71'); var ret = resolve(L_cons)("strStartsWith pat should be type string or RegExp but it is type ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:145'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:151'); var ret = resolve(L_getType)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:165'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:176'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:90:182'); var ret = resolve(L_show)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strReplace:92:2'); var ret = resolve(L_assertType)("strReplace repl", "*string", L_repl); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strSubstring", 3, "strSubstring str start end = _strSubstring\r\n  assertType 'strSubstring str' '*string' str\r\n  assertType 'strSubstring start' '*number' start\r\n  assertType 'strSubstring end' '*number' end", lazy((function(L_str, L_start, L_end) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strSubstring)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSubstring:95:2'); var ret = resolve(L_assertType)("strSubstring str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSubstring:97:2'); var ret = resolve(L_assertType)("strSubstring start", "*number", L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSubstring:99:2'); var ret = resolve(L_assertType)("strSubstring end", "*number", L_end); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strSplit", 2, "strSplit str pat = _strSplit\r\n  assertType 'strSplit str' '*string' str\r\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strSplit pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strSplit)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:102:2'); var ret = resolve(L_assertType)("strSplit str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:2'); var ret = resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:10'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:14'); var ret = resolve(L_hasType)(L_pat, "*string"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:38'); var ret = resolve(L_hasType)(L_pat, "*RegExp"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:63'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:71'); var ret = resolve(L_cons)("strSplit pat should be type string or RegExp but it is type ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:140'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:146'); var ret = resolve(L_getType)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:160'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:171'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strSplit:104:177'); var ret = resolve(L_show)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strCat", 1, "strCat list = _strCat\r\n  assert (isList list) (strCat (cons 'strCat list should be type cons or nil but it is type ' (cons (getType list) (cons ': ' (cons list))))) list", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:105:7'); var ret = resolve(L__strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:2'); var ret = resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:10'); var ret = resolve(L_isList)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:24'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:32'); var ret = resolve(L_cons)("strCat list should be type cons or nil but it is type ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:95'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:101'); var ret = resolve(L_getType)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:116'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strCat:107:127'); var ret = resolve(L_cons)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strAdd", 2, "strAdd str1 str2 = _strAdd (assertType 'strAdd str1' '*string' str1) (assertType 'strAdd str2' '*string' str2)", lazy((function(L_str1, L_str2) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strAdd)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strAdd:108:28'); var ret = resolve(L_assertType)("strAdd str1", "*string", L_str1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strAdd:108:70'); var ret = resolve(L_assertType)("strAdd str2", "*string", L_str2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strMatch", 2, "strMatch str pat = _strMatch\r\n  assertType 'strMatch str' '*string' str\r\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strMatch pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__strMatch)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:111:2'); var ret = resolve(L_assertType)("strMatch str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:2'); var ret = resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:10'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:14'); var ret = resolve(L_hasType)(L_pat, "*string"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:38'); var ret = resolve(L_hasType)(L_pat, "*RegExp"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:63'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:71'); var ret = resolve(L_cons)("strMatch pat should be type string or RegExp but it is type ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:140'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:146'); var ret = resolve(L_getType)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:160'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:171'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatch:113:177'); var ret = resolve(L_show)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strToList", 1, "strToList str = _strToList (assertType 'strToList str' '*string' str)", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strToList:114:10'); var ret = resolve(L__strToList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strToList:114:28'); var ret = resolve(L_assertType)("strToList str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("strFromList", 1, "strFromList list = _strFromList\r\n  assert (isList list) (strCat (cons 'strFromList list should be type cons or nil but it is type ' (cons (getType list) (cons ': ' (cons list))))) list", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:115:12'); var ret = resolve(L__strFromList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:2'); var ret = resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:10'); var ret = resolve(L_isList)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:24'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:32'); var ret = resolve(L_cons)("strFromList list should be type cons or nil but it is type ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:100'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:106'); var ret = resolve(L_getType)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:121'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strFromList:117:132'); var ret = resolve(L_cons)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("regexp", 1, "regexp str = _regexp (assertType 'regexp str' '*string' str)", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'regexp:118:7'); var ret = resolve(L__regexp)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'regexp:118:22'); var ret = resolve(L_assertType)("regexp str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("regexpFlags", 2, "regexpFlags str flags = _regexpFlags\r\n  assertType 'regexp str' '*string' str\r\n  assertType 'regexp flags' '*string' flags", lazy((function(L_str, L_flags) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__regexpFlags)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'regexpFlags:121:2'); var ret = resolve(L_assertType)("regexp str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'regexpFlags:123:2'); var ret = resolve(L_assertType)("regexp flags", "*string", L_flags); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("jsonParse", 3, "jsonParse str failure success = _jsonParse\r\n  assertType 'jsonParse str' '*string' str\r\n  failure\r\n  success", lazy((function(L_str, L_failure, L_success) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L__jsonParse)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'jsonParse:126:2'); var ret = resolve(L_assertType)("jsonParse str", "*string", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_failure, L_success);
})))},
    function(){return resolve(L_newDefine)("show", 1, "show x = _show x", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'show:136:5'); var ret = resolve(L__show)(L_x); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("equal", 2, "equal x y = eq x y", lazy((function(L_x, L_y) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_eq)(L_x, L_y);
})))},
    function(){return resolve(L_newDefine)("id", 1, "id x = x", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'id:143:3'); var ret = resolve(L_x); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("unit", 0, "unit = \\x . x", lazy(setDataType(setType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'unit:144:8'); var ret = resolve(L_x); L$setThunkStack(old); return ret;}, 'unit'), 'unit')))},
    function(){return resolve(L_newDefine)("compose", 2, "compose f g = \\x . f (g x)", lazy(setDataType((function(L_f, L_g) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'compose:145:15'); var ret = resolve(L_f)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'compose:145:22'); var ret = resolve(L_g)(L_x); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}, 'compose');
}), 'compose')))},
    function(){return resolve(L_newDefine)("flip", 1, "flip func = \\x y . func y x", lazy(setDataType(function(L_func){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'flip:149:5'); var ret = setType(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'flip:149:13'); var ret = function(L_y){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'flip:149:15'); var ret = resolve(L_func)(L_y)(L_x); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'flip'); L$setThunkStack(old); return ret;}, 'flip')))},
    function(){return resolve(L_newDefine)("withCons", 3, "withCons l nilCase cont = isCons l (l (\\h t D . cont h t) nilCase) nilCase", lazy((function(L_l, L_nilCase, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isCons)(L_l)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withCons:161:36'); var ret = resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withCons:161:40'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withCons:161:42'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withCons:161:44'); var ret = resolve(L_cont)(L_h)(L_t); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nilCase); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_nilCase);
})))},
    function(){return resolve(L_newDefine)("cons", 2, "cons a b = \\f . f a b", lazy(setDataType((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cons:163:12'); var ret = resolve(L_f)(L_a)(L_b); L$setThunkStack(old); return ret;}, 'cons');
}), 'cons')))},
    function(){return resolve(L_newDefine)("isCons", 1, "isCons c = hasType c cons", lazy(function(L_c){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isCons:164:7'); var ret = resolve(L_hasType)(L_c, L_cons); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isList", 1, "isList l = or (hasType l cons) (hasType l nil)", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isList:165:7'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isList:165:15'); var ret = resolve(L_hasType)(L_l, L_cons); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isList:165:32'); var ret = resolve(L_hasType)(L_l, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("assertType", 3, "assertType msg type value = assert (hasType value type) (strCat (cons msg (cons ' should be type ' (cons (getDataType type) (cons ', but its type is ' (cons (getType value) (cons ': ' (cons (show value) nil)))))))) value", lazy((function(L_msg, L_type, L_value) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:36'); var ret = resolve(L_hasType)(L_value, L_type); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:57'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:65'); var ret = resolve(L_cons)(L_msg, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:75'); var ret = resolve(L_cons)(" should be type ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:100'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:106'); var ret = resolve(L_getDataType)(L_type); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:125'); var ret = resolve(L_cons)(", but its type is ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:152'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:158'); var ret = resolve(L_getType)(L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:174'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:185'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertType:166:191'); var ret = resolve(L_show)(L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_value);
})))},
    function(){return resolve(L_newDefine)("nil", 0, "nil = \\a b . b", lazy(setDataType(setType(function(L_a){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'nil:168:7'); var ret = function(L_b){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'nil:168:9'); var ret = resolve(L_b); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}, 'nil'), 'nil')))},
    function(){return resolve(L_newDefine)("isNil", 1, "isNil n = hasType n nil", lazy(function(L_n){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isNil:169:6'); var ret = resolve(L_hasType)(L_n, L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("head", 1, "head l = l \\h t . h", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'head:170:5'); var ret = resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'head:170:12'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'head:170:14'); var ret = resolve(L_h); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("tail", 1, "tail l = l \\h t . t", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tail:171:5'); var ret = resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tail:171:12'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tail:171:14'); var ret = resolve(L_t); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("last", 1, "last l = isNil (tail l)\r\n  head l\r\n  last (tail l)", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'last:172:5'); var ret = resolve(L_isNil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'last:172:16'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'last:174:2'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'last:176:2'); var ret = resolve(L_last)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'last:176:8'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("removeLast", 1, "removeLast l = isNil (tail l)\r\n  nil\r\n  cons (head l) (removeLast (tail l))", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'removeLast:177:11'); var ret = resolve(L_isNil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'removeLast:177:22'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'removeLast:181:2'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'removeLast:181:8'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'removeLast:181:17'); var ret = resolve(L_removeLast)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'removeLast:181:29'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("length", 1, "length list = isCons list\r\n  + 1 (length (tail list))\r\n  assert (hasType list nil) (strCat (cons \"length argument is not a proper list: \" (cons list nil))) 0", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:182:7'); var ret = resolve(L_isCons)(L_list)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:184:2'); var ret = resolve(L_$o)(1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:184:7'); var ret = resolve(L_length)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:184:15'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:186:2'); var ret = resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:186:10'); var ret = resolve(L_hasType)(L_list, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:186:29'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:186:37'); var ret = resolve(L_cons)("length argument is not a proper list: ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'length:186:84'); var ret = resolve(L_cons)(L_list, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("append", 2, "append a b = isNil a\r\n  b\r\n  cons (head a) (append (tail a) b)", lazy((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_a)(L_b)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'append:191:2'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'append:191:8'); var ret = resolve(L_head)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'append:191:17'); var ret = resolve(L_append)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'append:191:25'); var ret = resolve(L_tail)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("flatten", 1, "flatten list = isCons list\r\n  subflatten list nil\r\n  list", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'flatten:192:8'); var ret = resolve(L_isCons)(L_list)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'flatten:194:2'); var ret = resolve(L_subflatten)(L_list, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_list); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("subflatten", 2, "subflatten list result = isNil list\r\n  result\r\n  isCons list\r\n    subflatten (head list) (subflatten (tail list) result)\r\n    cons list result", lazy((function(L_list, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_list)(L_result)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subflatten:201:2'); var ret = resolve(L_isCons)(L_list)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subflatten:203:4'); var ret = resolve(L_subflatten)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subflatten:203:16'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subflatten:203:28'); var ret = resolve(L_subflatten)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subflatten:203:40'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subflatten:205:4'); var ret = resolve(L_cons)(L_list, L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("reverse", 1, "reverse l = rev l nil", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'reverse:206:8'); var ret = resolve(L_rev)(L_l, L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("rev", 2, "rev l result = isNil l\r\n  result\r\n  rev (tail l) (cons (head l) result)", lazy((function(L_l, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_l)(L_result)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rev:211:2'); var ret = resolve(L_rev)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rev:211:7'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rev:211:16'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rev:211:22'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("filter", 2, "filter func list = isNil list\r\n  nil\r\n  func (head list) (cons (head list)) id (filter func (tail list))", lazy((function(L_func, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_list)(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filter:216:2'); var ret = resolve(L_func)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filter:216:8'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filter:216:20'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filter:216:26'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_id)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filter:216:42'); var ret = resolve(L_filter)(L_func, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filter:216:55'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("find", 2, "find predicate list = isNil list\r\n  none\r\n  predicate (head list) (some (head list)) (find predicate (tail list))", lazy((function(L_predicate, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_list)(L_none)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'find:221:2'); var ret = resolve(L_predicate)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'find:221:13'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'find:221:25'); var ret = resolve(L_some)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'find:221:31'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'find:221:44'); var ret = resolve(L_find)(L_predicate, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'find:221:60'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("contains", 2, "contains list item = find (\\el . eq el item) list (\\x . true) false", lazy((function(L_list, L_item) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_find)(lazy(function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'contains:222:28'); var ret = resolve(L_eq)(L_el, L_item); L$setThunkStack(old); return ret;}), L_list)(lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'contains:222:52'); var ret = resolve(L_true); L$setThunkStack(old); return ret;}))(L_false);
})))},
    function(){return resolve(L_newDefine)("map", 2, "map func l = isCons l\r\n  cons (func (head l)) (map func (tail l))\r\n  l", lazy((function(L_func, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isCons)(L_l)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'map:228:2'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'map:228:8'); var ret = resolve(L_func)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'map:228:14'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'map:228:24'); var ret = resolve(L_map)(L_func, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'map:228:34'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_l);
})))},
    function(){return resolve(L_newDefine)("mapSave", 2, "mapSave func l = isNil l\r\n  nil\r\n  \\\\\r\n    newH = func (head l)\r\n    newT = mapSave func (tail l)\r\n    .\r\n    and (eq newH (head l)) (eq newT (tail l))\r\n      l\r\n      cons newH newT", lazy((function(L_func, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_l)(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:1:0'); var ret = (function(){
  var L_newH_0, L_newT_1;
  L_newH_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:239:11'); var ret = resolve(L_func)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:239:17'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_newT_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:241:11'); var ret = resolve(L_mapSave)(L_func, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:241:25'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:245:9'); var ret = resolve(L_eq)(L_newH_0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:245:18'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:245:28'); var ret = resolve(L_eq)(L_newT_1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:245:37'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_l)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mapSave:249:6'); var ret = resolve(L_cons)(L_newH_0, L_newT_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("foldl", 3, "foldl func initialValue l = l (\\h t D . foldl func (func initialValue h) t) initialValue", lazy((function(L_func, L_initialValue, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldl:257:32'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldl:257:34'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldl:257:36'); var ret = resolve(L_foldl)(L_func, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldl:257:52'); var ret = resolve(L_func)(L_initialValue)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_initialValue);
})))},
    function(){return resolve(L_newDefine)("foldl1", 2, "foldl1 func l = l \\h t . foldl func h t", lazy((function(L_func, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldl1:258:19'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldl1:258:21'); var ret = resolve(L_foldl)(L_func, L_h, L_t); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("foldr", 3, "foldr func initialValue list = list\r\n  \\h t D . func h (foldr func initialValue t)\r\n  initialValue", lazy((function(L_func, L_initialValue, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr:261:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr:261:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr:261:7'); var ret = resolve(L_func)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr:261:19'); var ret = resolve(L_foldr)(L_func, L_initialValue, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_initialValue);
})))},
    function(){return resolve(L_newDefine)("foldr1", 2, "foldr1 func list = list \\h t . isNil t\r\n  h\r\n  func h (foldr1 func t)", lazy((function(L_func, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr1:264:25'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr1:264:27'); var ret = resolve(L_isNil)(L_t)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr1:268:2'); var ret = resolve(L_func)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'foldr1:268:10'); var ret = resolve(L_foldr1)(L_func, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("intersperse", 2, "intersperse list element = list (\\h t D .\r\n  isNil t\r\n    list\r\n    cons h (cons element (intersperse t element))) nil", lazy((function(L_list, L_element) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'intersperse:270:34'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'intersperse:270:36'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'intersperse:270:38'); var ret = resolve(L_isNil)(L_t)(L_list)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'intersperse:276:4'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'intersperse:276:12'); var ret = resolve(L_cons)(L_element, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'intersperse:276:26'); var ret = resolve(L_intersperse)(L_t, L_element); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("join", 2, "join list el = strCat (intersperse list el)", lazy((function(L_list, L_el) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'join:278:23'); var ret = resolve(L_intersperse)(L_list, L_el); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("findIndex", 2, "findIndex func list = idx list func 0", lazy((function(L_func, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_idx)(L_list, L_func, 0);
})))},
    function(){return resolve(L_newDefine)("idx", 3, "idx list func pos = list\r\n  \\h t D . func h\r\n    pos\r\n    idx t func (+ 1 pos)\r\n  -1", lazy((function(L_list, L_func, L_pos) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'idx:282:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'idx:282:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'idx:282:7'); var ret = resolve(L_func)(L_h)(L_pos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'idx:286:4'); var ret = resolve(L_idx)(L_t, L_func, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'idx:286:16'); var ret = resolve(L_$o)(1, L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(-1);
})))},
    function(){return resolve(L_newDefine)("index", 2, "index list el = find (\\item . == el item) list", lazy((function(L_list, L_el) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_find)(lazy(function(L_item){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'index:289:23'); var ret = resolve(L_$p$p)(L_el, L_item); L$setThunkStack(old); return ret;}), L_list);
})))},
    function(){return resolve(L_newDefine)("increasing", 1, "increasing x = cons x (increasing (+ x 1))", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'increasing:291:11'); var ret = resolve(L_cons)(L_x, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'increasing:291:23'); var ret = resolve(L_increasing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'increasing:291:35'); var ret = resolve(L_$o)(L_x, 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("wholes", 0, "wholes = increasing 0", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'wholes:292:9'); var ret = resolve(L_increasing)(0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("naturals", 0, "naturals = tail wholes", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'naturals:293:11'); var ret = resolve(L_tail)(L_wholes); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("zip", 2, "zip a b = isNil a\r\n  nil\r\n  isNil b\r\n    nil\r\n    cons (cons (head a) (head b)) (zip (tail a) (tail b))", lazy((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_a)(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:299:2'); var ret = resolve(L_isNil)(L_b)(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:4'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:10'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:16'); var ret = resolve(L_head)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:25'); var ret = resolve(L_head)(L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:35'); var ret = resolve(L_zip)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:40'); var ret = resolve(L_tail)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'zip:303:49'); var ret = resolve(L_tail)(L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("assertAlist", 3, "assertAlist msg value result = assert (isAlist value) (strCat (cons msg (cons ' should be a association list, but it is not; its type is ' (cons (getType value) (cons ': ' (cons (show value) nil)))))) result", lazy((function(L_msg, L_value, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_assert)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:39'); var ret = resolve(L_isAlist)(L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:55'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:63'); var ret = resolve(L_cons)(L_msg, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:73'); var ret = resolve(L_cons)(" should be a association list, but it is not; its type is ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:140'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:146'); var ret = resolve(L_getType)(L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:162'); var ret = resolve(L_cons)(": ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:173'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assertAlist:308:179'); var ret = resolve(L_show)(L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_result);
})))},
    function(){return resolve(L_newDefine)("acons", 3, "acons k v alist = assertAlist \"acons alist\" alist (\\@ type cons . \\f . \\@ assoc true . f (cons k v) alist)", lazy((function(L_k, L_v, L_alist) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_assertAlist)("acons alist", L_alist, lazy(setType(setLambdaProperties(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'acons:309:67'); var ret = resolve(L_f)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'acons:309:90'); var ret = resolve(L_cons)(L_k, L_v); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_alist); L$setThunkStack(old); return ret;}, {"assoc":"true"}), 'cons')));
})))},
    function(){return resolve(L_newDefine)("assoc", 2, "assoc k alist  = find (\\el . eq k (head el)) alist (\\cell . cell \\head tail . some tail) none", lazy((function(L_k, L_alist) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_find)(lazy(function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assoc:310:24'); var ret = resolve(L_eq)(L_k, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assoc:310:35'); var ret = resolve(L_head)(L_el); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}), L_alist)(lazy(function(L_cell){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assoc:310:53'); var ret = resolve(L_cell)(lazy(function(L_head){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assoc:310:66'); var ret = function(L_tail){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'assoc:310:71'); var ret = resolve(L_some)(L_tail); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))(L_none);
})))},
    function(){return resolve(L_newDefine)("rassoc", 2, "rassoc v alist = find (\\el . eq v (tail el)) alist (\\cell . cell \\head tail . some head) none", lazy((function(L_v, L_alist) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_find)(lazy(function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rassoc:311:24'); var ret = resolve(L_eq)(L_v, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rassoc:311:35'); var ret = resolve(L_tail)(L_el); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}), L_alist)(lazy(function(L_cell){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rassoc:311:53'); var ret = resolve(L_cell)(lazy(function(L_head){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rassoc:311:66'); var ret = function(L_tail){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rassoc:311:71'); var ret = resolve(L_some)(L_head); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))(L_none);
})))},
    function(){return resolve(L_newDefine)("isAlist", 1, "isAlist obj = or (isNil obj) (hasProperty obj 'assoc')", lazy(function(L_obj){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isAlist:312:8'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isAlist:312:18'); var ret = resolve(L_isNil)(L_obj); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isAlist:312:30'); var ret = resolve(L_hasProperty)(L_obj, "assoc"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("aconsPair", 2, "aconsPair keyValue list = \\@ type cons . \\f . \\@ assoc true . f keyValue list", lazy((function(L_keyValue, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(setLambdaProperties(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aconsPair:313:42'); var ret = resolve(L_f)(L_keyValue)(L_list); L$setThunkStack(old); return ret;}, {"assoc":"true"}), 'cons');
})))},
    function(){return resolve(L_newDefine)("appendAlist", 2, "appendAlist a b = isNil a\r\n  b\r\n  aconsPair (head a) (appendAlist (tail a) b)", lazy((function(L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_a)(L_b)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'appendAlist:318:2'); var ret = resolve(L_aconsPair)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'appendAlist:318:13'); var ret = resolve(L_head)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'appendAlist:318:22'); var ret = resolve(L_appendAlist)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'appendAlist:318:35'); var ret = resolve(L_tail)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("keys", 1, "keys list = map (\\l . head l) list", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'keys:319:5'); var ret = resolve(L_map)(lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'keys:319:18'); var ret = resolve(L_head)(L_l); L$setThunkStack(old); return ret;}), L_list); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("getProperty", 2, "getProperty func prop = assoc prop (getProperties func)", lazy((function(L_func, L_prop) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_assoc)(L_prop, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getProperty:321:36'); var ret = resolve(L_getProperties)(L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("hasProperty", 2, "hasProperty func prop = getProperty func prop\r\n  \\_ . true\r\n  false", lazy((function(L_func, L_prop) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_getProperty)(L_func, L_prop)(lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hasProperty:325:3'); var ret = resolve(L_true); L$setThunkStack(old); return ret;}))(L_false);
})))},
    function(){return resolve(L_newDefine)("odds", 1, "odds l = l\r\n  \\h t D . cons h (evens t)\r\n  nil", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'odds:334:5'); var ret = resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'odds:336:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'odds:336:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'odds:336:7'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'odds:336:19'); var ret = resolve(L_evens)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("evens", 1, "evens l = l\r\n  \\h t D . odds t\r\n  nil", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'evens:340:6'); var ret = resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'evens:342:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'evens:342:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'evens:342:7'); var ret = resolve(L_odds)(L_t); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("cleave", 1, "cleave l = cons (evens l) (odds l)", lazy(function(L_l){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleave:346:7'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleave:346:17'); var ret = resolve(L_evens)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleave:346:27'); var ret = resolve(L_odds)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("merge", 3, "merge cmp a b = a\r\n  \\ah at D . b\r\n    \\bh bt D . cmp ah bh\r\n      cons ah (merge cmp at b)\r\n      cons bh (merge cmp a bt)\r\n    a\r\n  b", lazy((function(L_cmp, L_a, L_b) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_a)(lazy(function(L_ah){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:350:3'); var ret = function(L_at){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:350:6'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:350:9'); var ret = resolve(L_b)(lazy(function(L_bh){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:352:5'); var ret = function(L_bt){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:352:8'); var ret = function(L_D_0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:352:11'); var ret = resolve(L_cmp)(L_ah)(L_bh)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:354:6'); var ret = resolve(L_cons)(L_ah, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:354:15'); var ret = resolve(L_merge)(L_cmp, L_at, L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:356:6'); var ret = resolve(L_cons)(L_bh, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'merge:356:15'); var ret = resolve(L_merge)(L_cmp, L_a, L_bt); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_a); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_b);
})))},
    function(){return resolve(L_newDefine)("mergeSort", 2, "mergeSort cmp l = l\r\n  \\h t D . eq (tail l) nil\r\n    l\r\n    \\\\\r\n      cl = cleave l\r\n      e = head cl\r\n      o = tail cl\r\n      .\r\n      merge cmp (mergeSort cmp e) (mergeSort cmp o)\r\n  nil", lazy((function(L_cmp, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_l)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:364:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:364:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:364:7'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:364:15'); var ret = resolve(L_tail)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil)(L_l)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:1:0'); var ret = (function(){
  var L_cl_0, L_e_1, L_o_2;
  L_cl_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:370:11'); var ret = resolve(L_cleave)(L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_e_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:372:10'); var ret = resolve(L_head)(L_cl_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_o_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:374:10'); var ret = resolve(L_tail)(L_cl_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_merge)(L_cmp, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:378:17'); var ret = resolve(L_mergeSort)(L_cmp, L_e_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'mergeSort:378:35'); var ret = resolve(L_mergeSort)(L_cmp, L_o_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("slowsort", 2, "slowsort less list = (qs less list) nil", lazy((function(L_less, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_qs)(L_less, L_list)(L_nil);
})))},
    function(){return resolve(L_newDefine)("qs", 2, "qs sortedFunc list = list\r\n  \\h t D . \\\\\r\n    greater = filter (sortedFunc h) t\r\n    lesser = filter (compose not (sortedFunc h)) t\r\n    .\r\n    \\rest . (qs sortedFunc lesser) (cons h ((qs sortedFunc greater) rest))\r\n  id", lazy((function(L_sortedFunc, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:390:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:390:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:390:7'); var ret = (function(){
  var L_greater_0, L_lesser_1;
  L_greater_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:392:14'); var ret = resolve(L_filter)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:392:22'); var ret = resolve(L_sortedFunc)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_lesser_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:394:13'); var ret = resolve(L_filter)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:394:21'); var ret = resolve(L_compose)(L_not, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:394:34'); var ret = resolve(L_sortedFunc)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:398:5'); var ret = resolve(L_qs)(L_sortedFunc, L_lesser_1)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:398:36'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'qs:398:45'); var ret = resolve(L_qs)(L_sortedFunc, L_greater_0)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_id);
})))},
    function(){return resolve(L_newDefine)("insertSorted", 3, "insertSorted sortFunc item list = list\r\n  \\h t D . sortFunc item h (cons item list) (cons h (insertSorted sortFunc item t))\r\n  cons item nil", lazy((function(L_sortFunc, L_item, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:403:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:403:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:403:7'); var ret = resolve(L_sortFunc)(L_item)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:403:28'); var ret = resolve(L_cons)(L_item, L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:403:45'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:403:53'); var ret = resolve(L_insertSorted)(L_sortFunc, L_item, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'insertSorted:405:2'); var ret = resolve(L_cons)(L_item, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("err", 1, "err msg = \\f . f msg", lazy(setDataType(function(L_msg){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'err:411:4'); var ret = setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'err:411:11'); var ret = resolve(L_f)(L_msg); L$setThunkStack(old); return ret;}, 'err'); L$setThunkStack(old); return ret;}, 'err')))},
    function(){return resolve(L_newDefine)("errMsg", 1, "errMsg err = err \\m . m", lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'errMsg:412:7'); var ret = resolve(L_err)(lazy(function(L_m){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'errMsg:412:18'); var ret = resolve(L_m); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isErr", 1, "isErr thing = hasType thing err", lazy(function(L_thing){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isErr:413:6'); var ret = resolve(L_hasType)(L_thing, L_err); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("ifNotErr", 2, "ifNotErr thing cont = (isErr thing) thing (cont thing)", lazy((function(L_thing, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isErr)(L_thing)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'ifNotErr:414:43'); var ret = resolve(L_cont)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_setNameSpace)("parser")},
    function(){return resolve(L_newDefine)("token", 2, "token txt pos = \\f . f txt pos", lazy(setDataType((function(L_txt, L_pos) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'token:428:17'); var ret = resolve(L_f)(L_txt)(L_pos); L$setThunkStack(old); return ret;}, 'token');
}), 'token')))},
    function(){return resolve(L_newDefine)("tokenString", 1, "tokenString tok = tok \\t p . t", lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenString:429:12'); var ret = resolve(L_tok)(lazy(function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenString:429:23'); var ret = function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenString:429:25'); var ret = resolve(L_t); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("tokenFilepos", 1, "tokenFilepos tok = tok \\t p . p", lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenFilepos:430:13'); var ret = resolve(L_tok)(lazy(function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenFilepos:430:24'); var ret = function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenFilepos:430:26'); var ret = resolve(L_p); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("tokenPos", 1, "tokenPos tok = tok \\t p . isFilepos p\r\n  fileposOffset p\r\n  p", lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenPos:433:9'); var ret = resolve(L_tok)(lazy(function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenPos:433:20'); var ret = function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenPos:433:22'); var ret = resolve(L_isFilepos)(L_p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokenPos:435:2'); var ret = resolve(L_fileposOffset)(L_p); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_p); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isToken", 1, "isToken t = hasType t token", lazy(function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isToken:438:8'); var ret = resolve(L_hasType)(L_t, L_token); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("emptyLineStarts", 0, "emptyLineStarts = cons 'EMPTYFILE.lsr' (cons 1 nil)", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyLineStarts:440:18'); var ret = resolve(L_cons)("EMPTYFILE.lsr", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyLineStarts:440:40'); var ret = resolve(L_cons)(1, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("filepos", 3, "filepos file line offset = \\f . f file line offset", lazy(setDataType((function(L_file, L_line, L_offset) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filepos:442:28'); var ret = resolve(L_f)(L_file)(L_line)(L_offset); L$setThunkStack(old); return ret;}, 'filepos');
}), 'filepos')))},
    function(){return resolve(L_newDefine)("fileposFile", 1, "fileposFile p = p \\file line offset . file", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposFile:443:12'); var ret = resolve(L_p)(lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposFile:443:19'); var ret = function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposFile:443:24'); var ret = function(L_offset){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposFile:443:29'); var ret = resolve(L_file); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("fileposLine", 1, "fileposLine p = p \\file line offset . line", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposLine:444:12'); var ret = resolve(L_p)(lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposLine:444:19'); var ret = function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposLine:444:24'); var ret = function(L_offset){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposLine:444:29'); var ret = resolve(L_line); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("fileposOffset", 1, "fileposOffset p = p \\file line offset . offset", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposOffset:445:14'); var ret = resolve(L_p)(lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposOffset:445:21'); var ret = function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposOffset:445:26'); var ret = function(L_offset){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposOffset:445:31'); var ret = resolve(L_offset); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isFilepos", 1, "isFilepos p = hasType p filepos", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isFilepos:446:10'); var ret = resolve(L_hasType)(L_p, L_filepos); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("addFilepos", 2, "addFilepos pos change = isFilepos pos pos emptyFilePos\r\n  \\file line offset . filepos file line (+ offset change)", lazy((function(L_pos, L_change) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isFilepos)(L_pos)(L_pos)(L_emptyFilePos)(lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addFilepos:450:3'); var ret = function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addFilepos:450:8'); var ret = function(L_offset){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addFilepos:450:13'); var ret = resolve(L_filepos)(L_file, L_line, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addFilepos:450:41'); var ret = resolve(L_$o)(L_offset, L_change); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("emptyFilePos", 0, "emptyFilePos = filepos 'NOTHING.lsr' 0 0", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyFilePos:451:15'); var ret = resolve(L_filepos)("NOTHING.lsr", 0, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("isEmptyPos", 1, "isEmptyPos pos = and (isFilepos pos) (and (eq 0 (fileposLine pos)) (eq 0 (fileposOffset pos)))", lazy(function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:11'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:22'); var ret = resolve(L_isFilepos)(L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:38'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:43'); var ret = resolve(L_eq)(0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:49'); var ret = resolve(L_fileposLine)(L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:68'); var ret = resolve(L_eq)(0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isEmptyPos:452:74'); var ret = resolve(L_fileposOffset)(L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("emptyFor", 1, "emptyFor thing = filepos (fileposFile (position thing)) 0 0", lazy(function(L_thing){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyFor:453:9'); var ret = resolve(L_filepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyFor:453:26'); var ret = resolve(L_fileposFile)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyFor:453:39'); var ret = resolve(L_position)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 0, 0); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("startFilePos", 0, "startFilePos = emptyFilePos", L_emptyFilePos)},
    function(){return resolve(L_newDefine)("filePosFor", 2, "filePosFor lineStarts offset = countFilePos (head (tail lineStarts)) 0 (tail (tail lineStarts)) offset\r\n  \\line offset . filepos (head lineStarts) line offset", lazy((function(L_lineStarts, L_offset) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_countFilePos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:455:45'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:455:51'); var ret = resolve(L_tail)(L_lineStarts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:455:72'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:455:78'); var ret = resolve(L_tail)(L_lineStarts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_offset)(lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:457:3'); var ret = function(L_offset){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:457:8'); var ret = resolve(L_filepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filePosFor:457:26'); var ret = resolve(L_head)(L_lineStarts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_line, L_offset); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("countFilePos", 4, "countFilePos line lineOffset starts offset = or (isNil starts) (> (head starts) offset)\r\n  \\f . f line (- offset lineOffset)\r\n  countFilePos (+ line 1) (head starts) (tail starts) offset", lazy((function(L_line, L_lineOffset, L_starts, L_offset) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:458:49'); var ret = resolve(L_isNil)(L_starts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:458:64'); var ret = resolve(L_$z)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:458:67'); var ret = resolve(L_head)(L_starts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_offset); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(lazy(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:460:3'); var ret = resolve(L_f)(L_line)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:460:15'); var ret = resolve(L_$_)(L_offset, L_lineOffset); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:462:2'); var ret = resolve(L_countFilePos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:462:16'); var ret = resolve(L_$o)(L_line, 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:462:27'); var ret = resolve(L_head)(L_starts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countFilePos:462:41'); var ret = resolve(L_tail)(L_starts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_offset); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("fileposList", 1, "fileposList pos = pos \\file line offset . cons line (cons offset nil)", lazy(function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposList:463:12'); var ret = resolve(L_pos)(lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposList:463:23'); var ret = function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposList:463:28'); var ret = function(L_offset){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposList:463:33'); var ret = resolve(L_cons)(L_line, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'fileposList:463:53'); var ret = resolve(L_cons)(L_offset, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("parens", 3, "parens start end content = \\f . f start end content", lazy(setDataType((function(L_start, L_end, L_content) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parens:465:28'); var ret = resolve(L_f)(L_start)(L_end)(L_content); L$setThunkStack(old); return ret;}, 'parens');
}), 'parens')))},
    function(){return resolve(L_newDefine)("parensStart", 1, "parensStart p = p \\s e c . s", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensStart:466:12'); var ret = resolve(L_p)(lazy(function(L_s){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensStart:466:19'); var ret = function(L_e){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensStart:466:21'); var ret = function(L_c){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensStart:466:23'); var ret = resolve(L_s); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("parensEnd", 1, "parensEnd p = p \\s e c . e", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensEnd:467:10'); var ret = resolve(L_p)(lazy(function(L_s){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensEnd:467:17'); var ret = function(L_e){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensEnd:467:19'); var ret = function(L_c){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensEnd:467:21'); var ret = resolve(L_e); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("parensContent", 1, "parensContent p = p \\s e c . c", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensContent:468:14'); var ret = resolve(L_p)(lazy(function(L_s){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensContent:468:21'); var ret = function(L_e){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensContent:468:23'); var ret = function(L_c){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensContent:468:25'); var ret = resolve(L_c); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("isParens", 1, "isParens p = hasType p parens", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isParens:469:9'); var ret = resolve(L_hasType)(L_p, L_parens); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("makeParens", 3, "makeParens start end content =\r\n  and (isCons content) (isNil (tail content))\r\n    makeParens start end (head content)\r\n    or (isToken content) (isParens content)\r\n      content\r\n      parens start end content", lazy((function(L_start, L_end, L_content) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:472:7'); var ret = resolve(L_isCons)(L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:472:24'); var ret = resolve(L_isNil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:472:31'); var ret = resolve(L_tail)(L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:474:4'); var ret = resolve(L_makeParens)(L_start, L_end, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:474:26'); var ret = resolve(L_head)(L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:476:4'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:476:8'); var ret = resolve(L_isToken)(L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:476:26'); var ret = resolve(L_isParens)(L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_content)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeParens:480:6'); var ret = resolve(L_parens)(L_start, L_end, L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("parensFromToks", 3, "parensFromToks left right content = \\\\\r\n  start = tokenFilepos left\r\n  end = addFilepos (tokenFilepos right) (strLen (tokenString right))\r\n  .\r\n  parens start end content", lazy((function(L_left, L_right, L_content) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_start_0, L_end_1;
  L_start_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensFromToks:483:10'); var ret = resolve(L_tokenFilepos)(L_left); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_end_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensFromToks:485:8'); var ret = resolve(L_addFilepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensFromToks:485:20'); var ret = resolve(L_tokenFilepos)(L_right); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensFromToks:485:41'); var ret = resolve(L_strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parensFromToks:485:49'); var ret = resolve(L_tokenString)(L_right); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_parens)(L_start_0, L_end_1, L_content)})();
})))},
    function(){return resolve(L_newDefine)("stripParens", 1, "stripParens p = isParens p (parensContent p) p", lazy(function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'stripParens:490:12'); var ret = resolve(L_isParens)(L_p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'stripParens:490:28'); var ret = resolve(L_parensContent)(L_p); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_p); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("parseErr", 2, "parseErr msg1 msg2 = err (strCat (cons msg1 (cons msg2 nil)))", lazy((function(L_msg1, L_msg2) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_err)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseErr:492:26'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseErr:492:34'); var ret = resolve(L_cons)(L_msg1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseErr:492:45'); var ret = resolve(L_cons)(L_msg2, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("lineStart", 0, "lineStart  = regexp '^\\\\r?\\\\n'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lineStart:494:13'); var ret = resolve(L_regexp)("^\\r?\\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("commentPat", 0, "commentPat = regexp '^\\\\r?\\\\n[ \\\\i]*#'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'commentPat:495:13'); var ret = resolve(L_regexp)("^\\r?\\n[ \\i]*#"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("emptyToken", 0, "emptyToken = regexp '^\\\\r?\\\\n[ \\\\i]*(#|$)'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyToken:496:13'); var ret = resolve(L_regexp)("^\\r?\\n[ \\i]*(#|$)"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("makeTokens", 3, "makeTokens lineStarts strings start = withRecur\r\n  makeMoreTokens lineStarts strings start nil", lazy((function(L_lineStarts, L_strings, L_start) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withRecur)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeTokens:500:2'); var ret = resolve(L_makeMoreTokens)(L_lineStarts, L_strings, L_start, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("makeMoreTokens", 4, "makeMoreTokens lineStarts strings start result = strings\r\n  \\h t D . recur\r\n    makeMoreTokens lineStarts t (+ start (strLen h))\r\n      or (or (strStartsWith h ' ') (strStartsWith h '#')) (and (strMatches h emptyToken) (or (isNil t) (strMatches (head t) lineStart)))\r\n        result\r\n        cons (makeTokenAt lineStarts h start) result\r\n  reverse result", lazy((function(L_lineStarts, L_strings, L_start, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_strings)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:504:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:504:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:504:7'); var ret = resolve(L_recur)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:506:4'); var ret = resolve(L_makeMoreTokens)(L_lineStarts, L_t, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:506:33'); var ret = resolve(L_$o)(L_start, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:506:42'); var ret = resolve(L_strLen)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:6'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:10'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:14'); var ret = resolve(L_strStartsWith)(L_h, " "); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:36'); var ret = resolve(L_strStartsWith)(L_h, "#"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:59'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:64'); var ret = resolve(L_strMatches)(L_h, L_emptyToken); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:90'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:94'); var ret = resolve(L_isNil)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:104'); var ret = resolve(L_strMatches)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:508:116'); var ret = resolve(L_head)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_lineStart); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_result)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:512:8'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:512:14'); var ret = resolve(L_makeTokenAt)(L_lineStarts, L_h, L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeMoreTokens:514:2'); var ret = resolve(L_reverse)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("makeTokenAt", 3, "makeTokenAt lineStarts txt offset = token txt (filePosFor lineStarts offset)", lazy((function(L_lineStarts, L_txt, L_offset) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_token)(L_txt, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'makeTokenAt:516:47'); var ret = resolve(L_filePosFor)(L_lineStarts, L_offset); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("showToken", 1, "showToken tok = log (strCat (cons 'token: ' (cons (tokenString tok) (cons ', ' (cons (showPos (tokenPos tok)) nil))))) tok", lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:10'); var ret = resolve(L_log)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:21'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:29'); var ret = resolve(L_cons)("token: ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:45'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:51'); var ret = resolve(L_tokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:69'); var ret = resolve(L_cons)(", ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:80'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:86'); var ret = resolve(L_showPos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showToken:518:95'); var ret = resolve(L_tokenPos)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_tok); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("showPos", 1, "showPos pos = isFilepos pos\r\n  strCat (cons 'position: ' (cons (fileposFile pos) (cons ', ' (cons (fileposLine pos) (cons '.' (cons (fileposOffset pos) nil))))))\r\n  pos", lazy(function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:520:8'); var ret = resolve(L_isFilepos)(L_pos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:2'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:10'); var ret = resolve(L_cons)("position: ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:29'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:35'); var ret = resolve(L_fileposFile)(L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:53'); var ret = resolve(L_cons)(", ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:64'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:70'); var ret = resolve(L_fileposLine)(L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:88'); var ret = resolve(L_cons)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:98'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'showPos:522:104'); var ret = resolve(L_fileposOffset)(L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_pos); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("splitTokens", 2, "splitTokens str pat = filter (\\s . not (eq s '')) (basicSplitTokens str pat true)", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_filter)(lazy(function(L_s){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'splitTokens:526:31'); var ret = resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'splitTokens:526:40'); var ret = resolve(L_eq)(L_s, ""); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'splitTokens:526:51'); var ret = resolve(L_basicSplitTokens)(L_str, L_pat, L_true); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("numberPat", 0, "numberPat = regexp '-?([0-9]+(\\\\.[0-9]+)?|\\\\.[0-9]+)'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'numberPat:528:12'); var ret = resolve(L_regexp)("-?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("matchOffset", 2, "matchOffset str match = isNil match\r\n  strLen str\r\n  head (tail (tail match))", lazy((function(L_str, L_match) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_match)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'matchOffset:532:2'); var ret = resolve(L_strLen)(L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'matchOffset:534:2'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'matchOffset:534:8'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'matchOffset:534:14'); var ret = resolve(L_tail)(L_match); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("basicSplitTokens", 3, "basicSplitTokens str pat prevIsDel = reverse\r\n  withRecur (_basicSplitTokens str pat prevIsDel nil)", lazy((function(L_str, L_pat, L_prevIsDel) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_reverse)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'basicSplitTokens:559:2'); var ret = resolve(L_withRecur)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'basicSplitTokens:559:13'); var ret = resolve(L__basicSplitTokens)(L_str, L_pat, L_prevIsDel, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("_basicSplitTokens", 4, "_basicSplitTokens str pat prevIsDel toks = == str ''\r\n  toks\r\n  \\\\\r\n    num = strMatch str numberPat\r\n    del = strMatch str pat\r\n    numOffset = matchOffset str num\r\n    delOffset = matchOffset str del\r\n    select = and (== numOffset 0) prevIsDel\r\n      \\del num first . num\r\n      == delOffset 0\r\n        \\del num first . del\r\n        \\del num first . first\r\n    first = select (head del) (head num) (strSubstring str 0 delOffset)\r\n    .\r\n    recur\r\n      _basicSplitTokens\r\n        strSubstring str (strLen first) 0\r\n        pat\r\n        select true false false\r\n        cons first toks", lazy((function(L_str, L_pat, L_prevIsDel, L_toks) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_$p$p)(L_str, "")(L_toks)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:1:0'); var ret = (function(){
  var L_num_0, L_del_1, L_numOffset_2, L_delOffset_3, L_select_4, L_first_5;
  L_num_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:567:10'); var ret = resolve(L_strMatch)(L_str, L_numberPat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_del_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:569:10'); var ret = resolve(L_strMatch)(L_str, L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_numOffset_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:571:16'); var ret = resolve(L_matchOffset)(L_str, L_num_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_delOffset_3 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:573:16'); var ret = resolve(L_matchOffset)(L_str, L_del_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_select_4 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:575:13'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:575:18'); var ret = resolve(L_$p$p)(L_numOffset_2, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_prevIsDel)(lazy(function(L_del_4){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:577:7'); var ret = function(L_num_5){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:577:11'); var ret = function(L_first_6){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:577:15'); var ret = resolve(L_num_5); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:579:6'); var ret = resolve(L_$p$p)(L_delOffset_3, 0)(lazy(function(L_del_4){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:581:9'); var ret = function(L_num_5){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:581:13'); var ret = function(L_first_6){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:581:17'); var ret = resolve(L_del_4); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(lazy(function(L_del_4){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:583:9'); var ret = function(L_num_5){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:583:13'); var ret = function(L_first_6){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:583:17'); var ret = resolve(L_first_6); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_first_5 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:585:12'); var ret = resolve(L_select_4)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:585:20'); var ret = resolve(L_head)(L_del_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:585:31'); var ret = resolve(L_head)(L_num_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:585:42'); var ret = resolve(L_strSubstring)(L_str, 0, L_delOffset_3); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_recur)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:591:6'); var ret = resolve(L__basicSplitTokens)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:593:8'); var ret = resolve(L_strSubstring)(L_str, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:593:26'); var ret = resolve(L_strLen)(L_first_5); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_pat, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:597:8'); var ret = resolve(L_select_4)(L_true)(L_false)(L_false); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_basicSplitTokens:599:8'); var ret = resolve(L_cons)(L_first_5, L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("tokens", 2, "tokens str pat = countedTokens emptyLineStarts str pat", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_countedTokens)(L_emptyLineStarts, L_str, L_pat);
})))},
    function(){return resolve(L_newDefine)("countedTokens", 3, "countedTokens lineStarts str pat = makeTokens lineStarts (splitTokens str pat) 0", lazy((function(L_lineStarts, L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_makeTokens)(L_lineStarts, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedTokens:603:58'); var ret = resolve(L_splitTokens)(L_str, L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 0);
})))},
    function(){return resolve(L_newDefine)("isTokenString", 2, "isTokenString tok str = or\r\n  and (isToken tok) (eq (tokenString tok) str)\r\n  and (isString tok) (eq tok str)", lazy((function(L_tok, L_str) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:611:2'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:611:7'); var ret = resolve(L_isToken)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:611:21'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:611:25'); var ret = resolve(L_tokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:613:2'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:613:7'); var ret = resolve(L_isString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenString:613:22'); var ret = resolve(L_eq)(L_tok, L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("isTokenStart", 2, "isTokenStart tok str = or\r\n  and (isToken tok) (strStartsWith (tokenString tok) str)\r\n  and (isString tok) (strStartsWith tok str)", lazy((function(L_tok, L_str) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:616:2'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:616:7'); var ret = resolve(L_isToken)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:616:21'); var ret = resolve(L_strStartsWith)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:616:36'); var ret = resolve(L_tokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:618:2'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:618:7'); var ret = resolve(L_isString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isTokenStart:618:22'); var ret = resolve(L_strStartsWith)(L_tok, L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("strTokenString", 1, "strTokenString tok = withToken tok nil \\str pos . str", lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strTokenString:619:15'); var ret = resolve(L_withToken)(L_tok, L_nil, lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strTokenString:619:40'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strTokenString:619:44'); var ret = resolve(L_str); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("withToken", 3, "withToken tok nonTokCase tokCase = isToken tok\r\n  tokCase (tokenString tok) (tokenPos tok)\r\n  isString tok\r\n    tokCase tok emptyFilePos\r\n    nonTokCase", lazy((function(L_tok, L_nonTokCase, L_tokCase) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isToken)(L_tok)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withToken:622:2'); var ret = resolve(L_tokCase)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withToken:622:11'); var ret = resolve(L_tokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withToken:622:29'); var ret = resolve(L_tokenPos)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withToken:624:2'); var ret = resolve(L_isString)(L_tok)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withToken:626:4'); var ret = resolve(L_tokCase)(L_tok)(L_emptyFilePos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_nonTokCase); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("parseToks", 2, "parseToks toks groups =\r\n  isNil toks nil\r\n    ifNotErr (parseTok toks groups) \\list . list \\h t .\r\n      ifNotErr (parseToks t groups) \\res .\r\n        cons h\r\n          and (isCons res) (isBlockStart (head res))\r\n            cons res nil\r\n            res", lazy((function(L_toks, L_groups) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_toks)(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:634:4'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:634:14'); var ret = resolve(L_parseTok)(L_toks, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:634:37'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:634:50'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:634:52'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:636:16'); var ret = resolve(L_parseToks)(L_t, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_res){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:636:37'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:640:10'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:640:15'); var ret = resolve(L_isCons)(L_res); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:640:28'); var ret = resolve(L_isBlockStart)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:640:42'); var ret = resolve(L_head)(L_res); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToks:642:12'); var ret = resolve(L_cons)(L_res, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_res); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("parseTok", 2, "parseTok toks groups = withCons toks nil \\h t .\r\n  withToken h toks \\txt pos .\r\n    assoc txt groups\r\n      \\close . parseGroup h t nil close groups\r\n      (or (isTokenStart h '\\n') (isTokenStart h '\\r\\n')) (parseIndent h t nil groups)\r\n        toks", lazy((function(L_toks, L_groups) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_toks, L_nil, lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:646:42'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:646:44'); var ret = resolve(L_withToken)(L_h, L_toks, lazy(function(L_txt){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:648:20'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:648:24'); var ret = resolve(L_assoc)(L_txt, L_groups)(lazy(function(L_close){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:652:7'); var ret = resolve(L_parseGroup)(L_h, L_t, L_nil, L_close, L_groups); L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:654:7'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:654:11'); var ret = resolve(L_isTokenStart)(L_h, "\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:654:33'); var ret = resolve(L_isTokenStart)(L_h, "\r\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseTok:654:58'); var ret = resolve(L_parseIndent)(L_h, L_t, L_nil, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("parseGroup", 5, "parseGroup left toks gr close groups = withCons toks (parseErr 'Unterminated group starting ' (loc left))\r\n  \\h t . isTokenString h close\r\n    eq close ')'\r\n      cons (parensFromToks left h (reverse gr)) t\r\n      cons (cons left (cons (reverse gr) (cons h nil))) t\r\n    withToken h\r\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT .\r\n        parseGroup left restT (cons restH gr) close groups\r\n      \\txt pos .\r\n        rassoc txt groups\r\n          \\open . parseErr (strCat (cons 'Mismatched group: ' (cons (tokenString left) (cons txt (cons ' ' nil))))) (loc left)\r\n          ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseGroup left restT (cons restH gr) close groups", lazy((function(L_left, L_toks, L_gr, L_close, L_groups) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_toks, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:658:54'); var ret = resolve(L_parseErr)("Unterminated group starting ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:658:95'); var ret = resolve(L_loc)(L_left); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:660:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:660:5'); var ret = resolve(L_isTokenString)(L_h, L_close)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:662:4'); var ret = resolve(L_eq)(L_close, ")")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:664:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:664:12'); var ret = resolve(L_parensFromToks)(L_left, L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:664:35'); var ret = resolve(L_reverse)(L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:666:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:666:12'); var ret = resolve(L_cons)(L_left, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:666:23'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:666:29'); var ret = resolve(L_reverse)(L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:666:42'); var ret = resolve(L_cons)(L_h, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:668:4'); var ret = resolve(L_withToken)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:670:6'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:670:16'); var ret = resolve(L_parseTok)(L_toks, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:670:39'); var ret = resolve(L_list)(lazy(function(L_restH){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:670:52'); var ret = function(L_restT){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:670:58'); var ret = resolve(L_parseGroup)(L_left, L_restT, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:672:31'); var ret = resolve(L_cons)(L_restH, L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_close, L_groups); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_txt){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:674:7'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:674:11'); var ret = resolve(L_rassoc)(L_txt, L_groups)(lazy(function(L_open){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:11'); var ret = resolve(L_parseErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:28'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:36'); var ret = resolve(L_cons)("Mismatched group: ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:63'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:69'); var ret = resolve(L_tokenString)(L_left); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:88'); var ret = resolve(L_cons)(L_txt, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:98'); var ret = resolve(L_cons)(" ", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:678:117'); var ret = resolve(L_loc)(L_left); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:680:10'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:680:20'); var ret = resolve(L_parseTok)(L_toks, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:680:43'); var ret = resolve(L_list)(lazy(function(L_restH){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:680:56'); var ret = function(L_restT){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:680:62'); var ret = resolve(L_parseGroup)(L_left, L_restT, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseGroup:680:93'); var ret = resolve(L_cons)(L_restH, L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_close, L_groups); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("parseIndent", 4, "parseIndent indent toks gr groups =\r\n  withCons toks (cons (makeParens (tokenFilepos indent) (lexEnd (head gr)) (reverse gr)) nil)\r\n    \\h t . or (withToken h false (\\txt pos . rassoc txt groups (\\open . true) false))\r\n      and (or (isTokenStart h '\\n') (isTokenStart h '\\r\\n')) (<= (strLen (tokenString h)) (strLen (tokenString indent)))\r\n      cons (makeParens (tokenFilepos indent) (tokenFilepos h) (reverse gr)) toks\r\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseIndent indent restT (cons restH gr) groups", lazy((function(L_indent, L_toks, L_gr, L_groups) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_toks, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:684:17'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:684:23'); var ret = resolve(L_makeParens)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:684:35'); var ret = resolve(L_tokenFilepos)(L_indent); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:684:57'); var ret = resolve(L_lexEnd)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:684:65'); var ret = resolve(L_head)(L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:684:76'); var ret = resolve(L_reverse)(L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:686:5'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:686:7'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:686:15'); var ret = resolve(L_withToken)(L_h, L_false, lazy(function(L_txt){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:686:35'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:686:39'); var ret = resolve(L_rassoc)(L_txt, L_groups)(lazy(function(L_open){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:686:65'); var ret = resolve(L_true); L$setThunkStack(old); return ret;}))(L_false); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:6'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:11'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:15'); var ret = resolve(L_isTokenStart)(L_h, "\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:37'); var ret = resolve(L_isTokenStart)(L_h, "\r\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:62'); var ret = resolve(L_$y$p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:66'); var ret = resolve(L_strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:74'); var ret = resolve(L_tokenString)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:91'); var ret = resolve(L_strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:688:99'); var ret = resolve(L_tokenString)(L_indent); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:690:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:690:12'); var ret = resolve(L_makeParens)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:690:24'); var ret = resolve(L_tokenFilepos)(L_indent); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:690:46'); var ret = resolve(L_tokenFilepos)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:690:63'); var ret = resolve(L_reverse)(L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:692:6'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:692:16'); var ret = resolve(L_parseTok)(L_toks, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:692:39'); var ret = resolve(L_list)(lazy(function(L_restH){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:692:52'); var ret = function(L_restT){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:692:58'); var ret = resolve(L_parseIndent)(L_indent, L_restT, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseIndent:692:92'); var ret = resolve(L_cons)(L_restH, L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_groups); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("nilRange", 0, "nilRange = cons 1 (cons 0 nil)", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'nilRange:704:11'); var ret = resolve(L_cons)(1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'nilRange:704:19'); var ret = resolve(L_cons)(0, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("lit", 2, "lit value range = \\f . f value range", lazy(setDataType((function(L_value, L_range) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lit:705:19'); var ret = resolve(L_f)(L_value)(L_range); L$setThunkStack(old); return ret;}, 'lit');
}), 'lit')))},
    function(){return resolve(L_newDefine)("ref", 2, "ref name range = \\f . f name range", lazy(setDataType((function(L_name, L_range) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'ref:706:18'); var ret = resolve(L_f)(L_name)(L_range); L$setThunkStack(old); return ret;}, 'ref');
}), 'ref')))},
    function(){return resolve(L_newDefine)("lambda", 3, "lambda name body range = \\f . f name body range", lazy(setDataType((function(L_name, L_body, L_range) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lambda:707:26'); var ret = resolve(L_f)(L_name)(L_body)(L_range); L$setThunkStack(old); return ret;}, 'lambda');
}), 'lambda')))},
    function(){return resolve(L_newDefine)("apply", 2, "apply func arg = \\f . f func arg", lazy(setDataType((function(L_func, L_arg) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'apply:708:18'); var ret = resolve(L_f)(L_func)(L_arg); L$setThunkStack(old); return ret;}, 'apply');
}), 'apply')))},
    function(){return resolve(L_newDefine)("let", 4, "let name value body range = \\f . f name value body range", lazy(setDataType((function(L_name, L_value, L_body, L_range) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'let:709:29'); var ret = resolve(L_f)(L_name)(L_value)(L_body)(L_range); L$setThunkStack(old); return ret;}, 'let');
}), 'let')))},
    function(){return resolve(L_newDefine)("anno", 3, "anno name data body = \\f . f name data body", lazy(setDataType((function(L_name, L_data, L_body) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : setType(function(L_f){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'anno:710:23'); var ret = resolve(L_f)(L_name)(L_data)(L_body); L$setThunkStack(old); return ret;}, 'anno');
}), 'anno')))},
    function(){return resolve(L_newDefine)("withParens", 3, "withParens p err cont = isParens p (p cont) err", lazy((function(L_p, L_err, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isParens)(L_p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withParens:712:36'); var ret = resolve(L_p)(L_cont); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_err);
})))},
    function(){return resolve(L_newDefine)("setParens", 2, "setParens p func = isParens p\r\n  p \\start end content . parens start end (func content)\r\n  func p", lazy((function(L_p, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isParens)(L_p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setParens:715:2'); var ret = resolve(L_p)(lazy(function(L_start){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setParens:715:5'); var ret = function(L_end){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setParens:715:11'); var ret = function(L_content){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setParens:715:15'); var ret = resolve(L_parens)(L_start, L_end, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setParens:715:43'); var ret = resolve(L_func)(L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setParens:717:2'); var ret = resolve(L_func)(L_p); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("withStripped", 2, "withStripped list cont = withParens list (cont list) \\start end content . withStripped content cont", lazy((function(L_list, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withParens)(L_list, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withStripped:719:42'); var ret = resolve(L_cont)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_start){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withStripped:719:54'); var ret = function(L_end){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withStripped:719:60'); var ret = function(L_content){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'withStripped:719:64'); var ret = resolve(L_withStripped)(L_content, L_cont); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("position", 1, "position thing = isToken thing (tokenFilepos thing)\r\n  isParens thing (parensStart thing)\r\n    isCons thing\r\n      \\\\\r\n        pos = position (head thing)\r\n        .\r\n        isEmptyPos pos (position (tail thing)) pos\r\n      isFilepos thing thing\r\n        emptyFilePos", lazy(function(L_thing){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:721:9'); var ret = resolve(L_isToken)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:721:32'); var ret = resolve(L_tokenFilepos)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:1:0'); var ret = resolve(L_isParens)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:723:18'); var ret = resolve(L_parensStart)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:1:0'); var ret = resolve(L_isCons)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:1:0'); var ret = (function(){
  var L_pos_0;
  L_pos_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:729:14'); var ret = resolve(L_position)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:729:24'); var ret = resolve(L_head)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isEmptyPos)(L_pos_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:733:24'); var ret = resolve(L_position)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:733:34'); var ret = resolve(L_tail)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_pos_0)})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'position:735:6'); var ret = resolve(L_isFilepos)(L_thing)(L_thing)(L_emptyFilePos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("lexEnd", 1, "lexEnd thing = isToken thing (addFilepos (tokenFilepos thing) (strLen (tokenString thing)))\r\n  isParens thing (parensEnd thing)\r\n    isCons thing (lexEnd (last thing))\r\n      emptyFilePos", lazy(function(L_thing){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:739:7'); var ret = resolve(L_isToken)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:739:30'); var ret = resolve(L_addFilepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:739:42'); var ret = resolve(L_tokenFilepos)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:739:63'); var ret = resolve(L_strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:739:71'); var ret = resolve(L_tokenString)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:741:2'); var ret = resolve(L_isParens)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:741:18'); var ret = resolve(L_parensEnd)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:743:4'); var ret = resolve(L_isCons)(L_thing)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:743:18'); var ret = resolve(L_lexEnd)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lexEnd:743:26'); var ret = resolve(L_last)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_emptyFilePos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("loc", 1, "loc thing = \\\\\r\n  p = position thing\r\n  l = isEmptyPos p 'an unknown location' (showPos p)\r\n  .\r\n  strCat (cons 'at ' (cons l nil))", lazy(function(L_thing){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'loc:747:4'); var ret = (function(){
  var L_p_0, L_l_1;
  L_p_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'loc:749:6'); var ret = resolve(L_position)(L_thing); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_l_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'loc:751:6'); var ret = resolve(L_isEmptyPos)(L_p_0)("an unknown location")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'loc:751:42'); var ret = resolve(L_showPos)(L_p_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'loc:755:10'); var ret = resolve(L_cons)("at ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'loc:755:22'); var ret = resolve(L_cons)(L_l_1, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("scrub", 1, "scrub str = strFromList (scrubList (strToList str))", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrub:757:6'); var ret = resolve(L_strFromList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrub:757:25'); var ret = resolve(L_scrubList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrub:757:36'); var ret = resolve(L_strToList)(L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("scrubList", 1, "scrubList list = list\r\n  \\h t D . \\\\\r\n    next = scrubList t\r\n    .\r\n    eq h '\\\\' (cons h (cons (head t) (scrubList (tail t))))\r\n      eq h '\\\"' (cons '\\\\' (cons '\\\"' next))\r\n        cons h next\r\n  nil", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:759:10'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:761:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:761:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:761:7'); var ret = (function(){
  var L_next_0;
  L_next_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:763:11'); var ret = resolve(L_scrubList)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_eq)(L_h, "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:767:15'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:767:23'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:767:29'); var ret = resolve(L_head)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:767:38'); var ret = resolve(L_scrubList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:767:49'); var ret = resolve(L_tail)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:769:6'); var ret = resolve(L_eq)(L_h, "\"")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:769:17'); var ret = resolve(L_cons)("\\", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:769:28'); var ret = resolve(L_cons)("\"", L_next_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scrubList:771:8'); var ret = resolve(L_cons)(L_h, L_next_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("createAst", 3, "createAst lineStarts inList names = withStripped inList \\list .\r\n  isToken list (createLitOrRef list names)\r\n    list\r\n      \\h t D .\r\n        isTokenString h '\\\\\\\\' (createLet h t names)\r\n          isTokenString h '\\\\@' (createAnno h t names)\r\n            isTokenString h '\\\\' (createLambda h t names)\r\n              createApply list names\r\n      nil", lazy((function(L_lineStarts, L_inList, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withStripped)(L_inList, lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:775:57'); var ret = resolve(L_isToken)(L_list)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:777:16'); var ret = resolve(L_createLitOrRef)(L_list, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:779:4'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:781:7'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:781:9'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:781:11'); var ret = resolve(L_isTokenString)(L_h, "\\\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:783:32'); var ret = resolve(L_createLet)(L_h, L_t, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:785:10'); var ret = resolve(L_isTokenString)(L_h, "\\@")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:785:33'); var ret = resolve(L_createAnno)(L_h, L_t, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:787:12'); var ret = resolve(L_isTokenString)(L_h, "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:787:34'); var ret = resolve(L_createLambda)(L_h, L_t, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAst:789:14'); var ret = resolve(L_createApply)(L_list, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("strMatches", 2, "strMatches str pat = isCons (strMatch str pat)", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isCons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'strMatches:793:29'); var ret = resolve(L_strMatch)(L_str, L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("digit", 0, "digit = regexp '^[0-9]+$'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'digit:795:8'); var ret = resolve(L_regexp)("^[0-9]+$"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("backslashCodes", 0, "backslashCodes = 'bfnrt'", "bfnrt")},
    function(){return resolve(L_newDefine)("backslashValues", 0, "backslashValues = '\\b\\f\\n\\r\\t'", "\b\f\n\r\t")},
    function(){return resolve(L_newDefine)("convertStringEscape", 3, "convertStringEscape char codes values =\r\n  eq codes ''\r\n    char\r\n    eq char (strAt codes 0)\r\n      strAt values 0\r\n      convertStringEscape char (strSubstring codes 1 0) (strSubstring values 1 0)", lazy((function(L_char, L_codes, L_values) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_eq)(L_codes, "")(L_char)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscape:807:4'); var ret = resolve(L_eq)(L_char, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscape:807:13'); var ret = resolve(L_strAt)(L_codes, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscape:809:6'); var ret = resolve(L_strAt)(L_values, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscape:811:6'); var ret = resolve(L_convertStringEscape)(L_char, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscape:811:32'); var ret = resolve(L_strSubstring)(L_codes, 1, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscape:811:57'); var ret = resolve(L_strSubstring)(L_values, 1, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("convertStringEscapes", 3, "convertStringEscapes orig str cont = \\\\\r\n  res = _convertStringEscapes orig str\r\n  .\r\n  hasType res parseErr\r\n    parseErr\r\n    cont res", lazy((function(L_orig, L_str, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_res_0;
  L_res_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscapes:831:8'); var ret = resolve(L__convertStringEscapes)(L_orig, L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_hasType)(L_res_0, L_parseErr)(L_parseErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'convertStringEscapes:839:4'); var ret = resolve(L_cont)(L_res_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("_convertStringEscapes", 2, "_convertStringEscapes orig str =\r\n  eq str '' str\r\n    eq (strAt str 0) '\\\\'\r\n      eq (strLen str) 1 (parseErr \"Error, backslash without character in string: \" orig)\r\n        \\\\\r\n          rest = _convertStringEscapes orig (strSubstring str 2 0)\r\n          .\r\n          hasType rest parseErr\r\n            rest\r\n            strAdd\r\n              convertStringEscape (strAt str 1) backslashCodes backslashValues\r\n              rest\r\n      \\\\\r\n        rest = _convertStringEscapes orig (strSubstring str 1 0)\r\n        .\r\n        hasType rest parseErr\r\n          rest\r\n          strAdd\r\n            strAt str 0\r\n            rest", lazy((function(L_orig, L_str) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_eq)(L_str, "")(L_str)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:1:0'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:845:8'); var ret = resolve(L_strAt)(L_str, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:1:0'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:847:10'); var ret = resolve(L_strLen)(L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 1)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:847:25'); var ret = resolve(L_parseErr)("Error, backslash without character in string: ", L_orig); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:1:0'); var ret = (function(){
  var L_rest_0;
  L_rest_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:851:17'); var ret = resolve(L__convertStringEscapes)(L_orig, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:851:45'); var ret = resolve(L_strSubstring)(L_str, 2, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_hasType)(L_rest_0, L_parseErr)(L_rest_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:859:12'); var ret = resolve(L_strAdd)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:861:14'); var ret = resolve(L_convertStringEscape)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:861:35'); var ret = resolve(L_strAt)(L_str, 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_backslashCodes, L_backslashValues); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_rest_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:1:0'); var ret = (function(){
  var L_rest_0;
  L_rest_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:867:15'); var ret = resolve(L__convertStringEscapes)(L_orig, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:867:43'); var ret = resolve(L_strSubstring)(L_str, 1, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_hasType)(L_rest_0, L_parseErr)(L_rest_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:875:10'); var ret = resolve(L_strAdd)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_convertStringEscapes:877:12'); var ret = resolve(L_strAt)(L_str, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_rest_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("parseString", 2, "parseString str cont =\r\n  neq (strAt str 0) (strAt str -1) (parseErr \"Badly terminated string: \" str)\r\n    convertStringEscapes str (strSubstring str 1 -1) cont", lazy((function(L_str, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_neq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseString:902:7'); var ret = resolve(L_strAt)(L_str, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseString:902:21'); var ret = resolve(L_strAt)(L_str, -1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseString:902:36'); var ret = resolve(L_parseErr)("Badly terminated string: ", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseString:904:4'); var ret = resolve(L_convertStringEscapes)(L_str, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseString:904:30'); var ret = resolve(L_strSubstring)(L_str, 1, -1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_cont); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("createLitOrRef", 2, "createLitOrRef token names = \\\\\r\n  tok = tokenString token\r\n  tokRange = (fileposList (position token))\r\n  .\r\n  contains names tok\r\n    ref tok tokRange\r\n    or (strStartsWith tok '\\\"') (strStartsWith tok \"'\")\r\n      parseString tok \\str . lit str tokRange\r\n      strStartsWith tok '.'\r\n        jsonParse (strCat (cons '0' (cons tok nil))) (\\err . ref tok tokRange) (\\item . lit item tokRange)\r\n        or (and (>= (strAt tok 0) '0') (<= (strAt tok 0) '9')) (strStartsWith tok '-')\r\n          jsonParse tok (\\err . ref tok tokRange) (\\item . lit item tokRange)\r\n          ref tok tokRange", lazy((function(L_token, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_tok_0, L_tokRange_1;
  L_tok_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:908:8'); var ret = resolve(L_tokenString)(L_token); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_tokRange_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:910:14'); var ret = resolve(L_fileposList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:910:27'); var ret = resolve(L_position)(L_token); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_contains)(L_names, L_tok_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:916:4'); var ret = resolve(L_ref)(L_tok_0, L_tokRange_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:918:4'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:918:8'); var ret = resolve(L_strStartsWith)(L_tok_0, "\""); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:918:33'); var ret = resolve(L_strStartsWith)(L_tok_0, "'"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:920:6'); var ret = resolve(L_parseString)(L_tok_0, lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:920:23'); var ret = resolve(L_lit)(L_str, L_tokRange_1); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:922:6'); var ret = resolve(L_strStartsWith)(L_tok_0, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:924:8'); var ret = resolve(L_jsonParse)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:924:19'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:924:27'); var ret = resolve(L_cons)("0", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:924:37'); var ret = resolve(L_cons)(L_tok_0, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:924:55'); var ret = resolve(L_ref)(L_tok_0, L_tokRange_1); L$setThunkStack(old); return ret;}), lazy(function(L_item){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:924:81'); var ret = resolve(L_lit)(L_item, L_tokRange_1); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:8'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:12'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:17'); var ret = resolve(L_$z$p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:21'); var ret = resolve(L_strAt)(L_tok_0, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "0"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:40'); var ret = resolve(L_$y$p)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:44'); var ret = resolve(L_strAt)(L_tok_0, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "9"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:926:64'); var ret = resolve(L_strStartsWith)(L_tok_0, "-"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:928:10'); var ret = resolve(L_jsonParse)(L_tok_0, lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:928:26'); var ret = resolve(L_ref)(L_tok_0, L_tokRange_1); L$setThunkStack(old); return ret;}), lazy(function(L_item){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:928:52'); var ret = resolve(L_lit)(L_item, L_tokRange_1); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLitOrRef:930:10'); var ret = resolve(L_ref)(L_tok_0, L_tokRange_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("createLambda", 3, "createLambda start list names = \\\\\r\n  err = parseErr \"Lambda needs a variable name, a dot, and a body \" (loc start)\r\n  .\r\n  withCons list err \\name rest .\r\n    withToken name err \\n p .\r\n      withCons rest err \\dot body .\r\n        # are these partial applications too hard to read?\r\n        isTokenString dot '.'\r\n          ifNotErr (createAst nil body (cons n names)) \\bodyAst . lambda n bodyAst (fileposList (position name))\r\n          ifNotErr (createLambda start rest (cons n names)) \\bodyAst . lambda n bodyAst (fileposList (position name))", lazy((function(L_start, L_list, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_err_0;
  L_err_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:934:8'); var ret = resolve(L_parseErr)("Lambda needs a variable name, a dot, and a body ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:934:69'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_withCons)(L_list, L_err_0, lazy(function(L_name){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:938:21'); var ret = function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:938:26'); var ret = resolve(L_withToken)(L_name, L_err_0, lazy(function(L_n){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:940:24'); var ret = function(L_p){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:940:26'); var ret = resolve(L_withCons)(L_rest, L_err_0, lazy(function(L_dot){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:942:25'); var ret = function(L_body){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:942:29'); var ret = resolve(L_isTokenString)(L_dot, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:948:10'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:948:20'); var ret = resolve(L_createAst)(L_nil, L_body, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:948:40'); var ret = resolve(L_cons)(L_n, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_bodyAst){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:948:56'); var ret = resolve(L_lambda)(L_n, L_bodyAst, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:948:84'); var ret = resolve(L_fileposList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:948:97'); var ret = resolve(L_position)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:950:10'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:950:20'); var ret = resolve(L_createLambda)(L_start, L_rest, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:950:45'); var ret = resolve(L_cons)(L_n, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_bodyAst){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:950:61'); var ret = resolve(L_lambda)(L_n, L_bodyAst, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:950:89'); var ret = resolve(L_fileposList)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLambda:950:102'); var ret = resolve(L_position)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))})();
})))},
    function(){return resolve(L_newDefine)("createAnno", 3, "createAnno start list names =\r\n  withCons list (parseErr \"No annotation name or data in annotation \" (loc start)) \\name rest .\r\n    withCons rest (parseErr \"No data for annotation \" (loc start)) \\data rest . \\\\\r\n      finish data body = ifNotErr (createAst nil body names) \\bodyAst .\r\n        cleanTokens start name \\name .\r\n          cleanTokens start data \\data .\r\n            anno name data bodyAst\r\n      .\r\n      isTokenString data '.'\r\n        finish nil rest\r\n        withStripped data \\data .\r\n          withCons rest (parseErr \"No body for annotation \" (loc start)) \\dot body .\r\n            isTokenString dot '.'\r\n              finish data body\r\n              parseErr \"Annotation expects dot after name and data \" (loc start)", lazy((function(L_start, L_list, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_list, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:954:17'); var ret = resolve(L_parseErr)("No annotation name or data in annotation ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:954:71'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_name){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:954:84'); var ret = function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:954:89'); var ret = resolve(L_withCons)(L_rest, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:956:19'); var ret = resolve(L_parseErr)("No data for annotation ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:956:55'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_data){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:956:68'); var ret = function(L_rest_0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:956:73'); var ret = (function(){
  var L_finish_1;
  L_finish_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:958:13'); var ret = function(L_data_1){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:958:13'); var ret = function(L_body){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:958:18'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:958:35'); var ret = resolve(L_createAst)(L_nil, L_body, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_bodyAst){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:958:62'); var ret = resolve(L_cleanTokens)(L_start, L_name, lazy(function(L_name_2){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:960:32'); var ret = resolve(L_cleanTokens)(L_start, L_data_1, lazy(function(L_data_3){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:962:34'); var ret = resolve(L_anno)(L_name_2, L_data_3, L_bodyAst); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isTokenString)(L_data, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:970:8'); var ret = resolve(L_finish_1)(L_nil)(L_rest_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:972:8'); var ret = resolve(L_withStripped)(L_data, lazy(function(L_data_2){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:972:27'); var ret = resolve(L_withCons)(L_rest_0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:974:25'); var ret = resolve(L_parseErr)("No body for annotation ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:974:61'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_dot){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:974:74'); var ret = function(L_body){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:974:78'); var ret = resolve(L_isTokenString)(L_dot, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:978:14'); var ret = resolve(L_finish_1)(L_data_2)(L_body); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:980:14'); var ret = resolve(L_parseErr)("Annotation expects dot after name and data ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createAnno:980:70'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("bodyStructPat", 0, "bodyStructPat = regexp '\\\\|\\\\\\\\|\\\\@'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'bodyStructPat:982:16'); var ret = resolve(L_regexp)("\\|\\\\|\\@"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("createApply", 2, "createApply inList names = withStripped inList \\list .\r\n  withCons list (parseErr \"Funcion apply expecting a non-empty list \" (loc inList)) \\h t .\r\n    ifNotErr (createAst nil h names) \\func . chainApply func t names", lazy((function(L_inList, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withStripped)(L_inList, lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:984:48'); var ret = resolve(L_withCons)(L_list, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:986:17'); var ret = resolve(L_parseErr)("Funcion apply expecting a non-empty list ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:986:71'); var ret = resolve(L_loc)(L_inList); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:986:85'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:986:87'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:988:14'); var ret = resolve(L_createAst)(L_nil, L_h, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_func){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createApply:988:38'); var ret = resolve(L_chainApply)(L_func, L_t, L_names); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("blockStarts", 0, "blockStarts = cons '\\\\' (cons '\\\\\\\\' (cons '\\\\@' nil))", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'blockStarts:990:14'); var ret = resolve(L_cons)("\\", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'blockStarts:990:25'); var ret = resolve(L_cons)("\\\\", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'blockStarts:990:38'); var ret = resolve(L_cons)("\\@", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("chainApply", 3, "chainApply func list names = withCons list func \\argItem rest .\r\n  and (isToken argItem) (contains blockStarts (tokenString argItem))\r\n    ifNotErr (createAst nil list names) \\arg . apply func arg\r\n    ifNotErr (createAst nil argItem names) \\arg . chainApply (apply func arg) rest names", lazy((function(L_func, L_list, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_list, L_func, lazy(function(L_argItem){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:992:49'); var ret = function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:992:57'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:994:7'); var ret = resolve(L_isToken)(L_argItem); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:994:25'); var ret = resolve(L_contains)(L_blockStarts, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:994:47'); var ret = resolve(L_tokenString)(L_argItem); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:996:4'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:996:14'); var ret = resolve(L_createAst)(L_nil, L_list, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_arg){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:996:41'); var ret = resolve(L_apply)(L_func, L_arg); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:998:4'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:998:14'); var ret = resolve(L_createAst)(L_nil, L_argItem, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_arg){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:998:44'); var ret = resolve(L_chainApply)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'chainApply:998:62'); var ret = resolve(L_apply)(L_func, L_arg); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_rest, L_names); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("cleanTokens", 3, "cleanTokens start toks cont = isToken toks\r\n  cont (tokenString toks)\r\n  withCons toks (cont toks) \\head tail .\r\n    cleanTokens start head \\head .\r\n      cleanTokens start tail \\tail .\r\n        cont (cons head tail)", lazy((function(L_start, L_toks, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isToken)(L_toks)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1002:2'); var ret = resolve(L_cont)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1002:8'); var ret = resolve(L_tokenString)(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1004:2'); var ret = resolve(L_withCons)(L_toks, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1004:17'); var ret = resolve(L_cont)(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_head){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1004:29'); var ret = function(L_tail){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1004:34'); var ret = resolve(L_cleanTokens)(L_start, L_head, lazy(function(L_head_0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1006:28'); var ret = resolve(L_cleanTokens)(L_start, L_tail, lazy(function(L_tail_1){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1008:30'); var ret = resolve(L_cont)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'cleanTokens:1010:14'); var ret = resolve(L_cons)(L_head_0, L_tail_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("createLet", 3, "createLet start list names = withCons list\r\n  parseErr \"No variable or body for let \" (loc start)\r\n  \\binding body . eq body nil (createAst nil binding names)\r\n    ifNotErr (getLetNames start list names) \\newNames .\r\n      createSublets start binding body newNames", lazy((function(L_start, L_list, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_list, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1014:2'); var ret = resolve(L_parseErr)("No variable or body for let ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1014:43'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_binding){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1016:3'); var ret = function(L_body){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1016:11'); var ret = resolve(L_eq)(L_body, L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1016:31'); var ret = resolve(L_createAst)(L_nil, L_binding, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1018:4'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1018:14'); var ret = resolve(L_getLetNames)(L_start, L_list, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_newNames){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createLet:1018:45'); var ret = resolve(L_createSublets)(L_start, L_binding, L_body, L_newNames); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("getLetNames", 3, "getLetNames start list names = \\\\\r\n  err = parseErr \"Let expected binding \" (loc start)\r\n  .\r\n  withCons list names \\binding body .\r\n    isTokenString binding '.' names\r\n      withParens binding err \\start end def .\r\n        withCons def err \\name rest .\r\n          withToken name err \\str pos .\r\n            getLetNames start body (cons str names)", lazy((function(L_start, L_list, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_err_0;
  L_err_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1024:8'); var ret = resolve(L_parseErr)("Let expected binding ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1024:42'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_withCons)(L_list, L_names, lazy(function(L_binding){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1028:23'); var ret = function(L_body){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1028:31'); var ret = resolve(L_isTokenString)(L_binding, ".")(L_names)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1032:6'); var ret = resolve(L_withParens)(L_binding, L_err_0, lazy(function(L_start){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1032:30'); var ret = function(L_end){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1032:36'); var ret = function(L_def){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1032:40'); var ret = resolve(L_withCons)(L_def, L_err_0, lazy(function(L_name){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1034:26'); var ret = function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1034:31'); var ret = resolve(L_withToken)(L_name, L_err_0, lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1036:30'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1036:34'); var ret = resolve(L_getLetNames)(L_start, L_body, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetNames:1038:36'); var ret = resolve(L_cons)(L_str, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))})();
})))},
    function(){return resolve(L_newDefine)("createSublets", 4, "createSublets start binding body names =\r\n  isTokenString binding '.' (createAst nil body names)\r\n    withCons body (parseErr \"Let expected a body \" (loc start)) \\bodyH bodyT .\r\n      ifNotErr (getNameAndDef (parensStart binding) (parensContent binding) names) \\res . res \\name def .\r\n        ifNotErr (createSublets start bodyH bodyT names) \\bodyAst .\r\n          let (tokenString name) def bodyAst nilRange", lazy((function(L_start, L_binding, L_body, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isTokenString)(L_binding, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1042:29'); var ret = resolve(L_createAst)(L_nil, L_body, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1044:4'); var ret = resolve(L_withCons)(L_body, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1044:19'); var ret = resolve(L_parseErr)("Let expected a body ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1044:52'); var ret = resolve(L_loc)(L_start); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_bodyH){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1044:65'); var ret = function(L_bodyT){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1044:71'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1046:16'); var ret = resolve(L_getNameAndDef)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1046:31'); var ret = resolve(L_parensStart)(L_binding); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1046:53'); var ret = resolve(L_parensContent)(L_binding); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_res){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1046:84'); var ret = resolve(L_res)(lazy(function(L_name){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1046:95'); var ret = function(L_def){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1046:100'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1048:18'); var ret = resolve(L_createSublets)(L_start, L_bodyH, L_bodyT, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_bodyAst){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1048:58'); var ret = resolve(L_let)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createSublets:1050:15'); var ret = resolve(L_tokenString)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_def, L_bodyAst, L_nilRange); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("getNameAndDef", 3, "getNameAndDef pos binding names =\r\n  withCons (tail binding) (parseErr \"Let expected binding at \" pos) \\snd sndT .\r\n    isTokenString snd '=' (ifNotErr (createAst nil sndT names) \\def . cons (head binding) def)\r\n      ifNotErr (getLetLambda pos (tail binding) nil names) \\lamb . cons (head binding) lamb", lazy((function(L_pos, L_binding, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1054:12'); var ret = resolve(L_tail)(L_binding); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1054:27'); var ret = resolve(L_parseErr)("Let expected binding at ", L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_snd){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1054:69'); var ret = function(L_sndT){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1054:73'); var ret = resolve(L_isTokenString)(L_snd, "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1056:27'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1056:37'); var ret = resolve(L_createAst)(L_nil, L_sndT, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_def){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1056:64'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1056:76'); var ret = resolve(L_head)(L_binding); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_def); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1058:6'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1058:16'); var ret = resolve(L_getLetLambda)(L_pos, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1058:34'); var ret = resolve(L_tail)(L_binding); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_lamb){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1058:60'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getNameAndDef:1058:73'); var ret = resolve(L_head)(L_binding); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_lamb); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("getLetLambda", 4, "getLetLambda pos def args names =\r\n  withCons def (parseErr \"Let expected binding at \" pos) \\arg rest .\r\n    not (isToken arg) (parseErr \"Let expected binding at \" pos)\r\n      isTokenString arg '='\r\n        createAst nil (cons (token '\\\\' pos) (append (reverse args) (cons (token '.' (position arg)) rest))) names\r\n        getLetLambda pos rest (cons arg args) names", lazy((function(L_pos, L_def, L_args, L_names) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_def, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1062:16'); var ret = resolve(L_parseErr)("Let expected binding at ", L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_arg){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1062:58'); var ret = function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1062:62'); var ret = resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1064:9'); var ret = resolve(L_isToken)(L_arg); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1064:23'); var ret = resolve(L_parseErr)("Let expected binding at ", L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1066:6'); var ret = resolve(L_isTokenString)(L_arg, "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:8'); var ret = resolve(L_createAst)(L_nil, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:23'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:29'); var ret = resolve(L_token)("\\", L_pos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:46'); var ret = resolve(L_append)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:54'); var ret = resolve(L_reverse)(L_args); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:69'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:75'); var ret = resolve(L_token)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1068:86'); var ret = resolve(L_position)(L_arg); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1070:8'); var ret = resolve(L_getLetLambda)(L_pos, L_rest, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getLetLambda:1070:31'); var ret = resolve(L_cons)(L_arg, L_args); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("countedScanLineG", 7, "countedScanLineG lineStarts str pat groups props onDef onExpr = \\\\\r\n  toks = countedTokens lineStarts str pat\r\n  groupToks = foldr (\\el value . el \\h t . cons h (cons t value)) (cons '=' blockStarts) groups\r\n  .\r\n  # check if it's a definition\r\n  find (\\tok . or (contains groupToks (tokenString tok)) (isCons (strMatch (tokenString tok) '^\\r?\\n'))) toks (\\item . isTokenString item '=') false\r\n    toks \\name rest . \\\\\r\n      parseIt func = \\\\\r\n        parsed = parseToks (checkSetDataType func rest name) groups\r\n        .\r\n        onDef (ifNotErr parsed \\list . createDef list name (arity rest 0) str props)\r\n      .\r\n      isTokenString (head rest) '='\r\n        isTokenString (head (tail rest)) '\\\\'\r\n          parseIt (setTypeAnno (tail rest) (tokenString name))\r\n          parseIt (tail rest)\r\n        ifNotErr (transformDef name rest) \\def .\r\n          parseIt (cons (token '\\\\' (addFilepos (position (head rest)) -1)) def)\r\n    ifNotErr (parseToks toks groups) \\list . onExpr list", lazy((function(L_lineStarts, L_str, L_pat, L_groups, L_props, L_onDef, L_onExpr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_toks_0, L_groupToks_1;
  L_toks_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1080:9'); var ret = resolve(L_countedTokens)(L_lineStarts, L_str, L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_groupToks_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:14'); var ret = resolve(L_foldr)(lazy(function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:22'); var ret = function(L_value){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:25'); var ret = resolve(L_el)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:37'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:39'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:51'); var ret = resolve(L_cons)(L_t, L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1082:67'); var ret = resolve(L_cons)("=", L_blockStarts); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_find)(lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:9'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:19'); var ret = resolve(L_contains)(L_groupToks_1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:39'); var ret = resolve(L_tokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:58'); var ret = resolve(L_isCons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:66'); var ret = resolve(L_strMatch)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:76'); var ret = resolve(L_tokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "^\r?\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}), L_toks_0)(lazy(function(L_item){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1088:112'); var ret = resolve(L_isTokenString)(L_item, "="); L$setThunkStack(old); return ret;}))(L_false)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1090:4'); var ret = resolve(L_toks_0)(lazy(function(L_name){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1090:10'); var ret = function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1090:15'); var ret = (function(){
  var L_parseIt_2;
  L_parseIt_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1092:14'); var ret = function(L_func){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1092:14'); var ret = (function(){
  var L_parsed_2;
  L_parsed_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1094:17'); var ret = resolve(L_parseToks)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1094:28'); var ret = resolve(L_checkSetDataType)(L_func, L_rest, L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_onDef)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1098:15'); var ret = resolve(L_ifNotErr)(L_parsed_2, lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1098:32'); var ret = resolve(L_createDef)(L_list, L_name, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1098:60'); var ret = resolve(L_arity)(L_rest, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_str, L_props); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1102:21'); var ret = resolve(L_head)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1104:8'); var ret = resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1104:23'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1104:29'); var ret = resolve(L_tail)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1106:10'); var ret = resolve(L_parseIt_2)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1106:19'); var ret = resolve(L_setTypeAnno)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1106:32'); var ret = resolve(L_tail)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1106:44'); var ret = resolve(L_tokenString)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1108:10'); var ret = resolve(L_parseIt_2)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1108:19'); var ret = resolve(L_tail)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1110:8'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1110:18'); var ret = resolve(L_transformDef)(L_name, L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_def){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1110:43'); var ret = resolve(L_parseIt_2)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1112:19'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1112:25'); var ret = resolve(L_token)("\\", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1112:37'); var ret = resolve(L_addFilepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1112:49'); var ret = resolve(L_position)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1112:59'); var ret = resolve(L_head)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), -1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_def); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1114:4'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1114:14'); var ret = resolve(L_parseToks)(L_toks_0, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineG:1114:38'); var ret = resolve(L_onExpr)(L_list); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("scanLineG", 5, "scanLineG str pat groups onDef onExpr = countedScanLineG emptyLineStarts str pat groups nil onDef onExpr", lazy((function(L_str, L_pat, L_groups, L_onDef, L_onExpr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_countedScanLineG)(L_emptyLineStarts, L_str, L_pat, L_groups, L_nil, L_onDef, L_onExpr);
})))},
    function(){return resolve(L_newDefine)("parseLineG", 6, "parseLineG str pat names groups onDef onExpr = \\\\\r\n  astCallback cb = \\list . ifNotErr (createAst nil list names) \\ast . cb ast\r\n  .\r\n  scanLineG str pat groups (astCallback onDef) (astCallback onExpr)", lazy((function(L_str, L_pat, L_names, L_groups, L_onDef, L_onExpr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_astCallback_0;
  L_astCallback_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1120:14'); var ret = function(L_cb){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1120:14'); var ret = function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1120:20'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1120:37'); var ret = resolve(L_createAst)(L_nil, L_list, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_ast){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1120:64'); var ret = resolve(L_cb)(L_ast); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_scanLineG)(L_str, L_pat, L_groups, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1124:28'); var ret = resolve(L_astCallback_0)(L_onDef); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineG:1124:48'); var ret = resolve(L_astCallback_0)(L_onExpr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("transformDef", 2, "transformDef name toks = withCons toks (parseErr \"Bad definition, expecting tokens\" (loc name)) \\h t .\r\n  isTokenString h '='\r\n    isTokenString (head t) '\\\\'\r\n      cons (token '.' (position h)) (setTypeAnno t (tokenString name))\r\n      cons (token '.' (position h)) t\r\n    ifNotErr (transformDef name t) \\list . cons h list", lazy((function(L_name, L_toks) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_toks, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1126:40'); var ret = resolve(L_parseErr)("Bad definition, expecting tokens", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1126:85'); var ret = resolve(L_loc)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1126:97'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1126:99'); var ret = resolve(L_isTokenString)(L_h, "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1130:4'); var ret = resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1130:19'); var ret = resolve(L_head)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1132:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1132:12'); var ret = resolve(L_token)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1132:23'); var ret = resolve(L_position)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1132:37'); var ret = resolve(L_setTypeAnno)(L_t, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1132:52'); var ret = resolve(L_tokenString)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1134:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1134:12'); var ret = resolve(L_token)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1134:23'); var ret = resolve(L_position)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1136:4'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1136:14'); var ret = resolve(L_transformDef)(L_name, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'transformDef:1136:36'); var ret = resolve(L_cons)(L_h, L_list); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("setTypeAnno", 2, "setTypeAnno toks name = \\\\\r\n  tok = \\str . token str (position toks)\r\n  .\r\n  cons (tok '\\\\@') (cons (tok 'type') (cons (tok name) (cons (tok '.') toks)))", lazy((function(L_toks, L_name) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_tok_0;
  L_tok_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1140:9'); var ret = function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1140:9'); var ret = resolve(L_token)(L_str, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1140:26'); var ret = resolve(L_position)(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:8'); var ret = resolve(L_tok_0)("\\@"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:20'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:26'); var ret = resolve(L_tok_0)("type"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:39'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:45'); var ret = resolve(L_tok_0)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:56'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setTypeAnno:1144:62'); var ret = resolve(L_tok_0)("."); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("setDataTypeAnno", 2, "setDataTypeAnno toks name = \\\\\r\n  tok = \\str . token str (position toks)\r\n  .\r\n  cons (tok '\\\\@') (cons (tok 'dataType') (cons (tok (tokenString name)) (cons (tok '.') toks)))", lazy((function(L_toks, L_name) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_tok_0;
  L_tok_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1148:9'); var ret = function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1148:9'); var ret = resolve(L_token)(L_str, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1148:26'); var ret = resolve(L_position)(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:8'); var ret = resolve(L_tok_0)("\\@"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:20'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:26'); var ret = resolve(L_tok_0)("dataType"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:43'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:49'); var ret = resolve(L_tok_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:54'); var ret = resolve(L_tokenString)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:74'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setDataTypeAnno:1152:80'); var ret = resolve(L_tok_0)("."); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("createDef", 5, "createDef def name arity src props = \\\\\r\n  #tok str = token str (position def)\r\n  tok str = token str (position name)\r\n  .\r\n  jsonStringify (tokenString name) (\\err . parseErr (strCat (cons \"Bad function name \" (cons (loc name) nil))) err) \\nameStr .\r\n    jsonStringify src (\\err . parseErr (strCat (cons \"Bad source \" (cons (loc name) nil))) err) \\srcStr .\r\n      #cons '\\\\@' (cons 'leisureName' (cons (tokenString name) (cons '.' (cons (tok 'define') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons (spliceFuncProps arity props def) nil))))))))\r\n      cons '\\\\@' (cons 'leisureName' (cons (tokenString name) (cons '.' (cons (tok 'newDefine') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons '\\\\@' (cons 'arity' (cons arity (cons '.' (cons (spliceFuncProps arity props def) nil))))))))))))", lazy((function(L_def, L_name, L_arity, L_src, L_props) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_tok_0;
  L_tok_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1158:6'); var ret = function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1158:6'); var ret = resolve(L_token)(L_str, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1158:23'); var ret = resolve(L_position)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_jsonStringify)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:17'); var ret = resolve(L_tokenString)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:37'); var ret = resolve(L_parseErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:53'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:61'); var ret = resolve(L_cons)("Bad function name ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:88'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:94'); var ret = resolve(L_loc)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_err); L$setThunkStack(old); return ret;}), lazy(function(L_nameStr){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1162:117'); var ret = resolve(L_jsonStringify)(L_src, lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1164:24'); var ret = resolve(L_parseErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1164:40'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1164:48'); var ret = resolve(L_cons)("Bad source ", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1164:68'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1164:74'); var ret = resolve(L_loc)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_err); L$setThunkStack(old); return ret;}), lazy(function(L_srcStr){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1164:97'); var ret = resolve(L_cons)("\\@", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:18'); var ret = resolve(L_cons)("leisureName", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:38'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:44'); var ret = resolve(L_tokenString)(L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:63'); var ret = resolve(L_cons)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:73'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:79'); var ret = resolve(L_tok_0)("newDefine"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:97'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:103'); var ret = resolve(L_tok_0)(L_nameStr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:117'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:123'); var ret = resolve(L_tok_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:128'); var ret = resolve(L_strString)(L_arity); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:147'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:153'); var ret = resolve(L_tok_0)(L_srcStr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:166'); var ret = resolve(L_cons)("\\@", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:178'); var ret = resolve(L_cons)("arity", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:192'); var ret = resolve(L_cons)(L_arity, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:204'); var ret = resolve(L_cons)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:214'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'createDef:1168:220'); var ret = resolve(L_spliceFuncProps)(L_arity, L_props, L_def); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))})();
})))},
    function(){return resolve(L_newDefine)("spliceFuncProps", 3, "spliceFuncProps arity props ast = or (isNil props) (== arity 0)\r\n  ast\r\n  subSpliceFuncProps props ast", lazy((function(L_arity, L_props, L_ast) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'spliceFuncProps:1170:38'); var ret = resolve(L_isNil)(L_props); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'spliceFuncProps:1170:52'); var ret = resolve(L_$p$p)(L_arity, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_ast)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'spliceFuncProps:1174:2'); var ret = resolve(L_subSpliceFuncProps)(L_props, L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("subSpliceFuncProps", 2, "subSpliceFuncProps props ast = \\\\\r\n  slash = head ast\r\n  var = head (tail ast)\r\n  afterVar = tail (tail ast)\r\n  dot = head afterVar\r\n  body = tail afterVar\r\n  .\r\n  isTokenString slash '\\\\'\r\n    cons\r\n      slash\r\n      cons\r\n        var\r\n        isTokenString dot '.'\r\n          cons dot (addProps props body)\r\n          cons '.' (addProps props afterVar)\r\n    cons\r\n      head ast\r\n      subSpliceFuncProps props (tail ast)", lazy((function(L_props, L_ast) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_slash_0, L_var_1, L_afterVar_2, L_dot_3, L_body_4;
  L_slash_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1178:10'); var ret = resolve(L_head)(L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_var_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1180:8'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1180:14'); var ret = resolve(L_tail)(L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_afterVar_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1182:13'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1182:19'); var ret = resolve(L_tail)(L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_dot_3 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1184:8'); var ret = resolve(L_head)(L_afterVar_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_body_4 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1186:9'); var ret = resolve(L_tail)(L_afterVar_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isTokenString)(L_slash_0, "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1192:4'); var ret = resolve(L_cons)(L_slash_0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1196:6'); var ret = resolve(L_cons)(L_var_1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1200:8'); var ret = resolve(L_isTokenString)(L_dot_3, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1202:10'); var ret = resolve(L_cons)(L_dot_3, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1202:20'); var ret = resolve(L_addProps)(L_props, L_body_4); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1204:10'); var ret = resolve(L_cons)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1204:20'); var ret = resolve(L_addProps)(L_props, L_afterVar_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1206:4'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1208:6'); var ret = resolve(L_head)(L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1210:6'); var ret = resolve(L_subSpliceFuncProps)(L_props, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'subSpliceFuncProps:1210:32'); var ret = resolve(L_tail)(L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("addProps", 2, "addProps props ast = foldr\r\n  \\prop result . cons '\\\\@' (cons (head prop) (cons (tail prop) (cons '.' result)))\r\n  ast\r\n  props", lazy((function(L_props, L_ast) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_foldr)(lazy(function(L_prop){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:3'); var ret = function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:8'); var ret = resolve(L_cons)("\\@", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:29'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:35'); var ret = resolve(L_head)(L_prop); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:47'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:53'); var ret = resolve(L_tail)(L_prop); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addProps:1214:65'); var ret = resolve(L_cons)(".", L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_ast, L_props);
})))},
    function(){return resolve(L_newDefine)("checkSetDataType", 3, "checkSetDataType toks curToks name = withCons curToks toks \\h t .\r\n  isTokenString h '='\r\n    isTokenString (head t) '\\\\'\r\n      setDataTypeAnno toks name\r\n      toks\r\n    checkSetDataType toks t name", lazy((function(L_toks, L_curToks, L_name) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_withCons)(L_curToks, L_toks, lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'checkSetDataType:1220:60'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'checkSetDataType:1220:62'); var ret = resolve(L_isTokenString)(L_h, "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'checkSetDataType:1224:4'); var ret = resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'checkSetDataType:1224:19'); var ret = resolve(L_head)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'checkSetDataType:1226:6'); var ret = resolve(L_setDataTypeAnno)(L_toks, L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'checkSetDataType:1230:4'); var ret = resolve(L_checkSetDataType)(L_toks, L_t, L_name); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("arity", 2, "arity toks n = isTokenString (head toks) '=' n (arity (tail toks) (+ n 1))", lazy((function(L_toks, L_n) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'arity:1232:30'); var ret = resolve(L_head)(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "=")(L_n)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'arity:1232:48'); var ret = resolve(L_arity)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'arity:1232:55'); var ret = resolve(L_tail)(L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'arity:1232:67'); var ret = resolve(L_$o)(L_n, 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("tokListStr", 1, "tokListStr toks = jsonStringify (join (map (\\t . tokenString t) toks) ' ')", lazy(function(L_toks){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokListStr:1234:11'); var ret = resolve(L_jsonStringify)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokListStr:1234:33'); var ret = resolve(L_join)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokListStr:1234:39'); var ret = resolve(L_map)(lazy(function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokListStr:1234:45'); var ret = resolve(L_tokenString)(L_t); L$setThunkStack(old); return ret;}), L_toks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), " "); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("linePat", 0, "linePat = regexp '\\\\r?\\\\n(?=[^ ]|$)'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'linePat:1236:10'); var ret = resolve(L_regexp)("\\r?\\n(?=[^ ]|$)"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("emptyLinePat", 0, "emptyLinePat = regexp '(^[ \\\\i]*\\\\#.*|^[ \\\\i]*$|^\\\\r?\\\\n[ \\\\i]*$)'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'emptyLinePat:1238:15'); var ret = resolve(L_regexp)("(^[ \\i]*\\#.*|^[ \\i]*$|^\\r?\\n[ \\i]*$)"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("lineScrub", 0, "lineScrub = regexpFlags '\\\\r\\\\n' 'g'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'lineScrub:1240:12'); var ret = resolve(L_regexpFlags)("\\r\\n", "g"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("linesForFile", 1, "linesForFile text = map tail (countedLinesForFile \"NOTHING.lsr\" text)", lazy(function(L_text){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'linesForFile:1251:13'); var ret = resolve(L_map)(L_tail, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'linesForFile:1251:30'); var ret = resolve(L_countedLinesForFile)("NOTHING.lsr", L_text); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("countedLinesForFile", 2, "countedLinesForFile name text = filter\r\n  \\line . isNil (strMatch (tail line) emptyLinePat)\r\n  countedLines name 1 text", lazy((function(L_name, L_text) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_filter)(lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedLinesForFile:1255:3'); var ret = resolve(L_isNil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedLinesForFile:1255:17'); var ret = resolve(L_strMatch)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedLinesForFile:1255:27'); var ret = resolve(L_tail)(L_line); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_emptyLinePat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedLinesForFile:1257:2'); var ret = resolve(L_countedLines)(L_name, 1, L_text); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("countedLines", 3, "countedLines filename lineOffset str = reverse\r\n  withRecur\r\n    _countedLines filename lineOffset str nil", lazy((function(L_filename, L_lineOffset, L_str) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_reverse)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedLines:1276:2'); var ret = resolve(L_withRecur)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedLines:1278:4'); var ret = resolve(L__countedLines)(L_filename, L_lineOffset, L_str, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("_countedLines", 4, "_countedLines filename lineOffset str lines = \\\\\r\n  m = strMatch str linePat\r\n  idx = head (tail (tail m))\r\n  chunk = strSubstring str 0 idx\r\n  next = + idx (strLen (head m))\r\n  chunkLines = findLines 0 chunk\r\n  .\r\n  eq str ''\r\n    lines\r\n    isNil m\r\n      cons (cons (cons filename (cons lineOffset (tail (findLines 0 str)))) str) lines\r\n      recur\r\n        _countedLines filename (+ lineOffset (length chunkLines)) (strSubstring str next 0)\r\n          cons (cons (cons filename (cons lineOffset (tail chunkLines))) chunk) lines", lazy((function(L_filename, L_lineOffset, L_str, L_lines) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_m_0, L_idx_1, L_chunk_2, L_next_3, L_chunkLines_4;
  L_m_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1282:6'); var ret = resolve(L_strMatch)(L_str, L_linePat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_idx_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1284:8'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1284:14'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1284:20'); var ret = resolve(L_tail)(L_m_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_chunk_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1286:10'); var ret = resolve(L_strSubstring)(L_str, 0, L_idx_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_next_3 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1288:9'); var ret = resolve(L_$o)(L_idx_1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1288:16'); var ret = resolve(L_strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1288:24'); var ret = resolve(L_head)(L_m_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_chunkLines_4 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1290:15'); var ret = resolve(L_findLines)(0, L_chunk_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_eq)(L_str, "")(L_lines)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1298:4'); var ret = resolve(L_isNil)(L_m_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1300:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1300:12'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1300:18'); var ret = resolve(L_cons)(L_filename, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1300:33'); var ret = resolve(L_cons)(L_lineOffset, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1300:50'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1300:56'); var ret = resolve(L_findLines)(0, L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_lines); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1302:6'); var ret = resolve(L_recur)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1304:8'); var ret = resolve(L__countedLines)(L_filename, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1304:32'); var ret = resolve(L_$o)(L_lineOffset, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1304:46'); var ret = resolve(L_length)(L_chunkLines_4); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1304:67'); var ret = resolve(L_strSubstring)(L_str, L_next_3, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1306:10'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1306:16'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1306:22'); var ret = resolve(L_cons)(L_filename, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1306:37'); var ret = resolve(L_cons)(L_lineOffset, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), '_countedLines:1306:54'); var ret = resolve(L_tail)(L_chunkLines_4); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_chunk_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_lines); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("defPat", 0, "defPat = regexp '^[^ =]+.* =( |$)'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defPat:1308:9'); var ret = resolve(L_regexp)("^[^ =]+.* =( |$)"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("unanchoredDefPat", 0, "unanchoredDefPat = regexp '^((?:\\\\s*\\\\n|#[^\\\\n]*\\\\n)*)([^=\\\\n]*)(=\\\\([^=]+=|=)?'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'unanchoredDefPat:1312:19'); var ret = resolve(L_regexp)("^((?:\\s*\\n|#[^\\n]*\\n)*)([^=\\n]*)(=\\([^=]+=|=)?"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("namesForLines", 1, "namesForLines lines = foldl\r\n  \\result line . \\\\\r\n    m = strMatch line defPat\r\n    .\r\n    isNil m result (cons (head (tail m)) result)\r\n  nil\r\n  lines", lazy(function(L_lines){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1314:14'); var ret = resolve(L_foldl)(lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1316:3'); var ret = function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1316:10'); var ret = (function(){
  var L_m_0;
  L_m_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1318:8'); var ret = resolve(L_strMatch)(L_line, L_defPat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isNil)(L_m_0)(L_result)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1322:20'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1322:26'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'namesForLines:1322:32'); var ret = resolve(L_tail)(L_m_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_nil, L_lines); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("runParseFilters", 2, "runParseFilters filters line = filters\r\n  \\h t D . primBind (h line) \\filtered . runParseFilters t filtered\r\n  fakereturn line", lazy((function(L_filters, L_line) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_filters)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runParseFilters:1337:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runParseFilters:1337:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runParseFilters:1337:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runParseFilters:1337:21'); var ret = resolve(L_h)(L_line); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_filtered){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runParseFilters:1337:30'); var ret = resolve(L_runParseFilters)(L_t, L_filtered); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runParseFilters:1339:2'); var ret = resolve(L_fakereturn)(L_line); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("isBlockStart", 1, "isBlockStart tok = and\r\n  or (isToken tok) (isString tok)\r\n  contains blockStarts (strTokenString tok)", lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isBlockStart:1341:13'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isBlockStart:1343:2'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isBlockStart:1343:6'); var ret = resolve(L_isToken)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isBlockStart:1343:20'); var ret = resolve(L_isString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isBlockStart:1345:2'); var ret = resolve(L_contains)(L_blockStarts, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isBlockStart:1345:24'); var ret = resolve(L_strTokenString)(L_tok); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("macroSub", 2, "macroSub macs expr = postProcessMacro (emptyFor expr) (emptyFor expr) (baseMacroSub macs expr)", lazy((function(L_macs, L_expr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_postProcessMacro)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSub:1349:39'); var ret = resolve(L_emptyFor)(L_expr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSub:1349:55'); var ret = resolve(L_emptyFor)(L_expr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSub:1349:71'); var ret = resolve(L_baseMacroSub)(L_macs, L_expr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("consifyMacroValue", 1, "consifyMacroValue value = isCons value value (cons value nil)", lazy(function(L_value){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'consifyMacroValue:1351:18'); var ret = resolve(L_isCons)(L_value)(L_value)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'consifyMacroValue:1351:46'); var ret = resolve(L_cons)(L_value, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("baseMacroSub", 2, "baseMacroSub macs expr = isToken expr\r\n  expr\r\n  isParens expr\r\n    expr \\start end content . \\\\\r\n      result = baseMacroSub macs content\r\n      .\r\n      isToken result result (parens start end result)\r\n    withCons expr expr \\h t .\r\n      isBlockStart h\r\n        cons h\r\n          isTokenString h '\\\\\\\\'\r\n            macroSubLet macs t\r\n            macroSubBody '.' macs t\r\n        withToken h\r\n          \\\\\r\n            subH = baseMacroSub macs h\r\n            .\r\n            withToken subH\r\n              cons subH (map (baseMacroSub macs) t)\r\n              \\tok pos . baseMacroSub macs (cons subH t)\r\n          \\tok pos . assoc tok macs\r\n            \\def . baseMacroSub macs (def t)\r\n            cons h (map (baseMacroSub macs) t)", lazy((function(L_macs, L_expr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isToken)(L_expr)(L_expr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1357:2'); var ret = resolve(L_isParens)(L_expr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1359:4'); var ret = resolve(L_expr)(lazy(function(L_start){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1359:10'); var ret = function(L_end){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1359:16'); var ret = function(L_content){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1359:20'); var ret = (function(){
  var L_result_0;
  L_result_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1361:15'); var ret = resolve(L_baseMacroSub)(L_macs, L_content); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isToken)(L_result_0)(L_result_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1365:29'); var ret = resolve(L_parens)(L_start, L_end, L_result_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1367:4'); var ret = resolve(L_withCons)(L_expr, L_expr, lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1367:24'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1367:26'); var ret = resolve(L_isBlockStart)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1371:8'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1373:10'); var ret = resolve(L_isTokenString)(L_h, "\\\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1375:12'); var ret = resolve(L_macroSubLet)(L_macs, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1377:12'); var ret = resolve(L_macroSubBody)(".", L_macs, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1:0'); var ret = resolve(L_withToken)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1:0'); var ret = (function(){
  var L_subH_0;
  L_subH_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1383:19'); var ret = resolve(L_baseMacroSub)(L_macs, L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_withToken)(L_subH_0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1389:14'); var ret = resolve(L_cons)(L_subH_0, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1389:25'); var ret = resolve(L_map)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1389:30'); var ret = resolve(L_baseMacroSub)(L_macs); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1391:15'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1391:19'); var ret = resolve(L_baseMacroSub)(L_macs, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1391:44'); var ret = resolve(L_cons)(L_subH_0, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tok){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1393:11'); var ret = function(L_pos){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1393:15'); var ret = resolve(L_assoc)(L_tok, L_macs)(lazy(function(L_def){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1395:13'); var ret = resolve(L_baseMacroSub)(L_macs, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1395:38'); var ret = resolve(L_def)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1397:12'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1397:20'); var ret = resolve(L_map)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseMacroSub:1397:25'); var ret = resolve(L_baseMacroSub)(L_macs); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("macroSubLet", 2, "macroSubLet macs list = list\r\n  \\h t D . isTokenString h '.'\r\n    cons h (baseMacroSub macs t)\r\n    cons (setParens h \\content . macroSubBody '=' macs content) (macroSubLet macs t)\r\n  # Don't bother with parse errors at this point -- ast generator will detect them\r\n  nil", lazy((function(L_macs, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1401:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1401:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1401:7'); var ret = resolve(L_isTokenString)(L_h, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1403:4'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1403:12'); var ret = resolve(L_baseMacroSub)(L_macs, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1405:4'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1405:10'); var ret = resolve(L_setParens)(L_h, lazy(function(L_content){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1405:23'); var ret = resolve(L_macroSubBody)("=", L_macs, L_content); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubLet:1405:65'); var ret = resolve(L_macroSubLet)(L_macs, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("macroSubBody", 3, "macroSubBody char macs list = list\r\n  \\h t D . cons h\r\n    isTokenString h char baseMacroSub (macroSubBody char)\r\n      macs\r\n      t\r\n  nil", lazy((function(L_char, L_macs, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubBody:1413:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubBody:1413:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubBody:1413:7'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubBody:1415:4'); var ret = resolve(L_isTokenString)(L_h, L_char)(L_baseMacroSub)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubBody:1415:39'); var ret = resolve(L_macroSubBody)(L_char); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_macs)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("postProcessMacro", 3, "postProcessMacro before after expr = isString expr\r\n  token expr (isEmptyPos after before after)\r\n  isParens expr\r\n    expr \\start end contents . parens start end (postProcessMacro start end contents)\r\n    isCons expr\r\n      expr \\h t .\r\n        isToken h\r\n          cons h (postProcessMacro (addFilepos (addFilepos (tokenFilepos h) (strLen (tokenString h))) 1) (emptyFor h) t)\r\n          \\\\\r\n            posStart = position h\r\n            posEnd = position t\r\n            t2 = postProcessMacro (emptyFor posStart) after t\r\n            h2 = postProcessMacro before (emptyFor posStart) h\r\n            .\r\n            isEmptyPos posStart\r\n              cons (postProcessMacro before (position t2) h) t2\r\n              cons h2 (postProcessMacro (addFilepos (lexEnd h2) 1) after t)\r\n      isNumber expr\r\n        token (strString expr) (isEmptyPos after before after)\r\n        expr", lazy((function(L_before, L_after, L_expr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isString)(L_expr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1425:2'); var ret = resolve(L_token)(L_expr, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1425:14'); var ret = resolve(L_isEmptyPos)(L_after)(L_before)(L_after); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1427:2'); var ret = resolve(L_isParens)(L_expr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1429:4'); var ret = resolve(L_expr)(lazy(function(L_start){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1429:10'); var ret = function(L_end){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1429:16'); var ret = function(L_contents){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1429:20'); var ret = resolve(L_parens)(L_start, L_end, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1429:49'); var ret = resolve(L_postProcessMacro)(L_start, L_end, L_contents); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1431:4'); var ret = resolve(L_isCons)(L_expr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1433:6'); var ret = resolve(L_expr)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1433:12'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1433:14'); var ret = resolve(L_isToken)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:10'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:18'); var ret = resolve(L_postProcessMacro)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:36'); var ret = resolve(L_addFilepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:48'); var ret = resolve(L_addFilepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:60'); var ret = resolve(L_tokenFilepos)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:77'); var ret = resolve(L_strLen)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:85'); var ret = resolve(L_tokenString)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1437:106'); var ret = resolve(L_emptyFor)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1:0'); var ret = (function(){
  var L_posStart_0, L_posEnd_1, L_t2_2, L_h2_3;
  L_posStart_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1441:23'); var ret = resolve(L_position)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_posEnd_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1443:21'); var ret = resolve(L_position)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_t2_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1445:17'); var ret = resolve(L_postProcessMacro)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1445:35'); var ret = resolve(L_emptyFor)(L_posStart_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_after, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_h2_3 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1447:17'); var ret = resolve(L_postProcessMacro)(L_before, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1447:42'); var ret = resolve(L_emptyFor)(L_posStart_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isEmptyPos)(L_posStart_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1453:14'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1453:20'); var ret = resolve(L_postProcessMacro)(L_before, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1453:45'); var ret = resolve(L_position)(L_t2_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t2_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1455:14'); var ret = resolve(L_cons)(L_h2_3, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1455:23'); var ret = resolve(L_postProcessMacro)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1455:41'); var ret = resolve(L_addFilepos)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1455:53'); var ret = resolve(L_lexEnd)(L_h2_3); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_after, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1457:6'); var ret = resolve(L_isNumber)(L_expr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1459:8'); var ret = resolve(L_token)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1459:15'); var ret = resolve(L_strString)(L_expr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'postProcessMacro:1459:32'); var ret = resolve(L_isEmptyPos)(L_after)(L_before)(L_after); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_expr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("defMacro", 2, "defMacro name def = primBind (getValue 'macroDefs')\r\n  \\macs . setValue 'macroDefs' (acons name def macs)", lazy((function(L_name, L_def) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defMacro:1463:30'); var ret = resolve(L_getValue)("macroDefs"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_macs){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defMacro:1465:3'); var ret = resolve(L_setValue)("macroDefs", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defMacro:1465:32'); var ret = resolve(L_acons)(L_name, L_def, L_macs); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("delimiterListPrefix", 0, "delimiterListPrefix = \"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"|'(?:\\\\\\\\.|[^'])*'|\\\\r?\\\\n *#[^\\\\r\\\\n]*|\\\\r?\\\\n *| +|#[^\\\\r\\\\n]*\"", "\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\r?\\n *#[^\\r\\n]*|\\r?\\n *| +|#[^\\r\\n]*")},
    function(){return resolve(L_newDefine)("regexpEscapePat", 0, "regexpEscapePat = regexpFlags '[\\\\-\\\\[\\\\]/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\\\^\\\\$\\\\|]' 'g'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'regexpEscapePat:1476:18'); var ret = resolve(L_regexpFlags)("[\\-\\[\\]/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]", "g"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("addToken", 1, "addToken del = primBind (getValue 'tokenList')\r\n  \\dels . contains dels del\r\n    false\r\n    \\\\\r\n      newDels = insertSorted (\\a b . > (strLen a) (strLen b)) del dels\r\n      .\r\n      primBind (setValue 'tokenList' newDels)\r\n        \\_ . computeTokenPat newDels", lazy(function(L_del){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1478:9'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1478:25'); var ret = resolve(L_getValue)("tokenList"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_dels){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1480:3'); var ret = resolve(L_contains)(L_dels, L_del)(L_false)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1:0'); var ret = (function(){
  var L_newDels_0;
  L_newDels_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1486:16'); var ret = resolve(L_insertSorted)(lazy(function(L_a){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1486:31'); var ret = function(L_b){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1486:33'); var ret = resolve(L_$z)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1486:40'); var ret = resolve(L_strLen)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1486:51'); var ret = resolve(L_strLen)(L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_del, L_dels); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1490:16'); var ret = resolve(L_setValue)("tokenList", L_newDels_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addToken:1492:9'); var ret = resolve(L_computeTokenPat)(L_newDels_0); L$setThunkStack(old); return ret;}))})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("computeTokenPat", 1, "computeTokenPat dels = \\\\\r\n  delPats = map (\\item . strReplace item regexpEscapePat \"\\\\$&\") dels\r\n  newPat = strCat (cons '(' (cons (join (cons delimiterListPrefix delPats) '|') (cons ')' nil)))\r\n  .\r\n  setValue 'tokenPat' newPat", lazy(function(L_dels){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1494:16'); var ret = (function(){
  var L_delPats_0, L_newPat_1;
  L_delPats_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1496:12'); var ret = resolve(L_map)(lazy(function(L_item){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1496:18'); var ret = resolve(L_strReplace)(L_item, L_regexpEscapePat, "\\$&"); L$setThunkStack(old); return ret;}), L_dels); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_newPat_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1498:11'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1498:19'); var ret = resolve(L_cons)("(", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1498:29'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1498:35'); var ret = resolve(L_join)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1498:41'); var ret = resolve(L_cons)(L_delimiterListPrefix, L_delPats_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "|"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'computeTokenPat:1498:81'); var ret = resolve(L_cons)(")", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_setValue)("tokenPat", L_newPat_1)})(); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("addTokenGroup", 2, "addTokenGroup open close = primBind (addToken open)\r\n  \\_ . primBind (addToken close)\r\n    \\_ . primBind (getValue 'tokenGroups')\r\n      \\gr . setValue 'tokenGroups' (acons open close gr)", lazy((function(L_open, L_close) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1504:37'); var ret = resolve(L_addToken)(L_open); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1506:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1506:17'); var ret = resolve(L_addToken)(L_close); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1508:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1508:19'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_gr){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1510:7'); var ret = resolve(L_setValue)("tokenGroups", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addTokenGroup:1510:36'); var ret = resolve(L_acons)(L_open, L_close, L_gr); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("parenGroups", 0, "parenGroups = acons '(' ')' nil", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parenGroups:1520:14'); var ret = resolve(L_acons)("(", ")", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("testParse", 2, "testParse str pat = ifNotErr (parseIndent (token '\\n' startFilePos) (tokens str pat) nil parenGroups) \\list . list \\h t . stripParens h", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1522:30'); var ret = resolve(L_parseIndent)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1522:43'); var ret = resolve(L_token)("\n", L_startFilePos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1522:69'); var ret = resolve(L_tokens)(L_str, L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil, L_parenGroups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1522:103'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1522:116'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1522:118'); var ret = resolve(L_stripParens)(L_h); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("parseG", 3, "parseG str pat groups = ifNotErr (parseIndent (token '\\n' startFilePos) (tokens str pat) nil groups) \\list . list \\h t . stripParens h", lazy((function(L_str, L_pat, L_groups) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseG:1524:34'); var ret = resolve(L_parseIndent)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseG:1524:47'); var ret = resolve(L_token)("\n", L_startFilePos); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseG:1524:73'); var ret = resolve(L_tokens)(L_str, L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil, L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseG:1524:102'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseG:1524:115'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseG:1524:117'); var ret = resolve(L_stripParens)(L_h); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("parseToAst", 2, "parseToAst str pat = createAst nil (testParse str pat) nil", lazy((function(L_str, L_pat) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_createAst)(L_nil, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseToAst:1526:36'); var ret = resolve(L_testParse)(L_str)(L_pat); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil);
})))},
    function(){return resolve(L_newDefine)("parseM", 1, "parseM str =\r\n  primBind (getValue 'tokenPat')\r\n    \\tokPat . primBind (getValue 'tokenGroups')\r\n      \\groups . parseG str tokPat groups", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseM:1528:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseM:1530:12'); var ret = resolve(L_getValue)("tokenPat"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tokPat){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseM:1532:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseM:1532:24'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_groups){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseM:1534:7'); var ret = resolve(L_parseG)(L_str, L_tokPat, L_groups); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("scanLine", 4, "scanLine str pat onDef onExpr = scanLineG str pat parenGroups onDef onExpr", lazy((function(L_str, L_pat, L_onDef, L_onExpr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_scanLineG)(L_str, L_pat, L_parenGroups, L_onDef, L_onExpr);
})))},
    function(){return resolve(L_newDefine)("parseLine", 5, "parseLine str pat names onDef onExpr = parseLineG str pat names parenGroups onDef onExpr", lazy((function(L_str, L_pat, L_names, L_onDef, L_onExpr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_parseLineG)(L_str, L_pat, L_names, L_parenGroups, L_onDef, L_onExpr);
})))},
    function(){return resolve(L_newDefine)("parseLineM", 1, "parseLineM str = primBind (getValue 'tokenPat')\r\n  \\tokPat . primBind (getValue 'tokenGroups')\r\n    \\groups . parseLineG str tokPat nil groups id id", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineM:1540:11'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineM:1540:27'); var ret = resolve(L_getValue)("tokenPat"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tokPat){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineM:1542:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineM:1542:22'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_groups){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLineM:1544:5'); var ret = resolve(L_parseLineG)(L_str, L_tokPat, L_nil, L_groups, L_id, L_id); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("macroSubM", 1, "macroSubM expr =\r\n  primBind (getValue 'macroDefs')\r\n    \\macs . macroSub macs expr", lazy(function(L_expr){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubM:1546:10'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubM:1548:12'); var ret = resolve(L_getValue)("macroDefs"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_macs){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroSubM:1550:5'); var ret = resolve(L_macroSub)(L_macs, L_expr); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("macroParse", 1, "macroParse str =\r\n  primBind (parseM str)\r\n    \\ex . macroSubM ex", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroParse:1552:11'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroParse:1554:12'); var ret = resolve(L_parseM)(L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_ex){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'macroParse:1556:5'); var ret = resolve(L_macroSubM)(L_ex); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("tokensM", 1, "tokensM str =\r\n  primBind (getValue 'tokenPat')\r\n    \\delimiterPat . tokens str delimiterPat", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokensM:1558:8'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokensM:1560:12'); var ret = resolve(L_getValue)("tokenPat"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_delimiterPat){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'tokensM:1562:5'); var ret = resolve(L_tokens)(L_str, L_delimiterPat); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("parseLines", 2, "parseLines lines result = lines\r\n  \\h t D . primBind (parseLineM h)\r\n    \\ast . parseLines t (cons ast result)\r\n  reverse result", lazy((function(L_lines, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_lines)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1566:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1566:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1566:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1566:21'); var ret = resolve(L_parseLineM)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_ast){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1568:5'); var ret = resolve(L_parseLines)(L_t, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1568:25'); var ret = resolve(L_cons)(L_ast, L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseLines:1570:2'); var ret = resolve(L_reverse)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("parseFile", 1, "parseFile text = parseLines (linesForFile text) nil", lazy(function(L_text){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseFile:1572:10'); var ret = resolve(L_parseLines)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'parseFile:1572:29'); var ret = resolve(L_linesForFile)(L_text); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("simpleScanLine", 1, "simpleScanLine line = primBind (getValue 'tokenPat')\r\n  \\tokenPat . primBind (getValue 'tokenGroups')\r\n    \\groups . scanLineG line tokenPat groups id id", lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'simpleScanLine:1574:15'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'simpleScanLine:1574:32'); var ret = resolve(L_getValue)("tokenPat"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tokenPat){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'simpleScanLine:1576:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'simpleScanLine:1576:24'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_groups){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'simpleScanLine:1578:5'); var ret = resolve(L_scanLineG)(L_line, L_tokenPat, L_groups, L_id, L_id); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("scanLineM", 1, "scanLineM line = countedScanLineM emptyLineStarts line", lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanLineM:1580:10'); var ret = resolve(L_countedScanLineM)(L_emptyLineStarts, L_line); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("countedScanLineM", 2, "countedScanLineM lineStarts line = primBind (getValue 'tokenPat')\r\n  \\tokenPat . primBind (getValue 'tokenGroups')\r\n    \\groups . primBind (getValue 'parseFilters')\r\n      \\filters . primBind (getValue 'macroDefs')\r\n        \\macros . primBind (getValue 'parser_funcProps')\r\n          \\props . primBind (runParseFilters filters (countedScanLineG lineStarts line tokenPat groups props id id))\r\n            \\scanned . macroSub macros scanned", lazy((function(L_lineStarts, L_line) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1582:45'); var ret = resolve(L_getValue)("tokenPat"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tokenPat){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1584:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1584:24'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_groups){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1586:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1586:24'); var ret = resolve(L_getValue)("parseFilters"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_filters){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1588:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1588:27'); var ret = resolve(L_getValue)("macroDefs"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_macros){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1590:9'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1590:28'); var ret = resolve(L_getValue)("parser_funcProps"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_props){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1592:11'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1592:29'); var ret = resolve(L_runParseFilters)(L_filters, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1592:54'); var ret = resolve(L_countedScanLineG)(L_lineStarts, L_line, L_tokenPat, L_groups, L_props, L_id, L_id); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_scanned){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLineM:1594:13'); var ret = resolve(L_macroSub)(L_macros, L_scanned); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("newline", 0, "newline = regexp '\\\\r?\\\\n'", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'newline:1596:10'); var ret = resolve(L_regexp)("\\r?\\n"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("findLines", 2, "findLines offset line = \\\\\r\n  m = strMatch line newline\r\n  idx = + 1 (head (tail (tail m)))\r\n  .\r\n  eq m nil\r\n    cons offset nil\r\n    cons offset (findLines (+ offset idx) (strSubstring line idx 0))", lazy((function(L_offset, L_line) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_m_0, L_idx_1;
  L_m_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1601:6'); var ret = resolve(L_strMatch)(L_line, L_newline); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_idx_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1603:8'); var ret = resolve(L_$o)(1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1603:13'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1603:19'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1603:25'); var ret = resolve(L_tail)(L_m_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_eq)(L_m_0, L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1609:4'); var ret = resolve(L_cons)(L_offset, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1611:4'); var ret = resolve(L_cons)(L_offset, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1611:17'); var ret = resolve(L_findLines)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1611:28'); var ret = resolve(L_$o)(L_offset, L_idx_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'findLines:1611:43'); var ret = resolve(L_strSubstring)(L_line, L_idx_1, 0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("newParseLine", 3, "newParseLine offset names line = primBind (scanLineM line)\r\n  \\scanned . ifNotErr (createAst (cons \"NEWPARSE.lsr\" (findLines offset line)) scanned names) id", lazy((function(L_offset, L_names, L_line) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'newParseLine:1613:43'); var ret = resolve(L_scanLineM)(L_line); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_scanned){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'newParseLine:1615:3'); var ret = resolve(L_ifNotErr)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'newParseLine:1615:23'); var ret = resolve(L_createAst)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'newParseLine:1615:34'); var ret = resolve(L_cons)("NEWPARSE.lsr", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'newParseLine:1615:55'); var ret = resolve(L_findLines)(L_offset, L_line); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_scanned, L_names); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_id); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("countedParseLine", 2, "countedParseLine names countedLine = primBind (countedScanLineM (head countedLine) (tail countedLine))\r\n  \\scanned . createAst (head countedLine) scanned names", lazy((function(L_names, L_countedLine) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedParseLine:1617:47'); var ret = resolve(L_countedScanLineM)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedParseLine:1617:65'); var ret = resolve(L_head)(L_countedLine); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedParseLine:1617:84'); var ret = resolve(L_tail)(L_countedLine); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_scanned){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedParseLine:1619:3'); var ret = resolve(L_createAst)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedParseLine:1619:24'); var ret = resolve(L_head)(L_countedLine); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_scanned, L_names); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("runLine", 3, "runLine offset names line = primBind (newParseLine offset names line)\r\n  \\ast . primBind (runAst line ast)\r\n    \\res . primBind res\r\n      \\result . cons\r\n        ast\r\n        isErr result\r\n          left (errMsg result)\r\n          right result", lazy((function(L_offset, L_names, L_line) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1621:38'); var ret = resolve(L_newParseLine)(L_offset, L_names, L_line); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_ast){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1623:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1623:19'); var ret = resolve(L_runAst)(L_line)(L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_res){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1625:5'); var ret = resolve(L_primBind)(L_res, lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1627:7'); var ret = resolve(L_cons)(L_ast, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1631:8'); var ret = resolve(L_isErr)(L_result)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1633:10'); var ret = resolve(L_left)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1633:16'); var ret = resolve(L_errMsg)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLine:1635:10'); var ret = resolve(L_right)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("countedRunLine", 3, "countedRunLine file names countedLine = primBind (countedParseLine names countedLine)\r\n  \\ast . \\\\\r\n    wrapped = astFileWrap file ast\r\n    .\r\n    primBind (runAst (tail countedLine) wrapped)\r\n      \\res . primBind res\r\n        \\result . resultOfRun wrapped result", lazy((function(L_file, L_names, L_countedLine) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1672:50'); var ret = resolve(L_countedParseLine)(L_names, L_countedLine); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_ast){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1674:3'); var ret = (function(){
  var L_wrapped_0;
  L_wrapped_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1676:14'); var ret = resolve(L_astFileWrap)(L_file, L_ast); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1680:14'); var ret = resolve(L_runAst)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1680:22'); var ret = resolve(L_tail)(L_countedLine); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_wrapped_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_res){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1682:7'); var ret = resolve(L_primBind)(L_res, lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLine:1684:9'); var ret = resolve(L_resultOfRun)(L_wrapped_0, L_result); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))})(); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("resultOfRun", 2, "resultOfRun wrapped result =\r\n  cons\r\n    wrapped\r\n    isErr result\r\n      left (errMsg result)\r\n      right result", lazy((function(L_wrapped, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_cons)(L_wrapped, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resultOfRun:1692:4'); var ret = resolve(L_isErr)(L_result)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resultOfRun:1694:6'); var ret = resolve(L_left)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resultOfRun:1694:12'); var ret = resolve(L_errMsg)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resultOfRun:1696:6'); var ret = resolve(L_right)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("astFileWrap", 2, "astFileWrap file ast = anno 'filename' (basename file) ast", lazy((function(L_file, L_ast) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_anno)("filename", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'astFileWrap:1699:40'); var ret = resolve(L_basename)(L_file); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_ast);
})))},
    function(){return resolve(L_newDefine)("basename", 1, "basename file = strReplace file (regexp '^(.*/)?([^/]+)$') '$2'", lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'basename:1701:9'); var ret = resolve(L_strReplace)(L_file, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'basename:1701:33'); var ret = resolve(L_regexp)("^(.*/)?([^/]+)$"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "$2"); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("runLines", 2, "runLines names lines = lines\r\n  \\h t D . primBind (runLine 0 names h)\r\n    \\line . primBind (runLines names t)\r\n      \\rest . cons line rest\r\n  nil", lazy((function(L_names, L_lines) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_lines)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1706:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1706:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1706:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1706:21'); var ret = resolve(L_runLine)(0, L_names, L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1708:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1708:22'); var ret = resolve(L_runLines)(L_names, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runLines:1710:7'); var ret = resolve(L_cons)(L_line, L_rest); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("countedRunLines", 4, "countedRunLines file names countedLines result = countedLines\r\n  \\h t D . primBind (countedRunLine file names h)\r\n    \\line . countedRunLines file names t (cons line result)\r\n  reverse result", lazy((function(L_file, L_names, L_countedLines, L_result) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_countedLines)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1723:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1723:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1723:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1723:21'); var ret = resolve(L_countedRunLine)(L_file, L_names, L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1725:5'); var ret = resolve(L_countedRunLines)(L_file, L_names, L_t, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1725:42'); var ret = resolve(L_cons)(L_line, L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedRunLines:1727:2'); var ret = resolve(L_reverse)(L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("runFile", 1, "runFile text = runNamedFile \"RUNFILE.lsr\" text", lazy(function(L_text){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runFile:1729:8'); var ret = resolve(L_runNamedFile)("RUNFILE.lsr", L_text); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("runNamedFile", 2, "runNamedFile name text = \\\\\r\n  counted = countedLinesForFile name text\r\n  lines = map tail counted\r\n  names = namesForLines lines\r\n  .\r\n  #countedRunLines name names counted\r\n  countedRunLines name names counted nil", lazy((function(L_name, L_text) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_counted_0, L_lines_1, L_names_2;
  L_counted_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runNamedFile:1733:12'); var ret = resolve(L_countedLinesForFile)(L_name, L_text); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_lines_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runNamedFile:1735:10'); var ret = resolve(L_map)(L_tail, L_counted_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_names_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'runNamedFile:1737:10'); var ret = resolve(L_namesForLines)(L_lines_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_countedRunLines)(L_name, L_names_2, L_counted_0, L_nil)})();
})))},
    function(){return resolve(L_newDefine)("baseLoad", 1, "baseLoad file = primBind (readFile file)\r\n  \\result . result\r\n    \\err . err\r\n    \\contents . baseLoadString file contents", lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoad:1745:9'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoad:1745:26'); var ret = resolve(L_readFile)(L_file); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoad:1747:3'); var ret = resolve(L_result)(lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoad:1749:5'); var ret = resolve(L_err); L$setThunkStack(old); return ret;}))(lazy(function(L_contents){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoad:1751:5'); var ret = resolve(L_baseLoadString)(L_file, L_contents); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("baseLoadString", 2, "baseLoadString file contents = primBind (getValue 'activeTokenPacks')\r\n  \\activePacks . primBind resetStdTokenPacks\r\n    \\_ . primBind resetNameSpaceInfo\r\n      \\nsInfo . primBind (runNamedFile file contents)\r\n        \\result . primBind (setNameSpaceInfo nsInfo)\r\n          \\_ . primBind (isNil activePacks\r\n            resetStdTokenPacks\r\n            resetTokenPacks activePacks)\r\n            \\_ . result", lazy((function(L_file, L_contents) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1753:41'); var ret = resolve(L_getValue)("activeTokenPacks"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_activePacks){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1755:3'); var ret = resolve(L_primBind)(L_resetStdTokenPacks, lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1757:5'); var ret = resolve(L_primBind)(L_resetNameSpaceInfo, lazy(function(L_nsInfo){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1759:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1759:26'); var ret = resolve(L_runNamedFile)(L_file, L_contents); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1761:9'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1761:28'); var ret = resolve(L_setNameSpaceInfo)(L_nsInfo); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1763:11'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1763:25'); var ret = resolve(L_isNil)(L_activePacks)(L_resetStdTokenPacks)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1767:12'); var ret = resolve(L_resetTokenPacks)(L_activePacks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___1){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'baseLoadString:1769:13'); var ret = resolve(L_result); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("load", 1, "load file = primBind (baseLoad file)\r\n  \\result . \\\\\r\n    errs = foldr (\\line results . tail line (\\er . cons er results) (\\x . results)) nil result\r\n    .\r\n    isNil errs\r\n      right true\r\n      left errs", lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1771:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1771:22'); var ret = resolve(L_baseLoad)(L_file); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1773:3'); var ret = (function(){
  var L_errs_0;
  L_errs_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1775:11'); var ret = resolve(L_foldr)(lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1775:19'); var ret = function(L_results){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1775:24'); var ret = resolve(L_tail)(L_line)(lazy(function(L_er){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1775:46'); var ret = resolve(L_cons)(L_er, L_results); L$setThunkStack(old); return ret;}))(lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1775:70'); var ret = resolve(L_results); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_nil, L_result); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isNil)(L_errs_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1781:6'); var ret = resolve(L_right)(L_true); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'load:1783:6'); var ret = resolve(L_left)(L_errs_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("require", 1, "require file = primBind (getValue 'requiredFiles')\r\n  \\files . contains files file\r\n    right false\r\n    primBind (setValue 'requiredFiles' (cons file files))\r\n      \\_. primBind (load file)\r\n        \\result . result\r\n          \\x . left x\r\n          \\_ . right true", lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1785:8'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1785:25'); var ret = resolve(L_getValue)("requiredFiles"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_files){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1787:3'); var ret = resolve(L_contains)(L_files, L_file)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1789:4'); var ret = resolve(L_right)(L_false); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1791:4'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1791:14'); var ret = resolve(L_setValue)("requiredFiles", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1791:40'); var ret = resolve(L_cons)(L_file, L_files); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1793:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1793:20'); var ret = resolve(L_load)(L_file); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1795:9'); var ret = resolve(L_result)(lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1797:11'); var ret = resolve(L_left)(L_x); L$setThunkStack(old); return ret;}))(lazy(function(L___0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'require:1799:11'); var ret = resolve(L_right)(L_true); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("scanFile", 1, "scanFile file = primBind (readFile file)\r\n  \\result . result\r\n    \\err . err\r\n      \\_ . primBind (runNamedFile file contents)\r\n        counted = countedLinesForFile name text\r\n        lines = map tail counted\r\n        names = namesForLines lines\r\n        .\r\n        countedScanLines name names counted", lazy(function(L_file){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1801:9'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1801:26'); var ret = resolve(L_readFile)(L_file); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1803:3'); var ret = resolve(L_result)(lazy(function(L_err){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1805:5'); var ret = resolve(L_err)(lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1807:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1807:21'); var ret = resolve(L_runNamedFile)(L_file, L_contents); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1809:8'); var ret = resolve(L_counted)(L_$p)(L_countedLinesForFile)(L_name)(L_text); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1811:8'); var ret = resolve(L_lines)(L_$p)(L_map)(L_tail)(L_counted); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1813:8'); var ret = resolve(L_names)(L_$p)(L_namesForLines)(L_lines); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_$B)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'scanFile:1817:8'); var ret = resolve(L_countedScanLines)(L_name, L_names, L_counted); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("countedScanLines", 3, "countedScanLines file names countedLines = countedLines\r\n  \\h t D . primBind (countedScanLineM (head h) (tail h))\r\n    \\line . primBind (countedScanLines file names t)\r\n      \\rest . cons line rest\r\n  nil", lazy((function(L_file, L_names, L_countedLines) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_countedLines)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1821:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1821:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1821:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1821:21'); var ret = resolve(L_countedScanLineM)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1821:39'); var ret = resolve(L_head)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1821:48'); var ret = resolve(L_tail)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_line){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1823:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1823:22'); var ret = resolve(L_countedScanLines)(L_file, L_names, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'countedScanLines:1825:7'); var ret = resolve(L_cons)(L_line, L_rest); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("defTokenPack", 2, "defTokenPack name pack = primBind (getValue 'tokenPacks')\r\n  \\packs . setValue 'tokenPacks' (acons name pack packs)", lazy((function(L_name, L_pack) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defTokenPack:1836:35'); var ret = resolve(L_getValue)("tokenPacks"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_packs){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defTokenPack:1838:3'); var ret = resolve(L_setValue)("tokenPacks", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'defTokenPack:1838:34'); var ret = resolve(L_acons)(L_name, L_pack, L_packs); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("useTokenPack", 1, "useTokenPack name = primBind (getValue 'tokenPacks')\r\n  \\packs . primBind (getValue 'tokenGroups')\r\n    \\groups . primBind (getValue 'tokenList')\r\n      \\tokens . primBind (getValue 'activeTokenPacks')\r\n        \\activePacks . primBind (getValue 'parseFilters')\r\n          \\filters . assoc name packs\r\n            \\pack . \\\\\r\n              groupToks = foldl (\\value el . el \\h t . cons h (cons t value)) nil (head (tail pack))\r\n              newToks = mergeSort (\\a b . > (strLen a) (strLen b)) (append (head pack) (append groupToks tokens))\r\n              .\r\n              primBind (setValue 'tokenList' newToks)\r\n                \\_ . primBind (setValue 'tokenGroups' (appendAlist (head (tail pack)) groups))\r\n                  \\_ . primBind (setValue 'parseFilters' (append filters (head (tail (tail pack)))))\r\n                    \\_ . primBind (computeTokenPat newToks)\r\n                      \\_ . setValue 'activeTokenPacks' (cons name activePacks)\r\n            nil", lazy(function(L_name){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1840:13'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1840:30'); var ret = resolve(L_getValue)("tokenPacks"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_packs){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1842:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1842:21'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_groups){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1844:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1844:24'); var ret = resolve(L_getValue)("tokenList"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_tokens){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1846:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1846:26'); var ret = resolve(L_getValue)("activeTokenPacks"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_activePacks){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1848:9'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1848:33'); var ret = resolve(L_getValue)("parseFilters"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_filters){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1850:11'); var ret = resolve(L_assoc)(L_name, L_packs)(lazy(function(L_pack){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1852:13'); var ret = (function(){
  var L_groupToks_0, L_newToks_1;
  L_groupToks_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:26'); var ret = resolve(L_foldl)(lazy(function(L_value){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:34'); var ret = function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:40'); var ret = resolve(L_el)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:49'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:51'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:63'); var ret = resolve(L_cons)(L_t, L_value); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_nil, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:83'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1854:89'); var ret = resolve(L_tail)(L_pack); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_newToks_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:24'); var ret = resolve(L_mergeSort)(lazy(function(L_a){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:36'); var ret = function(L_b){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:38'); var ret = resolve(L_$z)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:45'); var ret = resolve(L_strLen)(L_a); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:56'); var ret = resolve(L_strLen)(L_b); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:68'); var ret = resolve(L_append)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:76'); var ret = resolve(L_head)(L_pack); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1856:88'); var ret = resolve(L_append)(L_groupToks_0, L_tokens); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1860:24'); var ret = resolve(L_setValue)("tokenList", L_newToks_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1862:17'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1862:31'); var ret = resolve(L_setValue)("tokenGroups", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1862:55'); var ret = resolve(L_appendAlist)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1862:68'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1862:74'); var ret = resolve(L_tail)(L_pack); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___2){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1864:19'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1864:33'); var ret = resolve(L_setValue)("parseFilters", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1864:58'); var ret = resolve(L_append)(L_filters, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1864:74'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1864:80'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1864:86'); var ret = resolve(L_tail)(L_pack); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___3){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1866:21'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1866:35'); var ret = resolve(L_computeTokenPat)(L_newToks_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___4){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1868:23'); var ret = resolve(L_setValue)("activeTokenPacks", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'useTokenPack:1868:56'); var ret = resolve(L_cons)(L_name, L_activePacks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))})(); L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("resetTokenPacks", 1, "resetTokenPacks packs = primBind (setValue 'tokenGroups' nil)\r\n  \\_ . primBind (setValue 'tokenList' nil)\r\n    \\_ . primBind (setValue 'activeTokenPacks' nil)\r\n      \\_ . primBind (setValue 'parseFilters' nil)\r\n        \\_ . foldr1\r\n          \\packCmd result . primBind packCmd \\_ . result\r\n          map useTokenPack packs", lazy(function(L_packs){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1872:16'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1872:34'); var ret = resolve(L_setValue)("tokenGroups", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1874:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1874:17'); var ret = resolve(L_setValue)("tokenList", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___0){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1876:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1876:19'); var ret = resolve(L_setValue)("activeTokenPacks", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___1){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1878:7'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1878:21'); var ret = resolve(L_setValue)("parseFilters", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L___2){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1880:9'); var ret = resolve(L_foldr1)(lazy(function(L_packCmd){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1882:11'); var ret = function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1882:19'); var ret = resolve(L_primBind)(L_packCmd, lazy(function(L___3){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1882:46'); var ret = resolve(L_result); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetTokenPacks:1884:10'); var ret = resolve(L_map)(L_useTokenPack, L_packs); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("resetStdTokenPacks", 0, "resetStdTokenPacks = primBind (getValue 'stdTokenPacks')\r\n  \\stds . primBind (resetTokenPacks stds)\r\n    \\_ . setValue 'activeTokenPacks' nil", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetStdTokenPacks:1886:21'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetStdTokenPacks:1886:31'); var ret = resolve(L_getValue)("stdTokenPacks"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_stds){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetStdTokenPacks:1888:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetStdTokenPacks:1888:20'); var ret = resolve(L_resetTokenPacks)(L_stds); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'resetStdTokenPacks:1890:5'); var ret = resolve(L_setValue)("activeTokenPacks", L_nil); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("addStdTokenPacks", 1, "addStdTokenPacks morePacks = primBind (getValue 'stdTokenPacks')\r\n  \\stds . setValue 'stdTokenPacks' (append stds morePacks)", lazy(function(L_morePacks){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addStdTokenPacks:1892:17'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addStdTokenPacks:1892:39'); var ret = resolve(L_getValue)("stdTokenPacks"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_stds){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addStdTokenPacks:1894:3'); var ret = resolve(L_setValue)("stdTokenPacks", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addStdTokenPacks:1894:36'); var ret = resolve(L_append)(L_stds, L_morePacks); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("addParseFilter", 1, "addParseFilter filt = primBind (getValue 'parseFilters')\r\n  \\filters . setValue 'parseFilters' (append filters (cons filt nil))", lazy(function(L_filt){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addParseFilter:1896:15'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addParseFilter:1896:32'); var ret = resolve(L_getValue)("parseFilters"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_filters){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addParseFilter:1898:3'); var ret = resolve(L_setValue)("parseFilters", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addParseFilter:1898:38'); var ret = resolve(L_append)(L_filters, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addParseFilter:1898:54'); var ret = resolve(L_cons)(L_filt, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("d", 3, "d label value expr = log (strCat (cons label (cons value nil))) expr", lazy((function(L_label, L_value, L_expr) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_log)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'd:1904:26'); var ret = resolve(L_strCat)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'd:1904:34'); var ret = resolve(L_cons)(L_label, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'd:1904:46'); var ret = resolve(L_cons)(L_value, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_expr);
})))},
    function(){return resolve(L_newDefine)("dd", 2, "dd label arg = d label arg arg", lazy((function(L_label, L_arg) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_d)(L_label, L_arg, L_arg);
})))},
    function(){return resolve(L_newDefine)("testParse", 1, "testParse str = countedParseLine nil (head (countedLinesForFile 'parse' str))", lazy(function(L_str){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1911:10'); var ret = resolve(L_countedParseLine)(L_nil, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1911:38'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'testParse:1911:44'); var ret = resolve(L_countedLinesForFile)("parse", L_str); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_setValue)("macroDefs", L_nil)},
    function(){return resolve(L_setValue)("requiredFiles", L_nil)},
    function(){return resolve(L_setValue)("tokenPacks", L_nil)},
    function(){return resolve(L_setValue)("activeTokenPacks", L_nil)},
    function(){return resolve(L_setValue)("stdTokenPacks", function(){return resolve(L_cons)("std", L_nil);})},
    function(){return resolve(L_setValue)("parser_funcProps", L_nil)},
    function(){return resolve(L_defTokenPack)("std", function(){return resolve(L_cons)(function(){return resolve(L_cons)(".", function(){return resolve(L_cons)("\\", function(){return resolve(L_cons)("\\\\", function(){return resolve(L_cons)("\\@", L_nil);});});});}, function(){return resolve(L_cons)(function(){return resolve(L_acons)("(", ")", L_nil);}, function(){return resolve(L_cons)(L_nil, L_nil);});});})},
    function(){return resolve(L_resetStdTokenPacks)},
    function(){return resolve(L_setNameSpace)("core")},
    function(){return resolve(L_newDefine)("any", 2, "any f l = find f l (\\el . true) false", lazy((function(L_f, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_find)(L_f, L_l)(lazy(function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'any:1947:21'); var ret = resolve(L_true); L$setThunkStack(old); return ret;}))(L_false);
})))},
    function(){return resolve(L_newDefine)("all", 2, "all f l = not (any (compose not f) l)", lazy((function(L_f, L_l) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'all:1952:15'); var ret = resolve(L_any)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'all:1952:20'); var ret = resolve(L_compose)(L_not, L_f); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_l); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("doall", 1, "doall x = isNil x\r\n  unit\r\n  foldr1 (\\el res . primBind el \\_ . res) x", lazy(function(L_x){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doall:1955:6'); var ret = resolve(L_isNil)(L_x)(L_unit)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doall:1959:2'); var ret = resolve(L_foldr1)(lazy(function(L_el){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doall:1959:11'); var ret = function(L_res){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doall:1959:14'); var ret = resolve(L_primBind)(L_el, lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doall:1959:33'); var ret = resolve(L_res); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_x); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("aconsf", 3, "aconsf key value list = acons key value (aremove key list)", lazy((function(L_key, L_value, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_acons)(L_key, L_value, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aconsf:1961:41'); var ret = resolve(L_aremove)(L_key, L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("aremove", 2, "aremove key list = isNil list\r\n  nil\r\n  eq (head (head list)) key\r\n    aremove key (tail list)\r\n    aconsPair (head list) (aremove key (tail list))", lazy((function(L_key, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isNil)(L_list)(L_nil)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1966:2'); var ret = resolve(L_eq)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1966:6'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1966:12'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_key)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1968:4'); var ret = resolve(L_aremove)(L_key, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1968:17'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1970:4'); var ret = resolve(L_aconsPair)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1970:15'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1970:27'); var ret = resolve(L_aremove)(L_key, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'aremove:1970:40'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_addTokenGroup)("[", "]")},
    function(){return resolve(L_addToken)("|")},
    function(){return resolve(L_newDefine)("listifyOp", 2, "listifyOp op list = list\r\n  \\h t D . isTokenString h '|'\r\n    cons t nil\r\n    cons (cons op (cons h (listifyOp op t))) nil\r\n  cons 'nil' nil", lazy((function(L_op, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1976:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1976:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1976:7'); var ret = resolve(L_isTokenString)(L_h, "|")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1978:4'); var ret = resolve(L_cons)(L_t, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1980:4'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1980:10'); var ret = resolve(L_cons)(L_op, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1980:19'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1980:27'); var ret = resolve(L_listifyOp)(L_op, L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listifyOp:1982:2'); var ret = resolve(L_cons)("nil", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("listify", 1, "listify list = listifyOp 'cons' list", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listify:1984:8'); var ret = resolve(L_listifyOp)("cons", L_list); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("listFilter", 1, "listFilter code = primBind (getValue 'listMacros')\r\n  \\listMacros . filterApplies code \\list . list \\h t .\r\n    and (isToken h) (contains listMacros (tokenString h))\r\n      listFilterTail list\r\n      list", lazy(function(L_code){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1988:11'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1988:28'); var ret = resolve(L_getValue)("listMacros"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_listMacros){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1990:3'); var ret = resolve(L_filterApplies)(L_code, lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1990:36'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1990:49'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1990:51'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1992:9'); var ret = resolve(L_isToken)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1992:21'); var ret = resolve(L_contains)(L_listMacros, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1992:42'); var ret = resolve(L_tokenString)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilter:1994:6'); var ret = resolve(L_listFilterTail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_list); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("listFilterTail", 1, "listFilterTail list = list\r\n  \\h t D . isTokenString h '|'\r\n    > (length t) 2\r\n      cons h (cons (removeLast t) (cons (last t) nil))\r\n      list\r\n    cons h (listFilterTail t)\r\n  nil", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:1998:15'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2000:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2000:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2000:7'); var ret = resolve(L_isTokenString)(L_h, "|")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2002:4'); var ret = resolve(L_$z)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2002:7'); var ret = resolve(L_length)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), 2)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2004:6'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2004:14'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2004:20'); var ret = resolve(L_removeLast)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2004:35'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2004:41'); var ret = resolve(L_last)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2008:4'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listFilterTail:2008:12'); var ret = resolve(L_listFilterTail)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("filterApplies", 2, "filterApplies code func = isParens code\r\n  code \\start end contents . parens start end (filterApplies contents func)\r\n  isCons code\r\n    \\\\\r\n      filtered = filterApplyElements code func\r\n      .\r\n      and (isCons filtered) (isBlockStart (head filtered))\r\n        filtered\r\n        func filtered\r\n    code", lazy((function(L_code, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isParens)(L_code)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2014:2'); var ret = resolve(L_code)(lazy(function(L_start){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2014:8'); var ret = function(L_end){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2014:14'); var ret = function(L_contents){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2014:18'); var ret = resolve(L_parens)(L_start, L_end, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2014:47'); var ret = resolve(L_filterApplies)(L_contents, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:1:0'); var ret = resolve(L_isCons)(L_code)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:1:0'); var ret = (function(){
  var L_filtered_0;
  L_filtered_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2020:17'); var ret = resolve(L_filterApplyElements)(L_code, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2024:11'); var ret = resolve(L_isCons)(L_filtered_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2024:29'); var ret = resolve(L_isBlockStart)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2024:43'); var ret = resolve(L_head)(L_filtered_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_filtered_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplies:2028:8'); var ret = resolve(L_func)(L_filtered_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})(); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_code); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("filterApplyElements", 2, "filterApplyElements code func = code\r\n  \\h t D . isBlockStart h\r\n    cons h (filterBlock h t func)\r\n    cons (filterApplies h func)\r\n      and (isCons t) (isBlockStart (head t))\r\n        cons (filterApplyElements t func) nil\r\n        filterApplyElements t func\r\n  nil", lazy((function(L_code, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_code)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2034:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2034:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2034:7'); var ret = resolve(L_isBlockStart)(L_h)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2036:4'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2036:12'); var ret = resolve(L_filterBlock)(L_h, L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2038:4'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2038:10'); var ret = resolve(L_filterApplies)(L_h, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2040:6'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2040:11'); var ret = resolve(L_isCons)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2040:22'); var ret = resolve(L_isBlockStart)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2040:36'); var ret = resolve(L_head)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2042:8'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2042:14'); var ret = resolve(L_filterApplyElements)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterApplyElements:2044:8'); var ret = resolve(L_filterApplyElements)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))(L_nil);
})))},
    function(){return resolve(L_newDefine)("filterBlock", 3, "filterBlock type code func = isTokenString type '\\\\'\r\n  filterLambda code func\r\n  filterLet code func", lazy((function(L_type, L_code, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isTokenString)(L_type, "\\")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterBlock:2050:2'); var ret = resolve(L_filterLambda)(L_code, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterBlock:2052:2'); var ret = resolve(L_filterLet)(L_code, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("filterLet", 2, "filterLet code func = code \\h t . isTokenString h '.'\r\n  cons h (filterApplies t func)\r\n  cons (filterLetBinding h func)\r\n    filterLet t func", lazy((function(L_code, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_code)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2054:28'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2054:30'); var ret = resolve(L_isTokenString)(L_h, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2056:2'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2056:10'); var ret = resolve(L_filterApplies)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2058:2'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2058:8'); var ret = resolve(L_filterLetBinding)(L_h, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLet:2060:4'); var ret = resolve(L_filterLet)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_newDefine)("filterLetBinding", 2, "filterLetBinding code func = isParens code\r\n  setParens code \\contents . filterLetBinding contents func\r\n  isCons code\r\n    code \\h t . cons h\r\n      isTokenString h '='\r\n        filterApplies t func\r\n        filterLetBinding t func\r\n    code", lazy((function(L_code, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_isParens)(L_code)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2064:2'); var ret = resolve(L_setParens)(L_code, lazy(function(L_contents){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2064:18'); var ret = resolve(L_filterLetBinding)(L_contents, L_func); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2066:2'); var ret = resolve(L_isCons)(L_code)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2068:4'); var ret = resolve(L_code)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2068:10'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2068:12'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2070:6'); var ret = resolve(L_isTokenString)(L_h, "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2072:8'); var ret = resolve(L_filterApplies)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLetBinding:2074:8'); var ret = resolve(L_filterLetBinding)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_code); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("filterLambda", 2, "filterLambda code func = code \\h t . cons h\r\n  isTokenString h '.'\r\n    filterApplies t func\r\n    filterLambda t func", lazy((function(L_code, L_func) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_code)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLambda:2078:31'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLambda:2078:33'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLambda:2080:2'); var ret = resolve(L_isTokenString)(L_h, ".")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLambda:2082:4'); var ret = resolve(L_filterApplies)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'filterLambda:2084:4'); var ret = resolve(L_filterLambda)(L_t, L_func); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_defMacro)("[", lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_listify)(L_h)}}))}))},
    function(){return resolve(L_setValue)("listMacros", function(){return resolve(L_cons)("[", function(){return resolve(L_cons)("{", function(){return resolve(L_cons)("hamt{", L_nil);});});})},
    function(){return resolve(L_addParseFilter)(L_listFilter)},
    function(){return resolve(L_addTokenGroup)("{", "}")},
    function(){return resolve(L_defMacro)("{", lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_listifyOp)("aconsPair", L_h)}}))}))},
    function(){return resolve(L_addTokenGroup)("hamt{", "}")},
    function(){return resolve(L_defMacro)("hamt{", lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_hamtify)(L_h)}}))}))},
    function(){return resolve(L_newDefine)("hamtWithPair", 2, "hamtWithPair pair t = hamtWith (head pair) (tail pair) t", lazy((function(L_pair, L_t) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_hamtWith)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtWithPair:2100:32'); var ret = resolve(L_head)(L_pair); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtWithPair:2100:44'); var ret = resolve(L_tail)(L_pair); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_t);
})))},
    function(){return resolve(L_newDefine)("hamtify", 1, "hamtify list = list\r\n  \\h t D . isTokenString h '|'\r\n    cons t nil\r\n    and (isCons h) (or (isTokenString (head h) 'cons') (isTokenString (head h) ':'))\r\n      [['hamtWith' (head (tail h)) (head (tail (tail h))) | hamtify t]]\r\n      [['hamtWithPair' h | hamtify t]]\r\n  ['hamt']", lazy(function(L_list){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2102:8'); var ret = resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2104:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2104:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2104:7'); var ret = resolve(L_isTokenString)(L_h, "|")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2106:4'); var ret = resolve(L_cons)(L_t, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:4'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:9'); var ret = resolve(L_isCons)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:20'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:24'); var ret = resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:39'); var ret = resolve(L_head)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), "cons"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:56'); var ret = resolve(L_isTokenString)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2108:71'); var ret = resolve(L_head)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), ":"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:8'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:8'); var ret = resolve(L_cons)("hamtWith", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:19'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:20'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:26'); var ret = resolve(L_tail)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:35'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:36'); var ret = resolve(L_head)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:42'); var ret = resolve(L_tail)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:48'); var ret = resolve(L_tail)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2110:60'); var ret = resolve(L_hamtify)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2112:8'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2112:8'); var ret = resolve(L_cons)("hamtWithPair", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2112:23'); var ret = resolve(L_cons)(L_h, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2112:27'); var ret = resolve(L_hamtify)(L_t); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'hamtify:2114:3'); var ret = resolve(L_cons)("hamt", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_defTokenPack)("list", function(){return resolve(L_cons)(function(){return resolve(L_cons)("|", function(){return resolve(L_cons)("=", L_nil);});}, function(){return resolve(L_cons)(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("{", "}");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("hamt{", "}");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("[", "]");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("or[", "]");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("and[", "]");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("concat[", "]");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("print[", "]");}, function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("concatFlat[", "]");}, L_nil);});});});});});});});}, function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_listFilter, L_nil);}, L_nil);});});})},
    function(){return resolve(L_addTokenGroup)("or[", "]")},
    function(){return resolve(L_addTokenGroup)("and[", "]")},
    function(){return resolve(L_addTokenGroup)("concat[", "]")},
    function(){return resolve(L_addTokenGroup)("print[", "]")},
    function(){return resolve(L_addTokenGroup)("concatFlat[", "]")},
    function(){return resolve(L_newDefine)("listMacroFoldOp", 3, "listMacroFoldOp op emptyCase list = list \\h t . foldr\r\n    \\case result . [op case result]\r\n    emptyCase\r\n    h", lazy((function(L_op, L_emptyCase, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listMacroFoldOp:2138:42'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listMacroFoldOp:2138:44'); var ret = resolve(L_foldr)(lazy(function(L_case){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listMacroFoldOp:2140:5'); var ret = function(L_result){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listMacroFoldOp:2140:10'); var ret = resolve(L_cons)(L_op, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listMacroFoldOp:2140:23'); var ret = resolve(L_cons)(L_case, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'listMacroFoldOp:2140:28'); var ret = resolve(L_cons)(L_result, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}), L_emptyCase, L_h); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}));
})))},
    function(){return resolve(L_defMacro)("or[", lazy(function(L_list){return resolve(L_listMacroFoldOp)("or", "false", L_list)}))},
    function(){return resolve(L_defMacro)("and[", lazy(function(L_list){return resolve(L_listMacroFoldOp)("and", "true", L_list)}))},
    function(){return resolve(L_defMacro)("print[", lazy(function(L_list){return resolve(L_cons)("print", function(){return resolve(L_cons)(function(){return resolve(L_cons)("strCat", function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_listify)(function(){return resolve(L_head)(L_list);});}, L_nil);}, L_nil);});}, L_nil);})}))},
    function(){return resolve(L_defMacro)("concat[", lazy(function(L_list){return resolve(L_cons)("strCat", function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_listify)(function(){return resolve(L_head)(L_list);});}, L_nil);}, L_nil);})}))},
    function(){return resolve(L_defMacro)("concatFlat[", lazy(function(L_list){return resolve(L_cons)("strCat", function(){return resolve(L_cons)(function(){return resolve(L_cons)("flatten", function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_listify)(function(){return resolve(L_head)(L_list);});}, L_nil);}, L_nil);});}, L_nil);})}))},
    function(){return resolve(L_newDefine)("infix", 1, "infix code = primBind (getValue 'infixPrecedence')\r\n  \\prec . primBind (getValue 'infixRightAssociative')\r\n    \\right . primBind (getValue 'tokenGroups')\r\n      \\groups . filterApplies\r\n        code\r\n        \\expr . infixRearrange prec right (map (\\cell . tail cell) groups) expr", lazy(function(L_code){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2156:6'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2156:23'); var ret = resolve(L_getValue)("infixPrecedence"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_prec){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2158:3'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2158:20'); var ret = resolve(L_getValue)("infixRightAssociative"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_right){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2160:5'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2160:23'); var ret = resolve(L_getValue)("tokenGroups"); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L_groups){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2162:7'); var ret = resolve(L_filterApplies)(L_code, lazy(function(L_expr){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2166:9'); var ret = resolve(L_infixRearrange)(L_prec, L_right, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2166:43'); var ret = resolve(L_map)(lazy(function(L_cell){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infix:2166:49'); var ret = resolve(L_tail)(L_cell); L$setThunkStack(old); return ret;}), L_groups); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_expr); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("infixRearrange", 4, "infixRearrange prec right closes list = \\\\\r\n  len = length list\r\n  head1 = head list\r\n  tail1 = tail list\r\n  head2 = head tail1\r\n  tail2 = tail tail1\r\n  head3 = head tail2\r\n  opPrec = getPrec prec head2\r\n  .\r\n  < len 2\r\n    list\r\n    isInfix opPrec head1 head2 len\r\n      or (== len 2) (not (isInfixArg closes head3))\r\n        [[head2 head1] | tail2]\r\n        infixRearrange prec right closes (absorbArgument opPrec prec right closes head1 head2 tail2 head3 (- len 2))\r\n      [head1 | infixRearrange prec right closes tail1]", lazy((function(L_prec, L_right, L_closes, L_list) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_len_0, L_head1_1, L_tail1_2, L_head2_3, L_tail2_4, L_head3_5, L_opPrec_6;
  L_len_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2170:8'); var ret = resolve(L_length)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_head1_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2172:10'); var ret = resolve(L_head)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_tail1_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2174:10'); var ret = resolve(L_tail)(L_list); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_head2_3 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2176:10'); var ret = resolve(L_head)(L_tail1_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_tail2_4 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2178:10'); var ret = resolve(L_tail)(L_tail1_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_head3_5 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2180:10'); var ret = resolve(L_head)(L_tail2_4); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_opPrec_6 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2182:11'); var ret = resolve(L_getPrec)(L_prec, L_head2_3); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_$y)(L_len_0, 2)(L_list)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2190:4'); var ret = resolve(L_isInfix)(L_opPrec_6, L_head1_1, L_head2_3, L_len_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2192:6'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2192:10'); var ret = resolve(L_$p$p)(L_len_0, 2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2192:21'); var ret = resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2192:26'); var ret = resolve(L_isInfixArg)(L_closes, L_head3_5); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2194:10'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2194:10'); var ret = resolve(L_cons)(L_head2_3, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2194:16'); var ret = resolve(L_cons)(L_head1_1, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_tail2_4); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2196:8'); var ret = resolve(L_infixRearrange)(L_prec, L_right, L_closes, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2196:42'); var ret = resolve(L_absorbArgument)(L_opPrec_6, L_prec, L_right, L_closes, L_head1_1, L_head2_3, L_tail2_4, L_head3_5, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2196:107'); var ret = resolve(L_$_)(L_len_0, 2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2198:7'); var ret = resolve(L_cons)(L_head1_1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixRearrange:2198:15'); var ret = resolve(L_infixRearrange)(L_prec, L_right, L_closes, L_tail1_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("absorbArgument", 9, "absorbArgument opPrec prec right closes head1 head2 tail2 head3 len = \\\\\r\n  tail3 = tail tail2\r\n  head4 = head tail3\r\n  tail4 = tail tail3\r\n  head5 = head tail4\r\n  .\r\n  infixShouldEatNext opPrec prec (contains right (strTokenString head2)) head3 head4 head5 closes len\r\n    [head1 head2 | absorbArgument (getPrec prec head4) prec right closes head3 head4 tail4 head5 (- len 2)]\r\n    [[head2 head1 head3] | tail3]", lazy((function(L_opPrec, L_prec, L_right, L_closes, L_head1, L_head2, L_tail2, L_head3, L_len) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_tail3_0, L_head4_1, L_tail4_2, L_head5_3;
  L_tail3_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2202:10'); var ret = resolve(L_tail)(L_tail2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_head4_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2204:10'); var ret = resolve(L_head)(L_tail3_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_tail4_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2206:10'); var ret = resolve(L_tail)(L_tail3_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_head5_3 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2208:10'); var ret = resolve(L_head)(L_tail4_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_infixShouldEatNext)(L_opPrec, L_prec, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2212:34'); var ret = resolve(L_contains)(L_right, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2212:50'); var ret = resolve(L_strTokenString)(L_head2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_head3, L_head4_1, L_head5_3, L_closes, L_len)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2214:5'); var ret = resolve(L_cons)(L_head1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2214:11'); var ret = resolve(L_cons)(L_head2, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2214:19'); var ret = resolve(L_absorbArgument)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2214:35'); var ret = resolve(L_getPrec)(L_prec, L_head4_1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_prec, L_right, L_closes, L_head3, L_head4_1, L_tail4_2, L_head5_3, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2214:98'); var ret = resolve(L_$_)(L_len, 2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2216:6'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2216:6'); var ret = resolve(L_cons)(L_head2, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2216:12'); var ret = resolve(L_cons)(L_head1, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'absorbArgument:2216:18'); var ret = resolve(L_cons)(L_head3, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_tail3_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_newDefine)("isInfixArg", 2, "isInfixArg closes item = or[\r\n  isParens item\r\n  isCons item\r\n  and[\r\n    isToken item\r\n    not (contains closes (tokenString item))\r\n    not (isBlockStart item)]]", lazy((function(L_closes, L_item) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2220:2'); var ret = resolve(L_isParens)(L_item); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2220:15'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2222:2'); var ret = resolve(L_isCons)(L_item); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2222:13'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2224:6'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2226:4'); var ret = resolve(L_isToken)(L_item); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2226:16'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2228:4'); var ret = resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2228:9'); var ret = resolve(L_contains)(L_closes, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2228:26'); var ret = resolve(L_tokenString)(L_item); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2228:44'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2230:4'); var ret = resolve(L_not)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfixArg:2230:9'); var ret = resolve(L_isBlockStart)(L_item); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_true); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_false); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("isInfix", 4, "isInfix opPrec head1 head2 len = and[\r\n  > len 1\r\n  > opPrec -1\r\n  isInfixArg nil head1]", lazy((function(L_opPrec, L_head1, L_head2, L_len) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfix:2234:2'); var ret = resolve(L_$z)(L_len, 1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfix:2234:9'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfix:2236:2'); var ret = resolve(L_$z)(L_opPrec, -1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfix:2236:13'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'isInfix:2238:2'); var ret = resolve(L_isInfixArg)(L_nil, L_head1); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_true); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("getPrec", 2, "getPrec prec token = \\\\\r\n  str = tokenString token\r\n  .\r\n  isToken token\r\n    findIndex (\\level . contains level str) prec\r\n    -1", lazy((function(L_prec, L_token) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_str_0;
  L_str_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getPrec:2242:8'); var ret = resolve(L_tokenString)(L_token); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isToken)(L_token)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getPrec:2248:4'); var ret = resolve(L_findIndex)(lazy(function(L_level){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'getPrec:2248:16'); var ret = resolve(L_contains)(L_level, L_str_0); L$setThunkStack(old); return ret;}), L_prec); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(-1)})();
})))},
    function(){return resolve(L_newDefine)("infixShouldEatNext", 8, "infixShouldEatNext opPrec prec isRight curArg nextOp nextArg closes len = \\\\\r\n  nextPrec = getPrec prec nextOp\r\n  .\r\n  and[\r\n    > len 2\r\n    isInfix nextPrec curArg nextOp len\r\n    or (> opPrec nextPrec) (and (== opPrec nextPrec) isRight)\r\n    isInfixArg closes nextArg]", lazy((function(L_opPrec, L_prec, L_isRight, L_curArg, L_nextOp, L_nextArg, L_closes, L_len) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_nextPrec_0;
  L_nextPrec_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2254:13'); var ret = resolve(L_getPrec)(L_prec, L_nextOp); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2260:4'); var ret = resolve(L_$z)(L_len, 2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2260:11'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2262:4'); var ret = resolve(L_isInfix)(L_nextPrec_0, L_curArg, L_nextOp, L_len); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2262:38'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2264:4'); var ret = resolve(L_or)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2264:8'); var ret = resolve(L_$z)(L_opPrec, L_nextPrec_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2264:28'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2264:33'); var ret = resolve(L_$p$p)(L_opPrec, L_nextPrec_0); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_isRight); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2264:61'); var ret = resolve(L_and)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'infixShouldEatNext:2266:4'); var ret = resolve(L_isInfixArg)(L_closes, L_nextArg); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_true); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_defMacro)(":", lazy(function(L_list){return resolve(L_cons)("cons", L_list)}))},
    function(){return resolve(L_newDefine)("iprec", 0, "iprec = [['*' '/' '%'] ['+' '-'] [':'] ['<' '>' '<=' '>='] ['==' '!='] ['&&' '||']]", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:10'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:10'); var ret = resolve(L_cons)("*", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:14'); var ret = resolve(L_cons)("/", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:18'); var ret = resolve(L_cons)("%", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:24'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:24'); var ret = resolve(L_cons)("+", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:28'); var ret = resolve(L_cons)("-", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:34'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:34'); var ret = resolve(L_cons)(":", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:40'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:40'); var ret = resolve(L_cons)("<", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:44'); var ret = resolve(L_cons)(">", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:48'); var ret = resolve(L_cons)("<=", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:53'); var ret = resolve(L_cons)(">=", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:60'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:60'); var ret = resolve(L_cons)("==", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:65'); var ret = resolve(L_cons)("!=", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:72'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:72'); var ret = resolve(L_cons)("&&", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'iprec:2270:77'); var ret = resolve(L_cons)("||", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("rightAssoc", 0, "rightAssoc = [':']", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'rightAssoc:2271:14'); var ret = resolve(L_cons)(":", L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())},
    function(){return resolve(L_newDefine)("setPrecedenceLevels", 1, "setPrecedenceLevels levels = primBind\r\n  setValue 'infixPrecedence' levels\r\n  \\_ . doall (map addInfixProp (flatten levels))", lazy(function(L_levels){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setPrecedenceLevels:2273:20'); var ret = resolve(L_primBind)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setPrecedenceLevels:2275:2'); var ret = resolve(L_setValue)("infixPrecedence", L_levels); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), lazy(function(L__){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setPrecedenceLevels:2277:3'); var ret = resolve(L_doall)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setPrecedenceLevels:2277:14'); var ret = resolve(L_map)(L_addInfixProp, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'setPrecedenceLevels:2277:32'); var ret = resolve(L_flatten)(L_levels); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_newDefine)("addInfixProp", 1, "addInfixProp funcName = getFunction funcName\r\n  \\func . setProperty func 'infix' true\r\n  nil", lazy(function(L_funcName){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addInfixProp:2279:13'); var ret = resolve(L_getFunction)(L_funcName)(lazy(function(L_func){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'addInfixProp:2281:3'); var ret = resolve(L_setProperty)(L_func, "infix", L_true); L$setThunkStack(old); return ret;}))(L_nil); L$setThunkStack(old); return ret;}))},
    function(){return resolve(L_setPrecedenceLevels)(L_iprec)},
    function(){return resolve(L_setValue)("infixRightAssociative", L_rightAssoc)},
    function(){return resolve(L_defTokenPack)("infix", function(){return resolve(L_cons)(function(){return resolve(L_flatten)(L_iprec);}, function(){return resolve(L_cons)(L_nil, function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_infix, L_nil);}, L_nil);});});})},
    function(){return resolve(L_useTokenPack)("infix")},
    function(){return resolve(L_defMacro)("do", lazy(function(L_list){return resolve(L_handleDo)(L_list, L_false, L_id)}))},
    function(){return resolve(L_newDefine)("handleDo", 3, "handleDo list inLet cont = list\r\n  \\h t D . isNil t\r\n    cont (inLet ['.' h] [h])\r\n    doClause (stripParens h) h nil inLet \\newInLet chain .\r\n      handleDo t newInLet \\rest . cont (chain rest)\r\n  cont nil", lazy((function(L_list, L_inLet, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : resolve(L_list)(lazy(function(L_h){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2299:3'); var ret = function(L_t){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2299:5'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2299:7'); var ret = resolve(L_isNil)(L_t)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2301:4'); var ret = resolve(L_cont)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2301:10'); var ret = resolve(L_inLet)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2301:17'); var ret = resolve(L_cons)(".", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2301:21'); var ret = resolve(L_cons)(L_h, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2301:25'); var ret = resolve(L_cons)(L_h, L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2303:4'); var ret = resolve(L_doClause)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2303:14'); var ret = resolve(L_stripParens)(L_h); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_h, L_nil, L_inLet, lazy(function(L_newInLet){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2303:42'); var ret = function(L_chain){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2303:51'); var ret = resolve(L_handleDo)(L_t, L_newInLet, lazy(function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2305:27'); var ret = resolve(L_cont)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2305:40'); var ret = resolve(L_chain)(L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'handleDo:2307:2'); var ret = resolve(L_cont)(L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})());
})))},
    function(){return resolve(L_newDefine)("doClause", 5, "doClause steppingClause clause prefix inLet cont = \\\\\r\n  makeBind var monad = cont false \\rest . inLet (cons '.') id\r\n    ['bind' monad ['\\\\' var '.' | rest]]\r\n  h = head steppingClause\r\n  t = tail steppingClause\r\n  .\r\n  isCons steppingClause\r\n    isTokenString h '='\r\n      inLet\r\n        cont true \\rest . [clause | rest]\r\n        cont true \\rest . ['\\\\\\\\' clause | rest]\r\n      isTokenString h '<-'\r\n        isNil t\r\n          parseErr \"No monad in do-clause: \" clause\r\n          prefix\r\n            \\ph pt D . isNil pt\r\n              makeBind (isNil prefix '_' (head prefix)) t\r\n              parseErr \"More than one variable in do-clause: \" clause\r\n            makeBind '_' t\r\n        doClause t clause [h | prefix] inLet cont\r\n    makeBind '_' clause", lazy((function(L_steppingClause, L_clause, L_prefix, L_inLet, L_cont) {
    return arguments.callee.length != arguments.length
        ? Leisure_primCall(arguments.callee, 0, arguments)
        : (function(){
  var L_makeBind_0, L_h_1, L_t_2;
  L_makeBind_0 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2311:11'); var ret = function(L_var){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2311:11'); var ret = function(L_monad){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2311:15'); var ret = resolve(L_cont)(L_false)(lazy(function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2311:35'); var ret = resolve(L_inLet)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2311:49'); var ret = resolve(L_cons)("."); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_id)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2313:5'); var ret = resolve(L_cons)("bind", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2313:12'); var ret = resolve(L_cons)(L_monad, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2313:19'); var ret = resolve(L_cons)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2313:19'); var ret = resolve(L_cons)("\\", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2313:24'); var ret = resolve(L_cons)(L_var, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2313:28'); var ret = resolve(L_cons)(".", L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_nil); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_h_1 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2315:6'); var ret = resolve(L_head)(L_steppingClause); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();
  L_t_2 = (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2317:6'); var ret = resolve(L_tail)(L_steppingClause); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})();

  return resolve(L_isCons)(L_steppingClause)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2323:4'); var ret = resolve(L_isTokenString)(L_h_1, "=")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2325:6'); var ret = resolve(L_inLet)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2327:8'); var ret = resolve(L_cont)(L_true)(lazy(function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2327:19'); var ret = resolve(L_cons)(L_clause, L_rest); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2329:8'); var ret = resolve(L_cont)(L_true)(lazy(function(L_rest){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2329:19'); var ret = resolve(L_cons)("\\\\", (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2329:34'); var ret = resolve(L_cons)(L_clause, L_rest); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;})); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2331:6'); var ret = resolve(L_isTokenString)(L_h_1, "<-")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2333:8'); var ret = resolve(L_isNil)(L_t_2)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2335:10'); var ret = resolve(L_parseErr)("No monad in do-clause: ", L_clause); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2337:10'); var ret = resolve(L_prefix)(lazy(function(L_ph){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2339:13'); var ret = function(L_pt){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2339:16'); var ret = function(L_D){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2339:19'); var ret = resolve(L_isNil)(L_pt)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2341:14'); var ret = resolve(L_makeBind_0)((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2341:24'); var ret = resolve(L_isNil)(L_prefix)("_")((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2341:42'); var ret = resolve(L_head)(L_prefix); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())(L_t_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2343:14'); var ret = resolve(L_parseErr)("More than one variable in do-clause: ", L_clause); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}; L$setThunkStack(old); return ret;}))((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2345:12'); var ret = resolve(L_makeBind_0)("_")(L_t_2); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2347:8'); var ret = resolve(L_doClause)(L_t_2, L_clause, (function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2347:27'); var ret = resolve(L_cons)(L_h_1, L_prefix); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})(), L_inLet, L_cont); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})()); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())((function(){var stack = L$thunkStack; var f = function(){var old = L$pushThunk((typeof stack != 'undefined' ? stack : L$thunkStack || L$emptyThunkStack), 'doClause:2349:4'); var ret = resolve(L_makeBind_0)("_")(L_clause); L$setThunkStack(old); if (f.memo) stack = null; return ret;}; return f;})())})();
})))},
    function(){return resolve(L_addToken)("<-")},
    function(){return resolve(L_defTokenPack)("do", function(){return resolve(L_cons)(function(){return resolve(L_cons)("<-", L_nil);}, function(){return resolve(L_cons)(L_nil, function(){return resolve(L_cons)(L_nil, L_nil);});});})},
    function(){return resolve(L_addStdTokenPacks)(function(){return resolve(L_cons)("do", function(){return resolve(L_cons)("list", function(){return resolve(L_cons)("infix", L_nil);});});})},
    function(){return resolve(L_resetStdTokenPacks)}
  ]);
});
//# sourceMappingURL=generatedPrelude.map
