{
  "version": 3,
  "file": "shell.js",
  "sourceRoot": "../../leisure/build",
  "sources": [
    "src/shell.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Shell support for Leisure. Runs in Node.js\n\nIf a line begins with a string that is unevaluable\n* try executing it as a shell command\n* pass any unevaluable arguments that are strings through verbatim\n\n    {\n      execFileSync\n      spawn\n      spawnSync\n      ChildProcess\n    } = require 'child_process'\n    {\n      define\n      booleanFor\n      hasMacro\n    } = Leisure.Runtime\n    {\n      newCall\n      resolve\n      lazy\n      defaultEnv\n      replEnv\n      show\n      evalInput\n    } = Leisure.Base\n    {\n      Nil\n      cons\n      consFrom\n      functionInfo\n    } = Leisure.Ast\n    {\n      fiberReader\n    } = require './spawn'\n    \n    {\n      inspect\n    } = require 'util'\n\n    Fiber = require 'fibers'\n\n    rz = resolve\n    lz = lazy\n\n    inErr = false\n\n    reader = fiberReader()\n\n    global.handleError = (err, cont, text, source)->\n      if inErr\n        console.log \"ALREADY HANDLING ERROR\", inErr\n        console.log \"BUT GOT ERROR\", err\n        throw err\n      inErr = err\n      try\n        cont evalInput \"e[#{text}]\", (lines)->\n          l = lines\n          while l instanceof Leisure_cons\n            console.log L_head l\n            l = L_tail l\n          L_unit\n      catch err2\n        if err2.status && err2.stderr then cont \"ERR #{trimNl err2.stderr.toString()}\"\n        else\n          console.log \"Shell ERROR:\", err, text\n          cont ''\n      finally\n        inErr = false\n\n    asBool = (bool)-> bool instanceof Leisure_true\n\n    quote = (str)-> \"'\" + str.replace(/'/, \"\\\\'\") + \"'\"\n\n    # extract out pipe tails that were gathered into unparenthesized lambdas\n    splicePipes = (list)->\n      foundPipe = false\n      doScan = true\n      last = list[list.length - 1]\n      while doScan && last instanceof Leisure_cons && tokenString(last.head()) == '\\\\'\n        la = last.toArray()\n        if (i = la.findIndex((x)-> tokenString(x) == '|')) > -1\n          foundPipe = true\n          list[list.length - 1] = consFrom la[0...i]\n          list[list.length...] = la[i...]\n          last = list[list.length - 1]\n        else doScan = false\n      foundPipe\n\n    define 'gatherProcArgs', (list)->\n      list = rz list\n      pargs = []\n      procs = []\n      l = list.toArray()\n      while true\n        if !splicePipes l then break\n      for t in l\n        tStr = L_strTokenString t\n        if tStr == '|'\n          procs.push pargs\n          pargs = []\n        else pargs.push t\n      procs.push pargs\n      output = null\n      for proc, i in procs\n        if shouldSpawn proc[0]\n          cmd = tokenString proc[0]\n          if cmd[0] == '$' then cmd = cmd[1..]\n          proc[0] = quote cmd\n          for cmd, j in proc\n            if j > 0 && shouldSpawn cmd\n              cmd = tokenString cmd\n              if cmd[0] == '$' then cmd = cmd[1..]\n              proc[j] = quote cmd\n          list = 'nil'\n          for arg in proc.reverse()\n            p = L_position arg\n            list = consFrom [(L_token 'cons', p), arg, list]\n          mode = quote(switch i\n            when 0 then 'first'\n            else 'middle')\n          proc = [(L_token 'spawnProcess', p), mode, list]\n        else if i > 0 then proc = ['pipelineWrap', consFrom proc]\n        else proc = ['toPipeCons', consFrom proc]\n        if output then output = consFrom([consFrom(proc), output])\n        else output = consFrom proc\n      output\n\n    isDefined = (cmd)-> typeof str == 'string' && (str[0] in '\\\\\\'\"' || functionInfo[str] || hasMacro(str))\n\n    isDollar = (cmd)-> typeof str == 'string' && str[0] == '$'\n\n    shouldSpawn = (cmd)->\n      str = L_strTokenString cmd\n      typeof str == 'string' && (!isDefined(str) || isDollar(cmd))\n\n    define 'spawnProcess', (mode, list)->\n      if res = L_checkPartial(L_spawnProcess, arguments) then res\n      else\n        mode = rz mode\n        list = rz(list).toArray()\n        switch mode\n          when 'first'\n            try\n              readStream spawn(list[0], list[1..]).stdout\n            catch err\n              if err.stderr then consFrom [trimNl err.stderr.toString()]\n              else throw err\n          when 'middle'\n            lz (input)->\n              input = rz input\n              procInput = if input instanceof ChildProcess then input.stdout else 'pipe'\n              proc = spawn list[0], list[1..], stdio: [procInput, 'pipe']\n              if input instanceof Leisure_cons then writeLinesToStream proc.stdin, input\n              readStream proc.stdout\n          else throw \"#{rz(args)}\"\n\n    readStream = (stream)->\n      reader.addStream stream\n      lineListForStream stream\n\n    lineListForStream = (stream)->\n      line = reader.readLine stream\n      if !line then L_nil\n      else L_cons trimNL(line), -> lineListForStream stream\n\n    writeLinesToStream = (stream, lines)->\n      stream.on 'close', -> stream.isClosed = true\n      stream.on 'finish', -> stream.isClosed = true\n      stream.on 'error', -> stream.isClosed = true\n      global.STREAM = stream\n      pumpStream stream, lines\n\n    # Write lines to a stream, like for piping function output to a process\n    pumpStream = (stream, lines)->\n      while (lines instanceof Leisure_cons) && !stream.isClosed\n        line = L_head lines\n        if !stream.write \"#{line}\\n\"\n          stream.once 'drain', -> pumpStream stream, L_tail(lines)\n          break\n        lines = L_tail lines\n      if !stream.isClosed then stream.end()\n\n    trimNL = (str)-> if str[str.length - 1] == '\\n' then str.substring 0, str.length - 1 else str\n\n    isToken = (tok)-> L_isToken(tok) == L_true\n\n    tokenString = (tok)-> L_strTokenString tok\n\n    id = (x)-> x\n\n    Leisure.Base.promptText = 'lsh> '\n\n    if Leisure.Base.batchMode then reader.addStream process.stdin\n    \n    Leisure.Base.nextLine = ->\n      if Fiber.current != reader.fiber then reader.run Leisure.Base.nextLine\n      else\n        while (input = reader.readLine process.stdin)?\n          input = trimNL input\n          if input\n            Leisure.Base.processLine input\n            break\n\n    Leisure.Base.inputProcessor = (text, cont, noErrHandling)->\n      if Fiber.current != reader.fiber\n        reader.run -> Leisure.Base.inputProcessor text, cont, noErrHandling\n      else Leisure.Base.evalInput text, cont, noErrHandling\n\n    evalLeisure = (string, cont)-> runMonad2 L_baseLoadString('input', string), defaultEnv, cont ? id\n\n    evalLeisure \"\"\"\n      stringify s = s[\"'\" s \"'\"]\n\n      rewriteFlags list = isCons list\n        do\n          n = handleDash list\n          isNil n\n            do\n              x <- flat list\n              n = handleDash x\n              isNil n\n                [(rewriteFlags x)]\n                n\n            n\n        isNil list\n          nil\n          list\n\n      handleDash list = do\n        a1 = head list\n        a1Pos = tokenFilepos a1\n        a1Line = fileposLine a1Pos\n        a1Off = fileposOffset a1Pos\n        a2 = second list\n        a2D = handleDash a2\n        a3 = third list\n        a3Str = tokenString a3\n        a3Pos = tokenFilepos a3\n        a3Line = fileposLine a3Pos\n        a3Off = fileposOffset a3Pos\n        and[\n          isCons list\n          (length list) == 3\n          isToken a1\n          (tokenString a1) == '-'\n          isToken a3\n          a1Line == a3Line\n          a1Off + 1 == a3Off]\n          isNil a2D\n            [a2 s['-' a3Str]]\n            append a2D [s['-' a3Str]]\n          []\n\n      # gather arguments for a pipeline\n      defMacro 'e[' \\\\list . gatherProcArgs (rewriteFlags (stripNesting (head list)))\n\n      toPipeCons x = isCons x\n        x\n        isString x\n          strSplit x '\\\\n'\n          [x]\n\n      pipelineWrap f = compose toPipeCons f\n\n      defTokenPack 'shell' [[] ['e[':']'] []]\n\n      addStdTokenPacks ['shell']\n    \"\"\"\n"
  ]
}