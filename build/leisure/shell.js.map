{
  "version": 3,
  "file": "shell.js",
  "sourceRoot": "../../leisure/build",
  "sources": [
    "src/shell.litcoffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;;;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA;;EAMI,CAAA,CACE,YADF,CAAA,GAEI,OAAA,CAAQ,eAAR,CAFJ;;EAGA,CAAA,CACE,MADF,EAEE,UAFF,CAAA,GAGI,OAAO,CAAC,OAHZ;;EAIA,CAAA,CACE,OADF,EAEE,OAFF,EAGE,IAHF,EAIE,UAJF,EAKE,OALF,EAME,IANF,EAOE,SAPF,CAAA,GAQI,OAAO,CAAC,IARZ;;EASA,CAAA,CACE,GADF,CAAA,GAEI,OAAO,CAAC,GAFZ;;EAGA,EAAA,GAAK;;EACL,EAAA,GAAK;;EAEL,KAAA,GAAQ;;EAER,MAAM,CAAC,WAAP,GAAqB,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,MAAlB,CAAA;AACnB,QAAA;IAAA,IAAG,KAAH;MAAc,MAAM,IAApB;;IACA,KAAA,GAAQ;AACR;aACE,IAAA,CAAK,SAAA,CAAU,CAAA,EAAA,CAAA,CAAK,IAAL,CAAU,CAAV,CAAV,EAAwB,IAAxB,CAAL,EADF;KAAA,aAAA;MAEM;MACJ,IAAG,IAAI,CAAC,MAAL,IAAe,IAAI,CAAC,MAAvB;eAAmC,IAAA,CAAK,CAAA,IAAA,CAAA,CAAO,UAAA,CAAW,IAAI,CAAC,MAAM,CAAC,QAAZ,CAAA,CAAX,CAAP,CAAA,CAAL,EAAnC;OAAA,MAAA;QAEE,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,GAA5B,EAAiC,IAAjC;eACA,IAAA,CAAK,EAAL,EAHF;OAHF;KAAA;MAQE,KAAA,GAAQ,MARV;;EAHmB;;EAarB,UAAA,GAAa,QAAA,CAAC,GAAD,CAAA;IAAQ,IAAG,GAAI,CAAA,GAAG,CAAC,MAAJ,GAAa,CAAb,CAAJ,KAAuB,IAA1B;aAAoC,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,GAAG,CAAC,MAAJ,GAAa,CAA9B,EAApC;KAAA,MAAA;aAAyE,IAAzE;;EAAR;;EAEb,MAAA,GAAS,QAAA,CAAC,IAAD,CAAA;WAAS,IAAA,YAAgB;EAAzB;;EAET,MAAA,CAAO,MAAP,EAAe,QAAA,CAAC,IAAD,CAAA;AACb,QAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAAG,GAAA,GAAM,cAAA,CAAe,MAAf,EAAuB,SAAvB,CAAT;aAAgD,IAAhD;KAAA,MAAA;MAEE,IAAA,GAAO,EAAA,CAAG,IAAH;MACP,KAAA,GAAQ;AACR,aAAM,IAAA,YAAgB,YAAtB;QACE,CAAA,GAAI,MAAA,CAAO,IAAP;QACJ,GAAA,GAAM;QACN,GAAA,GAAM;AACN;UACE,GAAA,GAAM,SAAA,CAAW,OAAA,CAAQ,CAAR,CAAX,EAAuB,IAAvB,EAA6B,IAA7B,EADR;SAAA,aAAA;UAEM;UACJ,GAAA,GAAM,KAHR;;QAIA,IAAI,WAAJ;UACE,GAAA;YAAM,IAAG,OAAO,CAAP,KAAY,QAAf;qBAA6B,EAA7B;aAAA,MACD,IAAG,CAAA,YAAa,aAAhB;qBAAmC,aAAA,CAAc,CAAd,EAAnC;aAAA,MACA,IAAG,GAAH;cAAY,MAAM,IAAlB;;eAHP;;QAIA,KAAK,CAAC,IAAN,CAAW,GAAX;QACA,IAAA,GAAO,MAAA,CAAO,IAAP;MAbT;AAcA;eACE,UAAA,CAAW,YAAY,CAAC,IAAb,CAAkB,IAAlB,EAAwB,KAAM,CAAA,CAAA,CAA9B,EAAkC,KAAM,SAAxC,EAA8C;UAAA,KAAA,EAAO;QAAP,CAA9C,CAA4D,CAAC,QAA7D,CAAA,CAAX,EADF;OAAA,aAAA;QAEM;QACJ,IAAG,GAAG,CAAC,MAAP;iBAAmB,UAAA,CAAW,GAAG,CAAC,MAAM,CAAC,QAAX,CAAA,CAAX,EAAnB;SAAA,MAAA;UACK,MAAM,IADX;SAHF;OAlBF;;EADa,CAAf;;EAyBA,OAAA,GAAU,QAAA,CAAC,IAAD,CAAA;IACR,IAAG,IAAA,YAAgB,YAAnB;aAAqC,CAAA,CAAA,CAAA,CAAI,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,CAAC,IAAlB,CAAuB,GAAvB,CAAJ,CAA+B,CAA/B,EAArC;KAAA,MAAA;aACK,gBAAA,CAAiB,IAAjB,EADL;;EADQ;;EAIV,SAAA,CAAU,gCAAV,EAEK,QAFL;;EAGA,SAAA,CAAU,mYAAV,EAcK,QAdL;;EAeA,SAAA,CAAU,+OAAV,EAeK,QAfL;;EAgBA,SAAA,CAAU,2jBAAV,EA0BK,QA1BL;;EA2BA,SAAA,CAAU,yFAAV,EAEK,QAFL;;EAGA,SAAA,CAAU,yCAAV,EAEK,QAFL;;EAGA,SAAA,CAAU,4BAAV,EAEK,QAFL;AA/IJ",
  "sourcesContent": [
    "Shell support for Leisure. Runs in Node.js\n\nIf a line begins with a string that is unevaluable\n* try executing it as a shell command\n* pass any unevaluable arguments that are strings through verbatim\n\n    {\n      execFileSync\n    } = require 'child_process'\n    {\n      define\n      booleanFor\n    } = Leisure.Runtime\n    {\n      newCall\n      resolve\n      lazy\n      defaultEnv\n      replEnv\n      show\n      evalInput\n    } = Leisure.Base\n    {\n      Nil\n    } = Leisure.Ast\n    rz = resolve\n    lz = lazy\n\n    inErr = false\n\n    global.handleError = (err, cont, text, source)->\n      if inErr then throw err\n      inErr = true\n      try\n        cont evalInput \"e[#{text}]\", show\n      catch err2\n        if err2.status && err2.stderr then cont \"ERR #{trimLastNl err2.stderr.toString()}\"\n        else\n          console.log \"Shell ERROR:\", err, text\n          cont ''\n      finally\n        inErr = false\n\n    trimLastNl = (str)-> if str[str.length - 1] == '\\n' then str.substring 0, str.length - 1 else str\n\n    asBool = (bool)-> bool instanceof Leisure_true\n\n    define 'exec', (list)->\n      if res = L_checkPartial(L_exec, arguments) then res\n      else\n        list = rz list\n        fargs = []\n        while list instanceof Leisure_cons\n          t = L_head list\n          arg = null\n          err = null\n          try\n            arg = evalInput (detoken t), show, true\n          catch err2\n            err = err2\n          if !arg?\n            arg = if typeof t == 'string' then t\n            else if t instanceof Leisure_token then L_tokenString t\n            else if err then throw err\n          fargs.push arg\n          list = L_tail list\n        try\n          trimLastNl execFileSync.call(null, fargs[0], fargs[1..], stdio: 'pipe').toString()\n        catch err\n          if err.stderr then trimLastNl err.stderr.toString()\n          else throw err\n\n    detoken = (toks)->\n      if toks instanceof Leisure_cons then \"(#{toks.map(detoken).join ' '})\"\n      else L_strTokenString toks\n\n    evalInput \"\"\"\n      stringify s = s[\"'\" s \"'\"]\n    \"\"\", identity\n    evalInput \"\"\"\n      destructure toks = isCons toks\n        toks\n          \\\\h t D . ['cons' (destructure h) (destructure t)]\n          'nil'\n        isNil toks\n          'nil'\n          isToken toks\n            toks \\\\t p . p \\\\fil ln off . ['token' (stringify t) ['filepos' (stringify fil) ln off]]\n            isParens toks\n              toks \\\\s e c . ['parens' s e (destructure c)]\n              isString toks\n                stringify toks\n                toks\n    \"\"\", identity\n    evalInput \"\"\"\n      rewriteFlags list = isCons list\n        do\n          n = handleDash list\n          isNil n\n            do\n              x <- flat list\n              n = handleDash x\n              isNil n\n                [(rewriteFlags x)]\n                n\n            n\n        isNil list\n          nil\n          list\n    \"\"\", identity\n    evalInput \"\"\"\n      handleDash list = do\n        a1 = head list\n        a1Pos = tokenFilepos a1\n        a1Line = fileposLine a1Pos\n        a1Off = fileposOffset a1Pos\n        a2 = second list\n        a2D = handleDash a2\n        a2F = isNil a2D a2 a2D\n        a3 = third list\n        a3Str = tokenString a3\n        a3Pos = tokenFilepos a3\n        a3Line = fileposLine a3Pos\n        a3Off = fileposOffset a3Pos\n        and[\n          isCons list\n          (consLength list) == 3\n          isToken a1\n          isToken a3\n          isTokenString a1 '-'\n          a1Line == a3Line\n          a1Off + 1 == a3Off]\n          a2F == a2D\n            append a2F [s['-' a3Str]]\n            [a2F s['-' a3Str]]\n          []\n    \"\"\", identity\n    evalInput \"\"\"\n      defMacro 'e[' \\\\list . ['exec' (destructure (rewriteFlags (head (stripNesting list))))]\n    \"\"\", identity\n    evalInput \"\"\"\n      defTokenPack 'shell' [[] ['e[':']'] []]\n    \"\"\", identity\n    evalInput \"\"\"\n      addStdTokenPacks ['shell']\n    \"\"\", identity\n"
  ]
}