{
  "version": 3,
  "file": "testSpawn.js",
  "sourceRoot": "../../leisure/build",
  "sources": [
    "src/testSpawn.litcoffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,WAAA,EAAA,EAAA,EAAA,MAAA,EAAA,MAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,KAAA,EAAA;;EAEI,CAAA,CAAC,WAAD,CAAA,GAAgB,MAAA,GAAS,OAAA,CAAQ,SAAR,CAAzB;;EACA,CAAA,CAAC,KAAD,CAAA,GAAU,OAAA,CAAQ,eAAR,CAAV;;EACA,EAAA,GAAK,OAAA,CAAQ,IAAR;;EAEL,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA;IAAA,EAAA,GAAK,KAAA,CAAM,IAAN,EAAY,EAAZ;WACL,KAAA,CAAM,MAAN,EAAc,CAAC,OAAD,CAAd,EAAyB;MAAA,KAAA,EAAO,CAAC,EAAE,CAAC,MAAJ,EAAY,MAAZ,EAAoB,SAApB;IAAP,CAAzB;EAFkB;;EAIpB,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA;IAAA,EAAA,GAAK,KAAA,CAAM,MAAN,EAAc,CAAC,KAAD,EAAQ,KAAR,CAAd;WACL,KAAA,CAAM,IAAN,EAAY,EAAZ,EAAgB;MAAA,KAAA,EAAO,CAAC,EAAE,CAAC,MAAJ,EAAY,MAAZ,EAAoB,SAApB;IAAP,CAAhB;EAFkB;;EAIpB,MAAA,GAAS,QAAA,CAAC,GAAD,CAAA;IAAQ,IAAG,GAAI,CAAA,GAAG,CAAC,MAAJ,GAAa,CAAb,CAAJ,KAAuB,IAA1B;aAAoC,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,GAAG,CAAC,MAAJ,GAAa,CAA9B,EAApC;KAAA,MAAA;aAA0E,IAA1E;;EAAR;;EAET,MAAA,GAAS,WAAA,CAAA;;EACT,MAAM,CAAC,GAAP,CAAW,QAAA,CAAA,CAAA;AACT,QAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA;AAAA;MACE,KAAA,GAAQ,iBAAA,CAAA;MACR,MAAM,CAAC,OAAP,CAAe,KAAf;MACA,KAAA,GAAQ,EAAE,CAAC,gBAAH,CAAoB,YAApB,EAAkC;QAAA,aAAA,EAAe,IAAf;QAAqB,QAAA,EAAU;MAA/B,CAAlC,EAFR;;MAIA,MAAM,CAAC,SAAP,CAAiB,KAAjB;AACA,aAAM,yCAAN;QACE,GAAA,GAAM,MAAA,CAAO,MAAP;QACN,OAAO,CAAC,GAAR,CAAY,CAAA,QAAA,CAAA,CAAW,GAAX,CAAA,CAAA,CAAgB,CAAI,GAAA,KAAO,MAAV,GAAsB,GAAtB,GAA+B,EAAhC,CAAhB,CAAmD,CAAnD,CAAZ;MAFF;MAGA,OAAO,CAAC,GAAR,CAAY,WAAZ;MACA,OAAO,CAAC,GAAR,CAAY,cAAZ;AACA;aAAM,yCAAN;QACE,GAAA,GAAM,MAAA,CAAO,MAAP;qBACN,OAAO,CAAC,GAAR,CAAY,CAAA,QAAA,CAAA,CAAW,GAAX,CAAA,CAAA,CAAgB,CAAI,GAAA,KAAO,MAAV,GAAsB,GAAtB,GAA+B,EAAhC,CAAhB,CAAmD,CAAnD,CAAZ;MAFF,CAAA;qBAXF;KAAA,aAAA;MAcM;aACJ,OAAO,CAAC,GAAR,CAAY,GAAZ,EAfF;KAAA;MAiBE,OAAO,CAAC,GAAR,CAAY,SAAZ,EAjBF;;EADS,CAAX;;EAoBA,MAAM,CAAC,GAAP,CAAW,QAAA,CAAA,CAAA;WAAG,OAAO,CAAC,GAAR,CAAY,UAAZ;EAAH,CAAX;AArCJ",
  "sourcesContent": [
    "Test piping data from one process to another\n\n    {fiberReader} = module = require './spawn'\n    {spawn} = require 'child_process'\n    fs = require 'fs'\n\n    runTestProcesses1 = ->\n      p1 = spawn 'ls', []\n      spawn 'grep', ['index'], stdio: [p1.stdout, 'pipe', 'inherit']\n\n    runTestProcesses2 = ->\n      p1 = spawn 'echo', ['one', 'two']\n      spawn 'wc', [], stdio: [p1.stdout, 'pipe', 'inherit']\n\n    trimNL = (str)-> if str[str.length - 1] == '\\n' then str.substring(0, str.length - 1) else str\n\n    reader = fiberReader()\n    reader.run ->\n      try\n        proc1 = runTestProcesses1()\n        reader.addProc proc1\n        file1 = fs.createReadStream '/tmp/derp2', highWaterMark: 4096, encoding: 'binary'\n        #console.log \"READING FILE\", file1\n        reader.addStream file1\n        while (output = reader.readLine file1)?\n          str = trimNL output\n          console.log \"FILE 1 '#{str}#{if str == output then '%' else ''}'\"\n        console.log \"FILE DONE\"\n        console.log \"READING PROC\"\n        while (output = reader.readLine proc1)?\n          str = trimNL output\n          console.log \"PROC 1 '#{str}#{if str == output then '%' else ''}'\"\n      catch err\n        console.log err\n      finally\n        console.log \"EXITING\"\n\n    reader.run -> console.log \"FINISHED\"\n"
  ]
}