// Generated by CoffeeScript 2.2.4
(function() {
  // Basic omniscient debugger
  define(['./base', 'bluebird'], function(Base, Bluebird) {
    var ODB, Promise, clearEntries, currentOdb, deleteEntries, dumpTraceValues, flushTraceLog, getCallGraphEntry, getCallGraphInfo, getContextDef, getEntry, getLambdaDef, getLatestEntry, handleTraceValues, messageId, requestPromises, setVerbose, trackDebugging, trackOdb, useDebugging, useOdb, worker;
    ({useDebugging, trackDebugging, flushTraceLog} = Base);
    ({Promise} = Bluebird);
    messageId = 1;
    requestPromises = {};
    currentOdb = null;
    worker = new Worker('build/odbWorker.js');
    worker.onmessage = function(e) {
      var err, p;
      console.log(`Received response: ${JSON.stringify(e)}`);
      if (e.data.msgId && (p = requestPromises[e.data.msgId])) {
        requestPromises[e.data.msgId] = null;
        if (e.data.error) {
          err = new Error();
          err.message = e.data.error.message;
          err.stack = e.data.error.stack;
          return p.reject(err);
        } else {
          return p.resolve(e.data.return);
        }
      }
    };
    useOdb = function(...types) {
      var i, len, results, type;
      results = [];
      for (i = 0, len = types.length; i < len; i++) {
        type = types[i];
        results.push(useDebugging(100, handleTraceValues, type));
      }
      return results;
    };
    trackOdb = function() {
      console.log('ODB tracking');
      return trackDebugging(100, handleTraceValues);
    };
    handleTraceValues = function(values) {
      return currentOdb.handleTraceValues(values);
    };
    dumpTraceValues = function() {
      return currentOdb.dumpTraceValues();
    };
    setVerbose = function(state) {
      return currentOdb.setVerbose(state);
    };
    getLatestEntry = function() {
      return currentOdb.getLatestEntry();
    };
    getEntry = function(type, key) {
      return currentOdb.getEntry(type, key);
    };
    getCallGraphInfo = function() {
      return currentOdb.getCallGraphInfo();
    };
    getCallGraphEntry = function(n) {
      return currentOdb.getCallGraphEntry(n);
    };
    getContextDef = function(contextId, defId) {
      return currentOdb.getContextDef(contextId, defId);
    };
    getLambdaDef = function(name) {
      return currentOdb.getLambdaDef(name);
    };
    clearEntries = function() {
      return currentOdb.clearEntries();
    };
    deleteEntries = function() {
      return currentOdb.deleteEntries();
    };
    ODB = class ODB {
      constructor(logName) {
        this.logName = logName;
      }

      postRequest(msg) {
        var msgId, p;
        flushTraceLog();
        msg.logName = this.logName;
        msgId = msg.msgId = messageId++;
        p = new Promise(function(resolve, reject) {
          return requestPromises[msgId] = {resolve, reject};
        });
        worker.postMessage(msg);
        return p;
      }

      postMessage(req, suppressFlush) {
        if (!suppressFlush) {
          flushTraceLog();
        }
        req.logName = this.logName;
        return worker.postMessage(req);
      }

      handleTraceValues(values) {
        return this.postMessage({
          msg: 'queueValues',
          values: values
        }, true);
      }

      dumpTraceValues() {
        return this.postMessage({
          msg: 'dumpValues'
        });
      }

      getLatestEntry() {
        return this.postRequest({
          msg: 'latestEntry'
        });
      }

      getEntry(type, key) {
        return this.postRequest({
          type,
          key,
          msg: 'getEntry'
        });
      }

      getContextDef(contextId, defId) {
        return this.postRequest({
          id,
          msg: 'getContextDef',
          context: contextId
        });
      }

      getLambdaDef(name) {
        return this.postRequest({
          msg: 'getContextDef',
          lambdaName: name
        });
      }

      getCallGraphInfo() {
        return this.postRequest({
          msg: 'getCallGraphInfo'
        });
      }

      getCallGraphEntry(number) {
        return this.postRequest({
          number,
          msg: 'getCallGraphEntry'
        });
      }

      clearEntries() {
        return this.postMessage({
          msg: 'clearEntries'
        });
      }

      deleteEntries() {
        return this.postMessage({
          msg: 'deleteEntries'
        });
      }

      setVerbose(state) {
        return this.postMessage({
          msg: 'setVerbose',
          verbose: state
        });
      }

    };
    currentOdb = new ODB('testLog');
    window.useOdb = useOdb;
    return window.ODB = Leisure.ODB = {
      dump: dumpTraceValues,
      useOdb,
      trackOdb,
      getEntry,
      dumpTraceValues,
      getLatestEntry,
      getEntry,
      getContextDef,
      getLambdaDef,
      clearEntries,
      deleteEntries,
      setVerbose,
      getCallGraphInfo,
      getCallGraphEntry
    };
  });

}).call(this);

//# sourceMappingURL=odb.js.map
