// Generated by CoffeeScript 1.12.6
(function() {
  var slice = [].slice;

  define(['./base', 'bluebird'], function(Base, Bluebird) {
    var Promise, addRecord, clearEntries, deleteEntries, flushTraceLog, getEntry, getLatestEntry, handleTraceValues, messageId, postRequest, requestPromises, trackDebugging, trackOdb, useDebugging, useOdb, worker;
    useDebugging = Base.useDebugging, trackDebugging = Base.trackDebugging, flushTraceLog = Base.flushTraceLog;
    Promise = Bluebird.Promise;
    messageId = 0;
    requestPromises = {};
    worker = new Worker('build/odbWorker.js');
    worker.onmessage = function(e) {
      var p;
      if (e.data.requestId && (p = requestPromises[e.data.requestId])) {
        requestPromises[e.data.requestId] = null;
        return p(e.data["return"]);
      }
    };
    postRequest = function(msg) {
      var msgId, p;
      msgId = msg.msgId = messageId++;
      p = new Promise(function(resolve, reject) {
        return requestPromises[msgId] = resolve;
      });
      worker.postMessage(msg);
      return p;
    };
    handleTraceValues = function(values) {
      return worker.postMessage({
        msg: 'queueValues',
        logName: 'testLog',
        values: values
      });
    };
    useOdb = function() {
      var i, len, results, type, types;
      types = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = types.length; i < len; i++) {
        type = types[i];
        results.push(useDebugging(100, handleTraceValues, type));
      }
      return results;
    };
    trackOdb = function() {
      console.log('ODB tracking');
      return trackDebugging(100, handleTraceValues);
    };
    addRecord = function(map, instanceId, record) {
      var seq;
      seq = record.sequence = traceRecords.sequenceNum++;
      traceRecords.sequence[seq] = map[instanceId] = record;
      if (traceRecords.items[seq] == null) {
        return traceRecords.items[seq] = record;
      }
    };
    getLatestEntry = function() {
      return postRequest({
        msg: 'latestEntry',
        logName: 'testLog'
      });
    };
    getEntry = function(type, key) {
      return postRequest({
        msg: 'getEntry',
        logName: 'testLog',
        type: type,
        key: key
      });
    };
    clearEntries = function() {
      return worker.postMessage({
        msg: 'clearEntries',
        logName: 'testLog'
      });
    };
    deleteEntries = function() {
      return worker.postMessage({
        msg: 'deleteEntries',
        logName: 'testLog'
      });
    };
    window.useOdb = useOdb;
    return window.ODB = {
      useOdb: useOdb,
      trackOdb: trackOdb,
      getEntry: getEntry,
      getLatestEntry: getLatestEntry,
      clearEntries: clearEntries,
      deleteEntries: deleteEntries
    };
  });

}).call(this);

//# sourceMappingURL=odb.js.map
