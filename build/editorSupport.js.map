{
  "version": 3,
  "file": "editorSupport.js",
  "sourceRoot": "..",
  "sources": [
    "src/editorSupport.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Editing support for Leisure\n\nThis file customizes the editor so it can handle Leisure files.  Here is the Leisure\nblock structure:  ![Block structure](private/doc/blockStructure.png)\n\n    'use strict'\n    define ['./base', './org', './docOrg', './ast', './utilities', './eval', './leisure-support', './editor', 'lodash', 'jquery', './ui', './db', 'handlebars', './lib/prism', './advice', 'lib/js-yaml', 'bluebird', 'immutable', 'fingertree', './tangle', 'lib/sha1'], (Base, Org, DocOrg, Ast, Utilities, Eval, LeisureSupport, Editor, _, $, UI, DB, Handlebars, Prism, Advice, Yaml, Bluebird, Immutable, FingerTree, Tangle, SHA1)->\n      {\n        defaultEnv\n        CodeContext\n      } = Base\n      {\n        parseOrgMode\n        Fragment\n        Headline\n        headlineRE\n      } = Org\n      {\n        orgDoc\n        getCodeItems\n        blockSource\n        blockOrg: docBlockOrg\n        ParsedCodeBlock\n        parseYaml\n      } = DocOrg\n      {\n        Nil\n      } = Ast\n      {\n        ajaxGet\n      } = Utilities\n      {\n        languageEnvMaker\n        Html\n        presentHtml\n        setLounge\n        blockVars\n        blocksObserved\n        hasCodeAttribute\n        isYamlResult\n        escapeString\n        writeResults\n      } = Eval\n      {\n        LeisureEditCore\n        last\n        DataStore\n        DataStoreEditingOptions\n        blockText\n        posFor\n        escapeHtml\n        findEditor\n        copyBlock\n        preserveSelection\n        BasicEditingOptions\n        modifyingKey\n      } = Editor\n      {\n        changeAdvice\n        afterMethod\n        beforeMethod\n      } = Advice\n      {\n        addView\n        removeView\n        renderView\n        addController\n        removeController\n        withContext\n        mergeContext\n        initializePendingViews\n        escapeAttr\n      } = UI\n      {\n        hasDatabase\n        transaction\n      } = DB\n      {\n        dump\n      } = Yaml\n      {\n        Map\n        Set\n      } = Immutable\n      {\n        Promise\n      } = Bluebird\n      {\n        shouldTangle\n      } = Tangle\n\n      selectionActive = true\n      headlineRE = /^(\\*+ *)(.*)(\\n)$/\n      documentParams = null\n      localStoreName = 'leisureStorage'\n      localDb = null\n      localStore = null\n      bubbleTopOffset = -5\n      bubbleLeftOffset = 0\n      keySplitPat = new RegExp ' +'\n      postCallPat = /^([^(]*)\\((.*)\\)/\n\n      CodeContext::executeBlock = (block, cont)-> @executeText blockSource(block), cont\n\n      blockOrg = (data, blockOrText)-> docBlockOrg (if typeof blockOrText == 'string' then data.getBlock blockOrText) ? blockOrText\n\n`OrgData` -- a DataStore that supports block-structured org file data.\nEach block has type 'headline', 'code', or 'chunk'.  Blocks use nextSibling\nand previousSibling ids to indicate the tree structure of the org document\n(there are no direct parent/child links).\n\n      class OrgData extends DataStore\n        constructor: ->\n          #DataStore.apply this, arguments\n          super arguments\n          @disableObservation = true\n          @pendingObserves = {}\n          @running = {}\n          @observers = new NMap()\n          @filters = []\n          @initializeLocalData()\n          @pendingEvals = []\n          @importPromise = Promise.resolve()\n          @tangles = {}\n          @titleBlocks = new Set()\n          @dataChanges = null\n          @collaborativeCode = {}\n          @collaborativeBase = {}\n          @closeRegistration()\n        change: (changes)->\n          ch = @makeChange changes\n          @trigger 'change', ch\n        allowObservation: (func)->\n          old = @disableObservation\n          @disableObservation = false\n          func()\n          @disableObservation = old\n        addImported: (importFile, type, name)->\n          if typeof importFile == 'string'\n            if @importRecords[type][name]\n              @importRecords[type][name].push importFile\n              console.log \"Warning, conflicting block of type: #{type} imported from #{@importRecords[type][name]}\"\n            else @importRecords[type][name] = [importFile]\n          else typeof importFile == 'boolean'\n        initializeLocalData: ->\n          @namedBlocks = {}\n          @localBlocks = {}\n          @indexer = new DataIndexer()\n          @imported =\n            css: {}\n            view: {}\n            control: {}\n            data: {}\n\nAt this point, there is no conflict handling for imports that use the\nsame names for blocks other than printing a warning.\n\n          @importedData = {}\n          @importRecords =\n            data: {}\n            view: {}\n            controller: {}\n            importedFiles: {}\n          transaction(@localDocumentId()).getAll().then (allData)=>\n            @localBlocks = _.keyBy allData, '_id'\n            deletes = []\n            for name of @localBlocks\n              if !@namedBlocks[name] || !(@getBlockNamed name).local then deletes.push name\n            for name in deletes\n              @deleteLocalBlock name\n        replaceText: (repl)->\n          super repl\n          @runTextFilters repl\n          @scheduleEvals()\n        getImage: (name, cont, fail)->\n          @getFile name, ((contents)->\n            if url = makeImageBlob name, contents then cont url else fail \"Couldn't create image for #{{name}}\"\n          ), fail\n        getBlock: (thing, changes)->\n          if typeof thing == 'object' then thing\n          else changes?.sets[thing] ? super(thing) ? @imported.data[thing]\n        changesFor: (first, oldBlocks, newBlocks)->\n          changes = super first, oldBlocks, newBlocks\n          @linkAllSiblings changes\n          changes\n        # `load` -- not the best use of inheritance here, changes is specifically for P2POrgData :).\n        # Let's just call this poetic license for the time being...\n        load: (name, text, context)->\n          @loadName = name\n          @makeChanges =>\n            @initializeLocalData()\n            @loading = true\n            @suppressTriggers => super name, text\n            for filter in @filters\n              filter.clear this\n            newBlocks = @blockList()\n            changes = sets: @blocks, oldBlocks: [], newBlocks: newBlocks, first: @first\n            @linkAllSiblings changes\n            for id, block of changes.sets\n              @checkImports block\n            @runTextFilters context\n            for id, block of changes.sets\n              @runFilters null, block, context\n              @checkChange null, block\n            @scheduleEvals().then => @trigger 'load'\n            @loading = false\n        loadTangles: (tangleText)-> eval tangleText\n        addTangle: (block, code)->\n          console.log \"ADDING TANGLE: #{block.hash}\"\n          @tangles[block.hash] = code ? block\n        hasTangle: (block)-> @getTangle block\n        getTangle: (block)-> @tangles[block.hash ? block.hash = SHA1.hash block.text]\n        tangleAddData: (block, data)->\n          @addTangle block\n          if block.codeName then @importedData[block.codeName] = block\n        tangleAddView: (block, code)->\n          @addTangle block\n          @checkViewChange null, block, true\n        tangleAddController: (block, code)-> @addTangle block, code\n        tangleAddObserver: (block, code)-> @addTangle block, code\n        tangleAddDef: (block, code)-> @addTangle block, code\n        setBlock: (id, block)->\n          @makeChanges =>\n            @runFilters @getBlock(id), block\n            super id, block\n        contextForBlock: (id, context)->\n          if start = @offsetForBlock id\n            context.start = start\n            context.end = start + @getBlock(id).text.length\n            context\n        deleteBlock: (id)->\n          @makeChanges =>\n            @runFilters @getBlock(id), null\n            super id\n        addFilter: (filter)-> @filters.push filter\n        removeFilter: (filter)-> _.remove @filters, (i)-> i == filter\n        runFilters: (oldBlock, newBlock, context)->\n          for filter in @filters\n            filter.replaceBlock this, oldBlock, newBlock, context\n        runTextFilters: (context)->\n          if context\n            for filter in @filters\n              filter.replaceText? this, context\n        parseBlocks: (text)-> parseOrgDoc text\n        nextSibling: (thing, changes)-> @getBlock @getBlock(thing, changes)?.nextSibling, changes\n        previousSibling: (thing, changes)-> @getBlock @getBlock(thing, changes).previousSibling, changes\n        reducePreviousSiblings: (thing, changes, func, arg)->\n          greduce @getBlock(thing, changes), changes, func, arg, (b)=> @getBlock b.previousSibling, changes\n        reduceNextSiblings: (thing, changes, func, arg)->\n          greduce @getBlock(thing, changes), changes, func, arg, (b)=> @getBlock b.nextSibling, changes\n        lastSibling: (thing, changes)-> @reduceNextSiblings thing, changes, ((x, y)-> y), null\n        firstSibling: (thing, changes)-> @reducePreviousSiblings thing, changes, ((x, y)-> y), null\n        parent: (thing, changes)-> @getBlock @firstSibling(thing, changes)?.prev, changes\n        properties: (thing)->\n          props = {}\n          bl = @getBlock thing\n          if bl.type != 'headline'\n            if bl.type == 'code'\n              _.defaults props, bl.codeAttributes\n              _.defaults props, bl.properties\n            else if bl.type == 'chunk' then _.defaults props, bl.properties\n            bl = @parent bl\n          while bl\n            @scrapePropertiesInto bl, props\n            bl = @parent bl\n          props\n        scrapePropertiesInto: (block, props)->\n          for child in @children block\n            if child.type == 'chunk' && child.properties && !_.isEmpty child.properties\n              _.defaults props, child.properties\n        firstChild: (thing, changes)->\n          if (block = @getBlock thing, changes) && (n = @getBlock block.next, changes) && !n.previousSibling\n            n\n        lastChild: (thing, changes)-> @lastSibling @firstChild(thing, changes), changes\n        children: (thing, changes)->\n          c = []\n          @reduceNextSiblings @firstChild(thing, changes), changes, ((x, y)-> c.push y), null\n          c\n\n`nextRight` returns the next thing in the tree after this subtree, which is just the\nnext sibling if there is one, otherwise it's the closest \"right uncle\" of this node\n\n        nextRight: (thing, changes)->\n          while thing\n            if sib = @nextSibling thing, changes then return sib\n            thing = @parent thing, changes\n          null\n\n`linkAllSiblings` -- modify changes so that the sibling links will be correct when the changes are applied.\n\n        linkAllSiblings: (changes)->\n          stack = []\n          parent = null\n          sibling = null\n          emptyNexts = {}\n          cur = @getBlock changes.first, changes\n          while cur\n            if cur.nextSibling then emptyNexts[cur._id] = cur\n            if cur.type == 'headline'\n              while parent && cur.level <= parent.level\n                [parent, sibling] = stack.pop()\n            else if cur.type == 'chunk' && cur.properties? && parent && !_(parent.propertiesBlocks).includes cur._id\n              if !parent.propertiesBlocks\n                parent.propertiesBlocks = []\n              parent.propertiesBlocks.push cur._id\n            if sibling\n              delete emptyNexts[sibling._id]\n              if sibling.nextSibling != cur._id\n                addChange(sibling, changes).nextSibling = cur._id\n              if cur.previousSibling != sibling._id\n                addChange(cur, changes).previousSibling = sibling._id\n            else if cur.previousSibling\n              delete addChange(cur, changes).previousSibling\n            sibling = cur\n            if cur.type == 'headline'\n              stack.push [parent, sibling]\n              parent = cur\n              sibling = null\n            cur = @getBlock cur.next, changes\n          for id, block of emptyNexts\n            delete addChange(block, changes).nextSibling\n\n`makeChange` -- handle incoming changes (local or remote).  This is for computations\nthat must be done regardless of the source of changes\n\n        makeChange: (changes)->\n          for id, block of changes.sets\n            @checkImports block\n          for id, block of @removesAndSets changes\n            if block then @checkChange @getBlock(id), block ? null\n          super changes\n        removesAndSets: ({sets, removes})->\n          blocks = {}\n          for id of removes\n            blocks[id] = false\n          Object.assign blocks, sets\n          blocks\n        processDefaults: (lorgText)->\n          viewBlocks = parseOrgDoc lorgText\n          id = 0\n          for block in viewBlocks\n            block._id = \"default-#{id++}\"\n            @checkChange null, block, true\n          @scheduleEvals()\n        checkChange: (oldBlock, newBlock, isDefault)->\n          @checkIndexChange oldBlock, newBlock, isDefault\n          @checkPropChange oldBlock, newBlock, isDefault\n          @checkCssChange oldBlock, newBlock, isDefault\n          @checkCodeChange oldBlock, newBlock, isDefault\n          @checkChannelChange oldBlock, newBlock\n          @checkViewChange oldBlock, newBlock, isDefault\n          @checkControlChange oldBlock, newBlock, isDefault\n        checkIndexChange: (oldBlock, newBlock, isDefault)->\n          if newBlock\n            if keys = @indexer.keysFor newBlock\n              newBlock.keys = keys\n            else delete newBlock.keys\n          if !(_.isEqual newBlock?.keys, oldBlock?.keys)\n            if oldBlock?.keys\n              k = newBlock?.keys ? []\n              for key in oldBlock.keys\n                if !(key in k) then @deleteBlockKey id: oldBlock._id, key: key\n            if newBlock.keys\n              k = oldBlock?.keys ? []\n              for key in newBlock.keys when !(key in k)\n                @addBlockKey id: newBlock._id, key: key\n        addBlockKey: (k)-> @indexer.addBlockKey k\n        deleteBlockKey: (k)-> @indexer.deleteBlockKey k\n        find: (index, key)-> @indexer.find index, key\n        queueEval: (func)->\n          opts = defaultEnv.opts\n          @pendingEvals.push -> withDefaultOptsSet opts, func\n        runOnImport: (func)->\n          if @importPromise.isResolved\n            func()\n            @importPromise\n          else @importPromise.then =>\n            func()\n            null\n        scheduleEvals: -> @runOnImport =>\n          if @pendingEvals.length\n            e = @pendingEvals\n            @pendingEvals = []\n            for func in e\n              func()\n          if !_.isEmpty @pendingObserves\n            @allowObservation =>\n              blocked = {}\n              oldRunning = {}\n              try\n                while !_.isEmpty @pendingObserves\n                  p = @pendingObserves\n                  @pendingObserves = {}\n                  @withLounge => preserveSelection =>\n                    for blockId, subject of p\n                      if !@running[blockId] && (block = @getBlock(blockId))\n                        blocked[blockId] = true\n                        oldRunning[blockId] = @running[blockId]\n                        @running[blockId] = true\n                        (obs = block.observer)?.observe? subject\n                        if !@getBlock(block._id).observer then @getBlock(block._id).observer = obs\n              finally\n                for k of blocked\n                  @running[k] = oldRunning[k]\n        withLounge: (func)->\n          env = Object.create defaultEnv\n          env.data = this\n          setLounge env, func\n        triggerUpdate: (channelKeys..., block)->\n          if items = @observers.get channelKeys...\n            for id, v of items when v == true && block._id != id && !@running[id]\n              # verify that it's exactly equal to true\n              # if not, then it's not really an observer\n              @pendingObserves[id] = block\n          null\n        checkPropChange: (oldBlock, newBlock, isDefault)->\n          if oldBlock?.title && !newBlock.title\n            @titleBlocks.delete oldBlock._id\n            t = null\n            @titleBlocks.forEach (v)-> t = v\n            if t then document.title = t\n            else document.title = document.location\n          else if newBlock.title\n            @titleBlocks.add newBlock._id\n            @title = document.title = newBlock.title\n          if !isDefault && !newBlock?.level && !_.isEqual(oldBlock?.properties, newBlock?.properties) && parent = @parent newBlock ? oldBlock\n            newProperties = _.defaults @parseBlocks(parent.text).properties ? {}, newBlock.properties ? {}\n            if !_.isEqual parent.properties, newProperties\n              sets = {}\n              sets[parent._id] = parent\n              parent.properties = newProperties\n              setTimeout (=> @change {first: @getFirst(), sets, removes: {}, oldBlocks: [], newBlocks: [parent]}), 1\n        checkCssChange: (oldBlock, newBlock, isDefault)->\n          if isCss(oldBlock) || isCss(newBlock)\n            $(\"#css-#{blockElementId(oldBlock) || blockElementId(newBlock)}\").filter('style').remove()\n          if isCss newBlock\n            $('head').append \"<style id='css-#{blockElementId newBlock}'>#{blockSource newBlock}</style>\"\n        checkCodeChange: (oldBlock, newBlock, isDefault)->\n          if newBlock && @running[newBlock._id] then return\n          oldName = oldBlock?.codeName ? (oldBlock?.type == 'headline' && oldBlock?.properties?.name)\n          newName = newBlock?.codeName ? (newBlock?.type == 'headline' && newBlock?.properties?.name)\n          if oldName != newName\n            if oldName then @deleteBlockName oldName\n            if newName && (!isDefault || @addImported isDefault, 'data', newName)\n              @setBlockName newName, newBlock._id, isDefault\n          if isDefault && (newName || newBlock.codeAttributes?.observe) then @imported.data[newBlock._id] = newBlock\n          if oldBlock?.local && !newBlock?.local then @deleteLocalBlock oldName\n          if (resultType = newBlock?.codeAttributes?.results?.toLowerCase() in ['def', 'web']) || (resultType = newBlock?.codeAttributes?.observe? && 'observe')\n            @queueEval =>\n              if resultType == 'observe'\n                @updateObserver newBlock, oldBlock\n                @createObserver newBlock\n                if newBlock.codeAttributes.observe == 'system.document'\n                  @pendingObserves[newBlock._id] = newBlock\n              else\n                @openRegistration()\n                r = @executeBlock newBlock\n                if r instanceof Promise then r.finally => @closeRegistration()\n                else @closeRegistration()\n        createObserver: (block)->\n          env = @env block.language\n          blockId = block._id\n          sync = false\n          silent = isSilent block\n          if !silent\n            if isYamlResult block then env.write = (str)->\n              result += str\n              if result[result.length - 1] != '\\n' then result += '\\n'\n              if !sync then @replaceResult change._id, result\n            else env.write = (str)->\n              result += presentHtml str\n              if result[result.length - 1] != '\\n' then result += '\\n'\n              if !sync then @replaceResult change._id, result\n          block.observer = new CodeContext()\n          block.observer.data = this\n          block.observer.observe = (channelArgs...)=>\n            sync = true\n            try\n              res = @getCode(blockId).call block.observer, null, channelArgs...\n              if !silent then @replaceResult blockId, env.formatResult @getBlock(blockId), '', res\n            catch err\n              if !silent then @replaceResult blockId, \": #{(err.stack ? err.message).replace /\\n/g, '\\n: '}\"\n              else console.error err\n            sync = false\n        checkChannelChange: (oldBlock, newBlock)-> if !@disableObservation\n          @triggerUpdate 'system', 'document', newBlock\n          if newBlock.type == 'code' then @triggerUpdate 'system', 'code', newBlock\n          if type = @getYaml(newBlock)?.type then @triggerUpdate 'type', type, newBlock\n          if name = newBlock?.codeName then @triggerUpdate 'block', name, newBlock\n          if channels = newBlock?.codeAttributes?.channels\n            for channel in channels.split ' '\n              @triggerUpdate (channel.split '.')..., newBlock\n          null\n        updateObserver: (block, oldBlock)->\n          obs = @decodeObservers block\n          block.observing = obs\n          oldObs = oldBlock?.codeAttributes?.observe?.split(' ') ? []\n          for ch in oldObs\n            if !(ch in obs)\n              @observers.remove (ch.split '.')..., getId(oldBlock)\n          for ch in obs\n            if !(ch in oldObs)\n              @observers.add (ch.split '.')..., getId(block), true\n        getNamedBlockId: (name)-> @namedBlocks[name] ? @importedData[name]\n        setBlockName: (name, blockId, isDefault)->\n          (if isDefault then @importedData else @namedBlocks)[name] = blockId\n        deleteBlockName: (name)->\n          delete @namedBlocks[name]\n          @deleteLocalBlock name\n        getBlockNamed: (name)-> if id = @getNamedBlockId name then @getLocalBlock id\n        localDocumentId: -> document.location.href\n        getLocalBlock: (thing)->\n          if !(blk = @getBlock thing) then null\n          else if !blk.local || !(n = blk.codeName) || blk._id != @getNamedBlockId n\n            blk\n          else if local = copyBlock @localBlocks[n]\n            local._id = blk._id\n            local\n          else blk\n        storeLocalBlock: (block)->\n          if block.local && (name = block.codeName) && block._id == @getNamedBlockId name\n            old = @getBlockNamed name\n            @localBlocks[name] = block\n            block = copyBlock block\n            transaction(@localDocumentId()).put block\n            changes =\n              first: @getFirst()\n              oldBlocks: (if old then [old] else [])\n              newBlocks: [block]\n              sets: {}\n              adds: {}\n              updates: {}\n              removes: {}\n              old: []\n            changes.sets[block._id] = block\n            for oldBlock in changes.oldBlocks\n              changes.old[oldBlock._id] = oldBlock\n            @trigger 'change', changes\n        deleteLocalBlock: (name)->\n          if old = @localBlocks[name]\n            delete @localBlocks[name]\n            transaction(@localDocumentId()).delete name\n            newBlock = @getBlockNamed name\n            changes =\n              first: @getFirst()\n              oldBlocks: [old]\n              newBlocks: (if newBlock then [newBlock] else [])\n              sets: {}\n              adds: {}\n              removes: {}\n              updates: {}\n              old: []\n            changes.removes[old._id] = true\n            @trigger 'change', changes\n        textForDataNamed: (name, data, attrs)->\n          opts = ''\n          for k, v of attrs\n            if _.isArray v\n              for item in v\n                opts += \" :#{k} #{item}\"\n            else opts += \" :#{k} #{v}\"\n          \"\"\"\n          #{if name then '#+NAME: ' + name + '\\n' else ''}#+BEGIN_SRC yaml#{opts}\n          #{dump(data, _.defaults attrs ? {}, {sortKeys: true, flowLevel: 2}).trim()}\n          #+END_SRC\n\n          \"\"\"\n        checkViewChange: (oldBlock, newBlock, isDefault)->\n          if oldBlock && ov = blockViewType oldBlock\n            removeView ov\n          if vt = blockViewType newBlock\n            source = blockSource newBlock\n            if !isDefault || @addImported isDefault, 'view', vt\n              addView vt, null, source.substring(0, source.length - 1), isDefault\n        checkControlChange: (oldBlock, newBlock, isDefault)->\n          if (isControl(oldBlock) || isControl(newBlock)) && (oldBlock?.type != 'code' || blockSource(oldBlock) != blockSource(newBlock) || isControl(oldBlock) != isControl(newBlock))\n            @queueEval => @changeController oldBlock, newBlock, isDefault\n        changeController: (oldBlock, newBlock, isDefault)->\n          if newBlock && @running[newBlock._id] then return\n          if oldBlock && ov = blockViewType oldBlock, 'control', isDefault\n            removeController ov\n          if vt = blockViewType newBlock, 'control'\n            controller = {}\n            if !isDefault || @addImported isDefault, 'controller', vt\n              addController vt, null, controller, isDefault\n              env = @env newBlock.language\n              controller.__proto__ = env\n              setLounge env, => @getCode(newBlock).call controller\n              controller.__proto__ = null\n        oldExecuteBlock: (block, envConf)->\n          completedFlag = false\n          cont = null\n          r = @executeText block.language, blockSource(block), ((result)->\n              if !completedFlag\n                completedFlag = true\n                result\n              else Promise.resolve result), ((env)->\n                envConf? env\n                if newBlock?.codeAttributes?.results?.toLowerCase() in ['def', 'silent']\n                  env.silent = true)\n                  #env.write = (str)-> console.log str)\n          if !completedFlag\n            completedFlag = true\n            new Promise (success)-> cont = success\n          else r\n        XoldExecuteBlock: (block, envConf)->\n          @executeText block.language, blockSource(block), null, ((env)->\n            envConf? env\n            if newBlock?.codeAttributes?.results?.toLowerCase() in ['def', 'silent']\n              env.silent = true)\n              #env.write = (str)-> console.log str)\n        executeBlock: (block, envConf)->\n          env = @env block.language, (env)->\n            if newBlock?.codeAttributes?.results?.toLowerCase() in ['def', 'web', 'silent']\n              env.silent = true\n              if isSilent newBlock then write = ->\n              else\n                #env.write = (str)-> console.log str\n                env.presentValue = (v)-> v\n            envConf? env\n          if env.executeBlock != defaultEnv.executeBlock\n            try\n              env.executeBlock block, (r)-> writeResults env, r\n            catch err\n              env.errorAt 0, String err\n          else if code = @getCode block\n            if code instanceof Promise\n              code\n                .then (func)-> setLounge env, -> func.call env\n                .then (result)-> writeResults env, result\n            else setLounge env, -> writeResults env, code()\n          else @oldExecuteBlock block, envConf\n        env: (language, envConf)->\n          if env = Object.create languageEnvMaker(language)?(__proto__: defaultEnv)\n            env.data = this\n            #env.write = (str)-> console.log str\n            envConf?(env)\n            env\n        executeText: (language, text, cont, envConf)->\n          @env(language, envConf)?.executeText text, Nil, (cont ? (x)-> x)\n        checkImports: (block)->\n          if (i = block?.properties?.import) && !@importRecords.importedFiles[filename = block.properties.import]\n            console.log \"Import: #{block?.properties?.import}\"\n            @importRecords.importedFiles[filename] = true\n            opts = defaultEnv.opts\n            @importPromise = newPromise = @importPromise.then (=> new Promise (resolve, reject)=>\n              @getFile filename, ((contents)=> withDefaultOptsSet opts, =>\n                oldPromise = @importPromise\n                oldEvals = @pendingEvals\n                @pendingEvals = []\n                @importPromise = Promise.resolve()\n                id = 0\n                for block in @parseBlocks contents\n                  block._id = \"imported-#{filename}-#{id++}\"\n                  block.imported = true\n                  @checkChange null, block, filename\n                @scheduleEvals().then =>\n                  @pendingEvals = oldEvals\n                  if !oldPromise.isResolved()\n                    if !@importPromise.isResolved then @importPromise = @importPromise.then -> oldPromise\n                    else @importPromise = oldPromise\n                  resolve()), (e)=> reject displayError e)\n        getFile: (filename, cont, fail)->\n          p = ajaxGet(new URL(filename, @loadName).toString())\n          if cont || fail then p.then cont, fail\n          else p\n        decodeObservers: (block)->\n          finalObs = []\n          obs = block.codeAttributes?.observe?.split(' ') ? []\n          for ob in obs\n            if ob in ['vars', '']\n              bv = blockVars this, block.codeAttributes?.var\n              finalObs.push (\"block.#{bv[4][v]}\" for v in bv[3])...\n            else if ob.indexOf('.') == -1 then finalObs.push \"block.#{ob}\"\n            else finalObs.push ob\n          finalObs\n        runBlock: (block, func)->\n          id = getId block\n          r = @running[id]\n          @running[id] = true\n          try\n            func()\n          finally\n            @running[id] = r\n        replaceResult: (block, str)->\n          block = @getBlock (if typeof block == 'string' then block else block._id)\n          @runBlock block, =>\n            replaceResult this, this, block, str\n        clearError: (block)->\n          block = @getBlock (if typeof block == 'string' then block else block._id)\n          {error, results} = blockCodeItems this, block\n          if error\n            start = @offsetForBlock(block) + error.offset\n            @runBlock block, => @replaceText {start, end: start + error.text.length, text: '', source: 'code'}, true\n        getYaml: (block)-> getYaml @getBlock block\n        getCode: (block, env)->\n          block = @getBlock block\n          if block.code then block.code\n          else\n            tangle = @getTangle block\n            code = (if typeof tangle == 'function'\n              console.error \"GOT TANGLED CODE\", block._id\n              tangle\n            else if isText block then (cont)->\n              if cont then cont.call this, [blockSource block]\n              else [blockSource block]\n            else if block.language == 'yaml' then (cont)->\n              yaml = (!block.computedYaml && block.yaml) || parseYaml blockSource block\n              if cont then cont.call this, [yaml] else [yaml]\n            else if env = env ? @env(block.language) then env.compileBlock block)\n            if code instanceof Promise\n              code.then (code)=> block.code = @addPostProcessing block, code\n            else if code then block.code = @addPostProcessing block, code\n        addPostProcessing: (block, func)->\n          if m = block.codeAttributes?.post?.match postCallPat\n            [..., blockName, argNames] = m\n            argNames = argNames.trim().split '\\s*,\\s*'\n            blockName = blockName.trim()\n            data = this\n            (cont, args...)->\n              if postProcessor = data.getCode data.getBlockNamed blockName\n                func.call this, ((result)->\n                  if result.length == 1 then result = result[0]\n                  blockArgs = []\n                  Lounge?.blockVars = blockArgs\n                  postProcessor.call this, cont, (for arg in argNames\n                    if `Number(arg) == arg` || arg[0] in \"'\\\"\"\n                      blockArgs.push null\n                      JSON.parse arg\n                    else\n                      if arg == '*this*'\n                        argBlock = block\n                        argData = result\n                      else\n                        argBlock = data.getBlockNamed arg\n                        argData = data.getYaml argData\n                      blockArgs.push argBlock\n                      argData)...), args...\n          else func\n        blockBounds: (name)->\n          if !(block = if typeof name == 'string' then @getBlockNamed name else name)\n            throw new Error \"No block named #{name}\"\n          @baseBlockBounds block\n        baseBlockBounds: (block)->\n          start = @offsetForBlock block\n          end = start + block.text.length\n          {start, end, gStart: start, gEnd: end}\n        verifyDataObject: (opType, obj)->\n          if !(typeof obj in ['object', 'string', 'number', 'boolean'])\n            throw new Error \"Attempt to #{opType} value that is not an object.\"\n        appendDataToHeadline: (parent, name, value, codeOpts)->\n          @appendData 'headline', parent, name, value, codeOpts\n        appendDataAfter: (parent, name, value, codeOpts)->\n          @appendData 'block', parent, name, value, codeOpts\n        appendData: (parentType, parent, name, value, codeOpts)->\n          [block] = @parseBlocks @textForDataNamed name, value, codeOpts\n          @checkCollaborating block\n          if name && @getData(name) then throw new Error \"Attempt to add block with duplicate name: #{name}\"\n          if b = @blockBounds (if parentType == 'block' then parent else @lastChild @getNamedBlockId parent)\n            @replaceText start: b.end, end: b.end, source: 'code', text: block.text\n          else throw new Error \"Attempt to append a block after nonexistant block: #{parent}\"\n        getLocalData: (name)->\n          if block = @getBlockNamed name\n            if !block.local then throw new Error \"Attempt to use getLocalData with a shared block\"\n            @getYaml block\n        getData: (name, skipCheck)->\n          if block = @getBlockNamed(name)\n            if !skipCheck then @checkCollaborating block\n            @getYaml block\n        setLocalData: (name, value, codeOpts)->\n          if !(block = @getBlockNamed name) then throw new Error \"No block named #{name}\"\n          if !block.local then throw new Error \"Attempt to use setLocalData with a shared block\"\n          @baseSetData block, value, codeOpts\n        setData: (name, value, codeOpts)->\n          if !(block = @getBlockNamed name) then throw new Error \"No block named #{name}\"\n          @checkCollaborating block\n          @baseSetData block, value, codeOpts\n        baseSetData: (block, value, codeOpts)->\n          name = block.codeName\n          @verifyDataObject \"set #{name} to \", value\n          codeOpts = _.merge {}, block.codeAttributes ? {}, codeOpts ? {}\n          [newBlock] = @parseBlocks @textForDataNamed name, value, codeOpts\n          if newBlock.local\n            newBlock._id = block._id\n            @storeLocalBlock newBlock\n          else\n            b = @baseBlockBounds block\n            b.text = newBlock.text\n            b.source = 'code'\n            @replaceText b\n        removeData: (name)->\n          if !(block = @getBlockNamed name) then throw new Error \"No block named #{name}\"\n          @baseRemoveData block\n        baseRemoveData: (block)->\n          @checkCollaborating()\n          b = @baseBlockBounds block\n          b.text = ''\n          b.source = 'code'\n          @replaceText b\n        hasCollaborativeCode: (name)-> @collaborativeCode[name]\n        openRegistration: -> @registerCollaborativeCode = @registrationCode\n        closeRegistration: -> @registerCollaborativeCode = ->\n          throw new Error \"Attempt to register collaborative code after registration is closed\"\n        registrationCode: (name, func)->\n          if typeof name == 'function'\n            func = name\n            name = func.name\n          @collaborativeBase[name] = func\n          @collaborativeCode[name] = (args...)=> @doCollaboratively name, args\n        _runCollaborativeCode: (name, slaveId, args)->\n          new Promise (succeed, fail)=>\n            try\n              @inCollaboration = true\n              if code = @collaborativeBase[name]\n                succeed code {options: this, slaveId}, args...\n              else throw new Error \"No collaborative code named '#{name}'\"\n            catch err\n              fail err\n            finally\n              @inCollaboration = false\n        doCollaboratively: (name, args)-> @_runCollaborativeCode name, null, args\n        checkCollaborating: (optBlock)->\n          if optBlock?.local then throw new Error \"Attempt to use local block in collaborative code\"\n          else if !@inCollaboration then throw new Error \"Not running collboartively\"\n\n      class DataIndexer\n        constructor: (@indexes)->\n          if !@indexes\n            @indexes = FingerTree.fromArray [],\n              identity: -> []\n              measure: (v)-> v.key\n              sum: (a, b)-> if compareSorted(a, b) < 1 then b else a\n        copy: -> new DataIndexer @indexes\n        keysFor: (block)->\n          block.keys = (if (index = block.codeAttributes?.index) && yaml = getYaml block\n            (for key in ((k.trim().split keySplitPat) for k in index.split ',') when key.length == 2\n              [key[0].trim(), key[1].trim(), block._id]).sort compareSorted)\n        addBlockKey: (k)->\n          [first, rest] = @indexes.split (m)-> m >= k.key\n          @indexes = first.concat rest.addFirst k\n        deleteBlockKey: (k)->\n          [first, rest] = @indexes.split (m)-> m == k.key\n          r = rest\n          while !r.isEmpty() && found = r.peekFirst() && found.key == k.key && found.id == k.id\n            r = r.removeFirst()\n          if r != rest then @indexes = first.concat rest\n        find: (index, key)->\n          k = [index]\n          result = []\n          if key then k.push key\n          [first, rest] = @indexes.split (m)-> compareSorted(k, m) < 1\n          while !rest.isEmpty() && isPrefix k, rest.peekFirst().key\n            result.push rest.peekFirst().id\n            rest = rest.removeFirst()\n          result\n\n      getYaml = (block)->\n        _.cloneDeep block.yaml ? (block.yaml = if isYamlResult block\n          {results} = blockCodeItems this, block\n          if results\n            firstResult = results.text.indexOf('\\n') + 1\n            parseYaml results.text.substring(firstResult).replace /(^|\\n): /gm, '$1'\n        else null)\n\n      parseOrgDoc = (text)->\n        if text == '' then []\n        else orgDoc parseOrgMode(text.replace /\\r\\n/g, '\\n'), true\n\n      fileTypes =\n        jpg: 'image/jpeg'\n        jpeg: 'image/jpeg'\n        png: 'image/png'\n        gif: 'image/gif'\n        bmp: 'image/bmp'\n        xpm: 'image/xpm'\n        svg: 'image/svg+xml'\n\n      makeImageBlob = (name, contents)->\n        if m = name.match /\\.(jpg|jpeg|png|gif|bmp|xpm|svg)$/\n          makeBlobUrl contents, \"image/#{fileTypes[m[0]]}\"\n\n      makeBlobUrl = (contents, type)->\n        byteArrays = for offset in [0...contents.length] by 512\n          slice = contents.slice offset, offset + 512\n          new Uint8Array (slice.charCodeAt(i) for i in [0...512])\n        blob = new Blob byteArrays, type: type\n        URL.createObjectURL blob\n\n      class EditorParsedCodeBlock extends ParsedCodeBlock\n        constructor: (data, block)->\n          super data.getBlock(block) || block\n          @data = data\n        clone: -> new EditorParsedCodeBlock @data, @block\n        save: (withUpdates)->\n          start = @data.offsetForBlock @block._id\n          replaceBlock = => @data.replaceText {start, end: start + @data.getBlock(@block._id).text.length, text: @block.text, source: 'code'}\n          if withUpdates then replaceBlock()\n          else @data.runBlock @block, replaceBlock\n\n      sanitize = (str)->\n        str = str.replace(/\\uFEFF/g, '')\n        str = str.replace(/\\uA789/g, ':')\n        str = str.replace(/\\u2044/g, '\\/')\n\n      displayError = (e)->\n        console.log \"Error: #{e}\"\n        e\n\n      compareSorted = (a, b)->\n        for i in [0...Math.min a.length, b.length]\n          if a[i] < b[i] then return -1\n          if a[i] > b[i] then return 1\n        a.length - b.length\n\n      isPrefix = (a, b)->\n        if a.length > b.length then return false\n        for av, i in a\n          if av != b[i] then return false\n        true\n\n      basicDataFilter =\n        #startChange: (data)->\n        #endChange: (data)->\n        clear: (data)->\n        replaceBlock: (data, oldBlock, newBlock)->\n        replaceText: (data, {start, end, text, source})->\n\n      blockElementId = (block)-> block && (block.codeName ? block._id)\n\n      blockIsHidden = (block)->\n        String(block?.properties?.hidden ? '').toLowerCase() == 'true'\n\n`controllerEval` looks like a useless wrapper for eval, but you can use `apply()`\nand `call` to set \"this\" for the code, which you can't do with the primitive `eval()`\n\n      controllerEval = (txt)-> eval txt\n\n      isCss = (block)-> block?.language == 'css'\n\n      isText = (block)-> block?.language.trim() in ['text', 'string']\n\n      isControl = (block)-> block?.type == 'code' && block.codeAttributes?.control\n\n      blockViewType = (block, attr = 'defview')->\n        (block?.type == 'code' && block.codeAttributes?[attr]) ? null\n\n      addChange = (block, changes)->\n        if !changes.sets[block._id]\n          changes.oldBlocks.push block\n          changes.newBlocks.push changes.sets[block._id] = copyBlock block\n        changes.sets[block._id]\n\n      greduce = (thing, changes, func, arg, next)->\n        if typeof changes == 'function'\n          next = arg\n          arg = func\n          func = changes\n        if thing && typeof arg == 'undefined'\n          arg = thing\n          thing = next thing\n        while thing\n          arg = func arg, thing\n          thing = next thing\n        arg\n\n      getId = (thing)-> if typeof thing == 'string' then thing else thing._id\n\nNMap is a very simple trie.\n\n      class NMap\n        constructor: (@items)-> if !@items then @items = {}\n        clone: -> new NMap _.clone @items\n        clear: -> @items = {}\n        add: (args..., value)->\n          i = @items\n          for pos in [0...args.length - 1]\n            if !i[args[pos]] then i[args[pos]] = {}\n            i = i[args[pos]]\n          i[args[args.length - 1]] = value\n        get: (keys...)->\n          i = @items\n          for pos in [0...keys.length]\n            if !i[keys[pos]] then return null\n            i = i[keys[pos]]\n          i\n        getAll: (keys...)-> new NMap @get keys...\n        remove: (keys...)->\n          path = []\n          items = @items\n          for pos in [0...keys.length]\n            if !items[keys[pos]] then break\n            path.push items\n            items = items[keys[pos]]\n          for collection, i in path by -1\n            delete collection[keys[i]]\n            if !_.isEmpty collection then break\n          items[keys[keys.length - 1]]\n        toString: -> \"NMAP #{JSON.stringify @items}\"\n\n      window.NMap = NMap\n\n      withDefaultOptsSet = (opts, func)->\n        oldOpts = defaultEnv.opts\n        defaultEnv.opts = opts\n        try\n          func()\n        finally\n          defaultEnv.opts = oldOpts\n\n`OrgEditing` -- editing options for the org editor.\n\n      class OrgEditing extends DataStoreEditingOptions\n        constructor: (data)->\n          super data\n          @setPrefix 'leisureBlock-'\n          @hiding = true\n          @setMode Leisure.plainMode\n          @toggledSlides = {}\n        runBlock: (block, replace)-> @data.runBlock block, replace\n        parsedCodeBlock: (block)-> new EditorParsedCodeBlock this, @data.getBlock block\n        dataChanged: (changes)->\n          preserveSelection =>\n            super changes\n            initializePendingViews()\n            if @currentSlide\n              slide = @nodeForId(@currentSlide).closest('[data-view=leisure-top-headline], [data-view=leisure-top-chunk]')\n              if !slide.hasClass 'currentSlide'\n                slide.addClass('currentSlide')\n                if !@find('firstSlide').length then slide.addClass('firstSlide')\n                if !@find('lastSlide').length then slide.addClass('lastSlide')\n        dataLoaded: ->\n          super()\n          @rerenderAll()\n        load: (name, text)-> @withDefaultOpts => super name, text\n        withDefaultOpts: (func)-> withDefaultOptsSet this, func\n        renderBlocks: -> @mode.renderBlocks this, super()\n        setTheme: (theme)->\n          if @theme then @editor.node.removeClass @theme\n          @editor.node.addClass @theme = theme\n        toggleSlides: -> @mode.setSlideMode this, !@showingSlides()\n        showingSlides: -> @mode.showingSlides this\n        hideToolbar: -> @editor.node.prev().addClass 'collapse'\n        showToolbar: -> @editor.node.prev().removeClass 'collapse'\n        getLocalBlock: (thing)-> @data.getLocalBlock thing\n        isValidDocOffset: (offset)->\n          if @currentSlide\n            start = @data.offsetForBlock(@currentSlide)\n            if next = @data.nextSibling @currentSlide\n              end = @data.offsetForBlock(next) + next.text.length\n            else end = start + @getBlock(@currentSlide).text.length\n            start <= offset < end\n          else super offset\n        rerenderAll: ->\n          super()\n          initializePendingViews()\n        changed: (changes)->\n          {newBlocks, oldBlocks} = changes\n          if newBlocks.length == oldBlocks.length == 1\n            for newBlock, i in newBlocks\n              oldBlock = oldBlocks[i]\n              #if newBlock.type == 'headline' || oldBlock.type == 'headline' ||\n              #newBlock._id != oldBlock._id\n              if trickyChange oldBlock, newBlock\n                return super changes\n            nb = newBlocks.slice()\n            viewNodes = $()\n            nameNodes = $()\n            for block in newBlocks\n              viewNodes = viewNodes.add @find \"[data-view-block='#{block._id}']\"\n              viewNodes = @findViewsForDefiner block, viewNodes\n              viewNodes = @findViewsForDefiner changes.old[block._id], viewNodes\n              observers = @find \"[data-observe~='#{block._id}']\"\n              if block.codeName\n                nameNodes = viewNodes.add @find \"[data-view-block-name~='#{block.codeName}']\"\n                observers = observers.add @find \"[data-observe~='#{block.codeName}']\"\n              for node in observers\n                if id = @idForNode node\n                  nb.push @getBlock id, changes\n            nb = _.values(_.keyBy(nb, '_id'))\n            @mode.renderChanged this, nb, @idPrefix, true\n            @withNewContext =>\n              for node in viewNodes.filter((n)=> !nb[@idForNode n])\n                node = $(node)\n                [view, name] = ($(node).attr('data-requested-view') ? '').split '/'\n                if (block = @blockForNode node) && data = @data.getYaml block\n                  renderView view, name, data, node, block\n                else if block = @findBlockForResultView node\n                  renderView view, name, false, node, block\n              for node in nameNodes.filter((n)=> !nb[@idForNode n])\n                node = $(node)\n                for blkName in node.attr('data-view-block-name').split(/\\s+/)\n                  if data = @data.getYaml blk = @data.getBlockNamed(blkName)\n                    [view, name] = (node.attr('data-requested-view') ? '').split '/'\n                    renderView view, name, data, node, blk, blkName\n          else super changes\n        blockForNode: (node)->\n          @getBlock(node.attr 'data-view-block') ?\n            @data.getBlockNamed(node.attr 'data-view-block-name')\n        findBlockForResultView: (node)->\n          if (results = node.closest '.code-results').length then @getBlock @idForNode results[0]\n        find: (sel)-> $(@editor.node).find sel\n        findViewsForDefiner: (block, nodes)->\n          if block\n            attrs = (block.type == 'code' && block.codeAttributes)\n            if attrs && viewType = (attrs.control ? attrs.defview)\n              nodes = nodes.add @find \"[data-view='#{viewType}']\"\n              nodes = nodes.add @find \"[data-requested-view='#{viewType}']\"\n          nodes\n        withNewContext: (func)-> mergeContext Leisure.rootContext, =>\n          UI.context.opts = this\n          UI.context.prefix = @idPrefix\n          func()\n        initToolbar: ->\n          @withNewContext => $(@editor.node).before(renderView 'leisure-toolbar', null, null)\n          initializePendingViews()\n        slideFor: (thing)->\n          block = @data.getBlock thing\n          while block && !(block.type == 'headline' && block.level == 1)\n            parent = @data.parent block\n            if !parent then break\n            block = parent\n          block\n        slidesFor: (blocks)->\n          slides = {}\n          for block in blocks\n            if slide = @slideFor block\n              slides[slide._id] = block\n          slides\n        toggleSlide: (id)->\n          block = @data.getBlock id\n          if (block?.type == 'headline' && block.level == 1) || (block && !block.prev)\n            if @toggledSlides[id] then delete @toggledSlides[id]\n            else @toggledSlides[id] = true\n        isToggled: (thing)-> (slide = @slideFor thing) && @toggledSlides[slide._id]\n        removeToggles: -> @toggledSlides = {}\n        toggleHidden: ->\n          @hiding = !@hiding\n          @rerenderAll()\n        hideHiddenSlides: -> if !@hiding then @toggleHidden()\n        showAllSlides: -> if @hiding then @toggleHidden()\n        isHidden: (thing)-> blockIsHidden @slideFor thing\n        canHideSlides: -> @hiding && @mode == Leisure.fancyMode\n        shouldHide: (thing)->\n          @canHideSlides() && (slide = @slideFor thing) && @isHidden(slide) && !@isToggled(slide)\n        imageError: (img, e)->\n        setEditor: (ed)->\n          super ed\n          $(ed.node).addClass 'leisure-editor'\n          addSelectionBubble ed.node\n          @setMode @mode\n          @initToolbar()\n          @bindings =\n            __proto__: @bindings\n            'C-C C-C': ((editor, e, r)=>\n              # execute asynchronously because alerts mess with the events\n              setTimeout (=>@execute()),1\n              false)\n          @bindings.PAGEUP = (editor, e, r)=>\n            if @mode.showPrevSlide this then e.preventDefault()\n            false\n          @bindings.PAGEDOWN = (editor, e, r)=>\n            if @mode.showNextSlide this then e.preventDefault()\n            false\n          opts = this\n          changeAdvice ed, true,\n            setHtml: options: (parent)-> (el, html, outer)->\n              sel = ed.node.find(\"[name='selectionBubble']\")\n              sel.remove()\n              parent el, html, outer\n              ed.node.append sel\n            keyPress: options: (parent)-> (e)->\n              opts.mode.keyPress opts, parent, e\n            enter: options: (parent)-> (e)->\n              opts.mode.enter opts, parent, e\n            handleDelete: options: (parent)-> (e, sel, forward)->\n              opts.mode.handleDelete opts, parent, e, sel, forward\n            setCurrentScript: options: (parent)-> (script)->\n              Leisure.UI.currentScript = script\n            activateScripts: options: (parent)-> (jq, context, data, block)->\n              if UI.context then UI.activateScripts jq, UI.context, data, block\n              else parent jq, data, block\n        setMode: (@mode)->\n          if @mode && @editor then @editor.node.attr 'data-edit-mode', @mode.name\n          this\n        setPrefix: (prefix)->\n          @idPrefix = prefix\n          @idPattern = new RegExp \"^#{prefix}(.*)$\"\n        nodeForId: (id)-> $(\"##{@idPrefix}#{id}\")\n        idForNode: (node)-> $(node).closest('[data-block]')[0]?.id.match(@idPattern)?[1]\n        parseBlocks: (text)-> @data.parseBlocks text\n        renderBlock: (block)-> @mode.render this, block, @idPrefix\n        replaceTextEffects: (start, end, text, skipMode)->\n          {prev, oldBlocks, newBlocks} = @data.changesForReplacement start, end, text\n          if !oldBlocks\n            oldBlocks = []\n            newBlocks = [@data.getBlock @data.blockForOffset start]\n            sets = {}\n            sets[newBlocks._id] = newBlocks[0]\n            changes = {\n              first: @data.getFirst()\n              oldBlocks\n              newBlocks\n              sets: sets\n              removes: {}\n            }\n          else\n            changes = @changesFor prev, oldBlocks, newBlocks\n          if !skipMode then @mode.handleChanges this, changes\n          changes\n        replaceText: (repl, skipEffects)->\n          if !skipEffects && {repls} = @replaceTextEffects repl.start, repl.end, repl.text\n            @withDefaultOpts => @data.allowObservation => super repl\n            if repls\n              for repl in repls\n                @replaceText repl, true\n          else @data.allowObservation => super repl\n\n`changesFor(first, oldBlocks, newBlocks)` -- compute some effects immediately\n\n        changesFor: (first, oldBlocks, newBlocks)->\n          changes = @data.changesFor first, oldBlocks, newBlocks\n          changes.repls = []\n          computedProperties = {}\n          changedProperties = []\n          for id, change of changes.sets\n            oldBlock = @getBlock change._id\n            if @checkPropertyChange changes, change, oldBlock\n              changedProperties.push change._id\n            @checkCodeChange changes, change, oldBlock, oldBlocks, newBlocks\n            #@data.checkChannelChange oldBlock, change, true\n          for change in changedProperties\n            if parent = @data.parent(change, changes)?._id\n              if !computedProperties[parent]\n                computedProperties[parent] = true\n                props = {}\n                for child in @data.children parent, changes\n                  props = _.defaults props, child.properties\n                addChange(@data.getBlock(parent, changes), changes).properties = props\n          changes\n\n`change(changes)` -- about to change the data, allow mode to render some things\n\n        change: (changes)->\n          if changes then @mode.handleChanges this, changes\n          super changes\n        replaceBlock: (block, textOrBlock, source)->\n          block = @getBlock block\n          offset = @data.offsetForBlock block\n          text = if typeof textOrBlock == 'object' then textOrBlock.text else textOrBlock\n          @replaceText {start: offset, end: offset + block.text.length, text, source}\n        update: (block)->\n          oldBlock = @getBlock block._id\n          if !_.isEqual block, oldBlock\n            @replaceBlock oldBlock, block.text, 'code'\n        changesHidden: (changes)->\n          if @canHideSlides()\n            for change in changes.oldBlocks when @shouldHide change\n              return true\n          false\n        checkPropertyChange: (changes, change, oldBlock)->\n          change.type == 'chunk' && !_.isEqual change.properties, @getBlock(change._id)?.properties\n        checkCodeChange: (changes, change, oldBlock, oldBlocks, newBlocks)->\n          try\n            if !@data.running[change._id] && change.type == 'code' && isDynamic(change) && envM = blockEnvMaker(change)\n              {source: newSource, results: newResults} = blockCodeItems this, change\n              hasChange = !oldBlock || oldBlock.type != 'code' || !(isDynamic(oldBlock) && !isObserver(oldBlock)) || if oldBlock\n                oldSource = blockSource oldBlock\n                newSource.content != oldSource\n              if hasChange\n                result = ''\n                newBlock = setError change\n                replaceBlock = (bl)->\n                  bl.code = newBlock.code\n                  newBlock = bl\n                state = 'idle'\n                opts = this\n                try\n                  values = @data.executeBlock newBlock, (env)=>\n                    env.opts = this\n                    env.data = @data\n                    env.prompt = (str, defaultValue, cont)-> cont prompt(str, defaultValue)\n                    env.errorAt = (offset, msg)->\n                      cur = newBlock\n                      replaceBlock setError cur, offset, msg\n                      if newBlock != change && state == 'pending'\n                        opts.replaceBlock cur, newBlock.text, 'code'\n                    env.write = (str)=>\n                      result += presentHtml str\n                      if result[result.length - 1] != '\\n' then result += '\\n'\n                      if state == 'pending' then @replaceResult change._id, result\n                  if values instanceof Promise\n                    state = 'pending'\n                    values.then (results)->\n                      replaceBlock setResult newBlock, result\n                      opts.replaceBlock newBlock._id, newBlock.text, 'code'\n                      state = 'finished'\n                  else\n                    state = 'finished'\n                    replaceBlock setResult newBlock, result\n                    if newBlock.text != change.text\n                      changes.sets[newBlock._id] = newBlock\n                      for block, i in changes.newBlocks when block._id == newBlock._id\n                        changes.newBlocks[i] = newBlock\n                      start = @offsetForNewBlock newBlock, oldBlocks, newBlocks\n                      changes.repls.push repl = replacementFor start, change.text, newBlock.text\n                      repl.source = 'code'\n                catch err\n                  env.errorAt 0, err?.message ? err\n          catch err\n            null\n        offsetForNewBlock: (newBlock, oldBlocks, newBlocks)->\n          start = if oldBlocks.length == 0 then 0 else @data.offsetForBlock oldBlocks[0]\n          for block in newBlocks\n            if block._id == newBlock._id then return start\n            start += block.text.length\n          -1\n        execute: ->\n          block = @editor.blockForCaret()\n          if block.type == 'code' && envM = blockEnvMaker block\n            @data.queueEval =>\n              @executeBlock block, envM, true\n              @data.triggerUpdate 'system', 'code', block\n            @data.scheduleEvals()\n        env: (language)->\n          env = @data.env language\n          env.opts = this\n          env.prompt = (str, defaultValue, cont)-> cont prompt(str, defaultValue)\n          env\n        executeBlock: (block, envM, isUserEvent)->\n          if envM = blockEnvMaker block\n            {source} = blockCodeItems this, block\n            result = ''\n            sync = true\n            env = envM\n              __proto__: defaultEnv\n              presentHtml: presentHtml\n              opts: opts = this\n              data: @data\n            newBlock = setError block\n            env.errorAt = (offset, msg)->\n              newBlock = setError block, offset, msg\n              if newBlock != block && !sync then opts.update newBlock\n            if silent = isSilent block then env.write = ->\n            else\n              env.write = (str)->\n                result += env.presentHtml str\n                if !sync then opts.update newBlock = setResult block, result\n              env.writeTraceMessage = (count, msg)->\n                result += env.presentHtml new Html \"<a href='javascript:Leisure.traceMessage(#{count})'>trace</a>#{msg}\"\n            env.prompt = (str, defaultValue, cont)-> cont prompt(str, defaultValue)\n            setLounge env, -> env.executeBlock block, (r)->\n              writeResults env, r\n              if isUserEvent then env.userEvent()\n            sync = false\n            if !silent then newBlock = setResult newBlock, result\n            if newBlock != block then opts.update newBlock\n        renderImage: (src, title)->\n          if @loadName && ((m = src.match /^file:(\\/\\/)?(.*)$/) || !(src.match /^.*:/))\n            src = new URL(m?[2] ? src, @loadName).toString()\n          \"<img src='#{src}'#{title}>\"\n        followLink: (e)->\n          if e.target.href.match /^elisp/\n            console.log \"Attempt to follow elisp link at #{@editor.docOffset e.target, 0}\"\n            alert \"Elisp links not supported:\\n#{e.target.href}\"\n          else open e.target.href\n          false\n        replaceResult: (block, str)-> replaceResult this, @data, block, str\n\n      trickyChange = (oldBlock, newBlock)->\n        oldBlock._id != newBlock._id ||\n          ('headline' in (t = [oldBlock.type, newBlock.type]) && t[0] != t[1]) ||\n          (t[0] == 'headline' && oldBlock.level != newBlock.level)\n\n      isSilent = (block)-> block?.codeAttributes?.results?.toLowerCase().match /\\bsilent\\b/\n\n      replaceResult = (source, data, block, str)->\n        if typeof block != 'string' then blockId = block._id\n        if current = data.getBlock block\n          newBlock = setResult current, str\n          if current.text != newBlock.text\n            start = data.offsetForBlock current\n            repl = replacementFor start, current.text, newBlock.text\n            {observing, observer} = current\n            repl.source = 'code'\n            source.replaceText repl, true\n            if observer\n              data.getBlock(block._id).observer = observer\n              data.getBlock(block._id).observing = observing\n\n      setResult = (block, result)->\n        result = sanitize result\n        if block?.codeAttributes?.results?.toLowerCase().match /\\b(def|web|silent)\\b/\n          result = ''\n        {results} = blockCodeItems this, block\n        if !results && (!result? || result == '') then block\n        else\n          newBlock = copyBlock block\n          text = if !result? || result == ''\n            block.text.substring(0, results.offset) + block.text.substring(results.offset + results.text.length)\n          else if results\n            block.text.substring(0, results.offset + results.contentPos) + result + block.text.substring(results.offset + results.text.length)\n          else block.text + \"#+RESULTS:\\n#{result}\"\n          [tmp] = parseOrgDoc text\n          Object.assign newBlock, tmp\n          newBlock\n\n      setError = (block, offset, msg)->\n        {error, results} = blockCodeItems this, block\n        if !offset? && !error then block\n        else\n          newBlock = copyBlock block\n          #msg = if msg then escapeString(msg.trim()) + \"\\n\"\n          msg = if msg then escapeString(msg.trim())\n          err = \"#+ERROR: #{offset}, #{msg}\\n\"\n          text = if error\n            if !offset?\n              block.text.substring(0, error.offset) + block.text.substring(error.offset + error.text.length)\n            else\n              block.text.substring(0, error.offset) + err + block.text.substring(error.offset + error.text.length)\n          else if results\n            block.text.substring(0, results.offset) + err + block.text.substring(results.offset)\n          else block.text + err\n          [tmp] = parseOrgDoc text\n          Object.assign newBlock, tmp\n          newBlock\n\n      isDynamic = (block)-> hasCodeAttribute block, 'results', 'dynamic'\n\n      isObserver = (block)-> block?.codeAttributes?.observe\n\n      blockEnvMaker = (block)-> languageEnvMaker block.language\n\n      createBlockEnv = (block, envMaker)->\n\n      blockCodeItems = (data, block)->\n        if block?.type == 'code'\n          org = blockOrg data, block\n          if org instanceof Fragment || org instanceof Headline then org = org.children[0]\n          getCodeItems org\n        else {}\n\n      createLocalData = -> new OrgData()\n\n      installSelectionMenu = ->\n        $(document.body)\n          .append \"<div id='topCaretBox' contenteditable='false'></div>\"\n          .append \"<div id='bottomCaretBox' contenteditable='false'></div>\"\n        monitorSelectionChange()\n\n      selectionMenu = \"\"\"\n      <div>\n      <ul>\n        <li name='insert'><a href='javascript:void(0)'><span>Insert</span></a>\n          <ul>\n            <li><a href='javascript:void(0)'><span>Leisure</span></a></li>\n            <li><a href='javascript:void(0)'><span>YAML</span></a></li>\n            <li><a href='javascript:void(0)'><span>HTML</span></a></li>\n            <li><a href='javascript:void(0)'><span>CoffeeScript</span></a></li>\n            <li><a href='javascript:void(0)'><span>JavaScript</span></a></li>\n          </ul>\n        </li>\n      </ul>\n      </div>\n      \"\"\"\n\n      addSelectionBubble = (node)->\n        bubble = $(\"<div name='selectionBubble' contenteditable='false'></div>\")\n        bubble\n          .appendTo node\n          .html selectionMenu\n          .on 'mouseclick', -> configureMenu bubble.find 'ul'\n        bubble.find('ul').menu select: (event, ui)-> console.log \"MENU SELECT\"; false\n\n      configureMenu = (menu)->\n        console.log \"configure menu\"\n        #if getSelection().type == 'Caret'\n        #  [el] = blockElementsForSelection()\n        #  bl = getBlock el.id\n        #  if bl?.type == 'chunk'\n        #    return menu.find(\"[name='insert']\").removeClass 'ui-state-disabled'\n        #menu.find(\"[name='insert']\").addClass 'ui-state-disabled'\n\n      actualSelectionUpdate = ->\n        if selectionActive\n          if editor = findEditor getSelection().focusNode\n            c = editor.domCursorForCaret()\n            if !c.isEmpty() && (p = c.textPosition()) && isContentEditable c.node\n              bubble = editor.node.find(\"[name='selectionBubble']\")[0]\n              node = editor.node[0]\n              bubble.style.left = \"#{p.left + bubbleLeftOffset}px\"\n              bubble.style.top = \"#{p.top + node.scrollTop - bubble.offsetHeight - node.offsetTop}px\"\n              $(document.body).addClass 'selection'\n              editor.trigger 'selection'\n              return\n        $(document.body).removeClass 'selection'\n        editor?.trigger 'selection'\n\n      throttledUpdateSelection = _.throttle (->\n        actualSelectionUpdate()\n        actualSelectionUpdate()), 30,\n        leading: true\n        trailing: true\n\n      updateSelection = (e)->\n        if $(getSelection().anchorNode).closest('[data-noncontent]').length == 0\n          throttledUpdateSelection e\n\n      monitorSelectionChange = ->\n        $(document).on 'selectionchange', updateSelection\n        $(window).on 'blur focus', (e)->\n          selectionActive = (e.type == 'focus')\n          updateSelection()\n\n      toolbarFor = (el)->\n        $(el).closest('[data-view]')[0]\n\n      editorForToolbar = (el)->\n        findEditor toolbarFor(el).nextSibling\n\n      editorToolbar = (editorNode)-> findEditor(editorNode).node.prev()\n\n      showHide = (toolbar)->\n        editingOpts = editorForToolbar(toolbar).options\n        editingOpts.toggleHidden()\n        editingOpts.hiding\n\n      breakpoint = ->\n        console.log()\n        console.log \"breakpoint\"\n\n      isContentEditable = (node)->\n        (if node instanceof Element then node else node.parentElement).isContentEditable\n\n      getDocumentParams = ->\n        if !documentParams\n          documentParams = {}\n          for param in document.location.search.substring(1).split '&'\n            [k,v] = param.split '='\n            documentParams[k.toLowerCase()] = v\n        documentParams\n\n      followLink = (e)-> Leisure.findEditor(e.target)?.options.followLink(e) || false\n\n      replacementFor = (start, oldText, newText)->\n        lim = Math.min oldText.length, newText.length\n        startOff = endOff = 0\n        while startOff < lim && oldText[startOff] == newText[startOff]\n          startOff++\n        if startOff < lim\n          lim -= startOff\n          endOff = 0\n          while endOff < lim && oldText[oldText.length - endOff - 1] == newText[newText.length - endOff - 1]\n            endOff++\n        {\n          start: start + startOff\n          end: start + oldText.length - endOff\n          text: newText.substring startOff, newText.length - endOff\n        }\n\nExports\n\n      Object.assign Leisure, {\n        blockCodeItems\n        findEditor\n        showHide\n        toolbarFor\n        editorToolbar\n        editorForToolbar\n        breakpoint\n        blockOrg\n        parseOrgMode\n        followLink\n        defaultEnv\n        preserveSelection\n        rootContext: {}\n        isDynamic\n        ParsedCodeBlock\n        setLounge\n        parseYaml\n        blockSource\n        BasicEditingOptions\n        LeisureEditCore\n        DataStore\n        DataStoreEditingOptions\n        Editor\n        CodeContext\n        modifyingKey\n        getId\n        makeBlobUrl\n        makeImageBlob\n        addSelectionBubble\n        Advice\n        Immutable\n        FingerTree\n      }\n\n      {\n        createLocalData\n        OrgData\n        OrgEditing\n        installSelectionMenu\n        blockOrg\n        setResult\n        setError\n        toolbarFor\n        editorToolbar\n        editorForToolbar\n        blockCodeItems\n        escapeAttr\n        blockIsHidden\n        blockEnvMaker\n        controllerEval\n        getDocumentParams\n        basicDataFilter\n        replacementFor\n        parseYaml\n        makeImageBlob\n        makeBlobUrl\n        getId\n        fileTypes\n        updateSelection\n        addSelectionBubble\n        parseOrgDoc\n        DataIndexer\n      }\n"
  ]
}