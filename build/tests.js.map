{
  "version": 3,
  "file": "tests.js",
  "sourceRoot": "..",
  "sources": [
    "src/tests.litcoffee"
  ],
  "names": [],
  "mappings": ";AAAI;EAAA;EACA,MAAA,CAAO,CAAC,OAAD,EAAU,UAAV,EAAsB,QAAtB,EAAgC,iBAAhC,EAAmD,QAAnD,EAA6D,WAA7D,CAAP,EAAkF,QAAA,CAAC,GAAD,EAAM,MAAN,EAAc,CAAd,EAAiB,aAAjB,EAAgC,IAAhC,EAAsC,OAAtC,CAAA;AAChF,QAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAA,IAAA,EAAA,aAAA,EAAA;IAAA,CAAA,CACE,YADF,CAAA,GAEI,GAFJ;IAGA,CAAA,CACE,MADF,CAAA,GAEI,MAFJ;IAGA,CAAA,CACE,OADF,CAAA,GAEI,aAFJ;IAGA,CAAA,CACE,aADF,CAAA,GAEI,IAFJ;IAGA,CAAA,CACE,MADF,EAEE,QAFF,CAAA,GAGI,OAHJ;IAKA,IAAA,GACE;MAAA,IAAA,EAAM,4PAAN;MAwBA,MAAA,EACE;QAAA,MAAA,EAAQ,CAAR;QACA,MAAA,EAAQ,CADR;QAEA,MAAA,EAAQ,CAFR;QAGA,MAAA,EAAQ,CAHR;QAIA,MAAA,EAAQ,CAJR;QAKA,MAAA,EAAQ,CALR;QAMA,MAAA,EAAQ,CANR;QAOA,MAAA,EAAQ;MAPR;IAzBF;IAkCF,QAAA,GAAW,QAAA,CAAA,CAAA,EAAA,EApDX;;IAuDA,KAAA,GAAQ,QAAA,CAAA,CAAA;AACN,UAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA;MAAA,IAAA,GAAO,IAAI,OAAJ,CAAA;MACP,MAAA,GAAS,IAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,IAAtB;MACT,KAAA,GAAQ;MACR,KAAA,gDAAA;;QACE,KAAK,CAAC,GAAN,GAAY,OAAA,GAAU,KAAA;QACtB,IAAG,CAAA,GAAI,CAAP;UACE,KAAK,CAAC,IAAN,GAAa,MAAO,CAAA,CAAA,GAAI,CAAJ,CAAM,CAAC;UAC3B,MAAO,CAAA,CAAA,GAAI,CAAJ,CAAM,CAAC,IAAd,GAAqB,KAAK,CAAC,IAF7B;;MAFF;MAKA,GAAA,GAAM,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,KAAhB;MACN,IAAI,CAAC,eAAL,CAAqB;QAAA,KAAA,EAAO,MAAO,CAAA,CAAA,CAAE,CAAC,GAAjB;QAAsB,IAAA,EAAM,GAA5B;QAAiC,SAAA,EAAW;MAA5C,CAArB;MACA,IAAI,CAAC,IAAL,CAAU,EAAV,EAAc,MAAO,CAAA,CAAA,CAAE,CAAC,GAAxB,EAA6B,GAA7B;MACA,IAAA,GAAO,aAAA,CAAc,IAAd;aACP,QAAA,CAAS,8BAAT,EAAyC,IAAI,CAAC,MAA9C,EAAsD,IAAI,CAAC,MAA3D;IAbM;WAeR,CACE,QADF,EAEE,MAFF,EAGE,QAHF;EAvEgF,CAAlF;AADA",
  "sourcesContent": [
    "    'use strict'\n    define ['./org', './docOrg', 'lodash', './editorSupport', './diag', './testing'], (Org, DocOrg, _, EditorSupport, Diag, Testing)->\n      {\n        parseOrgMode\n      } = Org\n      {\n        orgDoc\n      } = DocOrg\n      {\n        OrgData\n      } = EditorSupport\n      {\n        structureInfo\n      } = Diag\n      {\n        assert\n        assertEq\n      } = Testing\n\n      set1 =\n        text: \"\"\"\n          * Test properties\n          #+BEGIN_SRC lisp :results dynamic\n          (+ 3 4)\n          #+END_SRC\n          #+RESULTS:\n          : 7\n          ** sub 1\n          duh\n          :properties:\n          :a: 1\n          :end:\n          #+BEGIN_SRC js :results dynamic\n          3 + 4\n          #+END_SRC\n          #+RESULTS:\n          : 7\n          peep\n          :properties:\n          :b: 2\n          :end:\n          ** sub 2\n          asdf\n          \"\"\"\n        levels:\n          block0: 0\n          block1: 1\n          block2: 1\n          block3: 2\n          block4: 2\n          block5: 2\n          block6: 1\n          block7: 2\n\n      runTests = ->\n        #test1()\n\n      test1 = ->\n        data = new OrgData()\n        blocks = data.parseBlocks set1.text\n        count = 0\n        for block, i in blocks\n          block._id = 'block' + count++\n          if i > 0\n            block.prev = blocks[i - 1]._id\n            blocks[i - 1].next = block._id\n        blk = _.keyBy blocks, '_id'\n        data.linkAllSiblings first: blocks[0]._id, sets: blk, oldBlocks: blk\n        data.load '', blocks[0]._id, blk\n        info = structureInfo data\n        assertEq \"Bad levels computed for set1\", info.levels, set1.levels\n\n      {\n        runTests\n        assert\n        assertEq\n      }\n"
  ]
}