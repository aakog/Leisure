// Generated by CoffeeScript 1.9.3
(function() {
  define(['handlebars'], function(Handlebars) {
    var activateScripts, activating, addController, addView, compile, controllers, create, hasView, mergeContext, registerHelper, removeView, renderView, root, templates, viewKey, withContext;
    compile = Handlebars.compile, create = Handlebars.create, registerHelper = Handlebars.registerHelper;
    templates = {};
    controllers = {};
    root = null;
    activating = false;
    viewKey = function(type, context) {
      if (context) {
        return (type.trim()) + "/" + (context.trim());
      } else {
        return type != null ? type.trim() : void 0;
      }
    };
    addView = function(type, context, template) {
      return templates[viewKey(type, context)] = compile(template);
    };
    removeView = function(type, context, template) {
      return delete templates[viewKey(type, context)];
    };
    hasView = function(type, context) {
      return templates[viewKey(type, context)];
    };
    withContext = function(context, func) {
      var oldContext, value;
      oldContext = root.context;
      root.context = context;
      try {
        value = func();
      } finally {
        root.context = oldContext;
      }
      return value;
    };
    mergeContext = function(subcontext, func) {
      return withContext(_.merge({}, root.context, subcontext), func);
    };
    Handlebars.registerHelper('view', function(item, contextName, options) {
      var block, data;
      if (!options) {
        options = contextName;
        contextName = null;
      }
      data = typeof item === 'string' ? (block = context.editor.options.getBlock(data), block != null ? block.yaml : void 0) : (item != null ? item.yaml : void 0) && item._id ? (block = item, item.yaml) : (block = null, item);
      if (data != null ? data.type : void 0) {
        return renderView(data.type, contextName, data, null, false, block);
      }
    });
    renderView = function(type, contextName, data, targets, block) {
      var attrs, i, isTop, key, len, node, ref, results, settings, template;
      isTop = !((ref = root.context) != null ? ref.topView : void 0);
      key = viewKey(type, contextName);
      template = templates[key];
      settings = {
        type: type,
        contextName: contextName
      };
      if (isTop) {
        settings.subviews = {};
        if (block) {
          settings.subviews[block._id] = true;
        }
      }
      attrs = "class='view' data-view='" + key + "'";
      if (block) {
        attrs += " data-view-block='" + block._id + "'";
      }
      if (targets) {
        if (!isTop && block) {
          root.context.subviews[block._id] = true;
        }
        results = [];
        for (i = 0, len = targets.length; i < len; i++) {
          node = targets[i];
          settings.view = node;
          mergeContext(settings, function() {
            var html;
            root.context.data = data;
            if (block) {
              root.context.block = block;
            }
            if (isTop) {
              root.context.topView = node;
            }
            html = template(data, {
              data: root.context
            });
            if (isTop) {
              attrs += " data-ids='" + (settings.subviews.join(' ')) + "'";
            }
            return html = "<span " + attrs + ">'" + html + "</span>";
          });
          results.push(activateScripts(node));
        }
        return results;
      } else if (block) {
        root.context.subviews[block._id] = true;
        return "<span" + attrs + ">" + (template(data, {
          data: root.context
        })) + "</span>";
      } else {
        return template(data, {
          data: root.context
        });
      }
    };
    activateScripts = function(el) {
      var i, j, len, len1, newScript, ref, ref1, results, script;
      if (!activating) {
        activating = true;
        try {
          ref = $(el).find('script');
          for (i = 0, len = ref.length; i < len; i++) {
            script = ref[i];
            if (!script.type || script.type === 'text/javascript') {
              newScript = document.createElement('script');
              newScript.type = 'text/javascript';
              newScript.textContent = script.textContent;
              newScript.src = script.src;
              root.currentScript = newScript;
              script.parentNode.insertBefore(newScript, script);
              script.remove();
            }
          }
          ref1 = $(el).find('script[type="text/coffeescript"]').add($(el).find('script[type="text/literate-coffeescript"]'));
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            script = ref1[j];
            root.currentScript = script;
            results.push(CoffeeScript.run(script.innerHTML));
          }
          return results;
        } finally {
          root.currentScript = null;
          activating = false;
        }
      }
    };
    addController = function(type, name, func) {
      return controllers[viewKey(type, name)] = func;
    };
    return root = {
      withContext: withContext,
      renderView: renderView,
      addView: addView,
      removeView: removeView,
      hasView: hasView,
      addController: addController,
      context: null
    };
  });

}).call(this);

//# sourceMappingURL=ui.js.map
