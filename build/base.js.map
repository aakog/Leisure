{
  "version": 3,
  "file": "base.js",
  "sourceRoot": "..",
  "sources": [
    "src/base.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2013, Bill Burdick: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\n'use strict'\nif window? then window.global = window\nfiles = if !(window ? global).btoa then ['btoa'] else [null]\ndefine files, (btoa)->\n  if !btoa then btoa = (window ? global).btoa\n\n  root = {}\n  (window ? global).verbose = {}\n  (window ? global).Leisure = (window ? global).Leisure ? {}\n\n  traceValues = []\n  traceLen = 100\n  traceHandler = ->\n  lambdaInfo = {}\n  debugType = 'core'\n  # possible debug modes are 'none', 'tracking', and 'active'\n  defaultDebugMode = 'tracking'\n  debugTypes = {}\n  traceMessageCount = 0\n  sourceFiles = {}\n  normalFuncs = {}\n  debugFuncs = {}\n\n  root.currentNameSpace = 'core'\n  root.nameSpacePath = ['core']\n  (window ? global).Leisure_generateDebuggingCode = true\n  #(window ? global).Leisure_generateDebuggingCode = false\n  (window ? global).Leisure_traceContext = 0\n  (window ? global).Leisure_traceInstance = 0\n\n  addSourceFile = (fileName, contents)->\n    if !sourceFiles[fileName] then sourceFiles[fileName] = contents\n    fileName\n\n  sourceFile = (fileName)->\n    if sourceFiles[fileName] then Promise.resolve(sourceFiles[fileName])\n    else $.ajax(new URL(fileName, location))\n\n  addDebugType = (type)->\n    if defaultDebugMode == 'none' then root.noDebugging traceLen, traceHandler, type\n    else if defaultDebugMode == 'active' then root.useDebugging traceLen, traceHandler, type\n    else if defaultDebugMode == 'tracking' then root.trackDebugging traceLen, traceHandler, type\n\n  argNames = (func)->\n    arg.trim() for arg in Function.prototype.toString.call(func).match(/\\(([^)]*)\\)/)[1].split ','\n\n######\n# The trace API\n# \n# Leisure_traceLazyValue{TYPE}(instanceId, context, id, parentInstanceId, value)\n#   Must return value\n# \n# Leisure_traceResolve{TYPE}(instanceId, value)\n#   Must return value\n# \n# Leisure_traceLambda{TYPE}(lambda)\n#   Must return lambda\n# \n# Leisure_traceCall{TYPE}(lambda)\n# \n# Leisure_traceCreatePartial{TYPE}(instanceId, lambda, args)\n# \n# Leisure_traceCallPartial{TYPE}(instanceId, lambda, args)\n# \n# Leisure_traceReturn{TYPE}(lambda, result)\n#   Must return result\n# \n# Leisure_traceTopLevel{TYPE}(context)\n#   Must return context\n# \n# Leisure_traceMessage{TYPE}(message)\n#   Must return the message count (traceMessageCount++)\n######\n\n  contexts = {}\n\n  debuggingHooks =\n    none:\n      traceTopLevel: (context)->\n        contexts[context.id] = context\n        context\n      traceLazyValue: (instanceId, context, id, value)-> value\n      traceResolve: (instanceId, value)-> value\n      traceLambda: (lambda)-> lambda\n      traceCall: (lambda, args)->\n      traceReturn: (lambda, result)-> result\n      traceCreatePartial: (instanceId, lambda, args)->\n      traceCallPartial: (instanceId, lambda, args)->\n      traceMark: -> traceMarkCount++\n    active:\n      traceTopLevel: (context)->\n        contexts[context.id] = context\n        traceValues.push 'context', context.id, context.source, context.inlineMap, context.externalMap, context.debugType, context.decls.length\n        traceValues.push.apply traceValues, context.decls\n        checkTraceLog()\n        context\n      traceLazyValue: (instanceId, context, id, value)->\n        traceValues.push 'lazyValue', instanceId, context.id, id\n        checkTraceLog()\n        value\n      traceResolve: (instanceId, value)->\n        traceValues.push 'resolve', instanceId\n        addValue value\n        checkTraceLog()\n        value\n      traceLambda: (lambda)->\n        traceValues.push 'lambda', lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id, lambda.L$info.parent?.id\n        checkTraceLog()\n        lambda\n      traceCall: (lambda, args)->\n        traceValues.push 'call', lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id\n        addArgs args\n        checkTraceLog()\n      traceReturn: (lambda, result)->\n        traceValues.push 'return', lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id\n        addValue result\n        checkTraceLog()\n        result\n      traceCreatePartial: (instanceId, lambda, args)->\n        traceValues.push 'createPartial', instanceId, lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id\n        addArgs args\n        checkTraceLog()\n      traceCallPartial: (instanceId, lambda, args)->\n        traceValues.push 'callPartial', instanceId, lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id\n        addArgs args\n        checkTraceLog()\n      traceMark: ->\n        count = traceMarkCount++\n        traceValues.push 'mark', count\n        checkTraceLog()\n        count\n\n  debuggingHooks.tracking =\n    __proto__: debuggingHooks.none\n    traceTopLevel: debuggingHooks.active.traceTopLevel\n\n  installDebuggingHooks = (mode, type)->\n    for name, hook of debuggingHooks[mode]\n      (window ? global)[\"Leisure_#{name}#{type}\"] = hook\n\n  setDebugMode = (mode, types)->\n    result = []\n    for type in types\n      if debugTypes[type] != mode\n        debugTypes[type] = mode\n        result.add type\n    result\n\n  flushTraceLog = ->\n    if traceValues.length\n      t = traceValues\n      traceValues = []\n      traceHandler t\n\n  installDebugFuncs = (type)->\n    if !Leisure.Ast then return\n    for name of debugFuncs[type]\n      info = Leisure.Ast.functionInfo[name]\n      nm = info.jsName\n      Leisure.Ast.installFunc name, nm, info.mainDebugDef || info.mainDef\n      if info.altList?.length\n        Leisure.Runtime.buildAdvisedFuncDef name, nm, info, info.debugAlts, info.alts, info.mainDebugDef || info.mainDef\n\n  installNormalFuncs = (type)->\n    if !Leisure.Ast then return\n    for name of normalFuncs[type]\n      info = Leisure.Ast.functionInfo[name]\n      nm = info.jsName\n      Leisure.Ast.installFunc name, nm, info.mainDef\n      if info.altList?.length\n        Leisure.Runtime.buildAdvisedFuncDef name, nm, info, info.alts, info.alts, info.mainDef\n\n  root.trackDebugging = (len, handler, givenType)->\n    root.noDebugging len, handler, givenType\n    if !givenType then defaultDebugMode = 'tracking'\n    if handler\n      traceLen = len\n      traceHandler = handler\n    if !givenType then (window ? global).Leisure_usingDebugging = true\n    for type of (if givenType then (\"#{givenType}\": true) else debugTypes)\n      debugTypes[type] = 'tracking'\n      installDebuggingHooks 'tracking', type\n\n  root.useDebugging = (len, handler, givenType)->\n    flushTraceLog()\n    if !givenType then defaultDebugMode = 'active'\n    if handler\n      traceLen = len\n      traceHandler = handler\n    if !givenType then (window ? global).Leisure_usingDebugging = true\n    for type of (if givenType then (\"#{givenType}\": true) else debugTypes)\n      if debugTypes[type] != 'active'\n        installDebugFuncs type\n        debugTypes[type] = 'active'\n        installDebuggingHooks 'active', type\n\n  root.noDebugging = (len, handler, givenType)->\n    flushTraceLog()\n    if !givenType then defaultDebugMode = 'none'\n    if !givenType then (window ? global).Leisure_usingDebugging = false\n    for type of (if givenType then (\"#{givenType}\": true) else debugTypes)\n      installNormalFuncs type\n      debugTypes[type] = 'none'\n      installDebuggingHooks 'none', type\n\n  for type in ['User', 'Std', 'Parser']\n    addDebugType type\n\n  checkTraceLog = (args)-> if traceValues.length > traceLen then flushTraceLog()\n\n  getTraceValues = -> traceValues\n\n  addArgs = (args)->\n    traceValues.push args.length\n    for arg in args\n      addValue arg\n    traceValues\n\n  nameForFunction = (func)->\n    if func.name then func.name\n    else\n      info = func.L$info\n      while info && !info.name\n        info = info.parent\n      name = info?.name || func.name || \"unknown\"\n      if info && info != func.L$info\n        name += \"[#{info.id}]\"\n      name\n\n  addValue = (value)->\n    if value.L$instanceId? then traceValues.push value.L$instanceId\n    else if typeof value == 'function' then traceValues.push \"function: #{nameForFunction value}\"\n    else if typeof value == 'number' then traceValues.push -1, value\n    else if typeof value == 'object' then traceValues.push \"object: #{JSON.stringify value}\"\n    else traceValues.push value\n    traceValues\n\n  #root.shouldNsLog = true\n  root.shouldNsLog = false\n\n  root.nsLog = (args...)-> if root.shouldNsLog then console.log args...\n\n  Leisure.sourceFiles = sourceFiles\n\n  verboseMsg = (label, msg...)-> if (window ? global).verbose[label] then console.log msg...\n\n  if !btoa? then (window ? global).btoa = require 'btoa'\n\n  class CodeContext\n    eval: (text)-> eval text\n    runWith: (ctxSettings, func)->\n      old = @ctx\n      try\n        @ctx = ctxSettings\n        if typeof func == 'string' then @eval func else func.call this\n      finally\n        @ctx = old\n\n\n  defaultEnv =\n    __proto__: CodeContext.prototype\n    presentValue: (x)-> String(x)\n    write: (v)-> console.log v\n    writeTraceMessage: (count, msg)-> @write msg\n    errorHandlers: []\n    prompt: -> null\n    executeText: -> null\n    executeBlock: -> null\n    compileBlock: -> null\n    userEvent: ->\n\n  rz = (window ? global).resolve = (value)->\n    #if typeof value == 'function' && value.length == 0\n    #  if typeof value.memo != 'undefined' then value.memo\n    #  else\n    #    if value.creationStack then value.creationStack = null\n    #    if value.args then value.args = null\n    #    value.memo = value()\n    #else value\n    if typeof value == 'function'\n      if typeof value.memo != 'undefined' then value.memo\n      else if value.length == 0\n        #if value.creationStack then value.creationStack = null\n        #if value.args then value.args = null\n        value.memo = value()\n      else value\n    else value\n\n  isResolved = (value)-> typeof value != 'function' || value.memo\n\n  (window ? global).lazy = (l)-> if typeof l == 'function' then l.memo = l else l\n\n  readFile = (fileName, cont)-> defaultEnv.readFile fileName, cont\n\n  writeFile = (fileName, data, cont)-> defaultEnv.writeFile fileName, data, cont\n\n  readDir = (fileName, cont)-> defaultEnv.readDir fileName, cont\n\n  statFile = (fileName, cont)-> defaultEnv.statFile fileName, cont\n  \n  funcInfo = (func)->\n    if func.leisureInfoNew then primConsFrom func.leisureInfoNew, 0\n    else if func.leisureInfo\n      (window ? global).FUNC = func\n      info = []\n      callInfo = func.leisureInfo\n      while callInfo\n        info.push resolve callInfo.arg\n        if callInfo.name\n          info.push callInfo.name\n          break\n        callInfo = callInfo.parent\n      root.consFrom info.reverse()\n    else rz L_nil\n\n  primConsFrom = (array, index)->\n    if index >= array.length then rz L_nil\n    else root.primCons array[index], primConsFrom array, index + 1\n\n  class SimpyCons\n    constructor: (@head, @tail)->\n    toArray: ->\n      @_array ? (\n        h = this\n        array = []\n        while h != null\n          array.push h.head\n          h = h.tail\n        @_array = array)\n\n  simpyCons = (a, b)-> new SimpyCons a, b\n\n  slice = Array.prototype.slice\n  concat = Array.prototype.concat\n\n  (window ? global).L$ = (f)->\n    f = rz(f)\n    if typeof f != 'function' || f.length > 1 then f\n    else (args...)-> baseLeisureCall(f, 0, args, f.length)\n\n  (window ? global).Leisure_call = leisureCall = (f)-> baseLeisureCall f, 1, arguments\n\n  (window ? global).Leisure_primCall = baseLeisureCall = (f, pos, args, len, traceCreate, traceCall)->\n    len = len ? f.length\n    while pos < args.length\n      if typeof f != 'function' then throw new Error \"TypeError: #{typeof f} is not a function: #{f}\"\n      if len <= args.length - pos\n        oldLen = len\n        switch len\n          when 1 then f = f args[pos]\n          when 2 then f = f args[pos], args[pos + 1]\n          when 3 then f = f args[pos], args[pos + 1], args[pos + 2]\n          when 4 then f = f args[pos], args[pos + 1], args[pos + 2], args[pos + 3]\n          else\n            if f.leisureInfo || (pos == 0 && len == args.length)\n              return f.apply null, (if pos == 0 then args else slice.call(args, pos))\n            f = f.apply null, slice.call(args, pos, pos + len)\n        if len < args.length - pos\n          len = f.length\n        pos += oldLen\n      else\n        prev = slice.call args, pos\n        partial = ->\n          newArgs = concat.call prev, slice.call arguments\n          #traceCall? f, newArgs\n          if Leisure_generateDebuggingCode && traceCall\n            traceCall partial.L$instanceId, f, slice.call arguments\n          if !f.apply then console.log \"No apply! #{f} #{newArgs[0]}\"\n          if newArgs.length == len then f.apply null, newArgs\n          else baseLeisureCall f, 0, newArgs, len\n        partial.leisurePartial = true\n        partial.leisureInfo = genInfo f, args, f.leisureInfo\n        if Leisure_generateDebuggingCode && traceCreate\n          partial.L$instanceId = ++Leisure_traceInstance\n          traceCreate partial.L$instanceId, f, prev\n        return lazy partial\n    if pos != args.length then console.log \"BAD FINAL POSITION IN LEISURE CALL, ARG LENGTH IS #{args.length} BUT POSITION IS #{pos}\"\n    f\n\n  genInfo = (func, args, oldInfo)->\n    for arg in args\n      if !oldInfo then oldInfo = {name: func.L$info?.name, arg}\n      else oldInfo = {arg: arg, parent: oldInfo}\n    oldInfo\n\n  testCount = 0\n  errors = ''\n  test = (expected, actual)->\n    if JSON.stringify(expected) != JSON.stringify(actual)\n      if errors.length then errors += '\\n'\n      errors += \"TEST #{testCount} FAILED, EXPECTED #{JSON.stringify(expected)} BUT GOT #{JSON.stringify(actual)}\"\n    testCount++\n\n  (window ? global).Leisure_test_call = ->\n    test [1, 2, 3], Leisure_call ((a, b)->(c)-> [a, b, c]), 1, 2, 3\n    test [1, 2, 3], Leisure_call ((a, b, c)-> [a, b, c]), 1, 2, 3\n    test [1, 2, 3], Leisure_call ((a)->(b, c)-> [a, b, c]), 1, 2, 3\n    test [1, 2, 3, 4], Leisure_call ((a)->(b, c)->(d)-> [a, b, c, d]), 1, 2, 3, 4\n    test [1, 2, 3, 4], Leisure_call ((a, b, c)->(d)-> [a, b, c, d]), 1, 2, 3, 4\n    test [1, 2, 3, 4], Leisure_call ((a, b)->(c)->(d)-> [a, b, c, d]), 1, 2, 3, 4\n    test [1, 2, 3, 4], Leisure_call ((a, b)->(c, d)-> [a, b, c, d]), 1, 2, 3, 4\n    test [1, 2, 3, 4], Leisure_call ((a, b, c, d)-> [a, b, c, d]), 1, 2, 3, 4\n    test [1, 2, 3, 4], Leisure_call (Leisure_call ((a, b, c, d)-> [a, b, c, d]), 1, 2), 3, 4\n    if errors.length then errors else null\n\n  serverIncrement = (path, amount, cont)->\n    block = root.getBlockNamed path.split(/\\./)[0]\n    if block.origin != root.currentDocument._name\n      return root.storeBlock block, -> serverIncrement path, amount, cont\n    if typeof path == 'function' then cont \"Error, no path given to serverIncrement\"\n    else if typeof amount == 'function' then cont \"Error, no amount given to serverIncrement\"\n    else Meteor.call 'incrementField', root.currentDocument.leisure.name, path, amount, cont\n\n  getDebugType = -> debugType\n\n  setDebugType = (t)->\n    if !debugFuncs[t] then debugFuncs[t] = {}\n    debugType = t\n\n  (window ? global).Leisure_addSourceFile = addSourceFile\n\n  Leisure.Base = root\n  Leisure.normalFuncs = normalFuncs\n  Leisure.debugFuncs = debugFuncs\n\n  root.normalFuncs = normalFuncs\n  root.debugFuncs = debugFuncs\n  root.serverIncrement = serverIncrement\n  root.defaultEnv = defaultEnv\n  root.readFile = readFile\n  root.readDir = readDir\n  root.writeFile = writeFile\n  root.statFile = statFile\n  root.SimpyCons = SimpyCons\n  root.simpyCons = simpyCons\n  root.resolve = resolve\n  root.lazy = lazy\n  root.verboseMsg = verboseMsg\n  root.maxInt = 9007199254740992\n  root.minInt = -root.maxInt\n  root.funcInfo = funcInfo\n  root.CodeContext = CodeContext\n  root.isResolved = isResolved\n  root.getTraceValues = getTraceValues\n  root.argNames = argNames\n  root.flushTraceLog = flushTraceLog\n  root.addDebugType = addDebugType\n  root.addSourceFile = addSourceFile\n  root.sourceFile = sourceFile\n  root.getDebugType = getDebugType\n  root.setDebugType = setDebugType\n  root.debugTypes = debugTypes\n\n  root\n"
  ]
}