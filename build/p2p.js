// Generated by CoffeeScript 1.9.3
(function() {
  var slice = [].slice;

  define(['jquery', 'immutable', './editor', './editorSupport', 'sockjs', './advice', './ot', './common'], function(jq, immutable, Editor, Support, SockJS, Advice, OperationTransformation, Common) {
    var ConcurrentReplacements, DataStore, Map, OrgData, Peer, Replacement, SequentialReplacements, Set, afterMethod, ajaxGet, basicDataFilter, beforeMethod, blockText, callOriginal, changeAdvice, computeNewStructure, computeReplacements, concurrentReplacements, diag, editorToolbar, getDocumentParams, noTrim, preserveSelection, pretty, ref, replacement, replacementFor, replacementsString, runReplacements, sequentialReplacements, testMsg, validateBatch;
    ref = window.Immutable = immutable, Map = ref.Map, Set = ref.Set;
    DataStore = Editor.DataStore, preserveSelection = Editor.preserveSelection, blockText = Editor.blockText, computeNewStructure = Editor.computeNewStructure, validateBatch = Editor.validateBatch;
    OrgData = Support.OrgData, getDocumentParams = Support.getDocumentParams, editorToolbar = Support.editorToolbar, basicDataFilter = Support.basicDataFilter, replacementFor = Support.replacementFor;
    changeAdvice = Advice.changeAdvice, afterMethod = Advice.afterMethod, beforeMethod = Advice.beforeMethod, callOriginal = Advice.callOriginal;
    ConcurrentReplacements = OperationTransformation.ConcurrentReplacements, SequentialReplacements = OperationTransformation.SequentialReplacements, runReplacements = OperationTransformation.runReplacements, computeReplacements = OperationTransformation.computeReplacements, replacementsString = OperationTransformation.replacementsString, sequentialReplacements = OperationTransformation.sequentialReplacements, concurrentReplacements = OperationTransformation.concurrentReplacements;
    noTrim = Common.noTrim;
    diag = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log.apply(console, args);
    };
    Peer = (function() {
      function Peer() {
        this.data = new OrgData();
        this.clearChanges();
        this.pendingReplace = null;
        this.pendingReplaceFloat = 0;
        this.pendingReplaceTree = new SequentialReplacements();
        this.localReplacements = [];
        this.unreplacements = [];
        this.batchCallbacks = [];
        this.version = -1;
        this.replacementAckLimit = 5;
        this.incomingReplacementCount = 0;
        this.connectionCount = 0;
        this.newConnectionFunc = function() {};
        this.docSnap = null;
        this.solo = true;
        this.history = [];
        this.replayingHistory = false;
      }

      Peer.prototype.clearChanges = function() {
        return this.incomingReplaces = [];
      };

      Peer.prototype.setEditor = function(editor) {
        this.editor = editor;
      };

      Peer.prototype.disconnect = function() {
        var ref1;
        if ((ref1 = this.con) != null) {
          ref1.close();
        }
        return this.con = null;
      };

      Peer.prototype.subsumesIncoming = function(cur, next) {
        var ref1;
        return next.mine && (!cur || next.pendingCount > ((ref1 = cur.pendingCount) != null ? ref1 : -1) || ((cur.pendingCount == null) && next.version > cur.version));
      };

      Peer.prototype.replayHistory = function(items) {
        var bounds, end, i, item, j, len, msg, ref1, results1, snap, start, text, type;
        this.replayingHistory = true;
        try {
          results1 = [];
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            ref1 = _.pairs(item)[0], type = ref1[0], msg = ref1[1];
            if (type === 'incoming') {
              msg.mine = msg.type === 'echo';
              results1.push(this.handleMessage(msg));
            } else if (type === 'edit') {
              start = msg.start, end = msg.end, text = msg.text;
              this.localReplace(msg);
              this.replaceText(start, end, text);
              snap = this.docSnap;
              bounds = this.applyIncomingChanges();
              results1.push(this.checkReplacement(snap, bounds, this.repsForChanges()));
            } else if (type === 'trimVersions') {
              results1.push(this.handleMessage(msg));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        } finally {
          this.replayingHistory = false;
        }
      };

      Peer.prototype.dumpReplay = function() {
        return console.log("PEER.replayHistory(" + (JSON.stringify(this.history)) + ")");
      };

      Peer.prototype.replaceText = function(start, end, text, skipData) {
        if (this.docSnap) {
          this.docSnap = this.docSnap.substring(0, start) + text + this.docSnap.substring(end);
        }
        if (!skipData) {
          return this.data.replaceText(start, end, text);
        }
      };

      Peer.prototype.rollback = function(selections) {
        var j, ref1, repl;
        ref1 = this.unreplacements;
        for (j = ref1.length - 1; j >= 0; j += -1) {
          repl = ref1[j];
          this.replaceText(repl.start, repl.end, repl.text);
          selections.addFloat(repl.start, repl.text.length - repl.end + repl.start);
        }
        return this.unreplacements = [];
      };

      Peer.prototype.replacementForLocal = function() {
        var all, firstVersion, float, fv, j, k, l, len, len1, len2, locals, m, ref1, ref2, rep, repl, reps, results, v, version, versionInfo, vinfo;
        if (this.pendingReplace) {
          reps = this.incomingReplaces.slice(0);
          reps.push(_.defaults({
            version: this.version + 1
          }, this.pendingReplace));
        } else {
          reps = this.incomingReplaces;
        }
        locals = _.cloneDeep(this.localReplacements);
        ref1 = computeReplacements(reps), firstVersion = ref1.firstVersion, versionInfo = ref1.versionInfo;
        l = locals.slice(0);
        all = new SequentialReplacements();
        fv = locals[0].parent - firstVersion;
        ref2 = versionInfo.slice(fv + 1);
        for (v = j = 0, len = ref2.length; j < len; v = ++j) {
          vinfo = ref2[v];
          version = v + fv + firstVersion;
          all.merge(vinfo);
          while (l.length && version >= l[0].parent) {
            l.shift();
          }
          if (!l.length) {
            break;
          } else {
            for (k = 0, len1 = l.length; k < len1; k++) {
              repl = l[k];
              if (float = all.floatFor(repl.start)) {
                repl.start += float;
                repl.end += float;
              }
            }
          }
        }
        results = new SequentialReplacements();
        for (m = 0, len2 = locals.length; m < len2; m++) {
          repl = locals[m];
          results.replace(repl);
        }
        rep = replacement({
          type: 'replace',
          version: this.version + (this.pendingReplace ? 2 : 1),
          parent: this.version + (this.pendingReplace ? 1 : 0),
          replacements: results.toArray()
        });
        return [rep, results];
      };

      Peer.prototype.repsForChanges = function() {
        var pending, reps;
        reps = this.incomingReplaces;
        if (this.pendingReplace) {
          pending = _.defaults({
            version: this.version + 1
          }, this.pendingReplace);
          reps = this.incomingReplaces.concat([pending]);
          if (this.localReplacements.length) {
            reps.push(this.replacementForLocal()[0]);
          }
        }
        return reps;
      };

      Peer.prototype.repsDiag = function(reps) {
        var rep;
        reps = reps != null ? reps : this.repsForChanges();
        return ((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = reps.length; j < len; j++) {
            rep = reps[j];
            results1.push(REPSTR(rep));
          }
          return results1;
        })()).join('\n') + '\n---\n' + replacementsString(reps);
      };

      Peer.prototype.dumpReps = function(reps) {
        return console.log(this.repsDiag(reps));
      };

      Peer.prototype.applyIncomingChanges = function(changes) {
        var bounds, reps, seq;
        reps = changes ? changes : this.repsForChanges();
        if (!changes) {
          seq = new SequentialReplacements();
        }
        bounds = null;
        preserveSelection((function(_this) {
          return function(range) {
            var float, selections;
            float = _this.pendingReplaceTree.floatFor(range.start);
            selections = new SequentialReplacements();
            if (range.start != null) {
              selections.replace({
                start: range.start,
                end: range.start,
                text: '',
                labels: [
                  {
                    name: 'caret',
                    offset: 0
                  }
                ]
              });
            }
            _this.rollback(selections);
            runReplacements(reps, function(start, end, text, labels, node) {
              selections.addFloat(start, text.length - start + end);
              return _this.makeChange(start, end, text, !changes, seq);
            });
            selections.eachOperation(function(start, end, text, labels) {
              var j, label, len, results1;
              if (labels != null ? labels.length : void 0) {
                results1 = [];
                for (j = 0, len = labels.length; j < len; j++) {
                  label = labels[j];
                  if (label.name === 'caret') {
                    range.start = start + label.offset;
                    results1.push(range.length = 0);
                  } else {
                    results1.push(void 0);
                  }
                }
                return results1;
              }
            });
            bounds = seq != null ? seq.finalBounds() : void 0;
            if (_this.solo && !changes && (_this.docSnap != null)) {
              return _this.checkReplacement(_this.docSnap, bounds, reps);
            }
          };
        })(this));
        return bounds;
      };

      Peer.prototype.checkReplacement = function(snap, bounds, reps) {
        var act, exp;
        if ((exp = snap.substring(bounds.start, bounds.end)) !== (act = this.data.getDocSubstring(bounds.start, bounds.end))) {
          console.log("BAD REPLACEMENT, EXPECTED:\n" + (exp.replace(/$/, '$')) + "\n BUT GOT:\n" + (act.replace(/$/, '$')));
          return console.log("REPLACEMENT DUMP...\n" + (this.repsDiag(reps)));
        }
      };

      Peer.prototype.makeChange = function(start, end, text, check, seq) {
        var err;
        if (start !== end || text.length !== 0) {
          this.pushUnreplacement(start, end, text);
          if (check) {
            seq.replace({
              start: start,
              end: end,
              text: text
            });
          }
          try {
            return this.replaceText(start, end, text);
          } catch (_error) {
            err = _error;
            return console.log(err);
          }
        }
      };

      Peer.prototype.nodeLabel = function(node) {
        var cookie, hasIncoming, hasPending, j, k, len, len1, op, ref1, ref2, ref3;
        hasPending = false;
        hasIncoming = false;
        ref2 = (ref1 = node.activeOperations) != null ? ref1 : [node];
        for (j = 0, len = ref2.length; j < len; j++) {
          op = ref2[j];
          ref3 = op.cookies;
          for (k = 0, len1 = ref3.length; k < len1; k++) {
            cookie = ref3[k];
            if (op.pendingCount) {
              hasPending = true;
            } else {
              hasIncoming = true;
            }
          }
        }
        if (hasIncoming && hasPending) {
          return "P/I";
        } else if (hasIncoming) {
          return "IN ";
        } else {
          return "PEN";
        }
      };

      Peer.prototype.connect = function(url1, connectedFunc) {
        var peer;
        this.url = url1;
        this.connectedFunc = connectedFunc;
        this.con = new SockJS(this.url);
        this.con.onmessage = (function(_this) {
          return function(msg) {
            return _this.handleMessage(JSON.parse(msg.data));
          };
        })(this);
        this.con.onclose = (function(_this) {
          return function() {
            return _this.closed();
          };
        })(this);
        peer = this;
        return changeAdvice(this.editor.options, true, {
          editBlocks: {
            p2p: (function(_this) {
              return function(parent) {
                return function(blocks, start, length, newContent, select) {
                  _this.editingReplacement = {
                    blocks: blocks,
                    start: _this.data.offsetForBlock(blocks[0]) + start,
                    length: length,
                    text: newContent
                  };
                  parent(blocks, start, length, newContent, select);
                  return _this.editingReplacement = null;
                };
              };
            })(this)
          },
          changesFor: {
            p2p: function(parent) {
              return function(first, oldBlocks, newBlocks) {
                var changes;
                changes = parent(first, oldBlocks, newBlocks);
                peer.sendReplace(changes);
                return changes;
              };
            }
          },
          batchReplace: {
            p2p: function(parent) {
              return function(replacementsFunc, contFunc, errFunc) {
                return peer.runBatchReplace(replacementsFunc, contFunc, errFunc);
              };
            }
          }
        });
      };

      Peer.prototype.type = 'Unknown Handler';

      Peer.prototype.close = function() {
        console.log("CLOSING: " + this.type);
        return this.con.close();
      };

      Peer.prototype.closed = function() {
        return changeAdvice(this.editor.options, false, {
          changesFor: {
            p2p: true
          }
        });
      };

      Peer.prototype.send = function(type, msg) {
        msg.type = type;
        return this.con.send(JSON.stringify(msg));
      };

      Peer.prototype.runBatchReplace = function(replacementsFunc, contFunc, errFunc) {};

      Peer.prototype.sendReplace = function(arg) {
        var newBlocks, offset, oldBlocks, ref1, repl, start, wasPending;
        oldBlocks = arg.oldBlocks, newBlocks = arg.newBlocks;
        this.incomingReplacementCount = 0;
        offset = this.data.offsetForBlock(oldBlocks[0]);
        repl = this.editingReplacement ? (start = this.editingReplacement.start, {
          start: start,
          end: start + this.editingReplacement.length,
          text: this.editingReplacement.text
        }) : replacementFor(offset, blockText(oldBlocks), blockText(newBlocks));
        wasPending = this.pendingReplace;
        if ((ref1 = this.history) != null) {
          ref1.push({
            edit: repl
          });
        }
        this.localReplace(repl);
        return this.replaceText(repl.start, repl.end, repl.text, true);
      };

      Peer.prototype.localReplace = function(repl) {
        var float, newRepl;
        if (!this.pendingReplace) {
          repl.parent = this.version;
          this.localReplacements.push(repl);
          if (!this.pendingReplace) {
            this.newPendingReplace();
          }
        } else {
          float = this.pendingReplaceTree.floatFor(repl.start);
          newRepl = _.clone(repl);
          newRepl.parent = this.version;
          this.localReplacements.push(newRepl);
        }
        return this.pushUnreplacement(repl.start, repl.end, repl.text);
      };

      Peer.prototype.logReplacement = function(label, start, end, text) {};

      Peer.prototype.pushUnreplacement = function(start, end, text) {
        return this.unreplacements.push({
          start: start,
          end: start + text.length,
          text: this.data.getDocSubstring(start, end)
        });
      };

      Peer.prototype.handleMessage = function(msg) {
        msg.mine = msg.connectionId === this.connectionId || msg.type === 'echo';
        if (!(msg.type in this.handler)) {
          console.log("Received bad message " + msg.type, msg);
          return this.close();
        } else {
          return this.handler[msg.type].call(this, msg);
        }
      };

      Peer.prototype.newPendingReplace = function() {
        var localTree, ref1, rep;
        ref1 = this.replacementForLocal(), rep = ref1[0], localTree = ref1[1];
        this.pendingReplace = replacement(_.defaults({
          mine: true,
          connectionId: this.connectionId
        }, rep));
        this.pendingReplaceTree = localTree;
        this.pendingReplaceFloat = localTree.measure().float;
        this.localReplacements = [];
        if (!this.replayingHistory) {
          return this.send('replace', rep);
        }
      };

      Peer.prototype.handler = {
        log: function(msg) {
          return console.log(msg.msg);
        },
        connect: function(msg) {
          this.id = msg.id, this.connectionId = msg.connectionId, this.version = msg.version;
          this.clearChanges();
          if (typeof this.connectedFunc === "function") {
            this.connectedFunc(this);
          }
          return this.connectedFunc = null;
        },
        connections: function(arg) {
          var count;
          count = arg.count;
          this.connectionCount = count;
          return this.newConnectionFunc(count);
        },
        error: function(msg) {
          console.log("Received error: " + msg.error, msg);
          return this.close();
        },
        echo: function(msg) {
          var pending, ref1;
          if ((ref1 = this.history) != null) {
            ref1.push({
              incoming: msg
            });
          }
          this.incomingReplacementCount = 0;
          pending = this.pendingReplace;
          pending.version = msg.version;
          this.version = msg.version;
          this.pendingReplace = null;
          this.pendingReplaceFloat = 0;
          this.pendingReplaceTree = new SequentialReplacements();
          if (!this.localReplacements.length) {

          } else {
            this.incomingReplaces.push(pending);
            this.newPendingReplace();
            this.incomingReplaces.pop();
          }
          return this.handleMessage(pending);
        },
        replace: function(msg) {
          var float, j, len, r, ref1, ref2, seq;
          if (!msg.mine) {
            if ((ref1 = this.history) != null) {
              ref1.push({
                incoming: msg
              });
            }
          }
          if (msg.connectionId !== this.connectionId || !msg.mine) {
            this.solo = false;
            if (!this.replayingHistory) {
              this.docSnap = null;
            }
          }
          this.version = msg.version;
          if (++this.incomingReplacementCount > this.replacementAckLimit) {
            this.incomingReplacementCount = 0;
            this.send('ack', {
              version: msg.version
            });
          }
          this.incomingReplaces.push(msg);
          if (!msg.mine && this.localReplacements.length) {
            seq = SequentialReplacements.fromArray(msg.replacements);
            ref2 = this.localReplacements;
            for (j = 0, len = ref2.length; j < len; j++) {
              r = ref2[j];
              if (float = seq.floatFor(r.start)) {
                r.start += float;
                r.end += float;
              }
            }
          }
          return this.applyIncomingChanges();
        },
        trimVersions: function(msg) {
          if (noTrim) {

          }
        },
        rejectChange: function() {},
        conditionalReplace: function(arg) {
          var replacements, version;
          replacements = arg.replacements, version = arg.version;
        }
      };

      Peer.prototype.createSession = function(host, connectedFunc, newConnectionFunc) {
        var ref1;
        this.host = host;
        this.connectedFunc = connectedFunc;
        this.newConnectionFunc = newConnectionFunc;
        this.type = 'Master';
        this.newConnectionFunc = (ref1 = this.newConnectionFunc) != null ? ref1 : function() {};
        this.handler = {
          __proto__: Peer.prototype.handler,
          connect: function(msg) {
            this.newConnectionFunc(1);
            this.connectUrl = new URL("slave-" + msg.id, this.url);
            Peer.prototype.handler.connect.call(this, msg);
            this.send('initDoc', {
              doc: this.data.getText()
            });
            return this.docSnap = this.data.getText();
          },
          slaveConnect: function(msg) {
            return this.send('slaveApproval', {
              slaveId: msg.slaveId,
              approval: true
            });
          },
          slaveDisconnect: function(msg) {}
        };
        this.connect("http://" + this.host + "/Leisure/master", this.connectedFunc);
        return this.docSnap = this.data.getText();
      };

      Peer.prototype.connectToSession = function(url1, connected, newConnectionFunc) {
        var ref1;
        this.url = url1;
        this.newConnectionFunc = newConnectionFunc;
        this.type = 'Slave';
        this.newConnectionFunc = (ref1 = this.newConnectionFunc) != null ? ref1 : function() {};
        this.handler = {
          __proto__: Peer.prototype.handler,
          connect: function(msg) {
            Peer.prototype.handler.connect.call(this, msg);
            this.editor.options.load(msg.doc);
            return this.docSnap = msg.doc;
          }
        };
        return this.connect(this.url, connected);
      };

      return Peer;

    })();
    Replacement = (function() {
      function Replacement() {}

      Replacement.prototype.toString = function() {
        return "(p: " + this.parent + ", v: " + this.version + ") " + (this.replacements.join(', '));
      };

      return Replacement;

    })();
    replacement = function(repl) {
      repl.__proto__ = Replacement.prototype;
      return repl;
    };
    $(document).ready(function() {
      var connected;
      if (document.location.search.length > 1 && !connected) {
        return connected = true;
      }
    });
    Peer.prototype.test = function(count) {
      var v;
      v = count = count != null ? count : 0;
      return this.handleMessage(testMsg(63, 63, 'a', v, ++count));
    };
    testMsg = function(start, end, text, version, parent) {
      return {
        start: start,
        end: end,
        text: text,
        version: version,
        parent: parent,
        type: 'replace',
        connectionId: 'test-peer',
        mine: false
      };
    };
    Peer.prototype.testReplay = function() {
      this.replayHistory(this.testHistory);
      return console.log("Rotator should be 43, not 33");
    };
    Peer.prototype.dumpHistory = function(n, hist) {
      var dump, j, len, repl;
      if (typeof hist === 'string') {
        hist = JSON.parse(hist);
      } else if (!hist) {
        hist = this.history;
      }
      dump = "      Peer::testReplay" + n + " = ->\n        @history = null\n        replay = => @replayHistory [";
      for (j = 0, len = hist.length; j < len; j++) {
        repl = hist[j];
        dump += "\n          " + (pretty(repl)) + ",";
      }
      dump += '\n        ]\n        if !@con\n          Leisure.createSession document.location.host || "localhost:8080", replay\n        else replay()';
      return console.log(dump);
    };
    pretty = function(obj) {
      var item, key;
      if (_.isArray(obj)) {
        return '[' + ((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = obj.length; j < len; j++) {
            item = obj[j];
            results1.push(pretty(item));
          }
          return results1;
        })()).join(', ') + ']';
      } else if (typeof obj === 'object') {
        return '{' + ((function() {
          var j, len, ref1, results1;
          ref1 = _.sortBy(_.keys(obj));
          results1 = [];
          for (j = 0, len = ref1.length; j < len; j++) {
            key = ref1[j];
            results1.push(key + ": " + (pretty(obj[key])));
          }
          return results1;
        })()).join(', ') + '}';
      } else {
        return JSON.stringify(obj);
      }
    };
    Peer.prototype.testReplay1 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 30,
                parent: 1,
                start: 30,
                text: "a"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 2
              }
            }, {
              edit: {
                end: 31,
                parent: 2,
                start: 31,
                text: "s"
              }
            }, {
              edit: {
                end: 32,
                start: 32,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 3
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay2 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 30,
                parent: 1,
                start: 30,
                text: "a"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 2
              }
            }, {
              edit: {
                end: 31,
                parent: 2,
                start: 31,
                text: "s"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 3
              }
            }, {
              edit: {
                end: 32,
                parent: 3,
                start: 32,
                text: "d"
              }
            }, {
              edit: {
                end: 33,
                parent: 3,
                start: 33,
                text: "f"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 34,
                parent: 5,
                start: 34,
                text: "a"
              }
            }, {
              edit: {
                end: 35,
                parent: 5,
                start: 35,
                text: "s"
              }
            }, {
              edit: {
                end: 36,
                parent: 5,
                start: 36,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay3 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, 'a'],
                type: "replace",
                version: 3
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 2,
                replacements: [31, 31, 's'],
                type: "replace",
                version: 4
              }
            }, {
              edit: {
                end: 61,
                parent: 4,
                start: 61,
                text: "r"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 62,
                parent: 5,
                start: 62,
                text: "e"
              }
            }, {
              edit: {
                end: 63,
                start: 63,
                text: "w"
              }
            }, {
              edit: {
                end: 64,
                start: 64,
                text: "q"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 4,
                replacements: [31, 31, 'f'],
                type: "replace",
                version: 7
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 8
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 7,
                replacements: [32, 32, 'd'],
                type: "replace",
                version: 9
              }
            }, {
              edit: {
                end: 66,
                parent: 9,
                start: 66,
                text: "r"
              }
            }, {
              edit: {
                end: 67,
                start: 67,
                text: "e"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 10
              }
            }, {
              edit: {
                end: 68,
                start: 68,
                text: "w"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 11
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 9,
                replacements: [32, 32, 'sa'],
                type: "replace",
                version: 12
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay4 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 2,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 4
              }
            }, {
              edit: {
                end: 171,
                parent: 4,
                start: 171,
                text: "3"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 4,
                replacements: [31, 31, "fd"],
                type: "replace",
                version: 6
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay5 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 30,
                parent: 1,
                start: 30,
                text: "a"
              }
            }, {
              edit: {
                end: 31,
                start: 31,
                text: "s"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 3
              }
            }, {
              edit: {
                end: 32,
                start: 32,
                text: "f"
              }
            }, {
              edit: {
                end: 33,
                start: 33,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              incoming: {
                connectionId: "peer-0",
                mine: false,
                parent: 4,
                replacements: [171, 171, "3"],
                type: "replace",
                version: 5
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay6 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              edit: {
                end: 60,
                parent: 3,
                start: 60,
                text: "q"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 3,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 5
              }
            }, {
              edit: {
                end: 62,
                parent: 5,
                start: 62,
                text: "w"
              }
            }, {
              edit: {
                end: 63,
                start: 63,
                text: "e"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }, {
              edit: {
                end: 64,
                start: 64,
                text: "r"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 5,
                replacements: [31, 31, "d"],
                type: "replace",
                version: 7
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay7 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 169,
                parent: 1,
                start: 169,
                text: "3"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 3
              }
            }, {
              edit: {
                end: 170,
                parent: 3,
                start: 170,
                text: "2"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 3,
                replacements: [30, 30, "s"],
                type: "replace",
                version: 4
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 172,
                parent: 5,
                start: 172,
                text: "3"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 4,
                replacements: [31, 31, "adf"],
                type: "replace",
                version: 6
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 7
              }
            }, {
              edit: {
                end: 176,
                parent: 7,
                start: 176,
                text: "2"
              }
            }, {
              edit: {
                end: 176,
                parent: 7,
                start: 176,
                text: "3"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 8
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 6,
                replacements: [34, 34, "s"],
                type: "replace",
                version: 9
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 10
              }
            }, {
              edit: {
                end: 179,
                parent: 10,
                start: 179,
                text: "2"
              }
            }, {
              edit: {
                end: 179,
                parent: 10,
                start: 179,
                text: "3"
              }
            }, {
              edit: {
                end: 180,
                parent: 10,
                start: 180,
                text: "2"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 9,
                replacements: [34, 34, "adf"],
                type: "replace",
                version: 11
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 12
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 11,
                replacements: [41, 41, "sad", 3, 3, "fsad"],
                type: "replace",
                version: 13
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 14
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay8 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              edit: {
                end: 170,
                parent: 3,
                start: 170,
                text: "4"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              edit: {
                end: 171,
                parent: 4,
                start: 171,
                text: "3"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 3,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 5
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }, {
              edit: {
                end: 173,
                parent: 6,
                start: 173,
                text: "4"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 5,
                replacements: [33, 33, "f", 1, 1, "d"],
                type: "replace",
                version: 7
              }
            }, {
              edit: {
                end: 175,
                parent: 7,
                start: 175,
                text: "3"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 8
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 9
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 7,
                replacements: [31, 31, "sda"],
                type: "replace",
                version: 10
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 10,
                replacements: [36, 36, "f"],
                type: "replace",
                version: 11
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay9 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              edit: {
                end: 60,
                parent: 3,
                start: 60,
                text: "q"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 3,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 4
              }
            }, {
              edit: {
                end: 62,
                start: 62,
                text: "w"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 4,
                replacements: [32, 32, "d"],
                type: "replace",
                version: 5
              }
            }, {
              edit: {
                end: 64,
                start: 64,
                text: "e"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 5,
                replacements: [33, 33, "f"],
                type: "replace",
                version: 6
              }
            }, {
              edit: {
                end: 65,
                start: 65,
                text: "r"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 7
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 8
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay10 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              edit: {
                end: 60,
                parent: 3,
                start: 60,
                text: "q"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 3,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 4
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 62,
                parent: 5,
                start: 62,
                text: "w"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 4,
                replacements: [32, 32, "d"],
                type: "replace",
                version: 6
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 7
              }
            }, {
              edit: {
                end: 64,
                parent: 7,
                start: 64,
                text: "e"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 6,
                replacements: [33, 33, "f"],
                type: "replace",
                version: 8
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 9
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 9,
                replacements: [34, 34, "a"],
                type: "replace",
                version: 10
              }
            }, {
              edit: {
                end: 67,
                parent: 10,
                start: 67,
                text: "q"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 10,
                replacements: [35, 35, "s"],
                type: "replace",
                version: 11
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 12
              }
            }, {
              edit: {
                end: 69,
                parent: 12,
                start: 69,
                text: "w"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 11,
                replacements: [36, 36, "f"],
                type: "replace",
                version: 13
              }
            }, {
              edit: {
                end: 71,
                start: 71,
                text: "e"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 13,
                replacements: [36, 36, "d"],
                type: "replace",
                version: 14
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay11 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 30,
                parent: 1,
                start: 30,
                text: "a"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 2
              }
            }, {
              edit: {
                end: 31,
                parent: 2,
                start: 31,
                text: "s"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 3
              }
            }, {
              edit: {
                end: 32,
                parent: 3,
                start: 32,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              edit: {
                end: 33,
                parent: 4,
                start: 33,
                text: "f"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 34,
                parent: 5,
                start: 34,
                text: ";"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }, {
              edit: {
                end: 35,
                parent: 6,
                start: 35,
                text: "l"
              }
            }, {
              edit: {
                end: 36,
                start: 36,
                text: "k"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 7
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 8
              }
            }, {
              edit: {
                end: 37,
                parent: 8,
                start: 37,
                text: "j"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 9
              }
            }, {
              edit: {
                end: 38,
                parent: 9,
                start: 38,
                text: "a"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 10
              }
            }, {
              edit: {
                end: 39,
                parent: 10,
                start: 39,
                text: "s"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 11
              }
            }, {
              edit: {
                end: 40,
                parent: 11,
                start: 40,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 12
              }
            }, {
              edit: {
                end: 41,
                parent: 12,
                start: 41,
                text: "f"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 13
              }
            }, {
              edit: {
                end: 42,
                parent: 13,
                start: 42,
                text: ";"
              }
            }, {
              edit: {
                end: 43,
                start: 43,
                text: "l"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 14
              }
            }, {
              edit: {
                end: 44,
                start: 44,
                text: "k"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 15
              }
            }, {
              edit: {
                end: 45,
                start: 45,
                text: "j"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 16
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 17
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay12 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              edit: {
                end: 60,
                parent: 3,
                start: 60,
                text: "q"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 2,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 5
              }
            }, {
              edit: {
                end: 62,
                parent: 5,
                start: 62,
                text: "w"
              }
            }, {
              edit: {
                end: 63,
                start: 63,
                text: "e"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 5,
                replacements: [30, 30, "f"],
                type: "replace",
                version: 7
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 8
              }
            }, {
              edit: {
                end: 65,
                parent: 8,
                start: 65,
                text: "q"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 9
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 8,
                replacements: [32, 32, "a"],
                type: "replace",
                version: 10
              }
            }, {
              edit: {
                end: 67,
                parent: 10,
                start: 67,
                text: "w"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 10,
                replacements: [34, 34, "sd", 1, 1, "f"],
                type: "replace",
                version: 11
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 12
              }
            }, {
              edit: {
                end: 71,
                parent: 12,
                start: 71,
                text: "e"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 13
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 12,
                replacements: [34, 34, "a"],
                type: "replace",
                version: 14
              }
            }, {
              edit: {
                end: 73,
                parent: 14,
                start: 73,
                text: "q"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 15
              }
            }, {
              edit: {
                end: 74,
                parent: 15,
                start: 74,
                text: "w"
              }
            }, {
              edit: {
                end: 75,
                start: 75,
                text: "e"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 16
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 14,
                replacements: [34, 34, "sdf"],
                type: "replace",
                version: 17
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 18
              }
            }, {
              edit: {
                end: 79,
                parent: 18,
                start: 79,
                text: "q"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 19
              }
            }, {
              edit: {
                end: 80,
                parent: 19,
                start: 80,
                text: "w"
              }
            }, {
              edit: {
                end: 81,
                start: 81,
                text: "e"
              }
            }, {
              edit: {
                end: 82,
                start: 82,
                text: "e"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 20
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 18,
                replacements: [38, 38, "s"],
                type: "replace",
                version: 21
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 22
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 21,
                replacements: [39, 39, "adf"],
                type: "replace",
                version: 23
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay13 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 59,
                parent: 1,
                start: 59,
                text: "q"
              }
            }, {
              incoming: {
                type: "echo",
                version: 3
              }
            }, {
              edit: {
                end: 60,
                parent: 3,
                start: 60,
                text: "w"
              }
            }, {
              incoming: {
                type: "echo",
                version: 4
              }
            }, {
              edit: {
                end: 61,
                parent: 4,
                start: 61,
                text: "e"
              }
            }, {
              incoming: {
                type: "echo",
                version: 5
              }
            }, {
              incoming: {
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 6
              }
            }, {
              incoming: {
                parent: 6,
                replacements: [30, 30, "sdf"],
                type: "replace",
                version: 7
              }
            }, {
              edit: {
                end: 66,
                parent: 7,
                start: 66,
                text: "q"
              }
            }, {
              incoming: {
                type: "echo",
                version: 8
              }
            }, {
              edit: {
                end: 67,
                parent: 8,
                start: 67,
                text: "w"
              }
            }, {
              incoming: {
                parent: 7,
                replacements: [34, 34, "a"],
                type: "replace",
                version: 9
              }
            }, {
              incoming: {
                type: "echo",
                version: 10
              }
            }, {
              edit: {
                end: 69,
                parent: 10,
                start: 69,
                text: "e"
              }
            }, {
              incoming: {
                type: "echo",
                version: 11
              }
            }, {
              incoming: {
                parent: 9,
                replacements: [36, 36, "s", 1, 1, "df"],
                type: "replace",
                version: 12
              }
            }, {
              edit: {
                end: 73,
                parent: 12,
                start: 73,
                text: "q"
              }
            }, {
              incoming: {
                type: "echo",
                version: 13
              }
            }, {
              edit: {
                end: 74,
                parent: 13,
                start: 74,
                text: "w"
              }
            }, {
              edit: {
                end: 75,
                start: 75,
                text: "e"
              }
            }, {
              incoming: {
                type: "echo",
                version: 14
              }
            }, {
              incoming: {
                type: "echo",
                version: 15
              }
            }, {
              edit: {
                end: 76,
                parent: 15,
                start: 76,
                text: "q"
              }
            }, {
              incoming: {
                type: "echo",
                version: 16
              }
            }, {
              incoming: {
                parent: 12,
                replacements: [37, 37, "a"],
                type: "replace",
                version: 17
              }
            }, {
              edit: {
                end: 78,
                parent: 17,
                start: 78,
                text: "w"
              }
            }, {
              edit: {
                end: 79,
                start: 79,
                text: "e"
              }
            }, {
              incoming: {
                type: "echo",
                version: 18
              }
            }, {
              incoming: {
                type: "echo",
                version: 19
              }
            }, {
              incoming: {
                parent: 17,
                replacements: [41, 41, "fd", 3, 3, "sdfa"],
                type: "replace",
                version: 20
              }
            }, {
              incoming: {
                parent: 20,
                replacements: [40, 40, "sa"],
                type: "replace",
                version: 21
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay14 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              edit: {
                end: 30,
                parent: 1,
                start: 30,
                text: "a"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 2
              }
            }, {
              edit: {
                end: 31,
                parent: 2,
                start: 31,
                text: "s"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 3
              }
            }, {
              edit: {
                end: 32,
                parent: 3,
                start: 32,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 4
              }
            }, {
              edit: {
                end: 33,
                parent: 4,
                start: 33,
                text: "a"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 34,
                parent: 5,
                start: 34,
                text: "s"
              }
            }, {
              edit: {
                end: 35,
                start: 35,
                text: "d"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 6
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 7
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    Peer.prototype.testReplay15 = function() {
      var replay;
      this.history = null;
      replay = (function(_this) {
        return function() {
          return _this.replayHistory([
            {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 1,
                replacements: [30, 30, "a"],
                type: "replace",
                version: 3
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 3,
                replacements: [31, 31, "s"],
                type: "replace",
                version: 4
              }
            }, {
              edit: {
                end: 171,
                parent: 4,
                start: 170,
                text: "4"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 5
              }
            }, {
              edit: {
                end: 171,
                parent: 5,
                start: 170,
                text: "3"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 4,
                replacements: [32, 32, "d"],
                type: "replace",
                version: 6
              }
            }, {
              edit: {
                end: 172,
                start: 170,
                text: "31"
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 7
              }
            }, {
              edit: {
                end: 172,
                start: 170,
                text: "15"
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 6,
                replacements: [33, 33, "f"],
                type: "replace",
                version: 8
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 9
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 8,
                replacements: [34, 34, "a"],
                type: "replace",
                version: 10
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 10,
                replacements: [35, 35, "s"],
                type: "replace",
                version: 11
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 11,
                replacements: [36, 36, "f"],
                type: "replace",
                version: 12
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 12,
                replacements: [37, 37, "a"],
                type: "replace",
                version: 13
              }
            }, {
              incoming: {
                connectionId: "peer-1",
                mine: false,
                parent: 13,
                replacements: [38, 38, "sf"],
                type: "replace",
                version: 14
              }
            }, {
              incoming: {
                mine: true,
                type: "echo",
                version: 15
              }
            }
          ]);
        };
      })(this);
      if (!this.con) {
        return Leisure.createSession(document.location.host || "localhost:8080", replay);
      } else {
        return replay();
      }
    };
    window.Replacement = Replacement;
    window.REPSTR = function(r) {
      return Replacement.prototype.toString.call(r);
    };
    window.REP = function(r) {
      return console.log(REPSTR(r));
    };
    ajaxGet = function(url) {
      return new Promise(function(resolve, reject) {
        var xhr;
        xhr = new XMLHttpRequest;
        xhr.onerror = reject;
        xhr.onload = resolve;
        xhr.open("GET", url);
        return xhr.send(null);
      });
    };
    window.randomUserName = function(done) {
      var i;
      return Promise.all((function() {
        var j, results1;
        results1 = [];
        for (i = j = 0; j < 3; i = ++j) {
          results1.push(ajaxGet('http://randomword.setgetgo.com/get.php'));
        }
        return results1;
      })()).then(function(events) {
        var e;
        return done((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = events.length; j < len; j++) {
            e = events[j];
            results1.push(e.target.responseText.trim());
          }
          return results1;
        })());
      });
    };
    return {
      Peer: Peer
    };
  });

}).call(this);

//# sourceMappingURL=p2p.js.map
