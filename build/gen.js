// Generated by CoffeeScript 1.12.6

/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
 */

(function() {
  'use strict';
  var slice = [].slice;

  define(['./base', './ast', './runtime', 'lodash', 'lib/source-map', 'browser-source-map-support', 'lib/js-yaml'], function(Base, Ast, Runtime, _, SourceMap, SourceMapSupport, Yaml) {
    var CodeGenerator, Leisure_anno, Leisure_apply, Leisure_lambda, Leisure_let, Leisure_lit, Leisure_ref, Monad2, Nil, SourceMapConsumer, SourceMapGenerator, SourceNode, USE_STRICT, _false, _true, addDebugType, addLambdaProperties, addUniq, arrayify, assocListProps, ast2Json, booleanFor, check, checkChild, codeNum, collectArgs, cons, consFrom, curDef, currentFile, currentFuncName, curryCall, define, dump, dumpAnno, dumpMonadStack, findName, functionId, functionInfo, gen, genMap, genSource, getAnnoBody, getAnnoData, getAnnoName, getApplyArg, getApplyFunc, getAssocListProps, getDebugType, getLambdaArgs, getLambdaBody, getLambdaProperties, getLambdaVar, getLastLetBody, getLetBody, getLetName, getLetValue, getLitVal, getNArgs, getNthLambdaBody, getPos, getRefName, getType, isNil, isResolved, jsCodeFor, jstr, lacons, lazify, lazy, lc, lcons, lconsFrom, left, letList, locateAst, location, lz, megaArity, nameSub, newConsFrom, nsLog, parseErr, rangeToJson, ref1, ref2, resolve, right, root, rz, setDataType, setDebugType, setMegaArity, setType, simpyCons, sn, specialAnnotations, stackSize, trace, uniqName, unit, useArity, varNameSub, verboseMsg, withFile;
    simpyCons = Base.simpyCons, resolve = Base.resolve, lazy = Base.lazy, verboseMsg = Base.verboseMsg, nsLog = Base.nsLog, isResolved = Base.isResolved, addDebugType = Base.addDebugType, getDebugType = Base.getDebugType, setDebugType = Base.setDebugType;
    dump = Yaml.dump;
    rz = resolve;
    lz = lazy;
    lc = Leisure_call;
    ref1 = root = Ast, nameSub = ref1.nameSub, getLitVal = ref1.getLitVal, getRefName = ref1.getRefName, getLambdaVar = ref1.getLambdaVar, getLambdaBody = ref1.getLambdaBody, getApplyFunc = ref1.getApplyFunc, getApplyArg = ref1.getApplyArg, getAnnoName = ref1.getAnnoName, getAnnoData = ref1.getAnnoData, getAnnoBody = ref1.getAnnoBody, getLetName = ref1.getLetName, getLetValue = ref1.getLetValue, getLetBody = ref1.getLetBody, Leisure_lit = ref1.Leisure_lit, Leisure_ref = ref1.Leisure_ref, Leisure_lambda = ref1.Leisure_lambda, Leisure_apply = ref1.Leisure_apply, Leisure_let = ref1.Leisure_let, Leisure_anno = ref1.Leisure_anno, setType = ref1.setType, setDataType = ref1.setDataType, cons = ref1.cons, Nil = ref1.Nil, define = ref1.define, functionInfo = ref1.functionInfo, getPos = ref1.getPos, isNil = ref1.isNil, getType = ref1.getType, ast2Json = ref1.ast2Json, rangeToJson = ref1.rangeToJson, getPos = ref1.getPos;
    Monad2 = Runtime.Monad2, _true = Runtime._true, _false = Runtime._false, unit = Runtime.unit, left = Runtime.left, right = Runtime.right, booleanFor = Runtime.booleanFor, newConsFrom = Runtime.newConsFrom, dumpMonadStack = Runtime.dumpMonadStack;
    consFrom = newConsFrom;
    SourceNode = SourceMap.SourceNode, SourceMapConsumer = SourceMap.SourceMapConsumer, SourceMapGenerator = SourceMap.SourceMapGenerator;
    varNameSub = function(n) {
      return "L_" + (nameSub(n));
    };
    useArity = true;
    megaArity = false;
    curDef = null;
    trace = true;
    stackSize = 20;
    USE_STRICT = '"use strict";\n';
    setMegaArity = function(setting) {
      return megaArity = setting;
    };
    setDebugType('User');
    setDebugType = function(type) {
      addDebugType(type);
      return Base.setDebugType(type);
    };
    collectArgs = function(args, result) {
      var i, j, len;
      for (j = 0, len = args.length; j < len; j++) {
        i = args[j];
        if (Array.isArray(i)) {
          collectArgs(i, result);
        } else {
          result.push(i);
        }
      }
      return result;
    };
    locateAst = function(ast) {
      var col, line, pos, ref2;
      ref2 = pos = getPos(ast).toArray(), line = ref2[0], col = ref2[1];
      return [line, col];
    };
    check = function(bool, arg) {
      if (!bool) {
        return console.log(new Error("Bad sourcemap arg: " + arg).stack);
      }
    };
    checkChild = function(child) {
      if (Array.isArray(child)) {
        return child.forEach(checkChild);
      } else {
        return check((typeof child === 'string') || (child instanceof SourceNode), child);
      }
    };
    currentFile = 'NEVERGIVENFILE.lsr';
    currentFuncName = void 0;
    withFile = function(file, name, block) {
      var oldFileName, oldFuncName;
      oldFileName = currentFile;
      oldFuncName = currentFuncName;
      currentFile = file;
      currentFuncName = name;
      try {
        return block();
      } finally {
        currentFile = oldFileName;
        currentFuncName = oldFuncName;
      }
    };
    sn = function() {
      var ast, line, offset, ref2, str;
      ast = arguments[0], str = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      ref2 = locateAst(ast), line = ref2[0], offset = ref2[1];
      check(typeof line === 'number', 'line');
      check(typeof offset === 'number', 'offset');
      checkChild(str);
      if (line < 1) {
        line = 1;
      }
      if (currentFile === 'NEVERGIVENFILE.lsr') {
        console.log(new Error("SN CALLED WITHOUT FILE").stack);
      }
      if (currentFuncName != null) {
        return new SourceNode(line, offset, currentFile, str, currentFuncName);
      } else {
        return new SourceNode(line, offset, currentFile, str);
      }
    };
    jstr = function(str) {
      return JSON.stringify(str);
    };
    jsCodeFor = function(codeMap, mapType, externalMap) {
      var code;
      code = codeMap.code;
      if (mapType === 'inline') {
        code = code.replace(/map: '@SOURCEMAP@'/, 'inlineMap: ' + jstr(codeMap.map.toJSON()));
      } else if (mapType === 'external') {
        code = code.replace(/map: '@SOURCEMAP@'/, 'externalMap: ' + jstr(externalMap));
      }
      return code + "\n//# sourceMappingURL=data:application/json;base64," + (btoa(jstr(codeMap.map.toJSON()))) + "\n";
    };
    functionId = 0;
    codeNum = 0;
    CodeGenerator = (function() {
      function CodeGenerator(fileName, useContext, noFile, suppressContextCreation, source1) {
        this.useContext = useContext;
        this.noFile = noFile;
        this.suppressContextCreation = suppressContextCreation;
        this.source = source1;
        this.debugType = getDebugType();
        this.fileName = fileName != null ? fileName : "dynamic code with source " + (++codeNum);
        this.startId = functionId;
        this.positions = [];
        this.createContext = !this.suppressContextCreation;
        this.decls = [];
        this.declStack = [];
        this.funcInfo = [];
      }

      CodeGenerator.prototype.contextInit = function() {
        if (this.useContext) {
          return '\n  L$F.context = L_$context;';
        } else {
          return '';
        }
      };

      CodeGenerator.prototype.funcVar = function(index) {
        return "L$FUNC_" + index;
      };

      CodeGenerator.prototype.addFuncInfo = function(info) {
        this.funcInfo.push(info);
        return this.funcVar(this.funcInfo.length - 1);
      };

      CodeGenerator.prototype.decl = function(ast, dec) {
        var col, line, ref2;
        if (Leisure_generateDebuggingCode) {
          dec.id = this.decls.length;
          ref2 = getPos(ast).toArray(), line = ref2[0], col = ref2[1];
          dec.line = line;
          dec.col = col;
          if (this.declStack.length) {
            dec.parent = _.last(this.declStack).id;
          }
          this.decls.push(dec);
          return this.declStack.push(dec);
        }
      };

      CodeGenerator.prototype.declLazy = function(ast, arg) {
        var result;
        this.decl(ast, {
          lazy: true
        });
        if (arg != null) {
          result = arg();
          this.popDecl();
          return result;
        }
      };

      CodeGenerator.prototype.declLambda = function(ast, name, args) {
        return this.decl(ast, {
          lambda: name,
          args: args
        });
      };

      CodeGenerator.prototype.popDecl = function() {
        if (Leisure_generateDebuggingCode) {
          return this.declStack.pop();
        }
      };

      CodeGenerator.prototype.genSource = function(source, ast) {
        var funcName, map, result, sm;
        if (this.noFile) {
          sm = this.genNode(ast).prepend(USE_STRICT + '(').add(')').toStringWithSourceMap({
            file: this.fileName
          });
          map = JSON.parse(sm.map.toString());
          result = sm.code;
        } else {
          funcName = ast instanceof Leisure_anno && getAnnoName(ast) === 'leisureName' ? getAnnoData(ast) : null;
          withFile(this.fileName, funcName, (function(_this) {
            return function() {
              var err;
              try {
                sm = _this.genNode(ast).toStringWithSourceMap({
                  file: _this.fileName
                });
                map = JSON.parse(sm.map.toString());
                map.sourcesContent = [source];
                return result = sm.code;
              } catch (error) {
                err = error;
                err.message = "Error generating code for:\n  " + (source.trim().replace(/\n/g, '\n  ')) + "\n" + err.message;
                throw err;
              }
            };
          })(this));
        }
        this.endId = functionId;
        return jsCodeFor(sm, 'inline');
      };

      CodeGenerator.prototype.genNode = function(ast) {
        var result;
        result = this.genUniq(ast, Nil, [Nil, 0]);
        this.endId = functionId;
        return this.genTopLevel(ast, result);
      };

      CodeGenerator.prototype.genMap = function(ast) {
        var filename, funcname, hasFile, nameAst, sub;
        hasFile = ast instanceof Leisure_anno && getAnnoName(ast) === 'filename';
        filename = hasFile ? getAnnoData(ast) : this.fileName;
        nameAst = hasFile ? getAnnoBody(ast) : null;
        funcname = nameAst instanceof Leisure_anno && getAnnoName(nameAst) === 'leisureName' ? getAnnoData(nameAst) : currentFuncName;
        sub = withFile(filename, null, (function(_this) {
          return function() {
            return _this.genNode(ast);
          };
        })(this));
        this.endId = functionId;
        if (!funcname) {
          return sub;
        } else {
          return withFile(filename, funcname, function() {
            return sn(ast, sub);
          });
        }
      };

      CodeGenerator.prototype.gen = function(ast) {
        return new SourceNode(1, 0, currentFile, ['(', this.genMap(ast), ')']).toStringWithSourceMap({
          file: currentFile
        }).code;
      };

      CodeGenerator.prototype.genUniq = function(ast, names, uniq) {
        var arity, data, debugType, funcName, genned, name, oldDebugType, oldDef, ref2, src;
        switch (ast.constructor) {
          case Leisure_lit:
            return sn(ast, jstr(getLitVal(ast)));
          case Leisure_ref:
            return sn(ast, "resolve(", this.genRefName(ast, uniq, names, true), ")");
          case Leisure_lambda:
            return this.genLambda(ast, names, uniq);
          case Leisure_apply:
            if (useArity) {
              return this.genArifiedApply(ast, names, uniq, arity);
            } else {
              return sn(ast, this.genUniq(getApplyFunc(ast), names, uniq), "(", this.genApplyArg(getApplyArg(ast), names, uniq), ")");
            }
            break;
          case Leisure_let:
            return sn(ast, "(function(){", this.genLets(ast, names, uniq), "})()");
          case Leisure_anno:
            name = getAnnoName(ast);
            data = getAnnoData(ast);
            if (name === 'arity' && useArity && data > 1) {
              return this.genArifiedLambda(getAnnoBody(ast), names, uniq, data);
            } else {
              try {
                switch (name) {
                  case 'leisureName':
                    oldDef = curDef;
                    curDef = data;
                    break;
                  case 'debug':
                    oldDebugType = debugType;
                    setDebugType(data);
                    break;
                  case 'define':
                    this.declLazy(getAnnoBody(ast));
                }
                genned = this.genUniq(getAnnoBody(ast), names, uniq);
                if (name === 'debug') {
                  debugType = oldDebugType;
                }
                switch (name) {
                  case 'type':
                    return sn(ast, "setType(", genned, ", '", data, "')");
                  case 'dataType':
                    return sn(ast, "setDataType(", genned, ", '", data, "')");
                  case 'define':
                    ref2 = data.toArray(), funcName = ref2[0], arity = ref2[1], src = ref2[2];
                    this.popDecl();
                    return sn(ast, "define('", funcName, "', ", lazify(ast, genned), ", ", arity, ", ", jstr(src), ")");
                  case 'leisureName':
                    return genned;
                  default:
                    return genned;
                }
              } finally {
                if (name === 'leisureName') {
                  curDef = oldDef;
                }
              }
            }
            break;
          default:
            return "CANNOT GENERATE CODE FOR UNKNOWN AST TYPE: " + ast + ", " + ast.constructor + " " + Leisure_lambda;
        }
      };

      CodeGenerator.prototype.genArifiedApply = function(ast, names, uniq) {
        var argCode, args, arity, defaultArity, dmp, func, funcName, i, info, j, m, ref2, ref3, ref4;
        args = [];
        func = ast;
        while (dumpAnno(func) instanceof Leisure_apply) {
          args.push(getApplyArg(dumpAnno(func)));
          func = getApplyFunc(dumpAnno(func));
        }
        args.reverse();
        defaultArity = false;
        if (args.length > 1 && ((dmp = dumpAnno(func)) instanceof Leisure_ref) && (((info = functionInfo[funcName = getRefName(dmp)]) && ((info.newArity && (arity = info.arity) && arity <= args.length) || (!arity && megaArity))) || (!info && isNil(names.find(function(el) {
          return el === funcName;
        }))))) {
          if (defaultArity = !arity) {
            arity = args.length;
          }
          argCode = [];
          argCode.push(ast);
          if (defaultArity) {
            argCode.push('L$(');
          }
          argCode.push(this.genUniq(func, names, uniq));
          if (defaultArity) {
            argCode.push(')(');
          } else {
            argCode.push('(');
          }
          for (i = j = 0, ref2 = arity; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
            if (i > 0) {
              argCode.push(', ');
            }
            argCode.push(sn(args[i], this.genApplyArg(args[i], names, uniq)));
          }
          argCode.push(')');
          for (i = m = ref3 = arity, ref4 = args.length; m < ref4; i = m += 1) {
            argCode.push('(', sn(args[i], this.genApplyArg(args[i], names, uniq)), ')');
          }
          return sn.apply(null, argCode);
        } else {
          ast = dumpAnno(ast);
          return sn(ast, this.genUniq(getApplyFunc(ast), names, uniq), "(", this.genApplyArg(getApplyArg(ast), names, uniq), ")");
        }
      };

      CodeGenerator.prototype.genLambda = function(ast, names, uniq) {
        var argName, bodyCode, code, defName, n, name, result, u;
        name = getLambdaVar(ast);
        u = addUniq(name, names, uniq);
        n = cons(name, names);
        argName = uniqName(name, u);
        defName = curDef;
        curDef = null;
        this.declLambda(ast, defName, [name]);
        bodyCode = this.genUniq(getLambdaBody(ast), n, u);
        code = sn(ast, "function(" + argName + "){return ", this.genTraceCall(ast, bodyCode, argName), ";}");
        result = this.genLambdaDecl(ast, defName, '1', addLambdaProperties(ast, code));
        this.popDecl();
        return result;
      };

      CodeGenerator.prototype.genArifiedLambda = function(ast, names, uniq, arity) {
        var annoAst, argList, args, bodyCode, code, data, defName, name, result;
        if (arity < 2) {
          return this.genLambda(ast, names, uniq, 0);
        } else {
          args = getNArgs(arity, ast).toArray();
          argList = _.map(args, (function(x) {
            return 'L_' + x;
          })).join(', ');
          defName = curDef;
          curDef = null;
          this.declLambda(ast, defName, names);
          bodyCode = this.genUniq(getNthLambdaBody(ast, arity), names, uniq);
          code = sn(ast, "function(" + argList + ") {\n  return L_checkPartial(L$F, arguments, Leisure_traceCreatePartial" + this.debugType + ", Leisure_traceCallPartial" + this.debugType + ") || ", this.genTraceCall(ast, bodyCode, argList), ";\n};");
          result = this.genLambdaDecl(ast, defName, args.length, addLambdaProperties(ast, code));
          annoAst = ast;
          while (annoAst instanceof Leisure_anno) {
            name = getAnnoName(annoAst);
            data = getAnnoData(annoAst);
            switch (name) {
              case 'type':
                result = sn(ast, "setType(", result, ", '", data, "')");
                break;
              case 'dataType':
                result = sn(ast, "setDataType(", result, ", '", data, "')");
            }
            annoAst = getAnnoBody(annoAst);
          }
          this.popDecl();
          return result;
        }
      };

      CodeGenerator.prototype.genRefName = function(ref, uniq, names, checkMacro) {
        var name, ns, ref2, val, vname;
        name = getRefName(ref);
        if (isNil((val = names.find(function(el) {
          return el === name;
        })))) {
          vname = varNameSub(name);
          if (!(typeof window !== "undefined" && window !== null ? window : global)[vname] && ((ref2 = Leisure.stateValues.macroDefs) != null ? ref2.map.has(name) : void 0)) {
            throw new Error("Attempt to use a macro as a value: " + name);
          }
          ns = findName(nameSub(name));
          if (ns === root.currentNameSpace) {
            nsLog("LOCAL NAME: " + name + " FOR " + root.currentNameSpace + " " + (location(ref)));
          } else if (!ns) {
            nsLog("GUESSING LOCAL NAME " + name + " FOR " + root.currentNameSpace + " " + (location(ref)));
          }
          return vname;
        } else {
          return uniqName(name, uniq);
        }
      };

      CodeGenerator.prototype.genApplyArg = function(arg, names, uniq) {
        var d;
        d = dumpAnno(arg);
        if (d instanceof Leisure_apply) {
          return this.declLazy(arg, (function(_this) {
            return function() {
              return _this.lazify(d, _this.genUniq(arg, names, uniq));
            };
          })(this));
        } else if (d instanceof Leisure_ref) {
          return this.genRefName(d, uniq, names);
        } else if (d instanceof Leisure_lit) {
          return sn(arg, jstr(getLitVal(d)));
        } else if (d instanceof Leisure_let) {
          return this.declLazy(arg, (function(_this) {
            return function() {
              return _this.lazify(arg, _this.genUniq(arg, names, uniq));
            };
          })(this));
        } else if (d instanceof Leisure_lambda) {
          return sn(arg, 'lazy(', this.genUniq(arg, names, uniq), ')');
        } else {
          return this.declLazy(arg, (function(_this) {
            return function() {
              return _this.lazify(arg, _this.genUniq(arg, names, uniq));
            };
          })(this));
        }
      };

      CodeGenerator.prototype.genLetAssign = function(arg, names, uniq) {
        return this.declLazy(arg, (function(_this) {
          return function() {
            return _this.lazify(arg, _this.genUniq(arg, names, uniq));
          };
        })(this));
      };

      CodeGenerator.prototype.lazify = function(ast, body) {
        return lazify(ast, body, (Leisure_generateDebuggingCode ? _.last(this.decls).id : void 0), this.debugType);
      };

      CodeGenerator.prototype.genLets = function(ast, names, uniq) {
        var assigns, bindings, decs, letUniq, ln, ref2;
        bindings = letList(ast, []);
        ref2 = _.reduce(bindings, ((function(_this) {
          return function(result, l) {
            var assigns, code, letName, ln, newNames, newU, u;
            u = result[0], code = result[1], assigns = result[2], ln = result[3];
            newU = addUniq(getLetName(l), ln, u);
            letName = uniqName(getLetName(l), newU);
            newNames = cons(getLetName(l), ln);
            return [newU, cons(sn(ast, letName + ' = ', _this.genLetAssign(getLetValue(l), newNames, u)), code), cons(letName, assigns), newNames];
          };
        })(this)), [uniq, Nil, Nil, names]), letUniq = ref2[0], decs = ref2[1], assigns = ref2[2], ln = ref2[3];
        return sn(ast, "  var ", assigns.reverse().intersperse(', ').toArray(), ";\n  ", decs.reverse().intersperse(';\n  ').toArray(), ";\n\n  return ", this.genUniq(getLastLetBody(ast), ln, letUniq));
      };

      CodeGenerator.prototype.genTraceCall = function(ast, code, argNames) {
        if (Leisure_generateDebuggingCode) {
          return sn(ast, "(\n  Leisure_traceCall" + this.debugType + "(L$instance, " + argNames + "),\n  Leisure_traceReturn" + this.debugType + "(L$instance, (", code, "))\n)");
        } else {
          return code;
        }
      };

      CodeGenerator.prototype.genLambdaDecl = function(ast, name, length, code) {
        var info, infoVar, nameCode;
        if (name) {
          nameCode = jstr(name);
        } else {
          nameCode = 'undefined';
        }
        infoVar = this.addFuncInfo(info = {
          length: length
        });
        if (Leisure_generateDebuggingCode) {
          info.id = _.last(this.declStack).id;
          return sn(ast, "(function(L$instance, L$parent){\n  var L$F = ", code, ";\n  L$F.L$info = " + infoVar + ";\n  L$F.L$instanceId = L$instance;\n  L$F.L$parentId = L$parent;\n  Leisure_traceLambda" + this.debugType + "(L$F);\n  return L$F;\n})(++Leisure_traceInstance, L$instance)");
        } else {
          return sn(ast, "(function(){\n  var L$F = ", code, ";\n  L$F.L$info = " + infoVar + ";\n  return L$F;\n})()");
        }
      };

      CodeGenerator.prototype.genAddSource = function() {
        if (this.source) {
          return "\n  Leisure_addSourceFile(@fileName, " + (jstr(this.source)) + ");";
        } else {
          return '';
        }
      };

      CodeGenerator.prototype.genTraceMemos = function() {
        return '';
      };

      CodeGenerator.prototype.genTopLevel = function(ast, node) {
        var header, ref2;
        if ((ref2 = dumpAnno(ast).constructor) === Leisure_lit || ref2 === Leisure_ref) {
          return node;
        } else if (Leisure_generateDebuggingCode) {
          header = "var L$ret;";
          if (this.createContext) {
            header += this.genContext();
          }
          return sn(ast, "(function(L$instance){\n  " + header + "\n  return ", node, ";\n})(++Leisure_traceInstance)");
        } else {
          return sn(ast, "(function(){\n  var L$context = null;\n  " + (this.genFuncInfo()) + "\n  return ", node, ";\n})()");
        }
      };

      CodeGenerator.prototype.genContext = function() {
        var context, decl, decls, j, len, ref2, source, type;
        source = this.source || this.noFile ? "source: Leisure_addSourceFile(" + (jstr(this.fileName)) + ", " + (jstr(this.source)) + "),\n    map: '@SOURCEMAP@'" : this.sourceMap ? "source: " + (jstr(this.fileName)) + ",\n    map: '@SOURCEMAP@'" : "source: " + (jstr(this.fileName));
        decls = [];
        ref2 = this.decls;
        for (j = 0, len = ref2.length; j < len; j++) {
          decl = ref2[j];
          type = decl.lazy ? 'lazy' : 'lambda';
          decls.push(type, decl.line, decl.col, decl.parent);
          if (type === 'lambda') {
            decls.push.apply(decls, [decl.lambda, decl.args.length].concat(slice.call(decl.args)));
          }
        }
        return context = ("\n  var L$context = Leisure_traceTopLevel" + this.debugType + "({\n    id: Leisure_traceContext++,\n    traceCreatePartial: function(){return Leisure_traceCreatePartial" + this.debugType + ";},\n    traceCallPartial: function(){return Leisure_traceCallPartial" + this.debugType + ";},\n    debugType: " + (JSON.stringify(this.debugType)) + ",\n    " + source + ",\n    decls: " + (JSON.stringify(decls)) + "\n  });") + this.genFuncInfo();
      };

      CodeGenerator.prototype.genFuncInfo = function() {
        var header, i, info, j, len, ref2;
        header = '';
        ref2 = this.funcInfo;
        for (i = j = 0, len = ref2.length; j < len; i = ++j) {
          info = ref2[i];
          header += "\n  var " + (this.funcVar(i)) + " = {context: L$context, id: " + info.id + ", length: " + info.length + "};";
        }
        return header;
      };

      return CodeGenerator;

    })();
    lazify = function(ast, body, id, debugType) {
      if (Leisure_generateDebuggingCode) {
        return sn(ast, "(function(L$instance, L$parent) {\n  return Leisure_traceLazyValue" + debugType + "(L$instance, L$context, " + id + ", function(){\n    return Leisure_traceResolve" + debugType + "(L$instance, ", body, ");\n  });\n})(++Leisure_traceInstance, L$instance)");
      } else {
        return sn(ast, "function(){\n  return ", body, ";\n}");
      }
    };
    findName = function(name) {
      var i, j, ref2, ref3;
      for (i = j = ref2 = root.nameSpacePath.length - 1; ref2 <= 0 ? j <= 0 : j >= 0; i = ref2 <= 0 ? ++j : --j) {
        if ((ref3 = LeisureNameSpaces[root.nameSpacePath[i]]) != null ? ref3[name] : void 0) {
          return root.nameSpacePath[i];
        }
      }
      if (root.currentNameSpace && LeisureNameSpaces[root.currentNameSpace][name]) {
        return root.currentNameSpace;
      } else {
        return null;
      }
    };
    location = function(ast) {
      var col, line, ref2;
      ref2 = locateAst(ast), line = ref2[0], col = ref2[1];
      return line + ":" + col;
    };
    getLambdaArgs = function(ast) {
      var args;
      args = [];
      while (ast instanceof Leisure_lambda) {
        args.push(getLambdaVar(ast));
        ast = getLambdaBody(ast);
      }
      return [args, ast];
    };
    getNthLambdaBody = function(ast, n) {
      var d;
      if (n === 0) {
        return ast;
      } else if ((d = dumpAnno(ast)) instanceof Leisure_lambda) {
        return getNthLambdaBody(getLambdaBody(d), n - 1);
      } else {
        throw new Error("Expected lambda but got " + ast);
      }
    };
    ((ref2 = typeof window !== "undefined" && window !== null ? window : global) != null ? ref2 : {}).curryCall = curryCall = function(args, func) {
      var f, i, j, ref2;
      f = func(args[0]);
      for (i = j = 1, ref2 = args.length; 1 <= ref2 ? j < ref2 : j > ref2; i = 1 <= ref2 ? ++j : --j) {
        f = f(args[i]);
      }
      return f;
    };
    getNArgs = function(n, ast) {
      var d;
      d = dumpAnno(ast);
      if (!n) {
        return Nil;
      } else {
        return cons(getLambdaVar(d), getNArgs(n - 1, getLambdaBody(d)));
      }
    };
    specialAnnotations = ['type', 'dataType', 'define'];
    arrayify = function(cons) {
      if (cons instanceof Leisure_cons) {
        return cons.map(function(el) {
          return arrayify(el);
        }).toArray();
      } else {
        return cons;
      }
    };
    getLambdaProperties = function(body, props) {
      var value;
      if (body instanceof Leisure_anno) {
        if (!_.includes(specialAnnotations, getAnnoName(body))) {
          if (!props) {
            props = {};
          }
          value = getAnnoData(body);
          props[getAnnoName(body)] = arrayify(value);
        }
        getLambdaProperties(getAnnoBody(body), props);
      }
      return props;
    };
    addLambdaProperties = function(ast, def, extras) {
      var p, props;
      props = getLambdaProperties(getLambdaBody(ast));
      if (props || extras) {
        p = {};
        if (props) {
          _.merge(p, props);
        }
        if (extras) {
          _.merge(p, extras);
        }
        return sn(ast, "setLambdaProperties(", def, ", ", jstr(p), ")");
      } else {
        return def;
      }
    };
    lcons = function(a, b) {
      return rz(L_cons)(lz(a))(lz(b));
    };
    parseErr = function(a, b) {
      return rz(L_parseErr)(a, b);
    };
    lconsFrom = function(array) {
      var el, j, len, p, ref3;
      if (array instanceof Array) {
        p = rz(L_nil);
        ref3 = array.reverse();
        for (j = 0, len = ref3.length; j < len; j++) {
          el = ref3[j];
          p = lcons(lconsFrom(el), p);
        }
        return p;
      } else {
        return array;
      }
    };
    assocListProps = null;
    getAssocListProps = function() {
      if (!assocListProps) {
        assocListProps = lcons(lcons('assoc', 'true'), rz(L_nil));
        assocListProps.properties = assocListProps;
      }
      return assocListProps;
    };
    lacons = function(key, value, list) {
      var alist;
      alist = lcons(lcons(key, value), list);
      alist.properties = getAssocListProps();
      return alist;
    };
    (typeof window !== "undefined" && window !== null ? window : global).setLambdaProperties = function(def, props) {
      var k, p, v;
      p = rz(L_nil);
      for (k in props) {
        v = props[k];
        p = lacons(k, lconsFrom(v), p);
      }
      def.properties = p;
      return def;
    };
    (typeof global !== "undefined" && global !== null ? global : window).L$convertError = function(err, args) {
      if (!err.L_stack) {
        console.log('CONVERTING ERROR:', err);
        (typeof global !== "undefined" && global !== null ? global : window).ERR = err;
        err.L_stack = args.callee.L$stack;
        err.L_args = args;
      }
      return err;
    };
    dumpAnno = function(ast) {
      if (ast instanceof Leisure_anno) {
        return dumpAnno(getAnnoBody(ast));
      } else {
        return ast;
      }
    };
    addUniq = function(name, names, uniq) {
      var num, overrides;
      if ((names.find(function(el) {
        return el === name;
      })) !== Nil) {
        overrides = uniq[0], num = uniq[1];
        return [cons(cons(name, name + "_" + num), overrides), num + 1];
      } else {
        return uniq;
      }
    };
    uniqName = function(name, uniq) {
      var kv;
      uniq = uniq[0];
      kv = uniq.find((function(el) {
        return el.head() === name;
      }), uniq);
      return varNameSub((kv !== Nil ? kv.tail() : name));
    };
    letList = function(ast, buf) {
      if (ast instanceof Leisure_let) {
        buf.push(ast);
        return letList(getLetBody(ast), buf);
      } else {
        return buf;
      }
    };
    getLastLetBody = function(ast) {
      if (ast instanceof Leisure_let) {
        return getLastLetBody(getLetBody(ast));
      } else {
        return ast;
      }
    };
    define('debugType', function(lvl) {
      return new Monad2('debugType', function(env, cont) {
        setDebugType(String(rz(lvl)));
        return cont(unit());
      });
    });
    define('debugMessage', function(type, msg) {
      return checkPartial(L_vectorRemove, arguments) || (new Monad2('debugMessage', function(env, cont) {
        var count;
        count = (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceMessage" + (rz(type))](rz(msg));
        env.writeTraceMessage(count, rz(msg));
        return cont(unit());
      }));
    });
    define('traceOff', new Monad2('traceOff', function(env, cont) {
      trace = false;
      return cont(unit());
    }));
    define('traceOn', new Monad2('traceOn', function(env, cont) {
      trace = true;
      return cont(unit());
    }));
    define('runAst', (function(code) {
      return function(ast) {
        return new Monad2('runAst', function(env, cont) {
          var baseMsg, codeMsg, err, jsCode;
          jsCode = null;
          try {
            jsCode = env.fileName ? withFile(env.fileName, null, (function(_this) {
              return function() {
                return new CodeGenerator(env.fileName, false, true).genSource(null, rz(ast));
              };
            })(this)) : new CodeGenerator().genSource(rz(code), rz(ast));
            return cont(eval(jsCode));
          } catch (error) {
            err = error;
            dumpMonadStack(err, env);
            codeMsg = (jsCode ? "CODE: \n" + jsCode + "\n" : '');
            baseMsg = "\n\nParse error: " + err.message + "\n" + codeMsg + "AST: ";
            err.message = "" + baseMsg + (ast());
            err.L$ast = ast;
            return cont(err);
          }
        });
      };
    }), null, null, null, 'parser');
    define('genAst', (function(ast) {
      var err;
      try {
        return gen(rz(ast));
      } catch (error) {
        err = error;
        return parseErr(lz('\n\nParse error: ' + err.toString() + "AST: "), ast);
      }
    }), null, null, null, 'parser');
    gen = function(ast) {
      return new CodeGenerator().gen(ast);
    };
    genMap = function(ast, fileName) {
      return new CodeGenerator(fileName, false, false, fileName).genMap(ast);
    };
    genSource = function(source, ast) {
      return new CodeGenerator().genSource(source, ast);
    };
    return {
      gen: gen,
      genMap: genMap,
      genSource: genSource,
      sourceNode: sn,
      withFile: withFile,
      curryCall: curryCall,
      SourceNode: SourceNode,
      SourceMapConsumer: SourceMapConsumer,
      SourceMapGenerator: SourceMapGenerator,
      setMegaArity: setMegaArity,
      CodeGenerator: CodeGenerator,
      setDebugType: setDebugType,
      jsCodeFor: jsCodeFor
    };
  });

}).call(this);

//# sourceMappingURL=gen.js.map
