{
  "version": 3,
  "file": "replacements.js",
  "sourceRoot": "..",
  "sources": [
    "src/replacements.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Simple operational transformation engine\n\n    'use strict'\n    define ['fingertree', 'lodash', './testing', 'immutable'], (Fingertree, _, Testing, Immutable)->\n      {\n        assert\n        assertEq\n      } = Testing\n      {\n        Set\n      } = Immutable\n\n      #diag = (args...)-> console.log args...\n      diag = (args...)->\n\nReplacements captures successive replacements within a version\n\n      class Replacements\n        constructor: (reps)->\n          @replacements = reps ? Fingertree.fromArray [],\n            identity: -> initial: 0, final: 0, float: 0\n            measure: (n)->\n              initial: n.offset + n.length\n              final: n.offset + n.text.length\n              float: n.text.length - n.length\n            sum: (a, b)->\n              initial: a.initial + b.initial\n              final: a.final + b.final\n              float: a.float + b.float\n        snapshot: -> new Replacements @replacements\n        isEmpty: -> @replacements.isEmpty()\n        initialBounds: ->\n          if @isEmpty() then start: 0, end: 0\n          else start: @replacements.peekFirst().offset, end: @replacements.measure().initial\n        finalBounds: ->\n          if @isEmpty() then start: 0, end: 0\n          else start: @replacements.peekFirst().offset, end: @replacements.measure().final\n        measure: -> @replacements.measure()\n        floatFor: (offset)->\n          @replacements.split((m)-> m.initial > offset)[0].measure().float\n        addFloat: (start, float)->\n          [first, rest] = @replacements.split (m)-> m.final >= start\n          l = first.measure().final\n          if !rest.isEmpty()\n            n = rest.peekFirst()\n            rest = rest.removeFirst().addFirst _.defaults {offset: n.offset + float}, n\n            @replacements = first.concat rest\n        replace: (repl)->\n          {start, end, text} = repl\n          [first, rest] = @replacements.split (m)-> m.final >= start\n          l = first.measure().final\n          if !rest.isEmpty() && l + (old = rest.peekFirst()).offset <= end\n            node = mergeRepl l, old, repl\n            rest = rest.removeFirst()\n          else\n            node =\n              offset: repl.start - l\n              length: repl.end - repl.start\n              text: text\n              labels: repl.labels ? []\n            if !rest.isEmpty()\n              next = rest.peekFirst()\n              rest = rest.removeFirst().addFirst _.defaults {offset: next.offset + l - repl.end}, next\n          @replacements = first.concat rest.addFirst node\n          old?.repl\n        dump: -> console.log @toString()\n        toString: ->\n          strs = []\n          @eachOperation (start, end, text)->\n            strs.push \"#{start}, #{end}, #{JSON.stringify text}\"\n          strs.join '\\n'\n        toConcurrent: (conc)->\n          conc = conc ? new ConcurrentReplacements()\n          @eachOperation (start, end, text, cookies)->\n            conc.replace {start, end, text, cookies}\n          conc\n        eachOperation: (func)->\n          t = @replacements\n          while !t.isEmpty()\n            n = t.peekLast()\n            t = t.removeLast()\n            start = t.measure().initial + n.offset\n            func start, start + n.length, n.text, n.labels, n\n          null\n        merge: (replacements)->\n          replacements.eachOperation (start, end, text, labels)=>\n            @replace {start, end, text, labels}\n        toArray: ->\n          results = []\n          t = @replacements\n          while !t.isEmpty()\n            n = t.peekFirst()\n            t = t.removeFirst()\n            start = t.measure().initial + n.offset\n            results.push start, start + n.length, n.text\n            for label in n.labels\n              results.push label\n          results\n        getRepls: ->\n          repls = []\n          @eachOperation (start, end, text)-> repls.push {start, end, text}\n          repls\n\n      eachReplacement = (reps, func)->\n        i = 0\n        while i < reps.length\n          start = reps[i++]\n          end = reps[i++]\n          text = reps[i++]\n          labels = []\n          while typeof reps[i] == 'object'\n            labels.push reps[i++]\n          func start, end, text, labels\n\n      Replacements.fromArray = (reps)->\n        seq = new Replacements()\n        if typeof reps[0] == 'number'\n          eachReplacement reps, (start, end, text, labels)-> seq.replace {start, end, text, labels}\n        else for repl in reps\n          seq.replace repl\n        seq\n\nMerge overlapping repl with node\n\n      mergeRepl = (offset, node, repl)->\n        start = offset + node.offset\n        end = start + node.length\n        rStart = Math.max 0, repl.start - start\n        rEnd = repl.end - start\n        newStart = Math.min(start, repl.start)\n        labels = if rStart == node.text.length then node.labels[..]\n        else for label in node.labels\n          name: label.name\n          offset: if rStart >= label.offset then label.offset\n          else label.offset + repl.text.length - repl.start + repl.end\n        if repl.labels? then for label in repl.labels\n          labels.push\n            name: label.name\n            offset: label.offset + rStart\n        offset: newStart - offset\n        length: end + Math.max(0, repl.end - start - node.text.length) - Math.min repl.start, start\n        text: node.text.substring(0, rStart) + repl.text + node.text.substring rEnd\n        labels: labels\n\n      replacements = (reps)->\n        s = new Replacements()\n        for repl in reps\n          s.replace repl\n        s\n\n      Object.assign(Leisure, {\n        Replacements: {\n          Replacements\n          replacements\n        }\n      }).Replacements\n"
  ]
}