{
  "version": 3,
  "file": "tangle.js",
  "sourceRoot": "..",
  "sources": [
    "src/tangle.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Tangle support\n\nTest with\n\nLeisure.tangle('#+BEGIN_SRC leisure :tangle yes\\n3 + 4\\n#+END_SRC')\n\n    'use strict'\n    define ['./base', './org', './docOrg', './gen', './eval', 'lodash', 'handlebars', './advice', 'lib/js-yaml', 'bluebird', 'immutable', 'fingertree', 'lib/sha1'], (Base, Org, DocOrg, Gen, Eval, _, Handlebars, Advice, Yaml, Bluebird, Immutable, FingerTree, SHA1)->\n      {\n        parseOrgMode\n      } = Org\n      {\n        orgDoc\n        blockSource\n        parseYaml\n      } = DocOrg\n      {\n        languageEnvMaker\n        nextGeneratedFileName\n        getLeisurePromise\n      } = Eval\n      {\n        Promise\n      } = Bluebird\n      {\n        jsCodeFor\n        SourceNode\n        SourceMapConsumer\n        SourceMapGenerator\n      } = Gen\n      {\n        defaultEnv\n      } = Base\n\n      parseBlocks = (text)->\n        if text == '' then []\n        else orgDoc parseOrgMode text.replace /\\r\\n/g, '\\n'\n\n      codeBlocksFor = (docText)-> _.filter(parseBlocks(docText), (el)-> el.type == 'code' && el.language)\n\nExtract code blocks and generate code that sends the compiled block code to\nthis, which should be a block processor object (registering data and templates\nby name, etc.)\n\n      extractCode = (docText)->\n        extractedCode = []\n        curLang = ''\n        codeString = ''\n        pushCode = (lang = curLang, code = codeString)->\n          if lang\n            extractedCode.push language: lang, code: code\n            curLang = codeString = ''\n        for block in codeBlocksFor docText\n          try\n            if block.codeAttributes?.tangle?.toLowerCase() == 'yes'\n              if block.language != curLang\n                if curLang\n                  env = languageEnvMaker(block.language)?(Object.create defaultEnv)\n                  codeString = env.generateCode codeString\n                pushCode()\n                curLang = block.language\n              codeString += blockSource block\n            else if code = tangleBlock block\n              pushCode()\n              pushCode block.language, code\n          catch err\n            console.log \"ERROR IN CODE: #{err}\\n#{block.text}\"\n            throw err\n        if codeString then pushCode()\n        extractedCode\n\n      shouldTangle = (block)->\n        if block?.language && block.codeAttributes\n          if block.codeAttributes.tangle?.toLowerCase() == 'yes' then 'tangle'\n          else tangleType block\n\n      tangleBlock = (block)->\n        if (attr = block.codeAttributes) || block.language.toLowerCase() == 'yaml'\n          [type, code] = codeForBlock block\n          if code\n            gen = (code)->\n              if code.code\n                con = SourceMapConsumer.fromSourceMap code.map\n                code = SourceNode.fromStringWithSourceMap code.code, con\n                fileName = con.file || con.sources[0]\n              else fileName = nextGeneratedFileName()\n              block.hash = SHA1.hash block.text\n              blockStr = JSON.stringify block\n              nodes = switch type\n                when 'yaml' then ['this.tangleAddData(', blockStr, ', ', JSON.stringify(parseYaml code.replace /(^|\\n): /gm, '$1'), ');\\n']\n                when 'view' then ['this.tangleAddView(', blockStr, ', ', code, ');\\n']\n                when 'observer' then ['this.tangleAddObserver(', blockStr, ', ', code, ');\\n']\n                when 'controller' then ['this.tangleAddController(', blockStr, ', ', code, ');\\n']\n                when 'def' then ['this.tangleAddDef(', blockStr, ', ', code, ');\\n']\n                else null\n              if nodes\n                console.log \"FILE NAME: #{fileName}\"\n                new SourceNode 1, 0, fileName, nodes\n            if code instanceof Promise then code.then gen else gen code\n\n      tangleType = (block)->\n        #if (block.language.toLowerCase() == 'yaml' && block.codeName && 'yaml')\n        if false\n        else if attr = block.codeAttributes\n          (attr.results?.toLowerCase() == 'def' && 'def') ||\n            #(attr.defview && 'view') ||\n            (attr.control && 'controller') ||\n            (attr.observe && 'observer')\n\n      codeForBlock = (block)->\n        attr = block.codeAttributes\n        type = tangleType block\n        code = if !(type in ['view', 'yaml', 'observer', 'controller', 'def']) then null\n        else if type == 'view' then viewSource block\n        else if type == 'yaml' then blockSource block\n        else\n          env = languageEnvMaker(block.language)?(Object.create defaultEnv)\n          if type == 'def' then env.generateCode blockSource(block)\n          else env.genBlock block\n        [type, code]\n\n      viewSource = (block)->\n        source = blockSource block\n        JSON.stringify source.substring 0, source.length - 1\n\n      tangle = (docText)->\n        getLeisurePromise().then ->\n          Promise.join.apply(null, (for {language, code} in extractCode docText\n            if language == 'yaml' then code\n            else\n              if !(env = languageEnvMaker(language)?(Object.create defaultEnv))\n                throw new Error \"Language '#{language}' not supported\"\n              code))\n            .then (results)->\n              n = new SourceNode()\n              if results.length\n                n.add ((if !code then results[i] else SourceNode.fromStringWithSourceMap code, SourceMapConsumer.fromSourceMap map) for {code, map}, i in results)\n              jsCodeFor n.toStringWithSourceMap()\n            .catch (err)-> console.log \"PROMISE CAUGHT ERROR IN CODE: #{err}\\n#{code}\"\n\n      Object.assign Leisure, {\n        tangle\n        codeBlocksFor\n        extractCode\n      }\n\n      {\n        tangle\n        codeBlocksFor\n        extractCode\n        jsCodeFor\n        shouldTangle\n      }\n"
  ]
}