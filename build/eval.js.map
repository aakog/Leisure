{
  "version": 3,
  "file": "eval.js",
  "sourceRoot": "..",
  "sources": [
    "src/eval.litcoffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;EAEI;AAFJ,MAAA;;;EAGI,MAAM,CAAC,GAAP,GAAa;;EACb,MAAA,CAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,EAAiC,OAAjC,EAA0C,YAA1C,EAAwD,aAAxD,EAAuE,aAAvE,EAAsF,iBAAtF,EAAyG,UAAzG,EAAqH,OAArH,EAA8H,aAA9H,EAA6I,UAA7I,EAAyJ,QAAzJ,EAAmK,YAAnK,EAAiL,4BAAjL,EAA+M,6BAA/M,CAAP,EAAsP,QAAA,CAAC,IAAD,EAAO,GAAP,EAAY,OAAZ,EAAqB,KAArB,EAA4B,SAA5B,EAAuC,UAAvC,EAAmD,WAAnD,EAAgE,EAAhE,EAAoE,QAApE,EAA8E,GAA9E,EAAmF,IAAnF,EAAyF,MAAzF,EAAiG,CAAjG,EAAoG,UAApG,EAAgH,gBAAhH,EAAkI,sBAAlI,CAAA;AACpP,QAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,SAAA,EAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,WAAA,EAAA,SAAA,EAAA,cAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,KAAA,EAAA,wBAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,YAAA,EAAA,OAAA,EAAA,WAAA,EAAA,SAAA,EAAA,aAAA,EAAA,MAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,aAAA,EAAA,YAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,WAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,qBAAA,EAAA,WAAA,EAAA,SAAA,EAAA,KAAA,EAAA,EAAA,EAAA,QAAA,EAAA,aAAA,EAAA,SAAA,EAAA,aAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,SAAA,EAAA,WAAA,EAAA,YAAA,EAAA,cAAA,EAAA,OAAA,EAAA,KAAA,EAAA,eAAA,EAAA,QAAA,EAAA,SAAA,EAAA,aAAA,EAAA,kBAAA,EAAA,EAAA,EAAA,YAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,EAAA,UAAA,EAAA,qBAAA,EAAA,cAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,EAAA,wBAAA,EAAA,cAAA,EAAA,SAAA,EAAA,IAAA,EAAA,QAAA,EAAA,YAAA,EAAA;;MAAA,gBAAgB,CAAE,OAAlB,CAAA;;IAEA,KAAA,GAAQ;IACR,SAAA,GAAY;IACZ,UAAA,GAAa;IACb,WAAA,GAAc,SAAA,CAAU,aAAV;IACd,CAAA,CACE,OADF,EAEE,IAFF,EAGE,wBAHF,EAIE,GAJF,CAAA,GAKI,GALJ;IAMA,CAAA,CACE,IADF,EAEE,OAFF,EAGE,IAHF,EAIE,UAJF,EAKE,aALF,EAME,aANF,CAAA,GAOI,IAPJ;IAQA,oDAAC,SAAS,MAAV,CAAiB,CAAC,OAAlB,GAA4B,EAAA,GAAK;IACjC,oDAAC,SAAS,MAAV,CAAiB,CAAC,IAAlB,GAAyB,EAAA,GAAK;IAC9B,EAAA,GAAK;IACL,CAAA,CACE,QADF,EAEE,SAFF,EAGE,WAHF,EAIE,QAJF,EAKE,QALF,EAME,aANF,EAOE,QAPF,EAQE,KARF,EASE,WATF,EAUE,iBAVF,EAWE,IAXF,EAYE,KAZF,CAAA,GAaI,OAbJ;IAcA,CAAA,CACE,OADF,CAAA,GAEI,QAFJ;IAGA,CAAA,CACE,SADF,EAEE,UAFF,EAGE,UAHF,EAIE,iBAJF,EAKE,kBALF,EAME,MANF,EAOE,aAPF,EAQE,QARF,EASE,SATF,EAUE,YAVF,CAAA,GAWI,GAXJ;IAYA,CAAA,CACE,IADF,CAAA,GAEI,IAFJ;IAGA,CAAA,CACE,YADF,EAEE,WAFF,EAGE,SAHF,CAAA,GAII,MAJJ;IAKA,CAAA,CACE,aADF,CAAA,GAEI,sBAFJ,EA5DA;;;;IAoEA,kBAAA,GAAqB;IACrB,UAAU,CAAC,MAAX,GAAoB,QAAA,CAAC,GAAD,EAAM,YAAN,EAAoB,IAApB,CAAA;aAA4B,IAAA,CAAK,MAAA,CAAO,GAAP,EAAY,YAAZ,CAAL;IAA5B;IAEpB,wBAAA,GAA2B,QAAA,CAAA,CAAA;aAAG,CAAA,SAAA,CAAA,CAAY,kBAAZ,CAAA;IAAH;IAE3B,qBAAA,GAAwB,QAAA,CAAA,CAAA;MACtB,kBAAA;aACA,wBAAA,CAAA;IAFsB;IAIxB,cAAA,GAAiB,QAAA,CAAC,IAAD,CAAA;aAAS,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;eACpC,SAAA,CAAU,CAAC,IAAD,CAAV,EAAkB,OAAlB;MADoC,CAAZ;IAAT;IAGjB,cAAA,GAAiB;IAEjB,iBAAA,GAAoB,QAAA,CAAA,CAAA;MAClB,IAAG,CAAC,cAAJ;QACE,cAAA,GAAiB,cAAA,CAAe,4BAAf,CACf,CAAC,IADc,CACT,QAAA,CAAA,CAAA;iBAAG,cAAA,CAAe,eAAf;QAAH,CADS,CAEf,CAAC,IAFc,CAET,QAAA,CAAA,CAAA;iBAAG,cAAA,CAAe,oBAAf;QAAH,CAFS,CAGf,CAAC,IAHc,CAGT,QAAA,CAAA,CAAA;iBAAG,cAAA,CAAe,eAAf;QAAH,CAHS,CAIf,CAAC,IAJc,CAIT,QAAA,CAAA,CAAA;iBAAG,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;mBACnB,UAAA,CAAW,oBAAX,EAAiC,OAAjC,EAA0C,MAA1C;UADmB,CAAZ;QAAH,CAJS,CAMf,CAAC,IANc,CAMT,QAAA,CAAA,CAAA;iBAAG,YAAA,CAAa,MAAb;QAAH,CANS,CAOf,CAAC,IAPc,CAOT,QAAA,CAAA,CAAA;iBAAG,OAAO,CAAC,GAAR,CAAY,gBAAZ;QAAH,CAPS,CAQf,CAAC,KARc,CAQR,QAAA,CAAC,GAAD,CAAA;iBAAQ,OAAO,CAAC,KAAR,CAAc,CAAA,+BAAA,CAAA,CAAkC,GAAG,CAAC,KAAtC,CAAA,CAAd;QAAR,CARQ,EADnB;;aAUA;IAXkB;IAapB,QAAA,GAAW,QAAA,CAAC,IAAD,EAAO,GAAP,CAAA;MAAc,IAAG,IAAH;eAAa,IAAA,CAAK,GAAL,EAAb;OAAA,MAAA;QAA2B,MAAM,IAAjC;;IAAd;IAEX,UAAA,GAAa,QAAA,CAAC,GAAD,EAAM,OAAN,EAAe,IAAf,CAAA;AACX,UAAA,GAAA,EAAA;MAAA,QAAA,GAAW;MACX,GAAA,GACE;QAAA,SAAA,EAAW,UAAX;QACA,OAAA,EAAS,QAAA,CAAC,MAAD,EAAS,GAAT,CAAA;UACP,IAAG,CAAC,QAAJ;YACE,QAAA,GAAW;mBACX,IAAA,CAAK,GAAL,EAFF;;QADO;MADT;aAKF,SAAA,CAAU,EAAA,CAAG,cAAH,CAAA,CAAmB,CAAnB,EAAsB,KAAtB,EAA6B,GAA7B,CAAV,EAA6C,GAA7C,EAAkD,QAAA,CAAC,GAAD,CAAA;AAChD,YAAA;QAAA,IAAG,OAAA,CAAQ,GAAR,CAAA,KAAgB,KAAnB;AACE;mBACE,SAAA,CAAW,IAAA,CAAK,SAAA,CAAU,GAAV,EAAe,GAAf,CAAL,CAAX,EAAqC,GAArC,EAA0C,QAAA,CAAC,CAAD,CAAA;cACxC,IAAG,CAAC,QAAJ;uBAAkB,OAAA,CAAQ,CAAR,EAAlB;;YADwC,CAA1C,EADF;WAAA,aAAA;YAGM;YACJ,IAAG,CAAC,QAAJ;qBAAkB,QAAA,CAAS,IAAT,EAAe,GAAf,EAAlB;aAJF;WADF;SAAA,MAMK,IAAG,CAAC,QAAJ;iBAAkB,IAAA,CAAK,IAAI,KAAJ,CAAU,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,EAAJ,CAAhB,CAAA,CAAV,CAAL,EAAlB;;MAP2C,CAAlD;IARW,EAjGb;;;;IAsHA,UAAU,CAAC,KAAX,GAAmB,QAAA,CAAC,GAAD,CAAA;aAAQ,OAAO,CAAC,GAAR,CAAY,GAAZ;IAAR;IACnB,UAAU,CAAC,OAAX,GAAqB,QAAA,CAAC,MAAD,EAAS,GAAT,CAAA;AAAgB;aAAU,OAAO,CAAC,GAAR,CAAY,GAAZ;IAA1B;IAErB,EAAA,GAAK,EAAA,CAAG,QAAA,CAAC,CAAD,CAAA;aAAM,EAAA,CAAG,CAAH;IAAN,CAAH;IACL,OAAA,GAAU,QAAA,GAAW,QAAA,CAAC,CAAD,CAAA;aAAM,CAAA,CAAE,EAAF,CAAA,CAAM,EAAN;IAAN;IACrB,IAAA,GAAO,QAAA,CAAC,GAAD,CAAA;MAAQ,IAAG,gDAAH;eAAgB,EAAA,CAAG,MAAH,CAAA,CAAW,EAAA,CAAG,GAAH,CAAX,EAAhB;OAAA,MAAA;eAAwC,OAAO,CAAC,GAAR,CAAY,GAAZ,EAAxC;;IAAR;IAEP,oDAAC,SAAS,MAAV,CAAiB,CAAC,WAAlB,GAAgC,WAAA,GAAc,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;AAE5C,UAAA,GAAA;;MAAA,GAAA,GAAM,UAAA,CAAW;QAAA,SAAA,EAAW;MAAX,CAAX;MACN,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,CAAD,CAAA;eAAM;MAAN;aACnB,GAAG,CAAC,WAAJ,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,IAA1B;IAJ4C;IAM9C,eAAA,GAAkB,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;AAChB,UAAA;MAAA,GAAA,GAAM,UAAA,CAAW;QAAA,SAAA,EAAW,UAAX;QAAuB,IAAA,EAAM,UAAU,CAAC;MAAxC,CAAX;MACN,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,CAAD,CAAA;eAAM;MAAN;aACnB,SAAA,CAAU,KAAV,EAAiB,GAAjB,EAAsB,IAAtB;IAHgB,EAnIlB;;IAyIA,gBAAA,GAAmB,QAAA,CAAC,QAAD,EAAW,QAAX,CAAA;MACjB,aAAA,CAAc,QAAd,EAAwB,QAAxB;aACA,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,SAA/B,CAAR,EAAmD,QAAnD,EAA6D,QAA7D,EAAuE,IAAvE,CAAV,CAAL;IAFiB;IAIb,aAAN,MAAA,WAAA;MACE,WAAa,SAAU,EAAV,CAAA;QAAC,IAAC,CAAA;QACb,IAAC,CAAA,UAAD,GAAc;QACd,IAAC,CAAA,QAAD,GAAY,CAAA;MAFD;;MAGb,QAAU,CAAC,GAAD,CAAA;AACR,YAAA;AAAA,eAAM,IAAC,CAAA,UAAU,CAAC,MAAZ,IAAsB,IAAC,CAAA,KAA7B;UACE,CAAA,GAAI,IAAC,CAAA,UAAU,CAAC,KAAZ,CAAA;UACJ,OAAO,IAAC,CAAA,QAAS,CAAA,CAAC,CAAC,OAAF;QAFnB;QAGA,GAAG,CAAC,OAAJ,GAAc,CAAA,OAAA,CAAA,CAAU,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,MAAL,CAAA,CAAA,GAAgB,UAAzB,CAAX,CAAV,CAAA;QACd,IAAC,CAAA,QAAS,CAAA,GAAG,CAAC,OAAJ,CAAV,GAAyB;QACzB,IAAC,CAAA,UAAU,CAAC,IAAZ,CAAiB,GAAjB;eACA,GAAG,CAAC;MAPI;;IAJZ;IAaA,QAAA,GAAW,IAAI;IACf,OAAO,CAAC,QAAR,GAAmB,QAAQ,CAAC;IAE5B,gBAAA,GAAmB,QAAA,CAAC,GAAD,CAAA;aACjB,CAAA,2CAAA,CAAA,CAA8C,GAAG,CAAC,KAAK,CAAC,OAAV,CAAkB,KAAlB,EAAyB,MAAzB,CAA9C,CAA+E,OAA/E;IADiB;IAGnB,UAAA,GAAa,QAAA,CAAC,GAAD,CAAA;MACX,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,CAAD,CAAA;AACjB,YAAA,GAAA,EAAA;AAAA;UACE,GAAA,GAAS,CAAA,YAAa,KAAb,IAAsB,wCAAzB,GAAwC,gBAAA,CAAiB,CAAjB,CAAxC,GACD,EAAA,CAAG,UAAH,CAAA,CAAe,EAAA,CAAG,CAAH,CAAf,EAFP;SAAA,aAAA;UAGM;UACJ,GAAA,GAAM,gBAAA,CAAiB,GAAjB,EAJR;;eAKA,IAAA,CAAK,GAAL;MANiB;MAOnB,GAAG,CAAC,WAAJ,GAAkB,QAAA,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAA;eAAsB,SAAA,CAAU,IAAV,EAAgB,CAAA,CAAA,GAAA;AACtD,cAAA;UAAA,IAAG,IAAA,GAAO,IAAC,CAAA,IAAX;YAAqB,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,IAArB,EAArB;;iBACA,iBAAA,CAAA,CAAmB,CAAC,IAApB,CAAyB,CAAC,CAAA,CAAA,GAAA;YACxB,IAAG,CAAC,IAAC,CAAA,IAAL;cAAe,IAAC,CAAA,IAAD,GAAQ,KAAvB;;mBACA,WAAA,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B,CAAC,CAAC,MAAD,CAAA,GAAA;AAC9B,kBAAA;cAAA,CAAA,GAAI,MAAM,CAAC,IAAP,CAAA,CAAa,CAAC,IAAd,CAAA;cACJ,IAAG,OAAA,CAAQ,CAAR,CAAA,KAAc,MAAjB;gBAA6B,MAAM,IAAI,KAAJ,CAAU,OAAA,CAAQ,CAAR,CAAV,EAAnC;eAAA,MAAA;gBAEE,CAAA,GAAI,QAAA,CAAS,CAAT;oDACJ,KAAM,YAHR;;YAF8B,CAAD,CAA/B;UAFwB,CAAD,CAAzB,CAQE,CAAC,KARH,CAQS,CAAC,GAAD,CAAA,GAAA;AACL,gBAAA;YAAA,IAAC,CAAA,OAAD,CAAS,CAAT,6DAA2B,GAA3B;YACA,OAAO,CAAC,KAAR,CAAc,CAAd;mBACA,OAAO,CAAC,KAAR,CAAc,CAAA,cAAA,CAAA,CAAiB,IAAjB,CAAA,CAAd;UAHK,CART;QAFsD,CAAhB;MAAtB;MAclB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAA;eAAsB,SAAA,CAAU,IAAV,EAAgB,QAAA,CAAA,CAAA;AACvD,cAAA;UAAA,IAAG,CAAC,IAAJ;YAAc,IAAA,GAAO,QAAA,CAAC,CAAD,CAAA;AACnB,kBAAA;cAAA,CAAA,GAAI,CAAC,CAAC,IAAF,CAAA,CAAQ,CAAC,IAAT,CAAA;cACJ,IAAG,OAAA,CAAQ,CAAR,CAAA,KAAc,MAAjB;uBAA6B,IAAI,KAAJ,CAAU,OAAA,CAAQ,CAAR,CAAV,EAA7B;eAAA,MAAA;uBACK,QAAA,CAAS,CAAT,EADL;;YAFmB,EAArB;;UAIA,IAAG,iBAAA,CAAA,CAAmB,CAAC,UAApB,CAAA,CAAH;mBACE,WAAA,CAAY,GAAZ,EAAiB,IAAjB,EAAuB,KAAvB,EAA8B,IAA9B,EAAoC,QAAA,CAAC,GAAD,CAAA;AAAQ,kBAAA;qBAAA,GAAG,CAAC,OAAJ,CAAY,CAAZ,6DAA8B,GAA9B;YAAR,CAApC,EADF;WAAA,MAAA;YAGE,IAAG,IAAA,GAAO,GAAG,CAAC,IAAd;cAAwB,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,IAArB,EAAxB;;mBACA,iBAAA,CAAA,CAAmB,CAAC,IAApB,CAAyB,CAAC,CAAA,CAAA,GAAA;cACxB,IAAG,CAAC,GAAG,CAAC,IAAR;gBAAkB,GAAG,CAAC,IAAJ,GAAW,KAA7B;;qBACA,WAAA,CAAY,GAAZ,EAAiB,IAAjB,EAAuB,KAAvB,EAA8B,IAA9B,EAAoC,QAAA,CAAC,GAAD,CAAA;AAAQ,oBAAA;uBAAA,GAAG,CAAC,OAAJ,CAAY,CAAZ,6DAA8B,GAA9B;cAAR,CAApC;YAFwB,CAAD,CAAzB,EAGA,QAAA,CAAC,GAAD,CAAA;AAAQ,kBAAA;qBAAA,GAAG,CAAC,OAAJ,CAAY,CAAZ,6DAA8B,GAA9B;YAAR,CAHA,EAJF;;QALuD,CAAhB;MAAtB;MAanB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,CAAA;eAAyB,WAAA,CAAY,KAAZ,EAAmB,MAAnB,EAA2B,CAAC,IAAC,CAAA,YAAD,CAAc,KAAd,CAAD,CAA3B;MAAzB;MACnB,GAAG,CAAC,QAAJ,GAAe,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;eAAgB,IAAC,CAAA,YAAD,CAAc,WAAA,CAAY,KAAZ,CAAd,EAAkC,IAAlC,EAAwC,IAAxC;MAAhB;MACf,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;eAAgB,kBAAA,CAAmB,CAAC,CAAC,CAAD,CAAA,GAAA;iBAAM,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,CAAjB;QAAN,CAAD,CAAnB,EAA+C,QAAA,CAAC,OAAD,CAAA;AAChF,cAAA,CAAA,EAAA,GAAA,EAAA;UAAA,OAAA,GAAU,QAAA,CAAS,OAAT;UACV,KAAA,yCAAA;;YACE,IAAG,MAAA,YAAkB,KAArB;AACE,qBAAO,SAAA,CAAU,OAAV,EAAmB,IAAnB,EADT;;UADF;iBAGA,IAAA,CAAK,OAAL;QALgF,CAA/C;MAAhB;MAMnB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,IAAD,EAAO,MAAP,EAAe,IAAf,CAAA;eAAuB,SAAA,CAAU,IAAV,EAAgB,CAAA,CAAA,GAAA;AACxD,cAAA,IAAA,EAAA;UAAA,QAAA,GAAW,wBAAA,CAAA;UACX,IAAA,GAAO,CAAA,CAAA,GAAA;YACL,GAAG,CAAC,QAAJ,GAAe;YACf,gBAAA,CAAiB,QAAjB,EAA2B,IAA3B;mBACA,WAAA,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B,CAAC,QAAA,CAAC,MAAD,CAAA;AAC9B,kBAAA,IAAA,EAAA,IAAA,EAAA;cAAA,GAAG,CAAC,QAAJ,GAAe;cACf,IAAA,GAAO;cACP,OAAA,GAAU,GAFV;;cAIA,IAAA,GAAO,CAAC,CAAC,GAAF,CAAM,MAAM,CAAC,OAAP,CAAA,CAAN,EAAwB,QAAA,CAAC,EAAD,CAAA;gBAC7B,IAAG,OAAA,CAAQ,EAAE,CAAC,IAAH,CAAA,CAAR,CAAA,KAAsB,MAAzB;kBAAqC,IAAI,CAAC,IAAL,CAAU,OAAA,CAAQ,EAAE,CAAC,IAAH,CAAA,CAAR,CAAV,EAArC;iBAAA,MACK,IAAG,IAAH;kBAAa,OAAO,CAAC,IAAR,CAAa,QAAA,CAAS,EAAE,CAAC,IAAH,CAAA,CAAT,CAAb,EAAb;;uBACL,EAAE,CAAC,IAAH,CAAA;cAH6B,CAAxB;cAIP,IAAG,IAAI,CAAC,MAAR;oDAAoB,KAAM,IAAK,CAAA,CAAA,YAA/B;eAAA,MAAA;uBACK,QAAA,CAAS,QAAT,EAAmB,IAAnB,EAAyB,QAAA,CAAA,CAAA;AAC5B,sBAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA;;oBAAA,KAAM;;kBACN,IAAA;;AAAO;oBAAA,KAAA,sCAAA;;sBACL,GAAA,GAAM,IAAI,aAAJ,CAAkB,QAAlB,EAA4B,KAA5B,EAAmC,IAAnC,EAAyC,KAAzC,EAAgD,IAAhD;sBACN,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,IAAZ;oCACP,UAAA,CAAW,IAAX,EAAiB,oBAAjB,EAAuC,IAAvC,EAA6C,IAA7C;oBAHK,CAAA;;;kBAIP,IAAA,GAAO,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,CACpC,iBADoC,EAEpC,CAAI,CAAC,MAAJ,GAAgB,yBAAhB,GAA+C,EAAhD,CAFoC,EAGpC,qBAHoC,EAIpC,WAAA,CAAY,IAAZ,EAAkB,SAAlB,CAJoC,EAKpC,CAAI,CAAC,MAAJ,GAAgB,oBAAhB,GAA0C,QAA3C,CALoC,EAMpC,CAAI,CAAC,MAAJ,GAAgB,KAAhB,GAA2B,EAA5B,CANoC,CAA/B;yBAQP,OAAA,CAAQ,IAAR,EAAc,IAAd,EAAoB,QAApB,EAA8B,IAA9B;gBAd4B,CAAzB,EADL;;YAT8B,CAAD,CAA/B,EAwByC,QAAA,CAAC,GAAD,CAAA;cAAQ,MAAM;YAAd,CAxBzC;UAHK;UA4BP,IAAG,iBAAA,CAAA,CAAmB,CAAC,UAApB,CAAA,CAAH;mBAAyC,IAAA,CAAA,EAAzC;WAAA,MAAA;mBAAqD,iBAAA,CAAA,CAAmB,CAAC,IAApB,CAAyB,IAAzB,EAArD;;QA9BwD,CAAhB;MAAvB;MA+BnB,GAAG,CAAC,SAAJ,GAAgB,QAAA,CAAA,CAAA;eAAG,aAAA,CAAA;MAAH;MAChB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,KAAD,CAAA;AACjB,YAAA;QAAA,CAAA,GAAI,IAAC,CAAA,YAAD,CAAc,WAAA,CAAY,KAAZ,CAAd;QACJ,IAAG,CAAA,YAAa,OAAhB;iBAA6B,CAAC,CAAC,IAAF,CAAO,QAAA,CAAC,MAAD,CAAA;mBAAW,IAAA,CAAK,OAAA,CAAQ,MAAR,CAAL;UAAX,CAAP,EAA7B;SAAA,MAAA;iBAAwE,IAAA,CAAK,OAAA,CAAQ,CAAR,CAAL,EAAxE;;MAFiB;aAGnB;IA9EW;IAgFb,SAAA,GAAY,QAAA,CAAC,OAAD,EAAU,IAAV,CAAA;AACV,UAAA;aAAA,OAAO,CAAC,GAAR;;AAMa;QAAA,KAAA,yCAAA;;wBANG,MAAA,YAAkB,KAArB,GACR,CAAA,QAAA,CAAC,MAAD,CAAA,EAAA;mBAAW,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,IAAV,CAAA;qBAAkB,aAAA,CAAc,MAAM,CAAC,KAArB,EAA4B,QAAA,CAAC,CAAD,CAAA;AACtE,oBAAA,KAAA,EAAA;gBAAA,UAAA;;AAAa;kBAAA,KAAA,qCAAA;;kCACX,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,IAAvB,CAA4B,CAAC,OAA7B,CAAqC,gBAArC,EAAsD,QAAA,CAAC,CAAD,CAAA;6BACpD,CAAA,CAAA,CAAA,CAAI,IAAI,GAAJ,CAAQ,CAAC,CAAC,SAAF,CAAY,CAAZ,EAAe,CAAC,CAAC,MAAF,GAAW,CAA1B,CAAR,EAAsC,QAAtC,CAAJ,CAAmD,CAAnD;oBADoD,CAAtD;kBADW,CAAA;;;uBAGb,OAAA,CAAQ;kBAAA,KAAA,EAAO,UAAU,CAAC,IAAX,CAAgB,IAAhB;gBAAP,CAAR;cAJsE,CAA5B;YAAlB,CAAZ;UAAX,CAAA,CAAH,CAAI,MAAJ,CADW,GAMR;QAAQ,CAAA;;UANb,CAOE,CAAC,IAPH,CAOQ,QAAA,CAAC,UAAD,CAAA;eAAe,IAAA,CAAK,UAAL;MAAf,CAPR;IADU;IAUZ,kBAAA,GAAqB,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AACnB,UAAA,GAAA,EAAA,WAAA,EAAA,GAAA,EAAA,cAAA,EAAA;MAAA,IAAA,GAAO;MACP,GAAA,GAAM;MACN,cAAA,GAAiB;MACjB,WAAA,GAAc;AACd;QACE,IAAA,CAAK,QAAA,CAAC,MAAD,CAAA;UACH,IAAA,GAAO;UACP,IAAG,cAAH;YACE,IAAA,CAAK,MAAL;mBACA,cAAA,CAAe,MAAf,EAFF;WAAA,MAAA;mBAGK,GAAA,GAAM,OAHX;;QAFG,CAAL;QAMA,IAAG,IAAH;UACE,IAAA,CAAK,GAAL;iBACA,IAFF;SAAA,MAAA;iBAGK,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;YACf,cAAA,GAAiB;mBACjB,WAAA,GAAc;UAFC,CAAZ,EAHL;SAPF;OAAA,aAAA;QAaM;QACJ,IAAG,WAAH;iBAAoB,WAAA,CAAY,GAAZ,EAApB;SAAA,MAAA;UACK,MAAM,IADX;SAdF;;IALmB;IAsBrB,OAAA,GAAU,QAAA,CAAC,UAAD,CAAA;MACR,IAAG,OAAO,UAAP,KAAqB,QAAxB;eAAsC,WAAtC;OAAA,MACK,IAAG,sBAAH;eAAwB,SAAA,CAAU,UAAV,EAAxB;OAAA,MAAA;eACA,UAAU,CAAC,KADX;;IAFG;IAKV,OAAA,GAAU,QAAA,CAAC,UAAD,EAAa,OAAb,EAAsB,QAAtB,EAAgC,UAAhC,CAAA;AACR,UAAA;MAAA,QAAA,sBAAW,WAAW,wBAAA,CAAA;MACtB,EAAA,GAAK,UAAU,CAAC,qBAAX,CAAiC;QAAA,IAAA,EAAM;MAAN,CAAjC;MACL,EAAE,CAAC,GAAG,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC;MACA,IAAG,UAAH;QAAmB,EAAE,CAAC,UAAH,GAAgB,KAAnC;;aACA;IALQ;IAOV,qBAAA,GAAwB,QAAA,CAAC,OAAD,CAAA;aAAY,UAAU,CAAC,uBAAX,CAAmC,OAAO,CAAC,IAA3C,EAAiD,IAAI,iBAAJ,CAAsB,OAAO,CAAC,GAAG,CAAC,MAAZ,CAAA,CAAtB,CAAjD;IAAZ;IAExB,cAAA,GAAiB,QAAA,CAAA,GAAC,IAAD,CAAA;aAAY,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB,EAAyB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAtB,CAA2B,IAA3B,CAAzB;IAAZ;IAEjB,iBAAA,GAAoB,QAAA,CAAA,GAAC,IAAD,CAAA;AAClB,UAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;MAAA,MAAA,GAAS,kBAAkB,CAAC,aAAnB,CAAiC,IAAI,iBAAJ,CAAsB,CAAC,CAAC,IAAF,CAAO,IAAP,CAAtB,CAAjC;AACT;MAAA,KAAA,mCAAA;;QACE,MAAM,CAAC,cAAP,CAAsB,IAAI,iBAAJ,CAAsB,GAAtB,CAAtB;MADF;aAEA,MAAM,CAAC,MAAP,CAAA;IAJkB;IAMpB,WAAA,GAAc,QAAA,CAAC,KAAD,EAAQ,OAAR,CAAA;AACZ,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;MAAA,IAAG,KAAK,CAAC,MAAN,GAAe,CAAlB;eAAyB,MAAzB;OAAA,MAAA;QAEE,MAAA,GAAS,CAAC,KAAM,CAAA,CAAA,CAAP;QACT,KAAS,uFAAT;UACE,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,KAAM,CAAA,CAAA,CAA3B;QADF;eAEA,OALF;;IADY;IAQd,WAAA,GAAc,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,OAAzB,CAAA;AACZ,UAAA,GAAA,EAAA;AAAA;QACE,GAAA,GAAM,QAAA,CAAS,kBAAT;QACN,QAAA,CAAS,kBAAT,EAA6B,KAA7B;eACA,SAAA,CAAU,GAAV,EAAe,CAAA,CAAA,GAAA;AACb,cAAA;UAAA,MAAA,GAAS,EAAA,CAAG,gBAAH,CAAA,CAAqB,qBAAA,CAAA,CAArB,EAA8C,IAA9C;iBACT,SAAA,CAAU,MAAV,EAAkB,GAAlB,EAAuB,QAAA,CAAC,OAAD,CAAA;mBACrB,aAAA,CAAc,OAAd,EAAuB,GAAvB,EAA4B,CAAC,QAAA,CAAC,YAAD,CAAA;cAC3B,QAAA,CAAS,kBAAT,EAA6B,GAA7B;qBACA,gBAAC,OAAO,QAAA,CAAC,CAAD,CAAA;uBAAK;cAAL,CAAR,CAAA,CAAgB,YAAhB;YAF2B,CAAD,CAA5B,EAEkC,OAFlC,EAE2C,EAF3C;UADqB,CAAvB;QAFa,CAAf,EAHF;OAAA,aAAA;QASM;eACJ,QAAA,CAAS,OAAT,EAAkB,GAAlB,EAVF;;IADY;IAad,aAAA,GAAgB,QAAA,CAAC,OAAD,EAAU,GAAV,EAAe,IAAf,EAAqB,OAArB,EAA8B,YAA9B,CAAA;AACd,UAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AAAA,aAAM,OAAA,KAAW,EAAA,CAAG,KAAH,CAAjB;QACE,IAAG,OAAA,CAAQ,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,IAAf,CAAA,CAAR,CAAA,KAAkC,MAArC;UACE,CAAA,GAAI,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,IAAf,CAAA;UACJ,IAAG,CAAC,CAAC,OAAA,CAAQ,CAAR,CAAA,YAAsB,KAAvB,CAAJ;YAAuC,CAAA,GAAI,IAAA,CAAK,IAAI,KAAJ,CAAU,OAAA,CAAQ,CAAR,CAAV,CAAL,EAA3C;;UACA,YAAY,CAAC,IAAb,CAAkB,IAAA,CAAK,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,IAAf,CAAA,CAAL,EAA4B,CAA5B,CAAlB;UACA,GAAG,CAAC,KAAJ,CAAU,CAAA,OAAA,CAAA,CAAU,OAAA,CAAQ,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,IAAf,CAAA,CAAR,CAAV,CAAA,CAAV,EAJF;SAAA,MAAA;UAME,IAAA,GAAO;UACP,KAAA,GAAQ;AACR;YACE,SAAA,CAAU,GAAV,EAAe,CAAA,CAAA,GAAA;qBAAG,SAAA,CAAU,QAAA,CAAS,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,IAAf,CAAA,CAAT,CAAV,EAA2C,GAA3C,EAAgD,QAAA,CAAC,IAAD,CAAA;gBAChE,YAAY,CAAC,IAAb,CAAkB,IAAA,CAAK,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,IAAf,CAAA,CAAL,EAA4B,OAAA,CAAQ,IAAR,CAA5B,CAAlB,EAAA;;gBAEA,IAAG,IAAH;yBAAa,KAAA,GAAQ,MAArB;iBAAA,MAAA;yBACK,aAAA,CAAc,OAAO,CAAC,IAAR,CAAA,CAAd,EAA8B,GAA9B,EAAmC,IAAnC,EAAyC,OAAzC,EAAkD,YAAlD,EADL;;cAHgE,CAAhD;YAAH,CAAf,EADF;WAAA,aAAA;YAMM;YACJ,QAAA,CAAS,OAAT,EAAkB,GAAlB,EAPF;;UAQA,IAAA,GAAO;UACP,IAAG,KAAH;AAAc,mBAAd;WAjBF;;QAkBA,OAAA,GAAU,OAAO,CAAC,IAAR,CAAA;MAnBZ;aAoBA,IAAA,CAAK,WAAA,CAAY,YAAZ,CAAL;IArBc;IAuBhB,gBAAA,GAAmB,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,CAAA;AACjB,UAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAA,IAAI,4BAAJ;QAA+B,KAAK,CAAC,cAAN,GAAuB,CAAA,EAAtD;;MACA,IAAG,CAAC,KAAK,CAAC,cAAe,CAAA,IAAA,CAAzB;QACE,CAAA,uFAAkC;QAClC,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,CAAV,CAAJ;UAAqB,CAAA,GAAI,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAzB;;QACA,KAAK,CAAC,cAAe,CAAA,IAAA,CAArB;;AAAiD;UAAA,KAAA,mCAAA;;0BAAnB,IAAI,CAAC,WAAL,CAAA;UAAmB,CAAA;;aAHnD;;oBAIA,KAAK,CAAC,WAAN,CAAA,CAAA,EAAA,aAAuB,KAAK,CAAC,cAAe,CAAA,IAAA,CAA5C,EAAA,IAAA;IANiB;IAQnB,YAAA,GAAe,QAAA,CAAC,KAAD,CAAA;AAAU,UAAA;aAAA,gBAAA,CAAiB,KAAjB,EAAwB,SAAxB,EAAmC,MAAnC,CAAA,IAA8C,QAAA,KAAK,CAAC,SAAN,KAAmB,MAAnB,IAAA,GAAA,KAA2B,QAA3B,IAAA,GAAA,KAAqC,MAArC;IAAxD;IAEf,WAAA,GAAc,QAAA,CAAC,CAAD,CAAA;AACZ,UAAA;MAAA,GAAA,GAAM,IAAA,GAAO,CAAI,CAAA,YAAa,IAAhB,GAA0B,CAAC,CAAC,OAAO,CAAC,OAAV,CAAkB,QAAlB,EAA4B,KAA5B,CAA1B,GACT,UAAA,CAAW,SAAA,CAAU,CAAV,CAAY,CAAC,OAAb,CAAqB,QAArB,EAA+B,MAA/B,CAAX,CADQ;MAEb,IAAG,CAAC,CAAC,IAAF,CAAO,GAAP,CAAA,KAAe,IAAlB;eAA4B,IAA5B;OAAA,MAAA;eAAqC,GAAA,GAAM,KAA3C;;IAHY;IAKd,WAAA,GAAc,QAAA,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,CAAA;AACZ,UAAA;MAAA,IAAG,YAAA,CAAa,KAAb,CAAH;QACE,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAnB;UAA0B,KAAA,GAAQ,KAAM,CAAA,CAAA,EAAxC;;eACA,IAAA,GAAO,CAAC,IAAA,CAAK,KAAL,EAAY;UAAC,QAAA,EAAU,IAAX;UAAiB,SAAA,EAAW,MAAA,wDAAwC,CAAxC;QAA5B,CAAZ,CAAD,CAAoF,CAAC,IAArF,CAAA,CAA2F,CAAC,OAA5F,CAAoG,KAApG,EAA2G,MAA3G,CAAP,GAA4H,KAF9H;OAAA,MAAA;eAGK,MAAA,GAAS,CAAC,CAAC,GAAF,CAAM,KAAN,EAAa,WAAb,CAAyB,CAAC,IAA1B,CAA+B,EAA/B,EAHd;;IADY;IAMd,QAAA,GAAW,QAAA,CAAC,GAAD,CAAA;MAAQ,IAAG,CAAC,CAAC,OAAF,CAAU,GAAV,CAAH;eAAuB,IAAvB;OAAA,MAAA;eAAgC,CAAC,GAAD,EAAhC;;IAAR;IAEX,YAAA,GAAe,QAAA,CAAC,GAAD,EAAM,MAAN,CAAA;AACb,UAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA;MAAA,KAAA,GAAQ;AACR;AAAA;MAAA,KAAA,qCAAA;;QACE,IAAG,CAAC,KAAJ;UAAe,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAf;;sBACA,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,YAAJ,CAAiB,KAAjB,CAAV;MAFF,CAAA;;IAFa;IAMf,UAAU,CAAC,YAAX,GAA0B,QAAA,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,CAAA;aAAyB,WAAA,CAAY,KAAZ,EAAmB,MAAnB,EAA2B,KAA3B;IAAzB;IAE1B,SAAA,GAAY,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;AACV,UAAA,SAAA,EAAA;MAAA,SAAA,GAAY,oDAAC,SAAS,MAAV,CAAiB,CAAC;MAC9B,oDAAC,SAAS,MAAV,CAAiB,CAAC,MAAlB,GAA2B;MAC3B,GAAG,CAAC,IAAJ,GAAW,GAAG,CAAC;AACf;QACE,MAAA,GAAS,IAAA,CAAA,EADX;OAAA;QAGE,oDAAC,SAAS,MAAV,CAAiB,CAAC,MAAlB,GAA2B,UAH7B;;aAIA;IARU;IAUZ,OAAA,GAAU,QAAA,CAAC,GAAD,CAAA;MACR,GAAG,CAAC,WAAJ,GAAkB,QAAA,CAAC,IAAD,CAAA;eAAS;MAAT;aAClB;IAFQ;IAIV,OAAA,GAAU,QAAA,CAAC,GAAD,CAAA;MACR,GAAG,CAAC,WAAJ,GAAkB,QAAA,CAAC,IAAD,CAAA;eAAS,SAAA,CAAU,IAAV;MAAT;aAClB;IAFQ;IAIV,KAAA,GAAQ,QAAA,CAAC,GAAD,CAAA;MACN,GAAG,CAAC,WAAJ,GAAkB,QAAA,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAA;eAAsB,SAAA,CAAU,IAAV,EAAgB,CAAA,CAAA,GAAA;iBACtD,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,CAAA;AACV,gBAAA;YAAA,YAAA,CAAa,GAAb,EAAkB,KAAA,GAAQ,MAAA,CAAO,GAAP,EAAY,IAAZ,CAA1B;YACA,OAAA,CAAQ,KAAR;gDACA,KAAM;UAHI,CAAZ,CAGc,CAAC,KAHf,CAGqB,CAAC,GAAD,CAAA,GAAA;mBACjB,IAAC,CAAA,OAAD,CAAS,CAAT,EAAY,GAAG,CAAC,OAAhB;UADiB,CAHrB;QADsD,CAAhB;MAAtB;MAMlB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,IAAD,CAAA;AACjB,YAAA,EAAA,EAAA,QAAA,EAAA;QAAA,QAAA,GAAW,qBAAA,CAAA;QACX,EAAA,GAAK,OAAA,CAAQ,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,IAA/B,CAAR,EAA8C,IAA9C,EAAoD,QAApD;QACL,KAAA,GAAQ,UAAU,CAAC,uBAAX,CAAmC,IAAnC,EAAyC,iBAAiB,CAAC,aAAlB,CAAgC,EAAhC,CAAzC;eACR,CAAC,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,CAAC,aAAD,EAAgB,KAAhB,EAAuB,GAAvB,CAA/B,CAAD,CAA4D,CAAC,qBAA7D,CAAA;MAJiB;aAKnB;IAZM;IAcR,qBAAA,GAAwB,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,QAAjB,EAA2B,GAA3B,CAAA;AACtB,UAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA;MAAA,IAAG,GAAG,CAAC,MAAP;eAAmB,KAAnB;OAAA,MAAA;AAEE;UACE,MAAA,GAAS,KAAK,CAAC,KAAN,CAAY,IAAZ,EADX;SAAA,aAAA;UAEM;UACJ,OAAA,GAAU;UACV,YAAA,CAAa,UAAU,CAAC,YAAX,CAAwB,IAAxB,CAAb,EAA4C,QAAA,CAAC,IAAD,CAAA;mBAAS,OAAA,GAAU;UAAnB,CAA5C;AACA;YACE,SAAA,CAAU,GAAV,EAAe,QAAA,CAAA,CAAA;qBAAG,IAAA,CAAK,IAAL;YAAH,CAAf,EADF;WAAA,aAAA;YAEM;YACJ,IAAG,OAAH;cACE,GAAG,CAAC,OAAJ,CAAY,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,KAAjB,EAAwB,OAAO,CAAC,GAAhC,CAAZ,EAAkD,IAAI,CAAC,OAAvD,EADF;aAAA,MAAA;cAGE,GAAG,CAAC,OAAJ,CAAY,SAAA,CAAU,GAAG,CAAC,OAAd,EAAuB,IAAvB,CAAZ,EAA0C,IAAI,CAAC,OAA/C,EAHF;;AAIA,mBAAO,SAPT;WALF;;QAaA,QAAA,GAAW,cAAA,CAAe,UAAU,CAAC,uBAAX,CAAmC,IAAnC,EAAyC,GAAzC,CAAf;QACX,SAAA,GAAY,CAAC,2BAAD;AACZ;QAAA,KAAA,qCAAA;;UACE,CAAA,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,IAAvB,CAAA,GAA+B,qBAAA,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC,IAAI,CAAC,KAAtC,CAA/B;UACA,IAAG,IAAI,CAAC,IAAL,KAAa,qBAAhB;YACE,IAAG,IAAI,CAAC,UAAU,CAAC,IAAhB,KAAwB,kBAA3B;cAAmD,IAAA,GAAO,IAAI,CAAC,WAA/D;;YACA,QAAA,GAAW,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,KAApB,EAA2B,IAAI,CAAC,GAAhC;YACX,IAAG,QAAS,CAAA,QAAQ,CAAC,MAAT,GAAkB,CAAlB,CAAT,KAAiC,GAApC;cACE,IAAA,GACC;gBAAA,KAAA,EAAO,IAAI,CAAC,KAAZ;gBACA,GAAA,EAAK,IAAI,CAAC,GAAL,GAAW;cADhB,EAFH;;YAIA,IAAG,CAAC,CAAA,GAAI,IAAI,UAAJ,CAAe,IAAf,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,qBAAA,CAAsB,QAAtB,EAAgC,IAAhC,CAArC,CAAL,CAAiF,CAAC,QAAlF,CAAA,CAAA,KAAgG,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,KAApB,EAA2B,IAAI,CAAC,GAAhC,CAAnG;cACE,OAAO,CAAC,IAAR,CAAa,CAAA,6BAAA,CAAA,CAAgC,CAAC,CAAC,QAAF,CAAA,CAAhC,CAAA,CAAb,EADF;;YAEA,SAAS,CAAC,IAAV,CAAe,IAAI,UAAJ,CAAe,IAAf,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,CAAC,yBAAD,EAA4B,qBAAA,CAAsB,QAAtB,EAAgC,IAAhC,CAA5B,EAAmE,MAAnE,CAArC,EAAiH,IAAjH,CAAf,EATF;WAAA,MAAA;YAUK,SAAS,CAAC,IAAV,CAAe,IAAI,UAAJ,CAAe,IAAf,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,CAAC,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,KAApB,EAA2B,IAAI,CAAC,GAAhC,CAAD,CAArC,CAAf,EAVL;;QAFF;QAaA,CAAA,CAAC,IAAD,EAAO,GAAP,CAAA,GAAc,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,SAA/B,CAAyC,CAAC,qBAA1C,CAAA,CAAd;QACA,GAAG,CAAC,gBAAJ,CAAqB,QAArB,EAA+B,GAA/B;eACA,UAAU,CAAC,uBAAX,CAAmC,IAAnC,EAAyC,iBAAiB,CAAC,aAAlB,CAAgC,GAAhC,CAAzC,EAhCF;;IADsB,EAjZxB;;IAqbA,cAAA,GAAiB,QAAA,CAAC,KAAD,CAAA;AACf,UAAA;MAAA,UAAA,GAAa;MACb,KAAK,CAAC,IAAN,CAAW,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;eAAe,UAAU,CAAC,IAAX,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB;MAAf,CAAX;aACA,UAAU,CAAC,SAAX,CAAqB,UAArB,EACE;QAAA,OAAA,EAAS,QAAA,CAAC,CAAD,CAAA;iBAAM,CAAE,CAAA,CAAA,CAAE,CAAC;QAAX,CAAT;QACA,QAAA,EAAU,QAAA,CAAA,CAAA;iBAAG;QAAH,CADV;QAEA,GAAA,EAAK,QAAA,CAAC,CAAD,EAAI,CAAJ,CAAA;iBAAS,CAAA,GAAI;QAAb;MAFL,CADF;IAHe;IAQjB,qBAAA,GAAwB,QAAA,CAAC,QAAD,EAAW,CAAC,KAAD,EAAQ,GAAR,CAAX,CAAA;AACtB,UAAA,IAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA;MAAA,MAAA,GAAS;MACT,CAAC,SAAD,EAAY,MAAZ,CAAA,GAAsB,QAAQ,CAAC,KAAT,CAAe,QAAA,CAAC,CAAD,CAAA;eAAM,CAAA,GAAI;MAAV,CAAf;MACtB,QAAA,GAAW,SAAS,CAAC,OAAV,CAAA;MACX,IAAG,CAAC,SAAS,CAAC,OAAV,CAAA,CAAJ;QACE,CAAC,IAAD,EAAO,IAAP,CAAA,GAAe,SAAS,CAAC,QAAV,CAAA;QACf,MAAM,CAAC,IAAP,CAAY,EAAA,CAAG,IAAH,EAAS,IAAI,CAAC,SAAL,CAAe,KAAA,GAAQ,QAAvB,CAAT,CAAZ,EAFF;;MAGA,CAAC,SAAD,EAAY,MAAZ,CAAA,GAAsB,MAAM,CAAC,KAAP,CAAa,QAAA,CAAC,CAAD,CAAA;eAAM,QAAA,GAAW,CAAX,GAAe;MAArB,CAAb;MACtB,IAAG,CAAC,SAAS,CAAC,OAAV,CAAA,CAAD,IAAwB,CAAC,MAAM,CAAC,OAAP,CAAA,CAA5B;AACE;QAAA,KAAA,qCAAA;UAAI,CAAC,IAAD,EAAO,IAAP;UACF,MAAM,CAAC,IAAP,CAAY,EAAA,CAAG,IAAH,EAAS,IAAT,CAAZ;QADF;QAEA,IAAG,CAAC,MAAM,CAAC,OAAP,CAAA,CAAJ;UACE,MAAA,GAAS,QAAA,GAAW,SAAS,CAAC,OAAV,CAAA;UACpB,CAAC,IAAD,EAAO,IAAP,CAAA,GAAe,MAAM,CAAC,SAAP,CAAA;UACf,MAAM,CAAC,IAAP,CAAY,EAAA,CAAG,IAAH,EAAS,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,GAAA,GAAM,MAAxB,CAAT,CAAZ,EAHF;SAHF;;aAOA;IAfsB;IAiBxB,EAAA,GAAK,QAAA,CAAC,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAAD,EAAyB,IAAzB,CAAA;aAAiC,IAAI,UAAJ,CAAe,IAAf,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,IAArC;IAAjC;IAEL,qBAAA,GAAwB,QAAA,CAAC,GAAD,EAAM,GAAN,EAAW,MAAX,CAAA;AACtB,UAAA,IAAA,EAAA,IAAA,EAAA;MAAA,IAAA,GAAO;MACP,GAAA,GAAM,CAAC;AACP,aAAM,CAAC,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,GAAA,GAAM,CAAxB,CAAR,CAAA,GAAqC,MAArC,IAA+C,IAAA,KAAQ,CAAC,CAA9D;QACE,GAAA,GAAM;QACN,IAAA;MAFF;aAGA,GAAG,CAAC,mBAAJ,CAAwB;QAAC,IAAD;QAAO,MAAA,EAAQ,MAAA,GAAS,GAAT,GAAe;MAA9B,CAAxB;IANsB;IAQxB,eAAA,GAAkB,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,aAAZ,CAAA;AAChB,UAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA;AAAA;QACE,MAAA,GAAS,KAAK,CAAC,KAAN,CAAY,IAAZ,EADX;OAAA,aAAA;QAEM;QACJ,OAAA,GAAU;QACV,YAAA,CAAa,UAAU,CAAC,YAAX,CAAwB,IAAxB,CAAb,EAA4C,QAAA,CAAC,IAAD,CAAA;iBAAS,OAAA,GAAU;QAAnB,CAA5C;AACA;UACE,SAAA,CAAU,GAAV,EAAe,QAAA,CAAA,CAAA;mBAAG,IAAA,CAAK,IAAL;UAAH,CAAf,EADF;SAAA,aAAA;UAEM;UACJ,IAAG,OAAH;YACE,GAAG,CAAC,OAAJ,CAAY,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,KAAjB,EAAwB,OAAO,CAAC,GAAhC,CAAZ,EAAkD,IAAI,CAAC,OAAvD,EADF;WAAA,MAAA;YAGE,GAAG,CAAC,OAAJ,CAAY,SAAA,CAAU,GAAG,CAAC,OAAd,EAAuB,IAAvB,CAAZ,EAA0C,IAAI,CAAC,OAA/C,EAHF;;AAIA,iBAAO,SAPT;SALF;;MAaA,IAAG,GAAG,CAAC,MAAP;eAAmB,KAAnB;OAAA,MAAA;QAEE,OAAA,GAAU;AACV;QAAA,KAAA,qCAAA;;UACE,IAAG,IAAI,CAAC,IAAL,KAAa,qBAAhB;YACE,QAAA,GAAW,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,KAApB,EAA2B,IAAI,CAAC,GAAhC;YACX,IAAG,QAAS,CAAA,QAAQ,CAAC,MAAT,GAAkB,CAAlB,CAAT,KAAiC,GAApC;cACE,QAAA,GAAW,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,QAAQ,CAAC,MAAT,GAAkB,CAAxC,EADb;;YAEA,OAAA,GAAU,CAAA,CAAA,CAAG,OAAO,CAAC,IAAR,CAAA,CAAH,CAAkB,uBAAlB,CAAA,CAA2C,QAAQ,CAAC,IAAT,CAAA,CAA3C,CAA2D,IAA3D,EAJZ;WAAA,MAAA;YAKK,OAAA,IAAW,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,KAApB,EAA2B,IAAI,CAAC,GAAhC,EALhB;;QADF;eAOA,CAAA,CAAA,CAAG,OAAH,CAAA,CAAA,CAAY,CAAI,aAAH,GAAsB,2BAAtB,GAAuD,EAAxD,CAAZ,CAAA,EAVF;;IAdgB;IA0BlB,UAAA,GAAa,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;AACX,UAAA;MAAA,IAAG,CAAC,GAAG,CAAC,MAAR;QACE,GAAG,CAAC,OAAJ,GAAc,GADhB;;MAEA,OAAA,GAAU;QAAA,GAAA,EAAK,CAAC,GAAD,CAAA,GAAA;iBAAQ,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,YAAJ,CAAiB,GAAjB,CAAV;QAAR;MAAL;aACV,SAAA,CAAU,GAAV,EAAe,QAAA,CAAA,CAAA;QAAG,IAAG,GAAG,CAAC,IAAP;iBAAiB,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAjB;SAAA,MAAA;iBAAqC,UAArC;;MAAH,CAAf;IAJW;IAMb,MAAA,GAAS,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;aAAc,UAAA,CAAW,GAAX,EAAgB,eAAA,CAAgB,GAAhB,EAAqB,IAArB,CAAhB;IAAd,EAxfT;;IA2fA,SAAA,GAAY,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;AACV,UAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;MAAA,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,CAAA,GAAiB,GAAG,CAAC,KAAJ,CAAU,uBAAV;MACjB,IAAA,GAAO,MAAA,CAAO,IAAA,GAAO,CAAd;MACP,GAAA,GAAM,MAAA,CAAO,GAAP;AACN;MAAA,KAAA,6CAAA;;QACE,IAAG,CAAA,KAAK,IAAR;AAAkB,gBAAlB;SAAA,MAAA;UACK,GAAA,IAAO,GAAG,CAAC,MAAJ,GAAa,EADzB;;MADF;aAGA;IAPU;IASZ,IAAA,GAAO,oDAAC,SAAS,MAAV,CAAiB,CAAC,IAAlB,GAAyB,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AAC9B,UAAA,IAAA,EAAA;MAAA,CAAA,GAAI,CAAA;MACJ,KAAA,sBAAA;QACE,CAAE,CAAA,IAAA,CAAF,GAAU;MADZ;aAEA,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,CAAvB,EAA0B,IAA1B;IAJ8B;IAMhC,OAAA,GAAU,QAAA,CAAC,IAAD,CAAA;aAAS,IAAI,CAAC,IAAL,KAAa;IAAtB;IAEV,YAAA,GAAe,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;aAAc,IAAA,CAAK,GAAL,EAAU,QAAA,CAAC,IAAD,CAAA;QAAS,IAAG,OAAA,CAAQ,IAAR,CAAH;iBAAqB,IAAA,CAAK,IAAL,EAArB;;MAAT,CAAV;IAAd;IAEf,KAAA,GAAQ,QAAA,CAAC,GAAD,CAAA;MACN,GAAG,CAAC,WAAJ,GAAkB,QAAA,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAA;eAAsB,SAAA,CAAU,IAAV,EAAgB,CAAA,CAAA,GAAA;AACtD,cAAA,OAAA,EAAA,GAAA,EAAA;AAAA;YACE,OAAA,GAAU;cAAA,GAAA,EAAK,CAAC,GAAD,CAAA,GAAA;uBAAQ,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,YAAJ,CAAiB,GAAjB,CAAV;cAAR;YAAL;YACV,KAAA,GAAQ,SAAA,CAAU,GAAV,EAAe,QAAA,CAAA,CAAA;qBAAG,IAAA,CAAK,WAAW,CAAC,QAAZ,CAAqB,IAArB,CAAL;YAAH,CAAf;YACR,IAAG,OAAO,KAAP,KAAgB,WAAnB;cAAoC,YAAA,CAAa,GAAb,EAAkB,CAAC,KAAD,CAAlB,EAApC;aAHF;WAAA,aAAA;YAIM;YACJ,IAAC,CAAA,OAAD,CAAS,CAAT,EAAY,GAAG,CAAC,OAAhB,EALF;;8CAMA,KAAM;QAPgD,CAAhB;MAAtB;aAQlB;IATM;IAWR,KAAA,GAAQ,QAAA,CAAC,GAAD,CAAA;MACN,GAAG,CAAC,WAAJ,GAAkB,QAAA,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAA;eAAsB,SAAA,CAAU,IAAV,EAAgB,CAAA,CAAA,GAAA;iBACtD,IAAI,OAAJ,CAAY,CAAC,OAAD,CAAA,GAAA;AACV,gBAAA;YAAA,YAAA,CAAa,GAAb,EAAkB,MAAA,GAAU,IAAC,CAAA,OAAD,CAAS,CAAA,CAAT,EAAa,IAAA,CAAK,CAAA,YAAA,CAAA,CAAe,IAAC,CAAA,SAAD,CAAW,IAAX,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B,EAAmC,IAAnC,CAAf,CAAuD,EAAvD,CAAL,CAAb,CAA5B;YACA,OAAA,kBAAQ,SAAS,EAAjB;gDACA,sBAAM,SAAS;UAHL,CAAZ,CAGoB,CAAC,KAHrB,CAG2B,QAAA,CAAC,GAAD,CAAA;AACvB,gBAAA;YAAA,OAAO,CAAC,KAAR,mCAA0B,GAA1B;mBACA,GAAG,CAAC,OAAJ,CAAY,CAAZ,EAAe,GAAG,CAAC,OAAnB;UAFuB,CAH3B;QADsD,CAAhB;MAAtB;MAOlB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;eACjB,IAAI,OAAJ,CAAY,CAAC,OAAD,CAAA,GAAA;iBACV,IAAC,CAAA,YAAD,CAAc,KAAd,CAAoB,CAAC,IAArB,CAA0B,IAA1B,EAAgC,QAAA,CAAC,MAAD,CAAA;YAC9B,OAAA,CAAQ,MAAR;gDACA,KAAM;UAFwB,CAAhC;QADU,CAAZ,CAGiB,CAAC,KAHlB,CAGwB,QAAA,CAAC,GAAD,CAAA;AAClB,cAAA;UAAA,OAAO,CAAC,KAAR,mCAA0B,GAA1B;iBACA,GAAG,CAAC,OAAJ,CAAY,CAAZ,EAAe,GAAG,CAAC,OAAnB;QAFkB,CAHxB;MADiB;MAOnB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,KAAD,CAAA;AACjB,YAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,WAAA,EAAA,QAAA,EAAA;QAAA,QAAA,GAAW,wBAAA,CAAA;QACX,OAAqC,SAAA,CAAU,IAAC,CAAA,IAAX,4CAAqC,CAAE,YAAvC,CAArC,GAAM,MAAM,UAAU;QACtB,KAAA,GAAQ,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,CAAC,cAAD,EAAiB,IAAC,CAAA,SAAD,CAAW,WAAA,CAAY,KAAZ,CAAX,EAA+B,IAA/B,EAAqC,QAArC,EAA+C,WAA/C,EAA4D,IAA5D,EAAkE,IAAlE,EAAwE,QAAxE,EAAkF,IAAlF,CAAjB,EAA0G,IAA1G,CAA/B;QACR,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,CAAA,CAAT,EAAa,SAAA,CAAU,KAAK,CAAC,qBAAN,CAAA,CAAV,CAAb;eACP,QAAA,CAAC,IAAD,EAAA,GAAO,IAAP,CAAA;AACE,cAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;UAAA,IAAG,IAAA,KAAQ,oDAAC,SAAS,MAAV,CAAX;YACE,IAAC,CAAA,GAAD,GAAO;cAAA,OAAA,EAAS,CAAA;YAAT;YACP,KAAA,kDAAA;;cACE,IAAC,CAAA,GAAI,CAAA,OAAA,CAAL,qCAA0B,IAAC,CAAA,IAAI,CAAC,OAAN,CAAc,IAAC,CAAA,IAAI,CAAC,aAAN,CAAoB,WAAY,CAAA,OAAA,CAAhC,CAAd;cAC1B,IAAG,CAAC,IAAK,CAAA,CAAA,CAAT;gBAAiB,IAAC,CAAA,GAAG,CAAC,OAAQ,CAAA,OAAA,CAAb,GAAwB,IAAC,CAAA,IAAI,CAAC,aAAN,CAAoB,WAAY,CAAA,OAAA,CAAhC,EAAzC;;YAFF,CAFF;;UAKA,GAAA,GAAM,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,IAAjB;UACN,IAAG,IAAH;mBAAa,IAAA,CAAK,GAAL,EAAb;WAAA,MAAA;mBAA2B,IAA3B;;QAPF;MALiB;MAanB,GAAG,CAAC,QAAJ,GAAe,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,WAAxB,CAAA;AACb,YAAA,QAAA,EAAA,KAAA,EAAA,GAAA,EAAA;QAAA,OAAqC,SAAA,CAAU,IAAC,CAAA,IAAX,4CAAqC,CAAE,YAAvC,CAArC,GAAM,MAAM,UAAU;QACtB,QAAA,GAAW,qBAAA,CAAA;QACX,KAAA,GAAQ,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,CAAC,cAAD,EAAiB,IAAC,CAAA,SAAD,CAAW,WAAA,CAAY,KAAZ,CAAX,EAA+B,IAA/B,EAAqC,QAArC,EAA+C,WAA/C,EAA4D,KAA5D,EAAmE,IAAnE,EAAyE,QAAzE,EAAmF,IAAnF,CAAjB,EAA2G,IAA3G,CAA/B;eACR,KAAK,CAAC,qBAAN,CAAA;MAJa;MAKf,GAAG,CAAC,SAAJ,GAAgB,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,QAAZ,EAAsB,WAAtB,EAAmC,SAAnC,EAA8C,QAA9C,EAAwD,QAAxD,EAAkE,WAAlE,CAAA;AACd,YAAA,WAAA,EAAA,MAAA,EAAA,GAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,WAAA,EAAA,KAAA,EAAA;QAAA,QAAA,sBAAW,WAAW,wBAAA,CAAA;QACtB,IAAA,kBAAO,OAAO,CAAA;QACd,QAAA,sBAAW,WAAW;QACtB,WAAA,yBAAc,cAAc,CAAA;QAC5B,MAAA,GAAS,CAAA;QACT,MAAA,GAAS,CAAA;QACT,KAAA,YAAA;;UACE,IAAG,MAAA,CAAO,KAAP,CAAA,KAAiB,KAAjB,IAA0B,OAAA,KAAM,CAAA,CAAA,CAAN,EAAA,aAAY,KAAZ,EAAA,GAAA,MAAA,CAA7B;YACE,MAAO,CAAA,IAAA,CAAP,GAAe,MADjB;WAAA,MAAA;YAEK,MAAO,CAAA,IAAA,CAAP,GAAe,MAFpB;;QADF;QAIA,QAAA,GAAW;;AAA+D;UAAA,KAAA,mBAAA;;0BAA9D,CAAA,MAAA,CAAA,CAAS,SAAT,CAAmB,eAAnB,CAAA,CAAoC,SAApC,CAA8C,GAA9C,CAAA,CAAmD,KAAnD,CAAyD,GAAzD;UAA8D,CAAA;;YAA/D,CAA8F,CAAC,IAA/F,CAAoG,EAApG;QACX,WAAA,GAAc;;AAAmG;UAAA,KAAA,sBAAA;;0BAAlG,GAAA,CAAA,CAAK,OAAL,CAAa,YAAb,CAAA,CAA2B,OAA3B,CAAmC,+CAAnC,CAAA,CAAoF,KAApF,CAA0F,MAA1F;UAAkG,CAAA;;YAAnG,CAAqI,CAAC,IAAtI,CAA2I,EAA3I;QACd,CAAA,CAAC,EAAD,EAAK,WAAL,CAAA,GAAoB,EAAE,CAAC,OAAH,CAAW,GAAX,EAClB;UAAA,IAAA,EAAM,IAAN;UACA,SAAA,EAAW,IADX;UAEA,WAAA,EAAa,CAAC,QAAD;QAFb,CADkB,CAApB;QAIA,KAAA,GAAQ,kBAAkB,CAAC,aAAnB,CAAiC,IAAI,iBAAJ,CAAsB,IAAI,CAAC,KAAL,CAAW,WAAX,CAAtB,CAAjC;QACR,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,GAAjC;QACA,GAAA,GAAM,iBAAiB,CAAC,aAAlB,CAAgC,KAAhC;QACN,MAAA,GAAY,CAAC,QAAD,IAAa,CAAC,GAAG,CAAC,MAArB,GACP,CAAC,qBAAA,CAAsB,IAAtB,EAA4B,EAA5B,EAAgC,GAAhC,EAAqC,QAArC,EAA+C,GAA/C,CAAD,CADO,GAGP,CAAC,UAAU,CAAC,uBAAX,CAAmC,EAAnC,EAAuC,GAAvC,CAAD;QACF,MAAM,CAAC,OAAP,CAAe,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAc,WAAd,CAA0B,EAA1B,CAAf;QACA,IAAG,CAAC,GAAG,CAAC,MAAL,IAAe,CAAC,QAAnB;UACE,IAAG,SAAH;YAAkB,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAlB;;UACA,MAAM,CAAC,IAAP,CAAY,6EAAZ,EAFF;;QAGA,KAAA,GAAQ,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,MAA/B;QACR,IAAG,WAAH;iBAAoB,MAApB;SAAA,MAAA;iBAA+B,SAAA,CAAU,KAAK,CAAC,qBAAN,CAAA,CAAV,EAA/B;;MA7Bc;MA8BhB,GAAG,CAAC,YAAJ,GAAmB,QAAA,CAAC,IAAD,CAAA;AACjB,YAAA,QAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA;QAAA,QAAA,GAAW,wBAAA,CAAA;QACX,CAAA,CAAC,EAAD,EAAK,WAAL,CAAA,GAAoB,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB;UAAA,IAAA,EAAM,IAAN;UAAY,SAAA,EAAW,IAAvB;UAA6B,WAAA,EAAa,CAAC,QAAD;QAA1C,CAAjB,CAApB;QACA,KAAA,GAAQ,kBAAkB,CAAC,aAAnB,CAAiC,IAAI,iBAAJ,CAAsB,IAAI,CAAC,KAAL,CAAW,WAAX,CAAtB,CAAjC;QACR,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,IAAjC;QACA,KAAA,GAAQ,UAAU,CAAC,uBAAX,CAAmC,EAAnC,EAAuC,iBAAiB,CAAC,aAAlB,CAAgC,KAAhC,CAAvC;eACR,CAAC,IAAI,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,EAA+B,CAAC,aAAD,EAAgB,KAAhB,EAAuB,GAAvB,CAA/B,CAAD,CAA4D,CAAC,qBAA7D,CAAA;MANiB;aAOnB;IAtEM,EAzhBR;;;;IAqmBA,UAAA,GAAa,QAAA,CAAC,GAAD,CAAA;aAAQ,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,MAAnB;IAAR;IAEb,SAAA,GAAY,QAAA,CAAC,CAAD,CAAA;AACV,UAAA;MAAA,GAAA,GAAS,OAAO,CAAP,KAAY,UAAf,GAA+B,CAAC,CAAC,QAAF,CAAA,CAAA,IAAgB,SAA/C,GACE,CAAC,CAAC,QAAL,GAAmB,CAAC,CAAC,QAAF,CAAA,CAAnB,GACA,MAAA,CAAO,CAAP;MACL,IAAG,OAAO,GAAP,KAAc,QAAjB;eAA+B,IAA/B;OAAA,MAAA;eAAwC,YAAxC;;IAJU;IAMN,OAAN,MAAA,KAAA;MACE,WAAa,CAAC,OAAD,CAAA;QAAY,IAAC,CAAA,OAAD,GAAW,SAAA,CAAU,OAAV;MAAvB;;IADf;IAGA,IAAA,GAAO,QAAA,CAAC,OAAD,CAAA;aAAY,IAAI,IAAJ,CAAS,OAAT;IAAZ;IAEP,QAAA,GAAW,QAAA,CAAC,GAAD,EAAM,OAAN,CAAA;aAAiB,CAAA,iEAAA,CAAA,CAAoE,OAAA,IAAW,EAA/E,CAAkF,gCAAlF,CAAA,CAAoH,UAAA,CAAW,GAAX,CAApH,CAAmI,cAAnI;IAAjB;IAEX,YAAA,GACE;MAAA,GAAA,EAAK,MAAL;MACA,GAAA,EAAK,MADL;MAEA,GAAA,EAAK,OAFL;MAGA,GAAA,EAAK,QAHL;MAIA,GAAA,EAAK;IAJL;IAMF,UAAA,GAAa,QAAA,CAAC,GAAD,CAAA;MACX,IAAG,OAAO,GAAP,KAAc,QAAjB;eAA+B,GAAG,CAAC,OAAJ,CAAY,YAAZ,EAA0B,QAAA,CAAC,CAAD,CAAA;iBAAM,YAAa,CAAA,CAAA;QAAnB,CAA1B,EAA/B;OAAA,MAAA;eACK,IADL;;IADW;IAIb,cAAA,GACE;MAAA,OAAA,EAAS,UAAT;MACA,UAAA,EAAY,KADZ;MAEA,EAAA,EAAI,KAFJ;MAGA,IAAA,EAAM,KAHN;MAIA,EAAA,EAAI,KAJJ;MAKA,MAAA,EAAQ,KALR;MAMA,YAAA,EAAc,KANd;MAOA,IAAA,EAAM,OAPN;MAQA,MAAA,EAAQ,OARR;MASA,IAAA,EAAM;IATN;IAWF,WAAA,GACE;MAAA,WAAA,EAAa,IAAb;MACA,YAAA,EAAc,IADd;MAEA,YAAA,EAAc,IAFd;MAGA,YAAA,EAAc;IAHd,EA5oBF;;IAmpBM,QAAN,MAAA,MAAA;MACE,WAAa,CAAA,CAAA;QACX,IAAC,CAAA,KAAD,GAAS;QACT,IAAC,CAAA,OAAD,GAAW,CAAA;QACX,IAAC,CAAA,OAAD,GAAW,CAAA;QACX,IAAC,CAAA,OAAD,GAAW,CAAA;QACX,IAAC,CAAA,IAAD,GAAQ,IAAA,CAAK,iBAAA,CAAA,CAAL;MALG;;MAMb,QAAU,CAAC,KAAD,CAAA;AACR,YAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA;QAAA,QAAA,GAAW,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,GAAA,IAAC,CAAA,KAAlB;QACX,UAAA,GAAa,QAAQ,CAAC,MAAT,CAAgB,CAAC,CAAC,OAAF,CAAU,IAAC,CAAA,KAAX,EAAkB,GAAA,KAAlB,CAAhB;QACb,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,QAAV,CAAJ;UACE,KAAA,0CAAA;;YACE,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAT,GAAiB;UADnB;UAEA,IAAA,GAAO,CAAA,CAAA,CACH;;AAAyB;YAAA,KAAA,4CAAA;;4BAAxB,MAAA,GAAS,CAAT,GAAa;YAAW,CAAA;;cAAzB,CAA2C,CAAC,IAA5C,CAAiD,MAAjD,CADG,CACqD,KADrD,CAAA,CAGF,iBAAA,CAAA,CAHE,CAGkB,CAHlB;UAMP,IAAC,CAAA,KAAD,GAAS;iBACT,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,IAAD,CAAM,IAAN,EAVV;;MAHQ;;MAcV,GAAK,CAAC,IAAD,CAAA;AACH,YAAA;QAAA,IAAG,CAAC,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAb;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAsC,CAAtC,CAAV,EADR;;QAEA,IAAG,CAAC,CAAC,CAAA,GAAI,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAd,CAAJ;UACE,CAAA,GAAI,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAT,GAAiB,IAAC,CAAA,IAAD,CAAM,CAAA,oBAAA,CAAA,CAAuB,IAAvB,CAA4B,GAA5B,CAAN,EADvB;;eAEA,CAAA,CAAA;MALG;;MAML,GAAK,CAAC,IAAD,EAAO,KAAP,CAAA;AACH,YAAA;QAAA,IAAG,CAAC,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAb;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAsC,CAAtC,CAAV,EADR;;QAEA,IAAG,CAAC,CAAC,CAAA,GAAI,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAd,CAAJ;UACE,CAAA,GAAI,IAAC,CAAA,OAAQ,CAAA,IAAA,CAAT,GAAiB,IAAC,CAAA,IAAD,CAAM,CAAA,gBAAA,CAAA,CAAmB,IAAnB,CAAwB,QAAxB,CAAN,EADvB;;eAEA,CAAA,CAAE,KAAF;MALG;;IA3BP;IAkCA,aAAA,GAAgB;IAEhB,MAAA,GAAS,QAAA,CAAC,MAAD,CAAA;aAAW,CAAA,GAAA,CAAA,CAAM,MAAN,CAAa,CAAb,CAAA,CAAgB,aAAA,EAAhB,CAAgC,CAAhC;IAAX;IAET,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,UAAA;MAAA,OAAA,GAAU,MAAA,CAAO,MAAP;aACV,CAAA,UAAA,CAAA,CAAa,OAAb,CAAqB,eAArB,CAAA,CAAsC,OAAtC,CAA8C,GAA9C;IAFkB;IAIpB,UAAA,GAAa,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;AACX,UAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAAA;AAAA;MAAA,KAAA,uCAAA;;sBACE,cAAe,CAAA,QAAA,CAAf,GAA2B;MAD7B,CAAA;;IADW;IAIb,gBAAA,GAAmB,QAAA,CAAC,GAAD,EAAM,KAAN,EAAa,QAAb,EAAuB,WAAvB,EAAoC,IAApC,CAAA;aACjB,GAAI,CAAA,QAAA,CAAJ,GAAgB,QAAA,CAAA,GAAC,IAAD,CAAA;QACd,IAAG,CAAC,cAAe,CAAA,KAAM,CAAA,CAAA,CAAN,CAAS,CAAC,QAA7B;iBAA2C,GAAI,CAAA,QAAA,CAAJ,CAAc,GAAA,IAAd,EAA3C;SAAA,MAAA;iBAEE,cAAA,CAAe,WAAf,CACE,CAAC,IADH,CACQ,QAAA,CAAC,WAAD,CAAA;AACJ,gBAAA;YAAA,GAAA,GAAM,WAAA,CAAY,GAAZ;YACN,IAAG,cAAe,CAAA,KAAM,CAAA,CAAA,CAAN,CAAS,CAAC,QAA5B;cACE,IAAG,GAAA,YAAe,OAAlB;uBAA+B,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAC,OAAD,CAAA;yBAAY,UAAA,CAAW,KAAX,EAAkB,OAAlB;gBAAZ,CAAT,EAA/B;eAAA,MAAA;uBACK,UAAA,CAAW,KAAX,EAAkB,GAAlB,EADL;eADF;;UAFI,CADR,CAME,CAAC,IANH,CAMQ,QAAA,CAAA,CAAA,EAAA;;mBAEJ,GAAI,CAAA,QAAA,CAAJ,CAAc,GAAA,IAAd;UAFI,CANR,CASE,CAAC,KATH,CASS,QAAA,CAAC,GAAD,CAAA;mBAAQ,GAAG,CAAC,OAAJ,CAAY,CAAZ,EAAe,GAAG,CAAC,OAAnB;UAAR,CATT,EAFF;;MADc;IADC;IAenB,WAAA,GAAc,QAAA,CAAC,KAAD,EAAQ,WAAR,CAAA;AACZ,UAAA;MAAA,KAAA,GAAQ,CAAC,CAAC,GAAF,CAAM,CAAI,CAAC,CAAC,OAAF,CAAU,KAAV,CAAH,GAAwB,KAAxB,GAAmC,CAAC,KAAD,CAApC,CAAN,EAAoD,QAAA,CAAC,CAAD,CAAA;eAAM,CAAC,CAAC,WAAF,CAAA;MAAN,CAApD;MACR,IAAA,GAAO,QAAA,CAAC,GAAD,CAAA;AACL,YAAA;QAAA,KAAA,mBAAA;UACE,gBAAA,CAAiB,GAAjB,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,WAAnC;QADF;eAEA;MAHK;MAIP,IAAI,CAAC,QAAL,GAAgB;aAChB,UAAA,CAAW,KAAX,EAAkB,IAAlB;IAPY;IASd,SAAA,GAAY,QAAA,CAAC,GAAD,CAAA;aAAQ,IAAA,CAAK,GAAL;IAAR;IAEZ,gBAAA,GAAmB,QAAA,CAAC,IAAD,CAAA;aAAS,cAAe,gBAAA,IAAI,CAAE,WAAN,CAAA,UAAA;IAAxB;IAEnB,cAAA,GAAiB,QAAA,CAAC,KAAD,CAAA;AAAU,UAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA;AAA0B;AAAA;MAAA,KAAA,qCAAA;;YAA+B,EAAE,CAAC,KAAH,CAAS,UAAT;wBAAzD,EAAE,CAAC,OAAH,CAAW,UAAX,EAAuB,EAAvB;;MAA0B,CAAA;;IAApC;IAEjB,SAAA,GAAY,QAAA,CAAC,IAAD,EAAO,OAAP,CAAA;AACV,UAAA,EAAA,EAAA,QAAA,EAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,WAAA,EAAA,QAAA,EAAA;MAAA,QAAA,GAAW,CAAA;MACX,UAAA,GAAa,CAAA;MACb,IAAA,GAAO,CAAA;MACP,WAAA,GAAc,CAAA;MACd,QAAA;;QAAW,IAAG,OAAH;AACT;AAAA;UAAA,KAAA,qCAAA;;YACE,OAA0B,CAAC,CAAC,KAAF,CAAQ,mBAAR,CAA1B,GAAM,MAAM,KAAK;YACjB,IAAA,GAAO,IAAI,CAAC,IAAL,CAAA;YACP,IAAG,CAAC,GAAJ;cAAa,KAAA,GAAQ,KAArB;;YACA,WAAG,KAAM,CAAA,CAAA,CAAN,EAAA,aAAY,eAAZ,EAAA,IAAA,MAAH;cAAoC,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,KAAX,EAA5C;aAAA,MAAA;cAEE,WAAY,CAAA,IAAA,CAAZ,GAAoB;cACpB,IAAG,EAAA,GAAK,IAAI,CAAC,aAAL,CAAmB,KAAnB,CAAR;gBACE,QAAS,CAAA,EAAE,CAAC,GAAH,CAAT,GAAmB;gBACnB,KAAA,GAAQ,IAAI,CAAC,OAAL,CAAa,EAAb,EAFV;;cAGA,UAAW,CAAA,IAAA,CAAX,GAAmB,MANrB;aAHA;;YAWA,IAAK,CAAA,IAAA,CAAL,GAAa;0BACb;UAbF,CAAA;0BADS;;;aAeX,CAAC,IAAD,EAAO,CAAC,CAAC,IAAF,CAAO,QAAP,CAAP,EAAyB,UAAzB,qBAAqC,WAAW,EAAhD,EAAoD,WAApD;IApBU;IAsBZ,OAAA,GACE;MAAA,IAAA,EAAM,KAAN;MACA,IAAA,EAAM,KADN;MAEA,IAAA,EAAM,KAFN;MAGA,IAAA,EAAM,KAHN;MAIA,IAAA,EAAM,KAJN;MAKA,IAAA,EAAM,KALN;MAMA,IAAA,EAAM,MANN;MAOA,IAAA,EAAM;IAPN;IASF,SAAA,GAAY,CAAC,CAAC,MAAF,CAAS,OAAT;IAEZ,QAAA,GAAW;IAEX,OAAA,GAAU;IAEV,YAAA,GAAe,QAAA,CAAC,GAAD,CAAA;aAAQ,SAAA,CAAU,GAAV,CAAc,CAAC,OAAf,CAAuB,QAAvB,EAAiC,QAAA,CAAC,CAAD,CAAA;eAAM,OAAQ,CAAA,CAAA;MAAd,CAAjC;IAAR;IAEf,cAAA,GAAiB,QAAA,CAAC,GAAD,CAAA;aAAQ,SAAA,CAAU,GAAV,CAAc,CAAC,OAAf,CAAuB,OAAvB,EAAgC,QAAA,CAAC,CAAD,CAAA;AAAM,YAAA;oDAAe,CAAE,CAAA,CAAA;MAAvB,CAAhC;IAAR;IAEjB,mBAAA,GAAsB,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,MAAZ,CAAA;AACpB,UAAA,MAAA,EAAA;MAAA,GAAA,GAAM,CAAC;AACP,aAAM,IAAA,EAAA,GAAS,CAAf;QACE,MAAA,GAAS,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,GAAlB;QACT,IAAG,MAAA,GAAS,GAAZ;AACE,iBAAO,GAAG,CAAC,OADb;;QAEA,GAAA,GAAM,MAAA,GAAS;MAJjB;aAKA,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,MAAb,EAAqB,GAAA,GAAM,CAAN,GAAU,MAA/B;IAPoB;IAStB,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,CACrB,WADqB,EAErB,eAFqB,EAGrB,SAHqB,EAIrB,cAJqB,EAKrB,OALqB,EAMrB,qBANqB,EAOrB,iBAPqB,EAQrB,UARqB,EASrB,iBATqB,EAUrB,kBAVqB,EAWrB,WAXqB,EAYrB,gBAZqB,EAarB,KAbqB,CAAvB;WAgBA,CACE,gBADF,EAEE,IAFF,EAGE,IAHF,EAIE,UAJF,EAKE,SALF,EAME,cANF,EAOE,cAPF,EAQE,WARF,EASE,YATF,EAUE,cAVF,EAWE,WAXF,EAYE,eAZF,EAaE,SAbF,EAcE,gBAdF,EAeE,YAfF,EAgBE,qBAhBF,EAiBE,iBAjBF,EAkBE,WAlBF,EAmBE,KAnBF,EAoBE,mBApBF,EAqBE,YArBF,EAsBE,kBAtBF;EAnyBoP,CAAtP;AAJJ",
  "sourcesContent": [
    "Evaulation support for Leisure\n\n    'use strict'\n    define.amd = true\n    define ['./base', './ast', './runtime', 'acorn', 'acorn_walk', 'acorn_loose', 'lispyscript', './coffee-script', 'bluebird', './gen', 'lib/js-yaml', './docOrg', 'lodash', 'fingertree', 'browser-source-map-support', 'lib/sourcemapped-stacktrace'], (Base, Ast, Runtime, Acorn, AcornWalk, AcornLoose, LispyScript, CS, Bluebird, Gen, Yaml, DocOrg, _, FingerTree, SourceMapSupport, SourcemappedStackTrace)->\n      SourceMapSupport?.install()\n\n      acorn = Acorn\n      acornWalk = AcornWalk\n      acornLoose = AcornLoose\n      lispyScript = lsrequire(\"lispyscript\")\n      {\n        getType\n        cons\n        unescapePresentationHtml\n        Nil\n      } = Ast\n      {\n        Node\n        resolve\n        lazy\n        defaultEnv\n        flushTraceLog\n        addSourceFile\n      } = Base\n      (window ? global).resolve = rz = resolve\n      (window ? global).lazy = lz = lazy\n      lc = Leisure_call\n      {\n        runMonad\n        runMonad2\n        newConsFrom\n        setValue\n        getValue\n        makeSyncMonad\n        makeHamt\n        _true\n        jsonConvert\n        getLeisurePromise\n        left\n        right\n      } = Runtime\n      {\n        Promise\n      } = Bluebird\n      {\n        genSource\n        SourceNode\n        sourceNode\n        SourceMapConsumer\n        SourceMapGenerator\n        genMap\n        CodeGenerator\n        withFile\n        jsCodeFor\n        setDebugType\n      } = Gen\n      {\n        dump\n      } = Yaml\n      {\n        getCodeItems\n        blockSource\n        parseYaml\n      } = DocOrg\n      {\n        mapStackTrace\n      } = SourcemappedStackTrace\n\n      #########\n      # init\n      #########\n\n      generatedFileCount = 0\n      defaultEnv.prompt = (str, defaultValue, cont)-> cont prompt(str, defaultValue)\n\n      currentGeneratedFileName = -> \"notebook-#{generatedFileCount}\"\n\n      nextGeneratedFileName = ->\n        generatedFileCount++\n        currentGeneratedFileName()\n\n      requirePromise = (file)-> new Promise (resolve, reject)->\n        requirejs [file], resolve\n\n      leisurePromise = null\n\n      getLeisurePromise = ->\n        if !leisurePromise\n          leisurePromise = requirePromise './leisure/generatedPrelude'\n            .then -> requirePromise './leisure/std'\n            .then -> requirePromise './leisure/parseAst'\n            .then -> requirePromise './leisure/svg'\n            .then -> new Promise (resolve, reject)->\n              simpleEval 'resetStdTokenPacks', resolve, reject\n            .then -> setDebugType 'User'\n            .then -> console.log \"LOADED LEISURE\"\n            .catch (err)-> console.error \"ERROR LOADING LEISURE SYSTEM!\\n#{err.stack}\"\n        leisurePromise\n\n      callFail = (fail, err)-> if fail then fail err else throw err\n\n      simpleEval = (txt, success, fail)->\n        rejected = false\n        env =\n          __proto__: defaultEnv\n          errorAt: (offset, msg)->\n            if !rejected\n              rejected = true\n              fail msg\n        runMonad2 rz(L_newParseLine)(0, L_nil, txt), env, (ast)->\n          if getType(ast) != 'err'\n            try\n              runMonad2 (eval genSource txt, ast), env, (x)->\n                if !rejected then success x\n            catch err\n              if !rejected then callFail fail, err\n          else if !rejected then fail new Error \"Parse error: #{ast id}\"\n\n      #########\n      # CODE\n      #########\n\n      defaultEnv.write = (str)-> console.log str\n      defaultEnv.errorAt = (offset, msg)-> debugger; console.log msg\n\n      id = lz (x)-> rz x\n      getLeft = getRight = (x)-> x(id)(id)\n      show = (obj)-> if L_show? then rz(L_show)(lz obj) else console.log obj\n\n      (window ? global).evalLeisure = evalLeisure = (str, cont)->\n        #console.log \"EVAL: \\n#{str}\"\n        env = leisureEnv(__proto__: defaultEnv)\n        env.presentValue = (v)-> v\n        env.executeText str, Nil, cont\n\n      runLeisureMonad = (value, cont)->\n        env = leisureEnv(__proto__: defaultEnv, opts: defaultEnv.opts)\n        env.presentValue = (v)-> v\n        runMonad2 value, env, cont\n\n      # force Chrome to register this source file by compiling dummy JS code associated with the file\n      defineSourceFile = (fileName, contents)->\n        addSourceFile fileName, contents\n        eval jsCodeFor codeMap new SourceNode(1, 0, fileName, 'void(0)'), contents, fileName, true\n\n      class ErrorCache\n        constructor: (@limit = 10)->\n          @cacheArray = []\n          @cacheSet = {}\n        addError: (err)->\n          while @cacheArray.length >= @limit\n            e = @cacheArray.shift()\n            delete @cacheSet[e.cacheId]\n          err.cacheId = \"errorid#{Math.round(Math.abs(Math.random() * 1000000000))}\"\n          @cacheSet[err.cacheId] = err\n          @cacheArray.push err\n          err.cacheId\n\n      errCache = new ErrorCache\n      Leisure.errCache = errCache.cacheSet\n\n      leisureErrorHtml = (err)->\n        \"<span class='error'>Error computing value: #{err.stack.replace(/\\n/g, '<br>')}</span>\"\n\n      leisureEnv = (env)->\n        env.presentValue = (v)->\n          try\n            str = if v instanceof Error || v?.stack? then leisureErrorHtml v\n            else rz(L_showHtml) lz v\n          catch err\n            str = leisureErrorHtml err\n          html str\n        env.executeText = (text, props, cont)-> setLounge this, =>\n          if opts = @opts then console.log \"OPTS:\", opts\n          getLeisurePromise().then (=>\n            if !@opts then @opts = opts\n            leisureExec this, text, props, ((result)=>\n              r = result.head().tail()\n              if getType(r) == 'left' then throw new Error getLeft r\n              else\n                r = getRight r\n                cont? r))\n            .catch (err)=>\n              @errorAt 0, err?.message ? err\n              console.error e\n              console.error \"Leisure text: #{text}\"\n        env.XexecuteText = (text, props, cont)-> setLounge this, ->\n          if !cont then cont = (x)->\n            r = x.head().tail()\n            if getType(r) == 'left' then new Error getLeft r\n            else getRight r\n          if getLeisurePromise().isResolved()\n            leisureExec env, text, props, cont, (err)-> env.errorAt 0, err?.message ? err\n          else\n            if opts = env.opts then console.log \"OPTS:\", opts\n            getLeisurePromise().then (=>\n              if !env.opts then env.opts = opts\n              leisureExec env, text, props, cont, (err)-> env.errorAt 0, err?.message ? err),\n            (err)-> env.errorAt 0, err?.message ? err\n        env.formatResult = (block, prefix, items)-> basicFormat block, prefix, [@presentValue items]\n        env.genBlock = (block, cont)-> @generateCode blockSource(block), true, cont\n        env.executeBlock = (block, cont)-> runWithPromiseCont ((c)=> @genBlock block, c), (results)->\n          results = arrayify results\n          for result in results\n            if result instanceof Error\n              return mapErrors results, cont\n          cont results\n        env.generateCode = (text, noFunc, cont)-> setLounge this, =>\n          fileName = currentGeneratedFileName()\n          exec = =>\n            env.fileName = fileName\n            defineSourceFile fileName, text\n            leisureExec this, text, L_nil, ((result)->\n              env.fileName = null\n              errs = []\n              results = []\n              #asts = _.map result.toArray(), (el)-> el.head()\n              asts = _.map result.toArray(), (el)->\n                if getType(el.tail()) == 'left' then errs.push getLeft el.tail()\n                else if cont then results.push getRight el.tail()\n                el.head()\n              if errs.length then cont? errs[0]\n              else withFile fileName, null, ->\n                cont? results\n                code = for item in asts\n                  gen = new CodeGenerator(fileName, false, true, false, text)\n                  node = gen.genNode item\n                  sourceNode item, 'function(){return ', node, ';}'\n                node = new SourceNode 1, 0, fileName, [\n                  '\"use strict\";\\n',\n                  (if !noFunc then '(function(cont){return ' else []),\n                  'L_runMonads([\\n    ',\n                  intersperse(code, ',\\n    '),\n                  (if !noFunc then '\\n  ], null, cont)' else '\\n  ])'),\n                  (if !noFunc then ';})' else [])\n                ]\n                codeMap node, text, fileName, true), (err)-> throw err\n          if getLeisurePromise().isResolved() then exec() else getLeisurePromise().then exec\n        env.userEvent = -> flushTraceLog()\n        env.compileBlock = (block)->\n          p = @generateCode blockSource(block)\n          if p instanceof Promise then p.then (result)-> eval codeFor result else eval codeFor p\n        env\n\n      mapErrors = (results, cont)->\n        Promise.all((if result instanceof Error #&& false\n          do (result)-> new Promise (succeed, fail)-> mapStackTrace result.stack, (r)->\n            tidyFrames = for frame in r\n              frame.replace(/^   */, '  ').replace /\\([^/][^)]*\\)/, (s)->\n                \"(#{new URL s.substring(1, s.length - 1), location})\"\n            succeed stack: tidyFrames.join '\\n'\n        else result) for result in results)\n          .then (newResults)-> cont newResults\n\n      runWithPromiseCont = (func, cont)->\n        sync = false\n        res = null\n        succeedPromise = null\n        failPromise = null\n        try\n          func (result)->\n            sync = true\n            if succeedPromise\n              cont result\n              succeedPromise result\n            else res = result\n          if sync\n            cont res\n            res\n          else new Promise (resolve, reject)->\n            succeedPromise = resolve\n            failPromise = reject\n        catch err\n          if failPromise then failPromise err\n          else throw err\n\n      codeFor = (codeObject)->\n        if typeof codeObject == 'string' then codeObject\n        else if codeObject.map? then jsCodeFor codeObject\n        else codeObject.code\n\n      codeMap = (sourceNode, content, fileName, tagContext)->\n        fileName = fileName ? currentGeneratedFileName()\n        cm = sourceNode.toStringWithSourceMap(file: fileName)\n        cm.map.setSourceContent fileName, content\n        if tagContext then cm.useContext = true\n        cm\n\n      sourceNodeFromCodeMap = (codeMap)-> SourceNode.fromStringWithSourceMap codeMap.code, new SourceMapConsumer codeMap.map.toJSON()\n\n      joinSourceMaps = (args...)-> new SourceNode 1, 0, '', Array.prototype.slice.call args\n\n      composeSourceMaps = (args...)->\n        result = SourceMapGenerator.fromSourceMap new SourceMapConsumer _.last(args)\n        for map in args[..args.length - 2] by -1\n          result.applySourceMap new SourceMapConsumer map\n        result.toJSON()\n\n      intersperse = (array, element)->\n        if array.length < 2 then array\n        else\n          result = [array[0]]\n          for i in [1...array.length]\n            result.push element, array[i]\n          result\n\n      leisureExec = (env, text, props, cont, errCont)->\n        try\n          old = getValue 'parser_funcProps'\n          setValue 'parser_funcProps', props\n          setLounge env, =>\n            result = rz(L_baseLoadString)(nextGeneratedFileName(), text)\n            runMonad2 result, env, (results)->\n              runNextResult results, env, ((finalResults)->\n                setValue 'parser_funcProps', old\n                (cont ? (x)->x)(finalResults)), errCont, []\n        catch err\n          callFail errCont, err\n\n      runNextResult = (results, env, cont, errCont, finalResults)->\n        while results != rz(L_nil)\n          if getType(results.head().tail()) == 'left'\n            v = results.head().tail()\n            if !(getLeft(v) instanceof Error) then v = left new Error getLeft v\n            finalResults.push cons results.head().head(), v\n            env.write \"ERROR: #{getLeft results.head().tail()}\"\n          else\n            sync = true\n            async = true\n            try\n              setLounge env, => runMonad2 getRight(results.head().tail()), env, (res2)->\n                finalResults.push cons results.head().head(), L_right res2\n                #if getType(res2) != 'unit' then env.write env.presentValue res2\n                if sync then async = false\n                else runNextResult results.tail(), env, cont, errCont, finalResults\n            catch err\n              callFail errCont, err\n            sync = false\n            if async then return\n          results = results.tail()\n        cont newConsFrom finalResults\n\n      hasCodeAttribute = (block, attr, value)->\n        if !block.attributeWords? then block.attributeWords = {}\n        if !block.attributeWords[attr]\n          a = block.codeAttributes?[attr] ? []\n          if !_.isArray a then a = a.split ' '\n          block.attributeWords[attr] = (word.toLowerCase() for word in a)\n        value.toLowerCase() in block.attributeWords[attr]\n\n      isYamlResult = (block)-> hasCodeAttribute(block, 'results', 'yaml') || block.language in ['text', 'string', 'yaml']\n\n      presentHtml = (v)->\n        str = ': ' + (if v instanceof Html then v.content.replace(/\\r?\\n/g, '\\\\n')\n        else escapeHtml stringFor(v).replace(/\\r?\\n/g, '\\n: '))\n        if _.last(str) == '\\n' then str else str + '\\n'\n\n      basicFormat = (block, prefix, items)->\n        if isYamlResult block\n          if items.length == 1 then items = items[0]\n          ': ' + (dump items, {sortKeys: true, flowLevel: Number block.codeAttributes.flowlevel ? 2}).trim().replace(/\\n/g, '\\n: ') + '\\n'\n        else prefix + _.map(items, presentHtml).join ''\n\n      arrayify = (val)-> if _.isArray(val) then val else [val]\n\n      writeResults = (env, values)->\n        first = true\n        for value in arrayify(values)\n          if !first then env.write '\\n'\n          env.write env.presentValue value\n\n      defaultEnv.formatResult = (block, prefix, items)-> basicFormat block, prefix, items\n\n      setLounge = (env, func)->\n        oldLounge = (window ? global).Lounge\n        (window ? global).Lounge = env\n        env.opts = env.opts\n        try\n          result = func()\n        finally\n          (window ? global).Lounge = oldLounge\n        result\n\n      textEnv = (env)->\n        env.executeText = (text)-> text\n        env\n\n      yamlEnv = (env)->\n        env.executeText = (text)-> parseYaml text\n        env\n\n      jsEnv = (env)->\n        env.executeText = (text, props, cont)-> setLounge this, =>\n          new Promise((succeed)->\n            writeResults env, value = jsEval(env, text)\n            succeed value\n            cont? value).catch (err)=>\n              @errorAt 0, err.message\n        env.generateCode = (text)->\n          fileName = nextGeneratedFileName()\n          cm = codeMap new SourceNode(1, 0, fileName, text), text, fileName\n          nodes = SourceNode.fromStringWithSourceMap text, SourceMapConsumer.fromSourceMap cm\n          (new SourceNode 1, 0, fileName, ['function(){', nodes, '}']).toStringWithSourceMap()\n        env\n\n      jsGatherSourceResults = (env, text, map, fileName, src)->\n        if env.silent then text\n        else\n          try\n            parsed = acorn.parse text\n          catch err\n            errNode = null\n            handleErrors acornLoose.parse_dammit(text), (node)-> errNode = node\n            try\n              setLounge env, -> eval text\n            catch err2\n              if errNode\n                env.errorAt Math.min(errNode.start, errNode.end), err2.message\n              else\n                env.errorAt findError(err.message, text), err2.message\n              return 'void 0'\n          oldNodes = sourceNodeTree SourceNode.fromStringWithSourceMap text, map\n          newSource = ['var leisure_results=[];\\n']\n          for expr in parsed.body\n            {line, column, source, name} = lineLocationForOffset map, text, expr.start\n            if expr.type == 'ExpressionStatement'\n              if expr.expression.type != 'ObjectExpression' then expr = expr.expression\n              exprText = text.substring expr.start, expr.end\n              if exprText[exprText.length - 1] == ';'\n                expr =\n                 start: expr.start\n                 end: expr.end - 1\n              if (s = new SourceNode(line, column, source, nodesForGeneratedText(oldNodes, expr))).toString() != text.substring expr.start, expr.end\n                console.warn \"Source nodes don't line up:\\n#{s.toString()}\"\n              newSource.push new SourceNode(line, column, source, ['\\nleisure_results.push(', nodesForGeneratedText(oldNodes, expr), ');\\n'], name)\n            else newSource.push new SourceNode(line, column, source, [text.substring expr.start, expr.end])\n          {code, map} = new SourceNode(1, 0, fileName, newSource).toStringWithSourceMap()\n          map.setSourceContent fileName, src\n          SourceNode.fromStringWithSourceMap(code, SourceMapConsumer.fromSourceMap map)\n          #new SourceNode 1, 0, fileName, newSource\n\n      sourceNodeTree = (nodes)->\n        entryArray = []\n        nodes.walk (code, node)-> entryArray.push [code, node]\n        FingerTree.fromArray entryArray,\n          measure: (n)-> n[0].length\n          identity: -> 0\n          sum: (a, b)-> a + b\n\n      nodesForGeneratedText = (nodeTree, {start, end})->\n        result = []\n        [preceding, target] = nodeTree.split (m)-> m > start\n        startLen = preceding.measure()\n        if !preceding.isEmpty()\n          [code, node] = preceding.peekLast()\n          result.push sn node, code.substring start - startLen\n        [preceding, target] = target.split (m)-> startLen + m > end\n        if !preceding.isEmpty() || !target.isEmpty()\n          for [code, node] in preceding.toArray()\n            result.push sn node, code\n          if !target.isEmpty()\n            endPos = startLen + preceding.measure()\n            [code, node] = target.peekFirst()\n            result.push sn node, code.substring 0, end - endPos\n        result\n\n      sn = ({line, column, source}, code)-> new SourceNode line, column, source, code\n\n      lineLocationForOffset = (map, str, offset)->\n        line = 1\n        pos = -1\n        while (next = str.indexOf '\\n', pos + 1) < offset && next != -1\n          pos = next\n          line++\n        map.originalPositionFor {line, column: offset - pos + 1}\n\n      jsGatherResults = (env, text, returnResults)->\n        try\n          parsed = acorn.parse text\n        catch err\n          errNode = null\n          handleErrors acornLoose.parse_dammit(text), (node)-> errNode = node\n          try\n            setLounge env, -> eval text\n          catch err2\n            if errNode\n              env.errorAt Math.min(errNode.start, errNode.end), err2.message\n            else\n              env.errorAt findError(err.message, text), err2.message\n            return 'void 0'\n        if env.silent then text\n        else\n          newText = 'var leisure_results=[];\\n'\n          for expr in parsed.body\n            if expr.type == 'ExpressionStatement'\n              exprText = text.substring expr.start, expr.end\n              if exprText[exprText.length - 1] == ';'\n                exprText = exprText.substring(0, exprText.length - 1)\n              newText = \"#{newText.trim()}\\nleisure_results.push(#{exprText.trim()});\\n\"\n            else newText += text.substring expr.start, expr.end\n          \"#{newText}#{if returnResults then ';\\nreturn leisure_results' else ''}\"\n\n      jsBaseEval = (env, text)->\n        if !env.silent\n          env.results = []\n        console = log: (str)=> env.write env.presentValue str\n        setLounge env, -> if env.eval then env.eval(text) else localEval\n\n      jsEval = (env, text)-> jsBaseEval env, jsGatherResults(env, text)\n      #jsEval = (env, text)-> (jsBaseEval env, \"(function(){\" + jsGatherResults(env, text, true) + \"})\").call(env)\n\n      findError = (err, text)->\n        [x, line, col] = err.match(/\\(([0-9]*):([0-9]*)\\)/)\n        line = Number line - 1\n        tot = Number col\n        for txt, n in text.split('\\n')\n          if n == line then break\n          else tot += txt.length + 1\n        tot\n\n      walk = (window ? global).Walk = (node, func)->\n        v = {}\n        for type of acornWalk.base\n          v[type] = func\n        acornWalk.simple node, v, null\n\n      isError = (node)-> node.name == \"✖\"\n\n      handleErrors = (ast, func)-> walk ast, (node)-> if isError node then func node\n\n      lsEnv = (env)->\n        env.executeText = (text, props, cont)-> setLounge this, =>\n          try\n            console = log: (str)=> env.write env.presentValue str\n            value = setLounge env, -> eval(lispyScript._compile(text));\n            if typeof value != 'undefined' then writeResults env, [value]\n          catch err\n            @errorAt 0, err.message\n          cont? value\n        env\n\n      csEnv = (env)->\n        env.executeText = (text, props, cont)-> setLounge this, =>\n          new Promise((succeed)=>\n            writeResults env, values = (@runWith {}, eval \"(function(){#{@blockCode text, null, null, null, true}})\")\n            succeed values ? []\n            cont? values ? []).catch (err)->\n              console.error err.stack ? err\n              env.errorAt 0, err.message\n        env.executeBlock = (block, cont)->\n          new Promise((succeed)=>\n            @compileBlock(block).call this, (result)->\n              succeed result\n              cont? result).catch (err)->\n                console.error err.stack ? err\n                env.errorAt 0, err.message\n        env.compileBlock = (block)->\n          fileName = currentGeneratedFileName()\n          [..., vars, varNames, varMappings] = blockVars @data, block.codeAttributes?.var\n          nodes = new SourceNode 1, 0, fileName, ['(function(){', @blockCode(blockSource(block), vars, varNames, varMappings, true, null, fileName, true), '})']\n          code = @runWith {}, jsCodeFor nodes.toStringWithSourceMap()\n          (cont, args...)->\n            if this != (window ? global)\n              @ctx = _blocks: {}\n              for varName, i in varNames\n                @ctx[varName] = args[i] ? @data.getYaml @data.getBlockNamed varMappings[varName]\n                if !args[i] then @ctx._blocks[varName] = @data.getBlockNamed varMappings[varName]\n            ret = code.apply this, args\n            if cont then cont ret else ret\n        env.genBlock = (block, vars, varNames, varMappings)->\n          [..., vars, varNames, varMappings] = blockVars @data, block.codeAttributes?.var\n          fileName = nextGeneratedFileName()\n          nodes = new SourceNode 1, 0, fileName, ['(function(){', @blockCode(blockSource(block), vars, varNames, varMappings, false, null, fileName, true), '})']\n          nodes.toStringWithSourceMap()\n        env.blockCode = (src, vars, varNames, varMappings, useReturn, noGather, fileName, sourceNodes)->\n          fileName = fileName ? currentGeneratedFileName()\n          vars = vars ? {}\n          varNames = varNames ? []\n          varMappings = varMappings ? {}\n          blocks = {}\n          consts = {}\n          for name, value of vars\n            if Number(value) == value || value[0] in \"'\\\"\"\n              consts[name] = value\n            else blocks[name] = value\n          constStr = (\"  if (#{constName} == undefined) #{constName} = #{value};\\n\" for constName, value of consts).join('')\n          blockVarStr = (\"  #{varName} = this.ctx.#{varName} || this.data.getYaml(this.data.getBlockNamed('#{value}'));\\n\" for varName, value of varMappings).join('')\n          {js, v3SourceMap} = CS.compile src,\n            bare: true\n            sourceMap: true\n            sourceFiles: [fileName]\n          smGen = SourceMapGenerator.fromSourceMap new SourceMapConsumer JSON.parse(v3SourceMap)\n          smGen.setSourceContent fileName, src\n          con = SourceMapConsumer.fromSourceMap smGen\n          output = if !noGather && !env.silent\n            [jsGatherSourceResults this, js, con, fileName, src]\n          else\n            [SourceNode.fromStringWithSourceMap(js, con)]\n          output.unshift \"#{constStr}#{blockVarStr}\\n\"\n          if !env.silent && !noGather\n            if useReturn then output.push 'return '\n            output.push 'typeof __cont != \"undefined\" ? __cont(leisure_results) : leisure_results;\\n'\n          nodes = new SourceNode 1, 0, fileName, output\n          if sourceNodes then nodes else jsCodeFor nodes.toStringWithSourceMap()\n        env.generateCode = (text)->\n          fileName = currentGeneratedFileName()\n          {js, v3SourceMap} = CS.compile(text, bare: true, sourceMap: true, sourceFiles: [fileName])\n          smGen = SourceMapGenerator.fromSourceMap new SourceMapConsumer JSON.parse(v3SourceMap)\n          smGen.setSourceContent fileName, text\n          nodes = SourceNode.fromStringWithSourceMap js, SourceMapConsumer.fromSourceMap smGen\n          (new SourceNode 1, 0, fileName, ['function(){', nodes, '}']).toStringWithSourceMap()\n        env\n\n      #jsCodeFor = (codeMap)->\n      #  #\"#{codeMap.code}\\n\"\n      #  \"#{codeMap.code}\\n//# sourceMappingURL=data:application/json;base64,#{btoa JSON.stringify codeMap.map.toJSON()}\\n\"\n\n      indentCode = (str)-> str.replace /\\n/g, '\\n  '\n\n      stringFor = (v)->\n        str = if typeof v == 'function' then v.toString() || 'UNKNOWN'\n        else if v.toString then v.toString()\n        else String v\n        if typeof str == 'string' then str else 'undefined'\n\n      class Html\n        constructor: (content)-> @content = stringFor content\n\n      html = (content)-> new Html content\n\n      errorDiv = (err, orgText)-> \"<span class='error' contenteditable='false'><span class='hidden'>#{orgText || ''}</span><span data-nonorg='true'>#{escapeHtml err}</span></span>\"\n\n      replacements =\n        '<': '&lt;'\n        '>': '&gt;'\n        '&': '&amp;'\n        '\"': '&quot;'\n        \"'\": '&#39;'\n\n      escapeHtml = (str)->\n        if typeof str == 'string' then str.replace /[<>&\\'\\\"]/g, (c)-> replacements[c]\n        else str\n\n      knownLanguages =\n        leisure: leisureEnv\n        javascript: jsEnv\n        js: jsEnv\n        lisp: lsEnv\n        cs: csEnv\n        coffee: csEnv\n        coffeescript: csEnv\n        text: textEnv\n        string: textEnv\n        yaml: yamlEnv\n\n      envTemplate =\n        executeText: null\n        executeBlock: null\n        generateCode: null\n        compileBlock: null\n\n## Scope class\n\n      class Scope\n        constructor: ->\n          @names = []\n          @nameSet = {}\n          @setters = {}\n          @getters = {}\n          @eval = eval newEvalFuncString()\n        newNames: (names)->\n          newNames = _.without names, @names...\n          totalNames = newNames.concat _.without @names, names...\n          if !_.isEmpty newNames\n            for name in newNames\n              @nameSet[name] = true\n            code = \"\"\"\n              #{('var ' + n + ' = null;' for n in newNames).join '\\n  '}\n\n              (#{newEvalFuncString()})\n            \"\"\"\n\n            @names = totalNames\n            @eval = @eval(code)\n        get: (name)->\n          if !@nameSet[name]\n            throw new Error \"No member of namespace named '#{name}'\"\n          if !(g = @getters[name])\n            g = @getters[name] = @eval \"(function() {return #{name};})\"\n          g()\n        set: (name, value)->\n          if !@nameSet[name]\n            throw new Error \"No member of namespace named '#{name}'\"\n          if !(s = @setters[name])\n            s = @setters[name] = @eval \"(function($v$) {#{name} = $v$})\"\n          s value\n\n      gensymCounter = 0\n\n      gensym = (prefix)-> \"$L_#{prefix}_#{gensymCounter++}$\"\n\n      newEvalFuncString = ->\n        evalVar = gensym \"EXPR\"\n        \"(function(#{evalVar}) {return eval(#{evalVar})})\"\n\n      installEnv = (names, func)->\n        for langName in names\n          knownLanguages[langName] = func\n\n      autoLoadProperty = (env, names, property, libraryName, cont)->\n        env[property] = (args...)->\n          if !knownLanguages[names[0]].autoLoad then env[property] args...\n          else\n            requirePromise(libraryName)\n              .then (installFunc)->\n                res = installFunc(env)\n                if knownLanguages[names[0]].autoLoad\n                  if res instanceof Promise then res.then (envFunc)-> installEnv names, envFunc\n                  else installEnv names, res\n              .then ->\n                #debugger\n                env[property] args...\n              .catch (err)-> env.errorAt 0, err.message\n\n      autoLoadEnv = (names, libraryName)->\n        names = _.map (if _.isArray names then names else [names]), (n)-> n.toLowerCase()\n        func = (env)->\n          for prop of envTemplate\n            autoLoadProperty env, names, prop, libraryName\n          env\n        func.autoLoad = true\n        installEnv names, func\n\n      localEval = ($x$)-> eval $x$\n\n      languageEnvMaker = (name)-> knownLanguages[name?.toLowerCase()]\n\n      blocksObserved = (block)-> ob.replace /^block\\./, '' for ob in block.observing when ob.match /^block\\./\n\n      blockVars = (data, varDefs)->\n        blockIds = {}\n        blockNames = {}\n        vars = {}\n        varMappings = {}\n        varNames = if varDefs\n          for v in (if _.isArray varDefs then varDefs else [varDefs])\n            [..., name, def, value] = v.match /^([^=]*)(=(.*))?$/\n            name = name.trim()\n            if !def then value = name\n            if value[0] in \"'\\\"0123456789\" then value = JSON.parse value\n            else\n              varMappings[name] = value\n              if bl = data.getBlockNamed value\n                blockIds[bl._id] = true\n                value = data.getYaml bl\n              blockNames[name] = value\n            #else value = value.trim()\n            vars[name] = value\n            name\n        [vars, _.keys(blockIds), blockNames, varNames ? [], varMappings]\n\n      escaped =\n        '\\b': \"\\\\b\"\n        '\\f': \"\\\\f\"\n        '\\n': \"\\\\n\"\n        '\\r': \"\\\\r\"\n        '\\t': \"\\\\t\"\n        '\\v': \"\\\\v\"\n        '\\\"': \"\\\\\\\"\"\n        '\\\\': \"\\\\\\\\\"\n\n      unescaped = _.invert escaped\n\n      specials = /[\\b\\f\\n\\r\\t\\v\\\"\\\\]/g\n\n      slashed = /\\\\./g\n\n      escapeString = (str)-> stringFor(str).replace specials, (c)-> escaped[c]\n\n      unescapeString = (str)-> stringFor(str).replace slashed, (c)-> unescaped[c] ? c[1]\n\n      lineColumnStrOffset = (str, line, column)->\n        pos = -1\n        while line-- > 0\n          newPos = str.indexOf '\\n', pos\n          if newPos < pos\n            return str.length\n          pos = newPos + 1\n        Math.min str.length, pos + 1 + column\n\n      Object.assign Leisure, {\n        evalLeisure\n        runLeisureMonad\n        setLounge\n        joinSourceMaps\n        codeMap\n        sourceNodeFromCodeMap\n        composeSourceMaps\n        SourceNode\n        SourceMapConsumer\n        SourceMapGenerator\n        autoLoadEnv\n        languageEnvMaker\n        Scope\n      }\n\n      {\n        languageEnvMaker\n        html\n        Html\n        escapeHtml\n        blockVars\n        blocksObserved\n        knownLanguages\n        presentHtml\n        escapeString\n        unescapeString\n        evalLeisure\n        runLeisureMonad\n        setLounge\n        hasCodeAttribute\n        isYamlResult\n        nextGeneratedFileName\n        getLeisurePromise\n        autoLoadEnv\n        Scope\n        lineColumnStrOffset\n        writeResults\n        runWithPromiseCont\n      }\n"
  ]
}