// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define.amd = true;

  define(['./base', './ast', './runtime', 'acorn', 'acorn_walk', 'acorn_loose', './lib/lispyscript/browser-bundle', './coffee-script', 'lib/bluebird.min', './gen', './export', 'lib/js-yaml', './docOrg'], function(Base, Ast, Runtime, Acorn, AcornWalk, AcornLoose, LispyScript, CS, Bluebird, Gen, Exports, Yaml, DocOrg) {
    var Html, Nil, Node, Promise, _true, acorn, acornLoose, acornWalk, arrayify, basicFormat, blockSource, blockVars, blocksObserved, c, cons, csEnv, defaultEnv, dump, e, errorDiv, escapeHtml, escapeString, escaped, evalLeisure, findError, genSource, getCodeItems, getLeft, getLeisurePromise, getRight, getType, getValue, handleErrors, hasCodeAttribute, html, id, indentCode, isError, isYamlResult, jsBaseEval, jsEnv, jsEval, jsGatherResults, jsonConvert, knownLanguages, languageEnvMaker, lazy, lc, leisureEnv, leisureExec, leisurePromise, lispyScript, localEval, lsEnv, lz, makeHamt, makeSyncMonad, mergeExports, newConsFrom, presentHtml, replacements, requirePromise, resolve, runMonad, runMonad2, runNextResult, rz, safeLoad, setLounge, setValue, show, simpleEval, slashed, specials, textEnv, unescapePresentationHtml, unescapeString, unescaped, walk, writeValues, yamlEnv;
    acorn = Acorn;
    acornWalk = AcornWalk;
    acornLoose = AcornLoose;
    lispyScript = lsrequire("lispyscript");
    getType = Ast.getType, cons = Ast.cons, unescapePresentationHtml = Ast.unescapePresentationHtml, Nil = Ast.Nil;
    mergeExports = Exports.mergeExports;
    Node = Base.Node, resolve = Base.resolve, lazy = Base.lazy, defaultEnv = Base.defaultEnv;
    window.resolve = rz = resolve;
    window.lazy = lz = lazy;
    lc = Leisure_call;
    runMonad = Runtime.runMonad, runMonad2 = Runtime.runMonad2, newConsFrom = Runtime.newConsFrom, setValue = Runtime.setValue, getValue = Runtime.getValue, makeSyncMonad = Runtime.makeSyncMonad, makeHamt = Runtime.makeHamt, _true = Runtime._true, jsonConvert = Runtime.jsonConvert, getLeisurePromise = Runtime.getLeisurePromise;
    Promise = Bluebird.Promise;
    genSource = Gen.genSource;
    safeLoad = Yaml.safeLoad, dump = Yaml.dump;
    getCodeItems = DocOrg.getCodeItems, blockSource = DocOrg.blockSource;
    defaultEnv.prompt = function(str, defaultValue, cont) {
      return cont(prompt(str, defaultValue));
    };
    requirePromise = function() {
      var file;
      file = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new Promise(function(resolve, reject) {
        return require(file, resolve);
      });
    };
    leisurePromise = null;
    getLeisurePromise = function() {
      if (!leisurePromise) {
        leisurePromise = requirePromise('./leisure/generatedPrelude').then(function() {
          return requirePromise('./leisure/std');
        }).then(function() {
          return requirePromise('./leisure/parseAst');
        }).then(function() {
          return requirePromise('./leisure/svg');
        }).then(function() {
          return new Promise(function(resolve, reject) {
            return simpleEval('resetStdTokenPacks', resolve, reject);
          })["catch"](function(err) {
            return console.error("ERROR LOADING LEISURE SYSTEM!\n" + err.stack);
          });
        });
      }
      return leisurePromise;
    };
    simpleEval = function(txt, success, fail) {
      var env, rejected;
      rejected = false;
      env = {
        __proto__: defaultEnv,
        errorAt: function(offset, msg) {
          if (!rejected) {
            rejected = true;
            return fail(msg);
          }
        }
      };
      return runMonad2(rz(L_newParseLine)(0, L_nil, txt), env, function(ast) {
        var err, error;
        if (getType(ast) !== 'err') {
          try {
            return runMonad2(eval(genSource(txt, ast)), env, function(x) {
              if (!rejected) {
                return success(x);
              }
            });
          } catch (error) {
            err = error;
            if (!rejected) {
              return fail(err);
            }
          }
        } else if (!rejected) {
          return fail(new Error("Parse error: " + (ast(id))));
        }
      });
    };
    defaultEnv.write = function(str) {
      return console.log(str);
    };
    defaultEnv.errorAt = function(offset, msg) {
      debugger;
      return console.log(msg);
    };
    id = lz(function(x) {
      return rz(x);
    });
    getLeft = function(x) {
      return x(id)(id);
    };
    getRight = function(x) {
      return x(id)(id);
    };
    show = function(obj) {
      if (typeof L_show !== "undefined" && L_show !== null) {
        return rz(L_show)(lz(obj));
      } else {
        return console.log(obj);
      }
    };
    window.evalLeisure = evalLeisure = function(str, cont) {
      var env;
      env = leisureEnv({
        __proto__: defaultEnv
      });
      env.presentValue = function(v) {
        return v;
      };
      return env.executeText(str, Nil, cont);
    };
    leisureEnv = function(env) {
      env.presentValue = function(v) {
        return html(rz(L_showHtml)(lz(v)));
      };
      env.executeText = function(text, props, cont) {
        return setLounge(this, function() {
          var opts;
          if (!cont) {
            cont = function(x) {
              var r;
              r = x.head().tail();
              if (getType(r) === 'left') {
                return new Error(getLeft(r));
              } else {
                return getRight(r);
              }
            };
          }
          if (getLeisurePromise().isResolved()) {
            return leisureExec(env, text, props, cont, function(err) {
              var ref;
              return env.errorAt(0, (ref = err != null ? err.message : void 0) != null ? ref : err);
            });
          } else {
            if (opts = env.opts) {
              console.log("OPTS:", opts);
            }
            return getLeisurePromise().then(((function(_this) {
              return function() {
                if (!env.opts) {
                  env.opts = opts;
                }
                return leisureExec(env, text, props, cont, function(err) {
                  var ref;
                  return env.errorAt(0, (ref = err != null ? err.message : void 0) != null ? ref : err);
                });
              };
            })(this)), function(err) {
              var ref;
              return env.errorAt(0, (ref = err != null ? err.message : void 0) != null ? ref : err);
            });
          }
        });
      };
      env.createObserver = function(blockNames, text, cont) {
        throw new Error('Leisure observers not implemented yet');
      };
      return env;
    };
    leisureExec = function(env, text, props, cont, errCont) {
      var err, error, old;
      try {
        old = getValue('parser_funcProps');
        setValue('parser_funcProps', props);
        return setLounge(env, (function(_this) {
          return function() {
            var result;
            result = rz(L_baseLoadString)('notebook', text);
            return runMonad2(result, env, function(results) {
              return runNextResult(results, env, (function() {
                setValue('parser_funcProps', old);
                return (cont != null ? cont : function(x) {
                  return x;
                })(results);
              }), errCont);
            });
          };
        })(this));
      } catch (error) {
        err = error;
        return errCont(err);
      }
    };
    runNextResult = function(results, env, cont, errCont) {
      var async, err, error, sync;
      while (results !== rz(L_nil)) {
        if (getType(results.head().tail()) === 'left') {
          env.write("PARSE ERROR: " + (getLeft(results.head().tail())));
        } else {
          sync = true;
          async = true;
          try {
            setLounge(env, (function(_this) {
              return function() {
                return runMonad2(getRight(results.head().tail()), env, function(res2) {
                  if (getType(res2) !== 'unit') {
                    env.write(env.presentValue(res2));
                  }
                  if (sync) {
                    return async = false;
                  } else {
                    return runNextResult(results.tail(), env, cont, errCont);
                  }
                });
              };
            })(this));
          } catch (error) {
            err = error;
            errCont(err);
          }
          sync = false;
          if (async) {
            return;
          }
        }
        results = results.tail();
      }
      return cont();
    };
    hasCodeAttribute = function(block, attr, value) {
      var a, ref, ref1, ref2, word;
      if (block.attributeWords == null) {
        block.attributeWords = {};
      }
      if (!block.attributeWords[attr]) {
        a = (ref = (ref1 = block.codeAttributes) != null ? ref1[attr] : void 0) != null ? ref : [];
        if (!_.isArray(a)) {
          a = a.split(' ');
        }
        block.attributeWords[attr] = (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = a.length; j < len; j++) {
            word = a[j];
            results1.push(word.toLowerCase());
          }
          return results1;
        })();
      }
      return ref2 = value.toLowerCase(), indexOf.call(block.attributeWords[attr], ref2) >= 0;
    };
    isYamlResult = function(block) {
      var ref;
      return hasCodeAttribute(block, 'results', 'yaml') || ((ref = block.language) === 'text' || ref === 'string' || ref === 'yaml');
    };
    presentHtml = function(v) {
      var str;
      str = ': ' + (v instanceof Html ? v.content.replace(/\r?\n/g, '\\n') : escapeHtml(String(v).replace(/\r?\n/g, '\n: ')));
      if (_.last(str) === '\n') {
        return str;
      } else {
        return str + '\n';
      }
    };
    basicFormat = function(block, prefix, items) {
      var item, ref;
      if (isYamlResult(block)) {
        if (items.length === 1) {
          items = items[0];
        }
        return ': ' + (dump(items, {
          sortKeys: true,
          flowLevel: Number((ref = block.codeAttributes.flowlevel) != null ? ref : 2)
        })).trim().replace(/\n/g, '\n: ') + '\n';
      } else {
        return prefix + ((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = items.length; j < len; j++) {
            item = items[j];
            results1.push(presentHtml(item));
          }
          return results1;
        })()).join('');
      }
    };
    writeValues = function(env, values) {
      return env.write(values.join('\n'));
    };
    defaultEnv.formatResult = function(block, prefix, items) {
      return basicFormat(block, prefix, items);
    };
    setLounge = function(env, func) {
      var oldLounge, result;
      oldLounge = window.Lounge;
      window.Lounge = env;
      env.opts = env.opts;
      result = func();
      window.Lounge = oldLounge;
      return result;
    };
    textEnv = function(env) {
      env.executeText = function(text) {
        return text;
      };
      return env;
    };
    yamlEnv = function(env) {
      env.executeText = function(text) {
        return safeLoad(text);
      };
      return env;
    };
    jsEnv = function(env) {
      env.executeText = function(text, props, cont) {
        return setLounge(this, (function(_this) {
          return function() {
            var err, error, value;
            try {
              writeValues(env, value = jsEval(env, text));
            } catch (error) {
              err = error;
              _this.errorAt(0, err.message);
            }
            return typeof cont === "function" ? cont(value) : void 0;
          };
        })(this));
      };
      env.createObserver = function(blockNames, text, cont) {
        throw new Error('JavaScript observers not implemented yet');
      };
      return env;
    };
    jsGatherResults = function(env, text, returnResults) {
      var err, err2, errNode, error, error1, expr, exprText, j, len, newText, parsed, ref;
      try {
        parsed = acorn.parse(text);
      } catch (error) {
        err = error;
        errNode = null;
        handleErrors(acornLoose.parse_dammit(text), function(node) {
          return errNode = node;
        });
        try {
          setLounge(env, function() {
            return eval(text);
          });
        } catch (error1) {
          err2 = error1;
          if (errNode) {
            env.errorAt(Math.min(errNode.start, errNode.end), err2.message);
          } else {
            env.errorAt(findError(err.message, text), err2.message);
          }
          return 'void 0';
        }
      }
      if (env.silent) {
        return text;
      } else {
        newText = 'var leisure_results=[];\n';
        ref = parsed.body;
        for (j = 0, len = ref.length; j < len; j++) {
          expr = ref[j];
          if (expr.type === 'ExpressionStatement') {
            exprText = text.substring(expr.start, expr.end);
            if (exprText[exprText.length - 1] === ';') {
              exprText = exprText.substring(0, exprText.length - 1);
            }
            newText = (newText.trim()) + "\nleisure_results.push(" + (exprText.trim()) + ");\n";
          } else {
            newText += text.substring(expr.start, expr.end);
          }
        }
        return "" + newText + (returnResults ? ';\nreturn leisure_results' : '');
      }
    };
    jsBaseEval = function(env, text) {
      var console;
      if (!env.silent) {
        env.results = [];
      }
      console = {
        log: (function(_this) {
          return function(str) {
            return env.write(env.presentValue(str));
          };
        })(this)
      };
      return setLounge(env, function() {
        if (env["eval"]) {
          return env["eval"](text);
        } else {
          return localEval;
        }
      });
    };
    jsEval = function(env, text) {
      return jsBaseEval(env, jsGatherResults(env, text));
    };
    findError = function(err, text) {
      var col, j, len, line, n, ref, ref1, tot, txt, x;
      ref = err.match(/\(([0-9]*):([0-9]*)\)/), x = ref[0], line = ref[1], col = ref[2];
      line = Number(line - 1);
      tot = Number(col);
      ref1 = text.split('\n');
      for (n = j = 0, len = ref1.length; j < len; n = ++j) {
        txt = ref1[n];
        if (n === line) {
          break;
        } else {
          tot += txt.length + 1;
        }
      }
      return tot;
    };
    walk = window.Walk = function(node, func) {
      var type, v;
      v = {};
      for (type in acornWalk.base) {
        v[type] = func;
      }
      return acornWalk.simple(node, v, null);
    };
    isError = function(node) {
      return node.name === "✖";
    };
    handleErrors = function(ast, func) {
      return walk(ast, function(node) {
        if (isError(node)) {
          return func(node);
        }
      });
    };
    lsEnv = function(env) {
      env.executeText = function(text, props, cont) {
        return setLounge(this, (function(_this) {
          return function() {
            var console, err, error, value;
            try {
              console = {
                log: function(str) {
                  return env.write(env.presentValue(str));
                }
              };
              value = setLounge(env, function() {
                return eval(lispyScript._compile(text));
              });
              if (typeof value !== 'undefined') {
                writeValues(env, [value]);
              }
            } catch (error) {
              err = error;
              _this.errorAt(0, err.message);
            }
            return typeof cont === "function" ? cont(value) : void 0;
          };
        })(this));
      };
      env.createObserver = function(blockNames, text, cont) {
        throw new Error('LispyScript observers not implemented yet');
      };
      return env;
    };
    arrayify = function(val) {
      if (_.isArray(val)) {
        return val;
      } else {
        return [val];
      }
    };
    csEnv = function(env) {
      env.executeText = function(text, props, cont) {
        return setLounge(this, (function(_this) {
          return function() {
            var err, error, values;
            try {
              writeValues(env, values = arrayify(jsEval(env, CS.compile(text, {
                bare: true
              }))));
            } catch (error) {
              err = error;
              env.errorAt(0, err.message);
            }
            return typeof cont === "function" ? cont(values != null ? values : []) : void 0;
          };
        })(this));
      };
      env.executeBlock = function(block, props, cont) {
        return this.compileBlock(block)(cont);
      };
      env.compileBlock = function(block) {
        return (function(_this) {
          return function() {
            var args, cont, ctx, i, j, k, len, ref, ret, varMappings, varName, varNames, vars;
            cont = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            ref = blockVars(_this.data, block.codeAttributes["var"]), j = ref.length - 3, vars = ref[j++], varNames = ref[j++], varMappings = ref[j++];
            ctx = {};
            for (i = k = 0, len = varNames.length; k < len; i = ++k) {
              varName = varNames[i];
              if (args[i]) {
                ctx[varName] = args[i];
              }
            }
            ret = _this.runWith(ctx, _this.blockCode(blockSource(block), vars, varNames, varMappings));
            if (cont) {
              return cont(ret);
            } else {
              return ret;
            }
          };
        })(this);
      };
      env.blockCode = function(src, vars, varNames, varMappings, useReturn) {
        var blockVarStr, blocks, compiledCode, constName, constStr, consts, name, ref, returns, value, varName;
        vars = vars != null ? vars : {};
        varNames = varNames != null ? varNames : [];
        varMappings = varMappings != null ? varMappings : {};
        blocks = {};
        consts = {};
        for (name in vars) {
          value = vars[name];
          if (Number(value) === value || (ref = value[0], indexOf.call("'\"", ref) >= 0)) {
            consts[name] = value;
          } else {
            blocks[name] = value;
          }
        }
        constStr = ((function() {
          var results1;
          results1 = [];
          for (constName in consts) {
            value = consts[constName];
            results1.push("  if (" + constName + " == undefined) " + constName + " = " + value + ";\n");
          }
          return results1;
        })()).join('');
        blockVarStr = ((function() {
          var results1;
          results1 = [];
          for (varName in varMappings) {
            value = varMappings[varName];
            results1.push("  " + varName + " = this.ctx." + varName + " || this.data.getYaml(this.data.getBlockNamed('" + value + "'));\n");
          }
          return results1;
        })()).join('');
        if (false && this.silent) {
          compiledCode = CS.compile(src, {
            bare: true
          });
        } else {
          compiledCode = jsGatherResults(this, CS.compile(src, {
            bare: true
          }));
        }
        returns = env.silent ? '' : (useReturn ? 'return ' : '') + "typeof __cont != 'undefined' ? __cont(leisure_results) : leisure_results;";
        return "" + constStr + blockVarStr + "\n" + compiledCode + "\n" + returns;
      };
      return env;
    };
    indentCode = function(str) {
      return str.replace(/\n/g, '\n  ');
    };
    Html = (function() {
      function Html(content) {
        this.content = String(content);
      }

      return Html;

    })();
    html = function(content) {
      return new Html(content);
    };
    errorDiv = function(err, orgText) {
      return "<span class='error' contenteditable='false'><span class='hidden'>" + (orgText || '') + "</span><span data-nonorg='true'>" + (escapeHtml(err)) + "</span></span>";
    };
    replacements = {
      '<': '&lt;',
      '>': '&gt;',
      '&': '&amp;',
      '"': '&quot;',
      "'": '&#39;'
    };
    escapeHtml = function(str) {
      if (typeof str === 'string') {
        return str.replace(/[<>&'"]/g, function(c) {
          return replacements[c];
        });
      } else {
        return str;
      }
    };
    knownLanguages = {
      leisure: leisureEnv,
      javascript: jsEnv,
      js: jsEnv,
      lisp: lsEnv,
      cs: csEnv,
      coffee: csEnv,
      coffeescript: csEnv,
      text: textEnv,
      string: textEnv,
      yaml: yamlEnv
    };
    localEval = (function(html) {
      return function(x) {
        return eval(x);
      };
    })(html);
    languageEnvMaker = function(name) {
      return knownLanguages[name != null ? name.toLowerCase() : void 0];
    };
    blocksObserved = function(block) {
      var j, len, ob, ref, results1;
      ref = block.observing;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        ob = ref[j];
        if (ob.match(/^block\./)) {
          results1.push(ob.replace(/^block\./, ''));
        }
      }
      return results1;
    };
    blockVars = function(data, varDefs) {
      var bl, blockIds, blockNames, def, name, v, value, varMappings, varNames, vars;
      blockIds = {};
      blockNames = {};
      vars = {};
      varMappings = {};
      varNames = (function() {
        var j, k, len, ref, ref1, ref2, results1;
        if (varDefs) {
          ref = (_.isArray(varDefs) ? varDefs : [varDefs]);
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            v = ref[j];
            ref1 = v.match(/^([^=]*)(=(.*))?$/), k = ref1.length - 3, name = ref1[k++], def = ref1[k++], value = ref1[k++];
            name = name.trim();
            if (!def) {
              value = name;
            }
            if (ref2 = value[0], indexOf.call("'\"0123456789", ref2) >= 0) {
              value = JSON.parse(value);
            } else {
              varMappings[name] = value;
              if (bl = data.getBlockNamed(value)) {
                blockIds[bl._id] = true;
                value = data.getYaml(bl);
              }
              blockNames[name] = value;
            }
            vars[name] = value;
            results1.push(name);
          }
          return results1;
        }
      })();
      return [vars, _.keys(blockIds), blockNames, varNames != null ? varNames : [], varMappings];
    };
    escaped = {
      '\b': "\\b",
      '\f': "\\f",
      '\n': "\\n",
      '\r': "\\r",
      '\t': "\\t",
      '\v': "\\v",
      '\"': "\\\"",
      '\\': "\\\\"
    };
    unescaped = _.zipObject((function() {
      var results1;
      results1 = [];
      for (c in escaped) {
        e = escaped[c];
        results1.push([e, c]);
      }
      return results1;
    })());
    specials = /[\b\f\n\r\t\v\"\\]/g;
    slashed = /\\./g;
    escapeString = function(str) {
      return String(str).replace(specials, function(c) {
        return escaped[c];
      });
    };
    unescapeString = function(str) {
      return String(str).replace(slashed, function(c) {
        var ref;
        return (ref = unescaped[c]) != null ? ref : c[1];
      });
    };
    mergeExports({
      evalLeisure: evalLeisure,
      setLounge: setLounge
    });
    return {
      languageEnvMaker: languageEnvMaker,
      html: html,
      Html: Html,
      escapeHtml: escapeHtml,
      blockVars: blockVars,
      blocksObserved: blocksObserved,
      knownLanguages: knownLanguages,
      presentHtml: presentHtml,
      escapeString: escapeString,
      unescapeString: unescapeString,
      evalLeisure: evalLeisure,
      setLounge: setLounge,
      hasCodeAttribute: hasCodeAttribute,
      isYamlResult: isYamlResult
    };
  });

}).call(this);

//# sourceMappingURL=eval.js.map
