// Generated by CoffeeScript 2.4.1
(function() {
  /*
  Copyright (C) 2013, Bill Burdick: https://github.com/zot/Leisure

  (licensed with ZLIB license)

  This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
  claim that you wrote the original software. If you use this software
  in a product, an acknowledgment in the product documentation would be
  appreciated but is not required.

  2. Altered source versions must be plainly marked as such, and must not be
  misrepresented as being the original software.

  3. This notice may not be removed or altered from any source distribution.
  */
  'use strict';
  var files;

  if (typeof window !== "undefined" && window !== null) {
    window.global = window;
  }

  files = !(typeof window !== "undefined" && window !== null ? window : global).btoa ? ['btoa'] : [null];

  define(files, function(btoa) {
    var CodeContext, SimpyCons, addArgs, addDebugType, addSourceFile, addValue, argNames, baseLeisureCall, checkTraceLog, concat, contexts, debugFuncs, debugType, debugTypes, debuggingHooks, defaultDebugMode, defaultEnv, errors, flushTraceLog, funcInfo, genInfo, getDebugType, getTraceValues, i, installDebugFuncs, installDebuggingHooks, installNormalFuncs, isResolved, lambdaInfo, leisureCall, len1, nameForFunction, normalFuncs, primConsFrom, readDir, readFile, ref, ref1, root, rz, serverIncrement, setDebugMode, setDebugType, simpyCons, slice, sourceFile, sourceFiles, statFile, test, testCount, traceHandler, traceLen, traceMessageCount, traceValues, type, verboseMsg, writeFile;
    if (!btoa) {
      btoa = (typeof window !== "undefined" && window !== null ? window : global).btoa;
    }
    root = {};
    (typeof window !== "undefined" && window !== null ? window : global).verbose = {};
    (typeof window !== "undefined" && window !== null ? window : global).Leisure = (ref = (typeof window !== "undefined" && window !== null ? window : global).Leisure) != null ? ref : {};
    traceValues = [];
    traceLen = 100;
    traceHandler = function() {};
    lambdaInfo = {};
    debugType = 'core';
    // possible debug modes are 'none', 'tracking', and 'active'
    defaultDebugMode = 'tracking';
    debugTypes = {};
    traceMessageCount = 0;
    sourceFiles = {};
    normalFuncs = {};
    debugFuncs = {};
    root.currentNameSpace = 'core';
    root.nameSpacePath = ['core'];
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_generateDebuggingCode = true;
    //(window ? global).Leisure_generateDebuggingCode = false
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_traceContext = 0;
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_traceInstance = 0;
    addSourceFile = function(fileName, contents) {
      if (!sourceFiles[fileName]) {
        sourceFiles[fileName] = contents;
      }
      return fileName;
    };
    sourceFile = function(fileName) {
      if (sourceFiles[fileName]) {
        return Promise.resolve(sourceFiles[fileName]);
      } else {
        return $.ajax(new URL(fileName, location));
      }
    };
    addDebugType = function(type) {
      if (defaultDebugMode === 'none') {
        return root.noDebugging(traceLen, traceHandler, type);
      } else if (defaultDebugMode === 'active') {
        return root.useDebugging(traceLen, traceHandler, type);
      } else if (defaultDebugMode === 'tracking') {
        return root.trackDebugging(traceLen, traceHandler, type);
      }
    };
    argNames = function(func) {
      var arg, i, len1, ref1, results;
      ref1 = Function.prototype.toString.call(func).match(/\(([^)]*)\)/)[1].split(',');
      results = [];
      for (i = 0, len1 = ref1.length; i < len1; i++) {
        arg = ref1[i];
        results.push(arg.trim());
      }
      return results;
    };
    //#####
    // The trace API

    // Leisure_traceLazyValue{TYPE}(instanceId, context, id, parentInstanceId, value)
    //   Must return value

    // Leisure_traceResolve{TYPE}(instanceId, value)
    //   Must return value

    // Leisure_traceLambda{TYPE}(lambda)
    //   Must return lambda

    // Leisure_traceCall{TYPE}(lambda)

    // Leisure_traceCreatePartial{TYPE}(instanceId, lambda, args)

    // Leisure_traceCallPartial{TYPE}(instanceId, lambda, args)

    // Leisure_traceReturn{TYPE}(lambda, result)
    //   Must return result

    // Leisure_traceTopLevel{TYPE}(context)
    //   Must return context

    // Leisure_traceMessage{TYPE}(message)
    //   Must return the message count (traceMessageCount++)
    //#####
    contexts = {};
    debuggingHooks = {
      none: {
        traceTopLevel: function(context) {
          contexts[context.id] = context;
          return context;
        },
        traceLazyValue: function(instanceId, context, id, value) {
          return value;
        },
        traceResolve: function(instanceId, value) {
          return value;
        },
        traceLambda: function(lambda) {
          return lambda;
        },
        traceCall: function(lambda, args) {},
        traceReturn: function(lambda, result) {
          return result;
        },
        traceCreatePartial: function(instanceId, lambda, args) {},
        traceCallPartial: function(instanceId, lambda, args) {},
        traceMark: function() {
          return traceMarkCount++;
        }
      },
      active: {
        traceTopLevel: function(context) {
          contexts[context.id] = context;
          traceValues.push('context', context.id, context.source, context.inlineMap, context.externalMap, context.debugType, context.decls.length);
          traceValues.push.apply(traceValues, context.decls);
          checkTraceLog();
          return context;
        },
        traceLazyValue: function(instanceId, context, id, value) {
          traceValues.push('lazyValue', instanceId, context.id, id);
          checkTraceLog();
          return value;
        },
        traceResolve: function(instanceId, value) {
          traceValues.push('resolve', instanceId);
          addValue(value);
          checkTraceLog();
          return value;
        },
        traceLambda: function(lambda) {
          var ref1;
          traceValues.push('lambda', lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id, (ref1 = lambda.L$info.parent) != null ? ref1.id : void 0);
          checkTraceLog();
          return lambda;
        },
        traceCall: function(lambda, args) {
          traceValues.push('call', lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id);
          addArgs(args);
          return checkTraceLog();
        },
        traceReturn: function(lambda, result) {
          traceValues.push('return', lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id);
          addValue(result);
          checkTraceLog();
          return result;
        },
        traceCreatePartial: function(instanceId, lambda, args) {
          traceValues.push('createPartial', instanceId, lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id);
          addArgs(args);
          return checkTraceLog();
        },
        traceCallPartial: function(instanceId, lambda, args) {
          traceValues.push('callPartial', instanceId, lambda.L$instanceId, lambda.L$info.context.id, lambda.L$info.id);
          addArgs(args);
          return checkTraceLog();
        },
        traceMark: function() {
          var count;
          count = traceMarkCount++;
          traceValues.push('mark', count);
          checkTraceLog();
          return count;
        }
      }
    };
    debuggingHooks.tracking = {
      __proto__: debuggingHooks.none,
      traceTopLevel: debuggingHooks.active.traceTopLevel
    };
    installDebuggingHooks = function(mode, type) {
      var hook, name, ref1, results;
      ref1 = debuggingHooks[mode];
      results = [];
      for (name in ref1) {
        hook = ref1[name];
        results.push((typeof window !== "undefined" && window !== null ? window : global)[`Leisure_${name}${type}`] = hook);
      }
      return results;
    };
    setDebugMode = function(mode, types) {
      var i, len1, result, type;
      result = [];
      for (i = 0, len1 = types.length; i < len1; i++) {
        type = types[i];
        if (debugTypes[type] !== mode) {
          debugTypes[type] = mode;
          result.add(type);
        }
      }
      return result;
    };
    flushTraceLog = function() {
      var t;
      if (traceValues.length) {
        t = traceValues;
        traceValues = [];
        return traceHandler(t);
      }
    };
    installDebugFuncs = function(type) {
      var info, name, nm, ref1, results;
      if (!Leisure.Ast) {
        return;
      }
      results = [];
      for (name in debugFuncs[type]) {
        info = Leisure.Ast.functionInfo[name];
        nm = info.jsName;
        Leisure.Ast.installFunc(name, nm, info.mainDebugDef || info.mainDef);
        if ((ref1 = info.altList) != null ? ref1.length : void 0) {
          results.push(Leisure.Runtime.buildAdvisedFuncDef(name, nm, info, info.debugAlts, info.alts, info.mainDebugDef || info.mainDef));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    installNormalFuncs = function(type) {
      var info, name, nm, ref1, results;
      if (!Leisure.Ast) {
        return;
      }
      results = [];
      for (name in normalFuncs[type]) {
        info = Leisure.Ast.functionInfo[name];
        nm = info.jsName;
        Leisure.Ast.installFunc(name, nm, info.mainDef);
        if ((ref1 = info.altList) != null ? ref1.length : void 0) {
          results.push(Leisure.Runtime.buildAdvisedFuncDef(name, nm, info, info.alts, info.alts, info.mainDef));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    root.trackDebugging = function(len, handler, givenType) {
      var results, type;
      root.noDebugging(len, handler, givenType);
      if (!givenType) {
        defaultDebugMode = 'tracking';
      }
      if (handler) {
        traceLen = len;
        traceHandler = handler;
      }
      if (!givenType) {
        (typeof window !== "undefined" && window !== null ? window : global).Leisure_usingDebugging = true;
      }
      results = [];
      for (type in (givenType ? {
        [`${givenType}`]: true
      } : debugTypes)) {
        debugTypes[type] = 'tracking';
        results.push(installDebuggingHooks('tracking', type));
      }
      return results;
    };
    root.useDebugging = function(len, handler, givenType) {
      var results, type;
      flushTraceLog();
      if (!givenType) {
        defaultDebugMode = 'active';
      }
      if (handler) {
        traceLen = len;
        traceHandler = handler;
      }
      if (!givenType) {
        (typeof window !== "undefined" && window !== null ? window : global).Leisure_usingDebugging = true;
      }
      results = [];
      for (type in (givenType ? {
        [`${givenType}`]: true
      } : debugTypes)) {
        if (debugTypes[type] !== 'active') {
          installDebugFuncs(type);
          debugTypes[type] = 'active';
          results.push(installDebuggingHooks('active', type));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    root.noDebugging = function(len, handler, givenType) {
      var results, type;
      flushTraceLog();
      if (!givenType) {
        defaultDebugMode = 'none';
      }
      if (!givenType) {
        (typeof window !== "undefined" && window !== null ? window : global).Leisure_usingDebugging = false;
      }
      results = [];
      for (type in (givenType ? {
        [`${givenType}`]: true
      } : debugTypes)) {
        installNormalFuncs(type);
        debugTypes[type] = 'none';
        results.push(installDebuggingHooks('none', type));
      }
      return results;
    };
    ref1 = ['User', 'Std', 'Parser'];
    for (i = 0, len1 = ref1.length; i < len1; i++) {
      type = ref1[i];
      addDebugType(type);
    }
    checkTraceLog = function(args) {
      if (traceValues.length > traceLen) {
        return flushTraceLog();
      }
    };
    getTraceValues = function() {
      return traceValues;
    };
    addArgs = function(args) {
      var arg, j, len2;
      traceValues.push(args.length);
      for (j = 0, len2 = args.length; j < len2; j++) {
        arg = args[j];
        addValue(arg);
      }
      return traceValues;
    };
    nameForFunction = function(func) {
      var info, name;
      if (func.name) {
        return func.name;
      } else {
        info = func.L$info;
        while (info && !info.name) {
          info = info.parent;
        }
        name = (info != null ? info.name : void 0) || func.name || "unknown";
        if (info && info !== func.L$info) {
          name += `[${info.id}]`;
        }
        return name;
      }
    };
    addValue = function(value) {
      if (value.L$instanceId != null) {
        traceValues.push(value.L$instanceId);
      } else if (typeof value === 'function') {
        traceValues.push(`function: ${nameForFunction(value)}`);
      } else if (typeof value === 'number') {
        traceValues.push(-1, value);
      } else if (typeof value === 'object') {
        traceValues.push(`object: ${JSON.stringify(value)}`);
      } else {
        traceValues.push(value);
      }
      return traceValues;
    };
    //root.shouldNsLog = true
    root.shouldNsLog = false;
    root.nsLog = function(...args) {
      if (root.shouldNsLog) {
        return console.log(...args);
      }
    };
    Leisure.sourceFiles = sourceFiles;
    verboseMsg = function(label, ...msg) {
      if ((typeof window !== "undefined" && window !== null ? window : global).verbose[label]) {
        return console.log(...msg);
      }
    };
    if (btoa == null) {
      (typeof window !== "undefined" && window !== null ? window : global).btoa = require('btoa');
    }
    CodeContext = class CodeContext {
      eval(text) {
        return eval(text);
      }

      runWith(ctxSettings, func) {
        var old;
        old = this.ctx;
        try {
          this.ctx = ctxSettings;
          if (typeof func === 'string') {
            return this.eval(func);
          } else {
            return func.call(this);
          }
        } finally {
          this.ctx = old;
        }
      }

    };
    defaultEnv = {
      __proto__: CodeContext.prototype,
      presentValue: function(x) {
        return String(x);
      },
      write: function(v) {
        return console.log(v);
      },
      writeTraceMessage: function(count, msg) {
        return this.write(msg);
      },
      errorHandlers: [],
      prompt: function() {
        return null;
      },
      executeText: function() {
        return null;
      },
      executeBlock: function() {
        return null;
      },
      compileBlock: function() {
        return null;
      },
      userEvent: function() {}
    };
    rz = (typeof window !== "undefined" && window !== null ? window : global).resolve = function(value) {
      //if typeof value == 'function' && value.length == 0
      //  if typeof value.memo != 'undefined' then value.memo
      //  else
      //    if value.creationStack then value.creationStack = null
      //    if value.args then value.args = null
      //    value.memo = value()
      //else value
      if (typeof value === 'function') {
        if (typeof value.memo !== 'undefined') {
          return value.memo;
        } else if (value.length === 0) {
          //if value.creationStack then value.creationStack = null
          //if value.args then value.args = null
          return value.memo = value();
        } else {
          return value;
        }
      } else {
        return value;
      }
    };
    isResolved = function(value) {
      return typeof value !== 'function' || value.memo;
    };
    (typeof window !== "undefined" && window !== null ? window : global).lazy = function(l) {
      if (typeof l === 'function') {
        return l.memo = l;
      } else {
        return l;
      }
    };
    readFile = function(fileName, cont) {
      return defaultEnv.readFile(fileName, cont);
    };
    writeFile = function(fileName, data, cont) {
      return defaultEnv.writeFile(fileName, data, cont);
    };
    readDir = function(fileName, cont) {
      return defaultEnv.readDir(fileName, cont);
    };
    statFile = function(fileName, cont) {
      return defaultEnv.statFile(fileName, cont);
    };
    funcInfo = function(func) {
      var callInfo, info;
      if (func.leisureInfoNew) {
        return primConsFrom(func.leisureInfoNew, 0);
      } else if (func.leisureInfo) {
        (typeof window !== "undefined" && window !== null ? window : global).FUNC = func;
        info = [];
        callInfo = func.leisureInfo;
        while (callInfo) {
          info.push(resolve(callInfo.arg));
          if (callInfo.name) {
            info.push(callInfo.name);
            break;
          }
          callInfo = callInfo.parent;
        }
        return root.consFrom(info.reverse());
      } else {
        return rz(L_nil);
      }
    };
    primConsFrom = function(array, index) {
      if (index >= array.length) {
        return rz(L_nil);
      } else {
        return root.primCons(array[index], primConsFrom(array, index + 1));
      }
    };
    SimpyCons = class SimpyCons {
      constructor(head, tail) {
        this.head = head;
        this.tail = tail;
      }

      toArray() {
        var array, h, ref2;
        return (ref2 = this._array) != null ? ref2 : ((function() {
          h = this;
          array = [];
          while (h !== null) {
            array.push(h.head);
            h = h.tail;
          }
          return this._array = array;
        }).call(this));
      }

    };
    simpyCons = function(a, b) {
      return new SimpyCons(a, b);
    };
    slice = Array.prototype.slice;
    concat = Array.prototype.concat;
    (typeof window !== "undefined" && window !== null ? window : global).L$ = function(f) {
      f = rz(f);
      if (typeof f !== 'function' || f.length > 1) {
        return f;
      } else {
        return function(...args) {
          return baseLeisureCall(f, 0, args, f.length);
        };
      }
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_call = leisureCall = function(f) {
      return baseLeisureCall(f, 1, arguments);
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_primCall = baseLeisureCall = function(f, pos, args, len, traceCreate, traceCall) {
      var oldLen, partial, prev;
      len = len != null ? len : f.length;
      while (pos < args.length) {
        if (typeof f !== 'function') {
          throw new Error(`TypeError: ${typeof f} is not a function: ${f}`);
        }
        if (len <= args.length - pos) {
          oldLen = len;
          switch (len) {
            case 1:
              f = f(args[pos]);
              break;
            case 2:
              f = f(args[pos], args[pos + 1]);
              break;
            case 3:
              f = f(args[pos], args[pos + 1], args[pos + 2]);
              break;
            case 4:
              f = f(args[pos], args[pos + 1], args[pos + 2], args[pos + 3]);
              break;
            default:
              if (f.leisureInfo || (pos === 0 && len === args.length)) {
                return f.apply(null, (pos === 0 ? args : slice.call(args, pos)));
              }
              f = f.apply(null, slice.call(args, pos, pos + len));
          }
          if (len < args.length - pos) {
            len = f.length;
          }
          pos += oldLen;
        } else {
          prev = slice.call(args, pos);
          partial = function() {
            var newArgs;
            newArgs = concat.call(prev, slice.call(arguments));
            //traceCall? f, newArgs
            if (Leisure_generateDebuggingCode && traceCall) {
              traceCall(partial.L$instanceId, f, slice.call(arguments));
            }
            if (!f.apply) {
              console.log(`No apply! ${f} ${newArgs[0]}`);
            }
            if (newArgs.length === len) {
              return f.apply(null, newArgs);
            } else {
              return baseLeisureCall(f, 0, newArgs, len);
            }
          };
          partial.leisurePartial = true;
          partial.leisureInfo = genInfo(f, args, f.leisureInfo);
          if (Leisure_generateDebuggingCode && traceCreate) {
            partial.L$instanceId = ++Leisure_traceInstance;
            traceCreate(partial.L$instanceId, f, prev);
          }
          return lazy(partial);
        }
      }
      if (pos !== args.length) {
        console.log(`BAD FINAL POSITION IN LEISURE CALL, ARG LENGTH IS ${args.length} BUT POSITION IS ${pos}`);
      }
      return f;
    };
    genInfo = function(func, args, oldInfo) {
      var arg, j, len2, ref2;
      for (j = 0, len2 = args.length; j < len2; j++) {
        arg = args[j];
        if (!oldInfo) {
          oldInfo = {
            name: (ref2 = func.L$info) != null ? ref2.name : void 0,
            arg
          };
        } else {
          oldInfo = {
            arg: arg,
            parent: oldInfo
          };
        }
      }
      return oldInfo;
    };
    testCount = 0;
    errors = '';
    test = function(expected, actual) {
      if (JSON.stringify(expected) !== JSON.stringify(actual)) {
        if (errors.length) {
          errors += '\n';
        }
        errors += `TEST ${testCount} FAILED, EXPECTED ${JSON.stringify(expected)} BUT GOT ${JSON.stringify(actual)}`;
      }
      return testCount++;
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_test_call = function() {
      test([1, 2, 3], Leisure_call((function(a, b) {
        return function(c) {
          return [a, b, c];
        };
      }), 1, 2, 3));
      test([1, 2, 3], Leisure_call((function(a, b, c) {
        return [a, b, c];
      }), 1, 2, 3));
      test([1, 2, 3], Leisure_call((function(a) {
        return function(b, c) {
          return [a, b, c];
        };
      }), 1, 2, 3));
      test([1, 2, 3, 4], Leisure_call((function(a) {
        return function(b, c) {
          return function(d) {
            return [a, b, c, d];
          };
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b, c) {
        return function(d) {
          return [a, b, c, d];
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b) {
        return function(c) {
          return function(d) {
            return [a, b, c, d];
          };
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b) {
        return function(c, d) {
          return [a, b, c, d];
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b, c, d) {
        return [a, b, c, d];
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call(Leisure_call((function(a, b, c, d) {
        return [a, b, c, d];
      }), 1, 2), 3, 4));
      if (errors.length) {
        return errors;
      } else {
        return null;
      }
    };
    serverIncrement = function(path, amount, cont) {
      var block;
      block = root.getBlockNamed(path.split(/\./)[0]);
      if (block.origin !== root.currentDocument._name) {
        return root.storeBlock(block, function() {
          return serverIncrement(path, amount, cont);
        });
      }
      if (typeof path === 'function') {
        return cont("Error, no path given to serverIncrement");
      } else if (typeof amount === 'function') {
        return cont("Error, no amount given to serverIncrement");
      } else {
        return Meteor.call('incrementField', root.currentDocument.leisure.name, path, amount, cont);
      }
    };
    getDebugType = function() {
      return debugType;
    };
    setDebugType = function(t) {
      if (!debugFuncs[t]) {
        debugFuncs[t] = {};
      }
      return debugType = t;
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_addSourceFile = addSourceFile;
    Leisure.Base = root;
    Leisure.normalFuncs = normalFuncs;
    Leisure.debugFuncs = debugFuncs;
    root.normalFuncs = normalFuncs;
    root.debugFuncs = debugFuncs;
    root.serverIncrement = serverIncrement;
    root.defaultEnv = defaultEnv;
    root.readFile = readFile;
    root.readDir = readDir;
    root.writeFile = writeFile;
    root.statFile = statFile;
    root.SimpyCons = SimpyCons;
    root.simpyCons = simpyCons;
    root.resolve = resolve;
    root.lazy = lazy;
    root.verboseMsg = verboseMsg;
    root.maxInt = 9007199254740992;
    root.minInt = -root.maxInt;
    root.funcInfo = funcInfo;
    root.CodeContext = CodeContext;
    root.isResolved = isResolved;
    root.getTraceValues = getTraceValues;
    root.argNames = argNames;
    root.flushTraceLog = flushTraceLog;
    root.addDebugType = addDebugType;
    root.addSourceFile = addSourceFile;
    root.sourceFile = sourceFile;
    root.getDebugType = getDebugType;
    root.setDebugType = setDebugType;
    root.debugTypes = debugTypes;
    return root;
  });

}).call(this);

//# sourceMappingURL=base.js.map
