// Generated by CoffeeScript 1.10.0

/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
 */

(function() {
  'use strict';
  var files,
    slice1 = [].slice;

  if (typeof window !== "undefined" && window !== null) {
    window.global = window;
  }

  files = !(typeof window !== "undefined" && window !== null ? window : global).btoa ? ['btoa'] : [null];

  define(files, function(btoa) {
    var CodeContext, SimpyCons, addArgs, addDebugType, addSourceFile, addValue, argNames, baseLeisureCall, checkTraceLog, concat, debugTypes, defaultEnv, errors, flushTraceLog, funcInfo, genInfo, getTraceValues, i, isResolved, lambdaInfo, leisureCall, len1, primConsFrom, readDir, readFile, ref, ref1, root, rz, serverIncrement, simpyCons, slice, sourceFile, sourceFiles, statFile, test, testCount, traceHandler, traceLen, traceMessageCount, traceValues, type, verboseMsg, writeFile;
    if (!btoa) {
      btoa = (typeof window !== "undefined" && window !== null ? window : global).btoa;
    }
    root = {};
    traceValues = [];
    traceLen = 100;
    traceHandler = function() {};
    lambdaInfo = {};
    debugTypes = new Set();
    traceMessageCount = 0;
    sourceFiles = {};
    root.currentNameSpace = 'core';
    root.nameSpacePath = ['core'];
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_generateDebuggingCode = true;
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_traceContext = 0;
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_traceInstance = 0;
    addSourceFile = function(fileName, contents) {
      if (!sourceFiles[fileName]) {
        sourceFiles[fileName] = contents;
      }
      return fileName;
    };
    sourceFile = function(fileName) {
      if (sourceFiles[fileName]) {
        return Promise.resolve(sourceFiles[fileName]);
      } else {
        return $.ajax(new URL(fileName, location));
      }
    };
    addDebugType = function(type) {
      debugTypes.add(type);
      if ((typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCall" + type] == null) {
        return root.noDebugging(type);
      }
    };
    argNames = function(func) {
      var arg, i, len1, ref, results;
      ref = Function.prototype.toString.call(func).match(/\(([^)]*)\)/)[1].split(',');
      results = [];
      for (i = 0, len1 = ref.length; i < len1; i++) {
        arg = ref[i];
        results.push(arg.trim());
      }
      return results;
    };
    flushTraceLog = function() {
      if (traceValues.length) {
        return setTimeout((function() {
          traceHandler(traceValues);
          return traceValues.length = 0;
        }), 1);
      }
    };
    root.trackDebugging = function(len, handler, type) {
      flushTraceLog();
      root.noDebugging(type);
      if (len) {
        traceLen = len;
        traceHandler = handler;
      }
      return (type ? new Set([type]) : debugTypes).forEach(function(type) {
        return (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceTopLevel" + type] = function(context) {
          traceValues.push('context', context.id, context.source, context.inlineMap, context.externalMap, context.decls.length);
          traceValues.push.apply(traceValues, context.decls);
          checkTraceLog();
          return context;
        };
      });
    };
    root.useDebugging = function(len, handler, type) {
      flushTraceLog();
      if (len) {
        traceLen = len;
        traceHandler = handler;
      }
      if (!type) {
        (typeof window !== "undefined" && window !== null ? window : global).Leisure_usingDebugging = true;
      }
      return (type ? new Set([type]) : debugTypes).forEach(function(type) {
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceTopLevel" + type] = function(context) {
          traceValues.push('context', context.id, context.source, context.inlineMap, context.externalMap, context.decls.length);
          traceValues.push.apply(traceValues, context.decls);
          checkTraceLog();
          return context;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceLazyValue" + type] = function(instanceId, context, id, value) {
          traceValues.push('lazyValue', instanceId, context.id, id);
          checkTraceLog();
          return value;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceResolve" + type] = function(instanceId, value) {
          traceValues.push('resolve', instanceId);
          addValue(value);
          checkTraceLog();
          return value;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceLambda" + type] = function(lambda) {
          lambda.L$context = context;
          traceValues.push('lambda', lambda.L$instanceId, lambda.L$context.id, lambda.L$id);
          return checkTraceLog();
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCall" + type] = function() {
          var args, instanceId;
          instanceId = arguments[0], args = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
          traceValues.push('call', instanceId);
          addArgs(args);
          return checkTraceLog();
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceReturn" + type] = function(instanceId, result) {
          traceValues.push('return', instanceId);
          addValue(result);
          checkTraceLog();
          return result;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCreatePartial" + type] = function(instanceId, lambda, args) {
          traceValues.push('createPartial', instanceId, lambda.L$instanceId);
          addArgs(args);
          return checkTraceLog();
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCallPartial" + type] = function(instanceId, args) {
          traceValues.push('callPartial', instanceId);
          addArgs(args);
          return checkTraceLog();
        };
        return (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceMark" + type] = function() {
          var count;
          count = traceMarkCount++;
          traceValues.push('mark', count);
          checkTraceLog();
          return count;
        };
      });
    };
    root.noDebugging = function(type) {
      flushTraceLog();
      if (!type) {
        (typeof window !== "undefined" && window !== null ? window : global).Leisure_usingDebugging = false;
      }
      return (type ? new Set([type]) : debugTypes).forEach(function(type) {
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceTopLevel" + type] = function(context) {
          return context;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceLazyValue" + type] = function(instanceId, context, id, value) {
          return value;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceResolve" + type] = function(instanceId, value) {
          return value;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceLambda" + type] = function(lambda) {};
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCall" + type] = function() {
          var args, instanceId;
          instanceId = arguments[0], args = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceReturn" + type] = function(instanceId, result) {
          return result;
        };
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCreatePartial" + type] = function(instanceId, lambda, args) {};
        (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceCallPartial" + type] = function(instanceId, args) {};
        return (typeof window !== "undefined" && window !== null ? window : global)["Leisure_traceMark" + type] = function() {
          return traceMarkCount++;
        };
      });
    };
    ref = ['User', 'Std', 'Parser'];
    for (i = 0, len1 = ref.length; i < len1; i++) {
      type = ref[i];
      addDebugType(type);
    }
    checkTraceLog = function(args) {
      if (traceValues.length > traceLen) {
        return flushTraceLog();
      }
    };
    getTraceValues = function() {
      return traceValues;
    };
    addArgs = function(args) {
      var arg, j, len2;
      traceValues.push(args.length);
      for (j = 0, len2 = args.length; j < len2; j++) {
        arg = args[j];
        addValue(arg);
      }
      return traceValues;
    };
    addValue = function(value) {
      var ref1;
      if (value.L$instanceId != null) {
        traceValues.push(value.L$instanceId);
      } else if (typeof value === 'function') {
        traceValues.push("function: " + ((ref1 = value.leisureName) != null ? ref1 : value.name));
      } else if (typeof value === 'number') {
        traceValues.push(-1, value);
      } else if (typeof value === 'object') {
        traceValues.push("object: " + value);
      } else {
        traceValues.push(value);
      }
      return traceValues;
    };
    root.shouldNsLog = false;
    root.nsLog = function() {
      var args;
      args = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      if (root.shouldNsLog) {
        return console.log.apply(console, args);
      }
    };
    (typeof window !== "undefined" && window !== null ? window : global).verbose = {};
    (typeof window !== "undefined" && window !== null ? window : global).Leisure = (ref1 = (typeof window !== "undefined" && window !== null ? window : global).Leisure) != null ? ref1 : {};
    Leisure.sourceFiles = sourceFiles;
    verboseMsg = function() {
      var label, msg;
      label = arguments[0], msg = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
      if ((typeof window !== "undefined" && window !== null ? window : global).verbose[label]) {
        return console.log.apply(console, msg);
      }
    };
    if (btoa == null) {
      (typeof window !== "undefined" && window !== null ? window : global).btoa = require('btoa');
    }
    CodeContext = (function() {
      function CodeContext() {}

      CodeContext.prototype["eval"] = function(text) {
        return eval(text);
      };

      CodeContext.prototype.runWith = function(ctxSettings, func) {
        var old;
        old = this.ctx;
        try {
          this.ctx = ctxSettings;
          if (typeof func === 'string') {
            return this["eval"](func);
          } else {
            return func.call(this);
          }
        } finally {
          this.ctx = old;
        }
      };

      return CodeContext;

    })();
    defaultEnv = {
      __proto__: CodeContext.prototype,
      presentValue: function(x) {
        return String(x);
      },
      write: function(v) {
        return console.log(v);
      },
      writeTraceMessage: function(count, msg) {
        return this.write(msg);
      },
      errorHandlers: [],
      prompt: function() {
        return null;
      },
      executeText: function() {
        return null;
      },
      executeBlock: function() {
        return null;
      },
      compileBlock: function() {
        return null;
      },
      userEvent: function() {}
    };
    rz = (typeof window !== "undefined" && window !== null ? window : global).resolve = function(value) {
      if (typeof value === 'function') {
        if (typeof value.memo !== 'undefined') {
          return value.memo;
        } else if (value.length === 0) {
          return value.memo = value();
        } else {
          return value;
        }
      } else {
        return value;
      }
    };
    isResolved = function(value) {
      return typeof value !== 'function' || value.memo;
    };
    (typeof window !== "undefined" && window !== null ? window : global).lazy = function(l) {
      if (typeof l === 'function') {
        return l.memo = l;
      } else {
        return l;
      }
    };
    readFile = function(fileName, cont) {
      return defaultEnv.readFile(fileName, cont);
    };
    writeFile = function(fileName, data, cont) {
      return defaultEnv.writeFile(fileName, data, cont);
    };
    readDir = function(fileName, cont) {
      return defaultEnv.readDir(fileName, cont);
    };
    statFile = function(fileName, cont) {
      return defaultEnv.statFile(fileName, cont);
    };
    funcInfo = function(func) {
      var callInfo, info;
      if (func.leisureInfoNew) {
        return primConsFrom(func.leisureInfoNew, 0);
      } else if (func.leisureInfo) {
        (typeof window !== "undefined" && window !== null ? window : global).FUNC = func;
        info = [];
        callInfo = func.leisureInfo;
        while (callInfo) {
          info.push(resolve(callInfo.arg));
          if (callInfo.name) {
            info.push(callInfo.name);
            break;
          }
          callInfo = callInfo.parent;
        }
        return root.consFrom(info.reverse());
      } else {
        return rz(L_nil);
      }
    };
    primConsFrom = function(array, index) {
      if (index >= array.length) {
        return rz(L_nil);
      } else {
        return root.primCons(array[index], primConsFrom(array, index + 1));
      }
    };
    SimpyCons = (function() {
      function SimpyCons(head, tail) {
        this.head = head;
        this.tail = tail;
      }

      SimpyCons.prototype.toArray = function() {
        var array, h, ref2;
        return (ref2 = this._array) != null ? ref2 : ((function() {
          h = this;
          array = [];
          while (h !== null) {
            array.push(h.head);
            h = h.tail;
          }
          return this._array = array;
        }).call(this));
      };

      return SimpyCons;

    })();
    simpyCons = function(a, b) {
      return new SimpyCons(a, b);
    };
    slice = Array.prototype.slice;
    concat = Array.prototype.concat;
    (typeof window !== "undefined" && window !== null ? window : global).L$ = function(f) {
      f = rz(f);
      if (typeof f !== 'function' || f.length > 1) {
        return f;
      } else {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
          return baseLeisureCall(f, 0, args, f.length);
        };
      }
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_call = leisureCall = function(f) {
      return baseLeisureCall(f, 1, arguments);
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_primCall = baseLeisureCall = function(f, pos, args, len, traceCreate, traceCall) {
      var oldLen, partial, prev;
      len = len != null ? len : f.length;
      while (pos < args.length) {
        if (typeof f !== 'function') {
          throw new Error("TypeError: " + (typeof f) + " is not a function: " + f);
        }
        if (len <= args.length - pos) {
          oldLen = len;
          switch (len) {
            case 1:
              f = f(args[pos]);
              break;
            case 2:
              f = f(args[pos], args[pos + 1]);
              break;
            case 3:
              f = f(args[pos], args[pos + 1], args[pos + 2]);
              break;
            case 4:
              f = f(args[pos], args[pos + 1], args[pos + 2], args[pos + 3]);
              break;
            default:
              if (f.leisureInfo || (pos === 0 && len === args.length)) {
                return f.apply(null, (pos === 0 ? args : slice.call(args, pos)));
              }
              f = f.apply(null, slice.call(args, pos, pos + len));
          }
          if (len < args.length - pos) {
            len = f.length;
          }
          pos += oldLen;
        } else {
          prev = slice.call(args, pos);
          partial = function() {
            var newArgs;
            newArgs = concat.call(prev, slice.call(arguments));
            if (Leisure_generateDebuggingCode && traceCall) {
              traceCall(partial.L$instanceId, f, slice.call(arguments));
            }
            if (!f.apply) {
              console.log("No apply! " + f + " " + newArgs[0]);
            }
            if (newArgs.length === len) {
              return f.apply(null, newArgs);
            } else {
              return baseLeisureCall(f, 0, newArgs, len);
            }
          };
          partial.leisurePartial = true;
          partial.leisureInfo = genInfo(f, args, f.leisureInfo);
          if (Leisure_generateDebuggingCode && traceCreate) {
            partial.L$instanceId = ++Leisure_traceInstance;
            traceCreate(partial.L$instanceId, f, prev);
          }
          return lazy(partial);
        }
      }
      if (pos !== args.length) {
        console.log("BAD FINAL POSITION IN LEISURE CALL, ARG LENGTH IS " + args.length + " BUT POSITION IS " + pos);
      }
      return f;
    };
    genInfo = function(func, args, oldInfo) {
      var arg, j, len2;
      for (j = 0, len2 = args.length; j < len2; j++) {
        arg = args[j];
        if (!oldInfo) {
          oldInfo = {
            name: func.leisureName,
            arg: arg
          };
        } else {
          oldInfo = {
            arg: arg,
            parent: oldInfo
          };
        }
      }
      return oldInfo;
    };
    testCount = 0;
    errors = '';
    test = function(expected, actual) {
      if (JSON.stringify(expected) !== JSON.stringify(actual)) {
        if (errors.length) {
          errors += '\n';
        }
        errors += "TEST " + testCount + " FAILED, EXPECTED " + (JSON.stringify(expected)) + " BUT GOT " + (JSON.stringify(actual));
      }
      return testCount++;
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_test_call = function() {
      test([1, 2, 3], Leisure_call((function(a, b) {
        return function(c) {
          return [a, b, c];
        };
      }), 1, 2, 3));
      test([1, 2, 3], Leisure_call((function(a, b, c) {
        return [a, b, c];
      }), 1, 2, 3));
      test([1, 2, 3], Leisure_call((function(a) {
        return function(b, c) {
          return [a, b, c];
        };
      }), 1, 2, 3));
      test([1, 2, 3, 4], Leisure_call((function(a) {
        return function(b, c) {
          return function(d) {
            return [a, b, c, d];
          };
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b, c) {
        return function(d) {
          return [a, b, c, d];
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b) {
        return function(c) {
          return function(d) {
            return [a, b, c, d];
          };
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b) {
        return function(c, d) {
          return [a, b, c, d];
        };
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call((function(a, b, c, d) {
        return [a, b, c, d];
      }), 1, 2, 3, 4));
      test([1, 2, 3, 4], Leisure_call(Leisure_call((function(a, b, c, d) {
        return [a, b, c, d];
      }), 1, 2), 3, 4));
      if (errors.length) {
        return errors;
      } else {
        return null;
      }
    };
    serverIncrement = function(path, amount, cont) {
      var block;
      block = root.getBlockNamed(path.split(/\./)[0]);
      if (block.origin !== root.currentDocument._name) {
        return root.storeBlock(block, function() {
          return serverIncrement(path, amount, cont);
        });
      }
      if (typeof path === 'function') {
        return cont("Error, no path given to serverIncrement");
      } else if (typeof amount === 'function') {
        return cont("Error, no amount given to serverIncrement");
      } else {
        return Meteor.call('incrementField', root.currentDocument.leisure.name, path, amount, cont);
      }
    };
    (typeof window !== "undefined" && window !== null ? window : global).Leisure_addSourceFile = addSourceFile;
    Leisure.Base = root;
    root.serverIncrement = serverIncrement;
    root.defaultEnv = defaultEnv;
    root.readFile = readFile;
    root.readDir = readDir;
    root.writeFile = writeFile;
    root.statFile = statFile;
    root.SimpyCons = SimpyCons;
    root.simpyCons = simpyCons;
    root.resolve = resolve;
    root.lazy = lazy;
    root.verboseMsg = verboseMsg;
    root.maxInt = 9007199254740992;
    root.minInt = -root.maxInt;
    root.funcInfo = funcInfo;
    root.CodeContext = CodeContext;
    root.isResolved = isResolved;
    root.getTraceValues = getTraceValues;
    root.argNames = argNames;
    root.flushTraceLog = flushTraceLog;
    root.addDebugType = addDebugType;
    root.addSourceFile = addSourceFile;
    root.sourceFile = sourceFile;
    return root;
  });

}).call(this);

//# sourceMappingURL=base.js.map
