// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice1 = [].slice;

  define(['./base', './org', './docOrg', './ast', './eval', './leisure-support', './editor', 'lib/lodash.min', 'jquery', './ui', './db', 'handlebars', './export', './lib/prism', './advice', 'lib/js-yaml', 'lib/bluebird.min', 'immutable', './lib/fingertree'], function(Base, Org, DocOrg, Ast, Eval, LeisureSupport, Editor, _, $, UI, DB, Handlebars, BrowserExports, Prism, Advice, Yaml, Bluebird, Immutable, FingerTree) {
    var DataStore, DataStoreEditingOptions, EditorParsedCodeBlock, Fragment, Headline, Html, LeisureEditCore, Map, NMap, Nil, OrgData, OrgEditing, ParsedCodeBlock, Promise, Set, actualSelectionUpdate, addChange, addController, addView, afterMethod, ajaxGet, basicDataFilter, beforeMethod, blockCodeItems, blockElementId, blockEnvMaker, blockIsHidden, blockOrg, blockSource, blockText, blockVars, blockViewType, blocksObserved, breakpoint, bubbleLeftOffset, bubbleTopOffset, changeAdvice, compareSorted, configureMenu, controllerEval, copy, copyBlock, createBlockEnv, createLocalData, defaultEnv, deleteStore, displayError, docBlockOrg, documentParams, dump, editorForToolbar, editorToolbar, escapeAttr, escapeHtml, findEditor, followLink, getCodeItems, getDocumentParams, getId, greduce, hasCodeAttribute, hasDatabase, headlineRE, initializePendingViews, installSelectionMenu, isContentEditable, isControl, isCss, isDynamic, isObserver, isPrefix, isText, isYamlResult, keySplitPat, languageEnvMaker, last, localDb, localStore, localStoreName, mergeContext, mergeExports, monitorSelectionChange, orgDoc, parseOrgMode, posFor, postCallPat, presentHtml, preserveSelection, removeController, removeView, renderView, replaceResult, replacementFor, safeLoad, selectionActive, selectionMenu, setError, setLounge, setResult, showHide, toolbarFor, transaction, trickyChange, updateSelection, withContext;
    defaultEnv = Base.defaultEnv;
    parseOrgMode = Org.parseOrgMode, Fragment = Org.Fragment, Headline = Org.Headline, headlineRE = Org.headlineRE;
    orgDoc = DocOrg.orgDoc, getCodeItems = DocOrg.getCodeItems, blockSource = DocOrg.blockSource, docBlockOrg = DocOrg.blockOrg, ParsedCodeBlock = DocOrg.ParsedCodeBlock;
    Nil = Ast.Nil;
    languageEnvMaker = Eval.languageEnvMaker, Html = Eval.Html, presentHtml = Eval.presentHtml, setLounge = Eval.setLounge, blockVars = Eval.blockVars, blocksObserved = Eval.blocksObserved, hasCodeAttribute = Eval.hasCodeAttribute, isYamlResult = Eval.isYamlResult;
    LeisureEditCore = Editor.LeisureEditCore, last = Editor.last, DataStore = Editor.DataStore, DataStoreEditingOptions = Editor.DataStoreEditingOptions, blockText = Editor.blockText, posFor = Editor.posFor, escapeHtml = Editor.escapeHtml, copy = Editor.copy, findEditor = Editor.findEditor, copyBlock = Editor.copyBlock, preserveSelection = Editor.preserveSelection;
    changeAdvice = Advice.changeAdvice, afterMethod = Advice.afterMethod, beforeMethod = Advice.beforeMethod;
    addView = UI.addView, removeView = UI.removeView, renderView = UI.renderView, addController = UI.addController, removeController = UI.removeController, withContext = UI.withContext, mergeContext = UI.mergeContext, initializePendingViews = UI.initializePendingViews, escapeAttr = UI.escapeAttr;
    hasDatabase = DB.hasDatabase, transaction = DB.transaction;
    mergeExports = BrowserExports.mergeExports;
    safeLoad = Yaml.safeLoad, dump = Yaml.dump;
    Map = Immutable.Map, Set = Immutable.Set;
    Promise = Bluebird.Promise;
    selectionActive = true;
    headlineRE = /^(\*+ *)(.*)(\n)$/;
    documentParams = null;
    localStoreName = 'leisureStorage';
    localDb = null;
    localStore = null;
    deleteStore = false;
    bubbleTopOffset = -5;
    bubbleLeftOffset = 0;
    keySplitPat = new RegExp(' +');
    postCallPat = /^([^(]*)\((.*)\)/;
    blockOrg = function(data, blockOrText) {
      var ref;
      return docBlockOrg((ref = (typeof blockOrText === 'string' ? data.getBlock(blockOrText) : void 0)) != null ? ref : blockOrText);
    };
    OrgData = (function(superClass) {
      extend(OrgData, superClass);

      function OrgData() {
        DataStore.apply(this, arguments);
        this.disableObservation = true;
        this.pendingObserves = {};
        this.running = {};
        this.observers = new NMap();
        this.filters = [];
        this.initializeLocalData();
        this.pendingEvals = [];
        this.importPromise = Promise.resolve();
      }

      OrgData.prototype.change = function(changes) {
        var ch;
        ch = this.makeChange(changes);
        return this.trigger('change', ch);
      };

      OrgData.prototype.allowObservation = function(func) {
        var old;
        old = this.disableObservation;
        this.disableObservation = false;
        func();
        return this.disableObservation = old;
      };

      OrgData.prototype.addImported = function(importFile, type, name) {
        if (typeof importFile === 'string') {
          if (this.importRecords[type][name]) {
            this.importRecords[type][name].push(importFile);
            return console.log("Warning, conflicting block of type: " + type + " imported from " + this.importRecords[type][name]);
          } else {
            return this.importRecords[type][name] = [importFile];
          }
        } else {
          return typeof importFile === 'boolean';
        }
      };

      OrgData.prototype.initializeLocalData = function() {
        this.namedBlocks = {};
        this.localBlocks = {};
        this.indexes = FingerTree.fromArray([], {
          identity: function() {
            return [];
          },
          measure: function(v) {
            return v.key;
          },
          sum: function(a, b) {
            if (compareSorted(a, b) < 1) {
              return b;
            } else {
              return a;
            }
          }
        });
        this.imported = {
          css: {},
          view: {},
          control: {},
          data: {}
        };
        this.importedData = {};
        this.importRecords = {
          data: {},
          view: {},
          controller: {},
          importedFiles: {}
        };
        this.tangles = {};
        return transaction(this.localDocumentId()).getAll().then((function(_this) {
          return function(allData) {
            var deletes, j, len, name, results1;
            _this.localBlocks = _.keyBy(allData, '_id');
            deletes = [];
            for (name in _this.localBlocks) {
              if (!_this.namedBlocks[name] || !(_this.getBlockNamed(name)).local) {
                deletes.push(name);
              }
            }
            results1 = [];
            for (j = 0, len = deletes.length; j < len; j++) {
              name = deletes[j];
              results1.push(_this.deleteLocalBlock(name));
            }
            return results1;
          };
        })(this));
      };

      OrgData.prototype.replaceText = function(repl) {
        OrgData.__super__.replaceText.call(this, repl);
        this.runTextFilters(repl);
        return this.scheduleEvals();
      };

      OrgData.prototype.makeChanges = function(func) {
        var filter, j, l, len, len1, newChange, ref, ref1;
        if (newChange = !this.changeCount) {
          ref = this.filters;
          for (j = 0, len = ref.length; j < len; j++) {
            filter = ref[j];
            filter.startChange(this);
          }
        }
        try {
          return OrgData.__super__.makeChanges.call(this, func);
        } finally {
          if (newChange) {
            ref1 = this.filters;
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              filter = ref1[l];
              filter.endChange(this);
            }
          }
        }
      };

      OrgData.prototype.getImage = function(name, cont, fail) {
        return this.getFile(name, (function(contents) {
          var blob, byteArrays, i, offset, slice;
          byteArrays = (function() {
            var j, ref, results1;
            results1 = [];
            for (offset = j = 0, ref = contents.length; j < ref; offset = j += 512) {
              slice = contents.slice(offset, offset + 512);
              results1.push(new Uint8Array((function() {
                var l, results2;
                results2 = [];
                for (i = l = 0; l < 512; i = ++l) {
                  results2.push(slice.charCodeAt(i));
                }
                return results2;
              })()));
            }
            return results1;
          })();
          blob = new Blob(byteArrays, {
            type: 'image/png'
          });
          return cont(URL.createObjectURL(blob));
        }), fail);
      };

      OrgData.prototype.getBlock = function(thing, changes) {
        var ref, ref1;
        if (typeof thing === 'object') {
          return thing;
        } else {
          return (ref = (ref1 = changes != null ? changes.sets[thing] : void 0) != null ? ref1 : OrgData.__super__.getBlock.call(this, thing)) != null ? ref : this.imported.data[thing];
        }
      };

      OrgData.prototype.changesFor = function(first, oldBlocks, newBlocks) {
        var changes;
        changes = OrgData.__super__.changesFor.call(this, first, oldBlocks, newBlocks);
        this.linkAllSiblings(changes);
        return changes;
      };

      OrgData.prototype.load = function(name, text, context) {
        this.loadName = name;
        return this.makeChanges((function(_this) {
          return function() {
            var block, changes, filter, id, j, len, newBlocks, ref, ref1, ref2, replacement;
            replacement = context != null ? context : {
              start: 0,
              end: _this.getLength(),
              text: text,
              source: 'load'
            };
            _this.initializeLocalData();
            _this.loading = true;
            _this.tangles = {};
            _this.suppressTriggers(function() {
              return OrgData.__super__.load.call(_this, name, text);
            });
            ref = _this.filters;
            for (j = 0, len = ref.length; j < len; j++) {
              filter = ref[j];
              filter.clear(_this);
            }
            newBlocks = _this.blockList();
            if (!changes) {
              changes = {
                sets: _this.blocks,
                oldBlocks: [],
                newBlocks: newBlocks,
                first: _this.first
              };
            }
            _this.linkAllSiblings(changes);
            ref1 = changes.sets;
            for (id in ref1) {
              block = ref1[id];
              _this.checkImports(block);
            }
            _this.runTextFilters(context);
            ref2 = changes.sets;
            for (id in ref2) {
              block = ref2[id];
              _this.runFilters(null, block, context);
              _this.checkChange(null, block);
            }
            _this.scheduleEvals().then(function() {
              return _this.trigger('load');
            });
            return _this.loading = false;
          };
        })(this));
      };

      OrgData.prototype.setBlock = function(id, block) {
        return this.makeChanges((function(_this) {
          return function() {
            _this.runFilters(_this.getBlock(id), block);
            return OrgData.__super__.setBlock.call(_this, id, block);
          };
        })(this));
      };

      OrgData.prototype.contextForBlock = function(id, context) {
        var start;
        if (start = this.offsetForBlock(id)) {
          context.start = start;
          context.end = start + this.getBlock(id).text.length;
          return context;
        }
      };

      OrgData.prototype.deleteBlock = function(id) {
        return this.makeChanges((function(_this) {
          return function() {
            _this.runFilters(_this.getBlock(id), null);
            return OrgData.__super__.deleteBlock.call(_this, id);
          };
        })(this));
      };

      OrgData.prototype.addFilter = function(filter) {
        return this.filters.push(filter);
      };

      OrgData.prototype.removeFilter = function(filter) {
        return _.remove(this.filters, function(i) {
          return i === filter;
        });
      };

      OrgData.prototype.runFilters = function(oldBlock, newBlock, context) {
        var filter, j, len, ref, results1;
        ref = this.filters;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          filter = ref[j];
          results1.push(filter.replaceBlock(this, oldBlock, newBlock, context));
        }
        return results1;
      };

      OrgData.prototype.runTextFilters = function(context) {
        var filter, j, len, ref, results1;
        if (context) {
          ref = this.filters;
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            filter = ref[j];
            results1.push(typeof filter.replaceText === "function" ? filter.replaceText(this, context) : void 0);
          }
          return results1;
        }
      };

      OrgData.prototype.parseBlocks = function(text) {
        if (text === '') {
          return [];
        } else {
          return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
        }
      };

      OrgData.prototype.nextSibling = function(thing, changes) {
        var ref;
        return this.getBlock((ref = this.getBlock(thing, changes)) != null ? ref.nextSibling : void 0, changes);
      };

      OrgData.prototype.previousSibling = function(thing, changes) {
        return this.getBlock(this.getBlock(thing, changes).previousSibling, changes);
      };

      OrgData.prototype.reducePreviousSiblings = function(thing, changes, func, arg) {
        return greduce(this.getBlock(thing, changes), changes, func, arg, (function(_this) {
          return function(b) {
            return _this.getBlock(b.previousSibling, changes);
          };
        })(this));
      };

      OrgData.prototype.reduceNextSiblings = function(thing, changes, func, arg) {
        return greduce(this.getBlock(thing, changes), changes, func, arg, (function(_this) {
          return function(b) {
            return _this.getBlock(b.nextSibling, changes);
          };
        })(this));
      };

      OrgData.prototype.lastSibling = function(thing, changes) {
        return this.reduceNextSiblings(thing, changes, (function(x, y) {
          return y;
        }), null);
      };

      OrgData.prototype.firstSibling = function(thing, changes) {
        return this.reducePreviousSiblings(thing, changes, (function(x, y) {
          return y;
        }), null);
      };

      OrgData.prototype.parent = function(thing, changes) {
        var ref;
        return this.getBlock((ref = this.firstSibling(thing, changes)) != null ? ref.prev : void 0, changes);
      };

      OrgData.prototype.firstChild = function(thing, changes) {
        var block, n;
        if ((block = this.getBlock(thing, changes)) && (n = this.getBlock(block.next, changes)) && !n.previousSibling) {
          return n;
        }
      };

      OrgData.prototype.lastChild = function(thing, changes) {
        return this.lastSibling(this.firstChild(thing, changes), changes);
      };

      OrgData.prototype.children = function(thing, changes) {
        var c;
        c = [];
        this.reduceNextSiblings(this.firstChild(thing, changes), changes, (function(x, y) {
          return c.push(y);
        }), null);
        return c;
      };

      OrgData.prototype.nextRight = function(thing, changes) {
        var sib;
        while (thing) {
          if (sib = this.nextSibling(thing, changes)) {
            return sib;
          }
          thing = this.parent(thing, changes);
        }
        return null;
      };

      OrgData.prototype.linkAllSiblings = function(changes) {
        var block, cur, emptyNexts, id, parent, ref, results1, sibling, stack;
        stack = [];
        parent = null;
        sibling = null;
        emptyNexts = {};
        cur = this.getBlock(changes.first, changes);
        while (cur) {
          if (cur.nextSibling) {
            emptyNexts[cur._id] = cur;
          }
          if (cur.type === 'headline') {
            while (parent && cur.level <= parent.level) {
              ref = stack.pop(), parent = ref[0], sibling = ref[1];
            }
          } else if (cur.type === 'chunk' && (cur.properties != null) && parent && !_(parent.propertiesBlocks).includes(cur._id)) {
            if (!parent.propertiesBlocks) {
              parent.propertiesBlocks = [];
            }
            parent.propertiesBlocks.push(cur._id);
          }
          if (sibling) {
            delete emptyNexts[sibling._id];
            if (sibling.nextSibling !== cur._id) {
              addChange(sibling, changes).nextSibling = cur._id;
            }
            if (cur.previousSibling !== sibling._id) {
              addChange(cur, changes).previousSibling = sibling._id;
            }
          } else if (cur.previousSibling) {
            delete addChange(cur, changes).previousSibling;
          }
          sibling = cur;
          if (cur.type === 'headline') {
            stack.push([parent, sibling]);
            parent = cur;
            sibling = null;
          }
          cur = this.getBlock(cur.next, changes);
        }
        results1 = [];
        for (id in emptyNexts) {
          block = emptyNexts[id];
          results1.push(delete addChange(block, changes).nextSibling);
        }
        return results1;
      };

      OrgData.prototype.makeChange = function(changes) {
        var block, id, ref, ref1;
        ref = changes.sets;
        for (id in ref) {
          block = ref[id];
          this.checkImports(block);
        }
        ref1 = this.removesAndSets(changes);
        for (id in ref1) {
          block = ref1[id];
          this.checkChange(this.getBlock(id), block != null ? block : null);
        }
        return OrgData.__super__.makeChange.call(this, changes);
      };

      OrgData.prototype.removesAndSets = function(arg1) {
        var block, blocks, id, removes, sets;
        sets = arg1.sets, removes = arg1.removes;
        blocks = {};
        for (id in removes) {
          blocks[id] = false;
        }
        for (id in sets) {
          block = sets[id];
          blocks[id] = block;
        }
        return blocks;
      };

      OrgData.prototype.processDefaults = function(lorgText) {
        var block, id, j, len, viewBlocks;
        viewBlocks = orgDoc(parseOrgMode(lorgText.replace(/\r\n?/g, '\n')));
        id = 0;
        for (j = 0, len = viewBlocks.length; j < len; j++) {
          block = viewBlocks[j];
          block._id = "default-" + (id++);
          this.checkChange(null, block, true);
        }
        return this.scheduleEvals();
      };

      OrgData.prototype.checkChange = function(oldBlock, newBlock, isDefault) {
        this.checkIndexChange(oldBlock, newBlock, isDefault);
        this.checkPropChange(oldBlock, newBlock, isDefault);
        this.checkCssChange(oldBlock, newBlock, isDefault);
        this.checkCodeChange(oldBlock, newBlock, isDefault);
        this.checkChannelChange(oldBlock, newBlock);
        this.checkViewChange(oldBlock, newBlock, isDefault);
        return this.checkControlChange(oldBlock, newBlock, isDefault);
      };

      OrgData.prototype.checkIndexChange = function(oldBlock, newBlock, isDefault) {
        var index, j, k, key, l, len, len1, ref, ref1, ref2, ref3, ref4, results1, v, yaml;
        if (newBlock) {
          if ((index = (ref = newBlock.codeAttributes) != null ? ref.index : void 0) && (yaml = this.getYaml(newBlock))) {
            newBlock.keys = ((function() {
              var j, len, ref1, results1;
              ref1 = (function() {
                var l, len, ref1, results2;
                ref1 = index.split(',');
                results2 = [];
                for (l = 0, len = ref1.length; l < len; l++) {
                  k = ref1[l];
                  results2.push(k.trim().split(keySplitPat));
                }
                return results2;
              })();
              results1 = [];
              for (j = 0, len = ref1.length; j < len; j++) {
                key = ref1[j];
                if (v = yaml[_.last(key).trim()]) {
                  results1.push([key[0].trim(), v, newBlock._id]);
                }
              }
              return results1;
            })()).sort(compareSorted);
          } else {
            delete newBlock.keys;
          }
        }
        if (!((oldBlock != null ? oldBlock.keys : void 0) && newBlock.keys && _.isEqual(newBlock.keys, oldBlock.keys))) {
          if (oldBlock != null ? oldBlock.keys : void 0) {
            k = (ref1 = newBlock != null ? newBlock.keys : void 0) != null ? ref1 : [];
            ref2 = oldBlock.keys;
            for (j = 0, len = ref2.length; j < len; j++) {
              key = ref2[j];
              if (!(indexOf.call(k, key) >= 0)) {
                this.deleteBlockKey({
                  id: oldBlock._id,
                  key: key
                });
              }
            }
          }
          if (newBlock.keys) {
            k = (ref3 = oldBlock != null ? oldBlock.keys : void 0) != null ? ref3 : [];
            ref4 = newBlock.keys;
            results1 = [];
            for (l = 0, len1 = ref4.length; l < len1; l++) {
              key = ref4[l];
              if (!(indexOf.call(k, key) >= 0)) {
                results1.push(this.addBlockKey({
                  id: newBlock._id,
                  key: key
                }));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }
        }
      };

      OrgData.prototype.addBlockKey = function(k) {
        var first, ref, rest;
        ref = this.indexes.split(function(m) {
          return m >= k.key;
        }), first = ref[0], rest = ref[1];
        return this.indexes = first.concat(rest.addFirst(k));
      };

      OrgData.prototype.deleteBlockKey = function(k) {
        var first, found, r, ref, rest;
        ref = this.indexes.split(function(m) {
          return m === k.key;
        }), first = ref[0], rest = ref[1];
        r = rest;
        while (!r.isEmpty() && (found = r.peekFirst() && found.key === k.key && found.id === k.id)) {
          r = r.removeFirst();
        }
        if (r !== rest) {
          return this.indexes = first.concat(rest);
        }
      };

      OrgData.prototype.find = function(index, key) {
        var first, k, ref, rest, result;
        k = [index];
        result = [];
        if (key) {
          k.push(key);
        }
        ref = this.indexes.split(function(m) {
          return compareSorted(k, m) < 1;
        }), first = ref[0], rest = ref[1];
        while (!rest.isEmpty() && isPrefix(k, rest.peekFirst().key)) {
          result.push(rest.peekFirst().id);
          rest = rest.removeFirst();
        }
        return result;
      };

      OrgData.prototype.queueEval = function(func) {
        return this.pendingEvals.push(func);
      };

      OrgData.prototype.runOnImport = function(func) {
        var p;
        return this.importPromise = this.importPromise.isResolved() ? (p = func(), p instanceof Promise ? p : Promise.resolve()) : this.importPromise.then((function(_this) {
          return function() {
            return func();
          };
        })(this));
      };

      OrgData.prototype.scheduleEvals = function() {
        return this.runOnImport((function(_this) {
          return function() {
            var code, e, entry, func, j, lang, len, oldOpts, opts, p, promises;
            promises = (function() {
              var ref, results1;
              ref = this.tangles;
              results1 = [];
              for (lang in ref) {
                entry = ref[lang];
                opts = entry[0], code = entry[1];
                oldOpts = defaultEnv.opts;
                defaultEnv.opts = opts;
                p = new Promise((function(_this) {
                  return function(resolve, reject) {
                    return _this.executeText(lang, code, function(x) {
                      return resolve(x);
                    });
                  };
                })(this));
                defaultEnv.opts = oldOpts;
                results1.push(p);
              }
              return results1;
            }).call(_this);
            _this.tangles = {};
            e = _this.pendingEvals;
            _this.pendingEvals = [];
            for (j = 0, len = e.length; j < len; j++) {
              func = e[j];
              func();
            }
            if (!_.isEmpty(_this.pendingObserves)) {
              _this.allowObservation(function() {
                var block, blockId, blocked, k, obs, oldRunning, ref, results1;
                blocked = {};
                oldRunning = {};
                while (!_.isEmpty(_this.pendingObserves)) {
                  p = _this.pendingObserves;
                  _this.pendingObserves = {};
                  for (blockId in p) {
                    if (!_this.running[blockId] && (block = _this.getBlock(blockId))) {
                      blocked[blockId] = true;
                      oldRunning[blockId] = _this.running[blockId];
                      _this.running[blockId] = true;
                      obs = block.observer;
                      if ((ref = block.observer) != null) {
                        if (typeof ref.observe === "function") {
                          ref.observe();
                        }
                      }
                      if (!_this.getBlock(block._id).observer) {
                        _this.getBlock(block._id).observer = obs;
                      }
                    }
                  }
                }
                results1 = [];
                for (k in blocked) {
                  results1.push(_this.running[k] = oldRunning[k]);
                }
                return results1;
              });
            }
            return Promise.all(promises);
          };
        })(this));
      };

      OrgData.prototype.triggerUpdate = function() {
        var block, channelKeys, id, items, j, ref, v;
        channelKeys = 2 <= arguments.length ? slice1.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), block = arguments[j++];
        if (items = (ref = this.observers).get.apply(ref, channelKeys)) {
          for (id in items) {
            v = items[id];
            if (v === true && !this.running[id]) {
              this.pendingObserves[id] = true;
            }
          }
        }
        return null;
      };

      OrgData.prototype.checkPropChange = function(oldBlock, newBlock, isDefault) {
        var newProperties, parent, ref, ref1, sets;
        if (!isDefault && !(newBlock != null ? newBlock.level : void 0) && !_.isEqual(oldBlock != null ? oldBlock.properties : void 0, newBlock != null ? newBlock.properties : void 0) && (parent = this.parent(newBlock != null ? newBlock : oldBlock))) {
          newProperties = _.defaults((ref = this.parseBlocks(parent.text).properties) != null ? ref : {}, (ref1 = newBlock.properties) != null ? ref1 : {});
          if (!_.isEqual(parent.properties, newProperties)) {
            sets = {};
            sets[parent._id] = parent;
            parent.properties = newProperties;
            return setTimeout(((function(_this) {
              return function() {
                return _this.change({
                  first: _this.getFirst(),
                  sets: sets,
                  removes: {},
                  oldBlocks: [],
                  newBlocks: [parent]
                });
              };
            })(this)), 1);
          }
        }
      };

      OrgData.prototype.checkCssChange = function(oldBlock, newBlock, isDefault) {
        if (isCss(oldBlock) || isCss(newBlock)) {
          $("#css-" + (blockElementId(oldBlock) || blockElementId(newBlock))).filter('style').remove();
        }
        if (isCss(newBlock)) {
          return $('head').append("<style id='css-" + (blockElementId(newBlock)) + "'>" + (blockSource(newBlock)) + "</style>");
        }
      };

      OrgData.prototype.checkCodeChange = function(oldBlock, newBlock, isDefault) {
        var lang, newName, oldName, opts, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, resultType, source;
        if (newBlock && this.running[newBlock._id]) {
          return;
        }
        oldName = (ref = oldBlock != null ? oldBlock.codeName : void 0) != null ? ref : (oldBlock != null ? oldBlock.type : void 0) === 'headline' && (oldBlock != null ? (ref1 = oldBlock.properties) != null ? ref1.name : void 0 : void 0);
        newName = (ref2 = newBlock != null ? newBlock.codeName : void 0) != null ? ref2 : (newBlock != null ? newBlock.type : void 0) === 'headline' && (newBlock != null ? (ref3 = newBlock.properties) != null ? ref3.name : void 0 : void 0);
        if (oldName !== newName) {
          if (oldName) {
            this.deleteBlockName(oldName);
          }
          if (newName && (!isDefault || this.addImported(isDefault, 'data', newName))) {
            this.setBlockName(newName, newBlock._id, isDefault);
          }
        }
        if (isDefault && newName) {
          this.imported.data[newBlock._id] = newBlock;
        }
        if ((oldBlock != null ? oldBlock.local : void 0) && !(newBlock != null ? newBlock.local : void 0)) {
          this.deleteLocalBlock(oldName);
        }
        if (this.loading && (newBlock != null ? (ref4 = newBlock.codeAttributes) != null ? (ref5 = ref4.tangle) != null ? ref5.toLowerCase() : void 0 : void 0 : void 0) === 'yes') {
          source = blockCodeItems(this, newBlock).source;
          lang = newBlock.language.toLowerCase();
          if (!this.tangles[lang]) {
            this.tangles[lang] = [defaultEnv.opts, ''];
          }
          return this.tangles[lang][1] += source.content;
        } else if ((resultType = (newBlock != null ? (ref6 = newBlock.codeAttributes) != null ? (ref7 = ref6.results) != null ? ref7.toLowerCase() : void 0 : void 0 : void 0) === 'def') || (resultType = ((newBlock != null ? (ref8 = newBlock.codeAttributes) != null ? ref8.observe : void 0 : void 0) != null) && 'observe')) {
          opts = defaultEnv.opts;
          return this.queueEval((function(_this) {
            return function() {
              var oldOpts;
              oldOpts = defaultEnv.opts;
              defaultEnv.opts = opts;
              if (resultType === 'observe') {
                _this.updateObserver(newBlock, oldBlock);
                _this.createObserver(newBlock);
              } else {
                _this.executeBlock(newBlock);
              }
              return defaultEnv.opts = oldOpts;
            };
          })(this));
        }
      };

      OrgData.prototype.createObserver = function(block) {
        var blockId, env, sync;
        env = this.env(block.language);
        blockId = block._id;
        sync = false;
        if (isYamlResult(block)) {
          env.write = function(str) {
            result += str;
            if (result[result.length - 1] !== '\n') {
              result += '\n';
            }
            if (!sync) {
              return this.replaceResult(change._id, result);
            }
          };
        } else {
          env.write = function(str) {
            result += presentHtml(str);
            if (result[result.length - 1] !== '\n') {
              result += '\n';
            }
            if (!sync) {
              return this.replaceResult(change._id, result);
            }
          };
        }
        return block.observer = {
          observe: (function(_this) {
            return function() {
              var err, error1;
              sync = true;
              try {
                _this.replaceResult(blockId, env.formatResult(_this.getBlock(blockId), '', _this.getCode(blockId)()));
              } catch (error1) {
                err = error1;
                _this.replaceResult(blockId, ": " + (err.stack.replace(/\n/g, '\n: ')));
              }
              return sync = false;
            };
          })(this)
        };
      };

      OrgData.prototype.checkChannelChange = function(oldBlock, newBlock) {
        var channel, channels, j, len, name, ref, ref1, ref2, type;
        if (!this.disableObservation) {
          if (type = (ref = this.getYaml(newBlock)) != null ? ref.type : void 0) {
            this.triggerUpdate('type', type, newBlock);
          }
          if (name = newBlock != null ? newBlock.codeName : void 0) {
            this.triggerUpdate('block', name, newBlock);
          }
          if (channels = newBlock != null ? (ref1 = newBlock.codeAttributes) != null ? ref1.channels : void 0 : void 0) {
            ref2 = channels.split(' ');
            for (j = 0, len = ref2.length; j < len; j++) {
              channel = ref2[j];
              this.triggerUpdate.apply(this, slice1.call(channel.split('.')).concat([newBlock]));
            }
          }
          return null;
        }
      };

      OrgData.prototype.updateObserver = function(block, oldBlock) {
        var ch, j, l, len, len1, obs, oldObs, ref, ref1, ref2, ref3, ref4, results1;
        obs = this.decodeObservers(block);
        block.observing = obs;
        oldObs = (ref = oldBlock != null ? (ref1 = oldBlock.codeAttributes) != null ? (ref2 = ref1.observe) != null ? ref2.split(' ') : void 0 : void 0 : void 0) != null ? ref : [];
        for (j = 0, len = oldObs.length; j < len; j++) {
          ch = oldObs[j];
          if (!(indexOf.call(obs, ch) >= 0)) {
            (ref3 = this.observers).remove.apply(ref3, slice1.call(ch.split('.')).concat([getId(oldBlock)]));
          }
        }
        results1 = [];
        for (l = 0, len1 = obs.length; l < len1; l++) {
          ch = obs[l];
          if (!(indexOf.call(oldObs, ch) >= 0)) {
            results1.push((ref4 = this.observers).add.apply(ref4, slice1.call(ch.split('.')).concat([getId(block)], [true])));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      };

      OrgData.prototype.getNamedBlockId = function(name) {
        var ref;
        return (ref = this.namedBlocks[name]) != null ? ref : this.importedData[name];
      };

      OrgData.prototype.setBlockName = function(name, blockId, isDefault) {
        return (isDefault ? this.importedData : this.namedBlocks)[name] = blockId;
      };

      OrgData.prototype.deleteBlockName = function(name) {
        delete this.namedBlocks[name];
        return this.deleteLocalBlock(name);
      };

      OrgData.prototype.getBlockNamed = function(name) {
        var id;
        if (id = this.getNamedBlockId(name)) {
          return this.getLocalBlock(id);
        }
      };

      OrgData.prototype.localDocumentId = function() {
        return document.location.href;
      };

      OrgData.prototype.getLocalBlock = function(thing) {
        var blk, local, n;
        if (!(blk = this.getBlock(thing))) {
          return null;
        } else if (!blk.local || !(n = blk.codeName) || blk._id !== this.getNamedBlockId(n)) {
          return blk;
        } else if (local = copyBlock(this.localBlocks[n])) {
          local._id = blk._id;
          return local;
        } else {
          return blk;
        }
      };

      OrgData.prototype.storeLocalBlock = function(block) {
        var name;
        if (block.local && (name = block.codeName) && block._id === this.getNamedBlockId(name)) {
          this.localBlocks[name] = block;
          block = copyBlock(block);
          block._id = name;
          return transaction(this.localDocumentId()).put(block);
        }
      };

      OrgData.prototype.deleteLocalBlock = function(name) {
        if (this.localBlocks[name]) {
          delete this.localBlocks[name];
          return transaction(this.localDocumentId())["delete"](name);
        }
      };

      OrgData.prototype.textForDataNamed = function(name, data, attrs) {
        var k, v;
        return (name ? "#+NAME: " + name + "\n" : '') + "#+BEGIN_SRC yaml " + (((function() {
          var results1;
          results1 = [];
          for (k in attrs) {
            v = attrs[k];
            results1.push(":" + k + " " + v);
          }
          return results1;
        })()).join(' ')) + "\n" + (dump(data, _.defaults(attrs != null ? attrs : {}, {
          sortKeys: true,
          flowLevel: 2
        })).trim()) + "\n#+END_SRC\n";
      };

      OrgData.prototype.checkViewChange = function(oldBlock, newBlock, isDefault) {
        var ov, source, vt;
        if (oldBlock && (ov = blockViewType(oldBlock))) {
          removeView(ov);
        }
        if (vt = blockViewType(newBlock)) {
          source = blockSource(newBlock);
          if (!isDefault || this.addImported(isDefault, 'view', vt)) {
            return addView(vt, null, source.substring(0, source.length - 1), isDefault);
          }
        }
      };

      OrgData.prototype.checkControlChange = function(oldBlock, newBlock, isDefault) {
        if ((isControl(oldBlock) || isControl(newBlock)) && ((oldBlock != null ? oldBlock.type : void 0) !== 'code' || blockSource(oldBlock) !== blockSource(newBlock) || isControl(oldBlock) !== isControl(newBlock))) {
          return this.queueEval((function(_this) {
            return function() {
              return _this.changeController(oldBlock, newBlock, isDefault);
            };
          })(this));
        }
      };

      OrgData.prototype.changeController = function(oldBlock, newBlock, isDefault) {
        var controller, ov, vt;
        if (newBlock && this.running[newBlock._id]) {
          return;
        }
        if (oldBlock && (ov = blockViewType(oldBlock, 'control', isDefault))) {
          removeController(ov);
        }
        if (vt = blockViewType(newBlock, 'control')) {
          controller = {};
          if (!isDefault || this.addImported(isDefault, 'controller', vt)) {
            addController(vt, null, controller, isDefault);
            return this.executeBlock(newBlock, function(env) {
              return env["eval"] = function(text) {
                return controllerEval.call(controller, text);
              };
            });
          }
        }
      };

      OrgData.prototype.executeBlock = function(block, envConf) {
        return this.executeText(block.language, blockSource(block), null, function(env) {
          var ref, ref1, ref2;
          if (typeof envConf === "function") {
            envConf(env);
          }
          if ((ref = typeof newBlock !== "undefined" && newBlock !== null ? (ref1 = newBlock.codeAttributes) != null ? (ref2 = ref1.results) != null ? ref2.toLowerCase() : void 0 : void 0 : void 0) === 'def' || ref === 'silent') {
            env.silent = true;
            return env.write = function() {};
          }
        });
      };

      OrgData.prototype.env = function(language, envConf) {
        var base, env;
        if (env = typeof (base = languageEnvMaker(language)) === "function" ? base({
          __proto__: defaultEnv
        }) : void 0) {
          env.data = this;
          env.write = function() {};
          if (typeof envConf === "function") {
            envConf(env);
          }
          return env;
        }
      };

      OrgData.prototype.executeText = function(language, text, cont, envConf) {
        return this.env(language, envConf).executeText(text, Nil, cont != null ? cont : function(x) {
          return x;
        });
      };

      OrgData.prototype.checkImports = function(block) {
        var filename, i, ref, ref1;
        if ((i = block != null ? (ref = block.properties) != null ? ref["import"] : void 0 : void 0) && !this.importRecords.importedFiles[filename = block.properties["import"]]) {
          console.log("Import: " + (block != null ? (ref1 = block.properties) != null ? ref1["import"] : void 0 : void 0));
          this.importRecords.importedFiles[filename] = true;
          return this.runOnImport((function(_this) {
            return function() {
              return new Promise(function(resolve, reject) {
                return _this.getFile(filename, (function(contents) {
                  var id, j, len, oldEvals, oldPromise, ref2;
                  oldPromise = _this.importPromise;
                  oldEvals = _this.pendingEvals;
                  _this.pendingEvals = [];
                  _this.importPromise = Promise.resolve();
                  id = 0;
                  ref2 = _this.parseBlocks(contents);
                  for (j = 0, len = ref2.length; j < len; j++) {
                    block = ref2[j];
                    block._id = "imported-" + filename + "-" + (id++);
                    _this.checkChange(null, block, filename);
                  }
                  return _this.scheduleEvals().then(function() {
                    _this.pendingEvals = oldEvals;
                    _this.importPromise = oldPromise;
                    return resolve();
                  });
                }), function(e) {
                  return reject(displayError(e));
                });
              });
            };
          })(this));
        }
      };

      OrgData.prototype.getFile = function(filename, cont, fail) {
        return ajaxGet(new URL(filename, this.loadName).toString()).then(cont).error(fail);
      };

      OrgData.prototype.decodeObservers = function(block) {
        var finalObs, j, k, len, ob, obs, ref, ref1, ref2, v;
        finalObs = [];
        obs = (ref = (ref1 = block.codeAttributes) != null ? (ref2 = ref1.observe) != null ? ref2.split(' ') : void 0 : void 0) != null ? ref : [];
        for (j = 0, len = obs.length; j < len; j++) {
          ob = obs[j];
          if (ob === 'vars' || ob === '') {
            finalObs.push.apply(finalObs, (function() {
              var ref3, ref4, results1;
              ref4 = blockVars(this, (ref3 = block.codeAttributes) != null ? ref3["var"] : void 0)[2];
              results1 = [];
              for (k in ref4) {
                v = ref4[k];
                results1.push("block." + v);
              }
              return results1;
            }).call(this));
          } else {
            finalObs.push(ob);
          }
        }
        return finalObs;
      };

      OrgData.prototype.runBlock = function(block, func) {
        var id, r;
        id = getId(block);
        r = this.running[id];
        this.running[id] = true;
        try {
          return func();
        } finally {
          this.running[id] = r;
        }
      };

      OrgData.prototype.replaceResult = function(block, str) {
        block = this.getBlock((typeof block === 'string' ? block : block._id));
        return this.runBlock(block, (function(_this) {
          return function() {
            return replaceResult(_this, _this, block, str);
          };
        })(this));
      };

      OrgData.prototype.clearError = function(block) {
        var error, ref, results, start;
        block = this.getBlock((typeof block === 'string' ? block : block._id));
        ref = blockCodeItems(this, block), error = ref.error, results = ref.results;
        if (error) {
          start = this.offsetForBlock(block) + error.offset;
          return this.runBlock(block, (function(_this) {
            return function() {
              return _this.replaceText({
                start: start,
                end: start + error.text.length,
                text: '',
                source: 'code'
              }, true);
            };
          })(this));
        }
      };

      OrgData.prototype.getYaml = function(block) {
        var firstResult, ref, ref1, results;
        block = this.getBlock(block);
        return (ref = block.yaml) != null ? ref : (block.yaml = isYamlResult(block) ? ((ref1 = blockCodeItems(this, block), results = ref1.results, ref1), results ? (firstResult = results.text.indexOf('\n') + 1, safeLoad(results.text.substring(firstResult).replace(/(^|\n): /gm, '$1'))) : void 0) : null);
      };

      OrgData.prototype.getCode = function(block) {
        var env, ref;
        block = this.getBlock(block);
        return (ref = block.code) != null ? ref : block.code = isText(block) ? this.addPostProcessing(block, function(cont) {
          var ref1;
          return (ref1 = typeof cont === "function" ? cont([blockSource(block)]) : void 0) != null ? ref1 : [blockSource(block)];
        }) : (env = this.env(block.language)) ? this.addPostProcessing(block, env.compileBlock(block)) : void 0;
      };

      OrgData.prototype.parsedCodeBlock = function(block) {
        return new EditorParsedCodeBlock(this, block);
      };

      OrgData.prototype.addPostProcessing = function(block, func) {
        var argNames, blockName, j, m, ref;
        if (m = (ref = block.codeAttributes.post) != null ? ref.match(postCallPat) : void 0) {
          j = m.length - 2, blockName = m[j++], argNames = m[j++];
          argNames = argNames.trim().split('\s*,\s*');
          blockName = blockName.trim();
          return (function(_this) {
            return function() {
              var args, cont, postProcessor;
              cont = arguments[0], args = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
              if (postProcessor = _this.getCode(_this.getBlockNamed(blockName))) {
                return func.apply(null, [(function(result) {
                  var arg;
                  if (result.length === 1) {
                    result = result[0];
                  }
                  return postProcessor.apply(null, [cont].concat(slice1.call((function() {
                    var l, len, ref1, results1;
                    results1 = [];
                    for (l = 0, len = argNames.length; l < len; l++) {
                      arg = argNames[l];
                      if (arg === '*this*') {
                        results1.push(result);
                      } else if (Number(arg) == arg || (ref1 = arg[0], indexOf.call("'\"", ref1) >= 0)) {
                        results1.push(JSON.parse(arg));
                      } else {
                        results1.push(this.getBlockNamed(arg));
                      }
                    }
                    return results1;
                  }).call(_this))));
                })].concat(slice1.call(args)));
              }
            };
          })(this);
        } else {
          return func;
        }
      };

      return OrgData;

    })(DataStore);
    EditorParsedCodeBlock = (function(superClass) {
      extend(EditorParsedCodeBlock, superClass);

      function EditorParsedCodeBlock(data1, block) {
        this.data = data1;
        EditorParsedCodeBlock.__super__.constructor.call(this, this.data.getBlock(block) || block);
      }

      EditorParsedCodeBlock.prototype.clone = function() {
        return new EditorParsedCodeBlock(this.data, this.block);
      };

      EditorParsedCodeBlock.prototype.save = function() {
        var start;
        start = this.data.offsetForBlock(this.block._id);
        return this.data.replaceText({
          start: start,
          end: start + this.data.getBlock(this.block._id).text.length,
          text: this.block.text,
          source: 'code'
        });
      };

      return EditorParsedCodeBlock;

    })(ParsedCodeBlock);
    displayError = function(e) {
      console.log("Error: " + e);
      return e;
    };
    compareSorted = function(a, b) {
      var i, j, ref;
      for (i = j = 0, ref = Math.min(a.length, b.length); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (a[i] < b[i]) {
          return -1;
        }
        if (a[i] > b[i]) {
          return 1;
        }
      }
      return a.length - b.length;
    };
    isPrefix = function(a, b) {
      var av, i, j, len;
      if (a.length > b.length) {
        return false;
      }
      for (i = j = 0, len = a.length; j < len; i = ++j) {
        av = a[i];
        if (av !== b[i]) {
          return false;
        }
      }
      return true;
    };
    basicDataFilter = {
      startChange: function(data) {},
      endChange: function(data) {},
      clear: function(data) {},
      replaceBlock: function(data, oldBlock, newBlock) {},
      replaceText: function(data, arg1) {
        var end, source, start, text;
        start = arg1.start, end = arg1.end, text = arg1.text, source = arg1.source;
      }
    };
    blockElementId = function(block) {
      var ref;
      return block && ((ref = block.codeName) != null ? ref : block._id);
    };
    blockIsHidden = function(block) {
      var ref, ref1;
      return String((ref = block != null ? (ref1 = block.properties) != null ? ref1.hidden : void 0 : void 0) != null ? ref : '').toLowerCase() === 'true';
    };
    controllerEval = function(txt) {
      return eval(txt);
    };
    isCss = function(block) {
      return (block != null ? block.language : void 0) === 'css';
    };
    isText = function(block) {
      var ref;
      return (ref = block != null ? block.language.trim() : void 0) === 'text' || ref === 'string';
    };
    isControl = function(block) {
      var ref;
      return (block != null ? block.type : void 0) === 'code' && ((ref = block.codeAttributes) != null ? ref.control : void 0);
    };
    blockViewType = function(block, attr) {
      var ref, ref1;
      if (attr == null) {
        attr = 'defview';
      }
      return (ref = (block != null ? block.type : void 0) === 'code' && ((ref1 = block.codeAttributes) != null ? ref1[attr] : void 0)) != null ? ref : null;
    };
    addChange = function(block, changes) {
      if (!changes.sets[block._id]) {
        changes.oldBlocks.push(block);
        changes.newBlocks.push(changes.sets[block._id] = copy(block));
      }
      return changes.sets[block._id];
    };
    greduce = function(thing, changes, func, arg, next) {
      if (typeof changes === 'function') {
        next = arg;
        arg = func;
        func = changes;
      }
      if (thing && typeof arg === 'undefined') {
        arg = thing;
        thing = next(thing);
      }
      while (thing) {
        arg = func(arg, thing);
        thing = next(thing);
      }
      return arg;
    };
    getId = function(thing) {
      if (typeof thing === 'string') {
        return thing;
      } else {
        return thing._id;
      }
    };
    NMap = (function() {
      function NMap(items1) {
        this.items = items1;
        if (!this.items) {
          this.items = {};
        }
      }

      NMap.prototype.clone = function() {
        return new NMap(_.clone(this.items));
      };

      NMap.prototype.clear = function() {
        return this.items = {};
      };

      NMap.prototype.add = function() {
        var args, i, j, l, pos, ref, value;
        args = 2 <= arguments.length ? slice1.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), value = arguments[j++];
        i = this.items;
        for (pos = l = 0, ref = args.length - 1; 0 <= ref ? l < ref : l > ref; pos = 0 <= ref ? ++l : --l) {
          if (!i[args[pos]]) {
            i[args[pos]] = {};
          }
          i = i[args[pos]];
        }
        return i[args[args.length - 1]] = value;
      };

      NMap.prototype.get = function() {
        var i, j, keys, pos, ref;
        keys = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        i = this.items;
        for (pos = j = 0, ref = keys.length; 0 <= ref ? j < ref : j > ref; pos = 0 <= ref ? ++j : --j) {
          if (!i[keys[pos]]) {
            return null;
          }
          i = i[keys[pos]];
        }
        return i;
      };

      NMap.prototype.getAll = function() {
        var keys;
        keys = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        return new NMap(this.get.apply(this, keys));
      };

      NMap.prototype.remove = function() {
        var collection, i, items, j, keys, l, path, pos, ref;
        keys = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        path = [];
        items = this.items;
        for (pos = j = 0, ref = keys.length; 0 <= ref ? j < ref : j > ref; pos = 0 <= ref ? ++j : --j) {
          if (!items[keys[pos]]) {
            break;
          }
          path.push(items);
          items = items[keys[pos]];
        }
        for (i = l = path.length - 1; l >= 0; i = l += -1) {
          collection = path[i];
          delete collection[keys[i]];
          if (!_.isEmpty(collection)) {
            break;
          }
        }
        return items[keys[keys.length - 1]];
      };

      NMap.prototype.toString = function() {
        return "NMAP " + (JSON.stringify(this.items));
      };

      return NMap;

    })();
    window.NMap = NMap;
    OrgEditing = (function(superClass) {
      extend(OrgEditing, superClass);

      function OrgEditing(data) {
        OrgEditing.__super__.constructor.call(this, data);
        this.setPrefix('leisureBlock-');
        this.hiding = true;
        this.setMode(Leisure.plainMode);
        this.toggledSlides = {};
        this.dataChanges = null;
        this.pendingDataChanges = null;
      }

      OrgEditing.prototype.dataChanged = function(changes) {
        return preserveSelection((function(_this) {
          return function() {
            OrgEditing.__super__.dataChanged.call(_this, changes);
            return initializePendingViews();
          };
        })(this));
      };

      OrgEditing.prototype.dataLoaded = function() {
        OrgEditing.__super__.dataLoaded.call(this);
        return this.rerenderAll();
      };

      OrgEditing.prototype.load = function(name, text) {
        var oldOpts;
        oldOpts = defaultEnv.opts;
        defaultEnv.opts = this;
        OrgEditing.__super__.load.call(this, name, text);
        return defaultEnv.opts = oldOpts;
      };

      OrgEditing.prototype.renderBlocks = function() {
        return this.mode.renderBlocks(this, OrgEditing.__super__.renderBlocks.call(this));
      };

      OrgEditing.prototype.setTheme = function(theme) {
        if (this.theme) {
          this.editor.node.removeClass(this.theme);
        }
        return this.editor.node.addClass(this.theme = theme);
      };

      OrgEditing.prototype.toggleSlides = function() {
        return this.mode.setSlideMode(this, !this.showingSlides());
      };

      OrgEditing.prototype.showingSlides = function() {
        return this.mode.showingSlides(this);
      };

      OrgEditing.prototype.hideToolbar = function() {
        return this.editor.node.prev().addClass('collapse');
      };

      OrgEditing.prototype.showToolbar = function() {
        return this.editor.node.prev().removeClass('collapse');
      };

      OrgEditing.prototype.getLocalBlock = function(thing) {
        return this.data.getLocalBlock(thing);
      };

      OrgEditing.prototype.isValidDocOffset = function(offset) {
        var end, next, start;
        if (this.currentSlide) {
          start = this.data.offsetForBlock(this.currentSlide);
          if (next = this.data.nextSibling(this.currentSlide)) {
            end = this.data.offsetForBlock(next) + next.text.length;
          } else {
            end = start + this.getBlock(this.currentSlide).text.length;
          }
          return (start <= offset && offset < end);
        } else {
          return OrgEditing.__super__.isValidDocOffset.call(this, offset);
        }
      };

      OrgEditing.prototype.rerenderAll = function() {
        OrgEditing.__super__.rerenderAll.call(this);
        return initializePendingViews();
      };

      OrgEditing.prototype.changeData = function(replaceFunc) {
        return new Promise((function(_this) {
          return function(succeed, fail) {
            if (_this.pendingDataChanges) {
              return _this.pendingDataChanges.push(function() {
                return _this.executeDataChange(replaceFunc, succeed, fail);
              });
            } else {
              _this.pendingDataChanges = [];
              return _this.executeDataChange(replaceFunc, succeed, fail);
            }
          };
        })(this));
      };

      OrgEditing.prototype.verifyDataObject = function(opType, obj) {
        if (typeof obj !== 'object') {
          throw new Error("Attempt to " + opType + " value that is not an object.");
        }
      };

      OrgEditing.prototype.executeDataChange = function(replaceFunc, succeed, fail) {
        var dataChanges, result;
        dataChanges = null;
        result = null;
        return this.batchReplace(((function(_this) {
          return function() {
            var b, block, name, parent, parentType, ref, ref1, ref2, repls;
            dataChanges = _this.dataChanges = {
              sharedRemoves: {},
              sharedInserts: {},
              sharedSets: {},
              localRemoves: {},
              localSets: {}
            };
            try {
              result = replaceFunc();
              repls = [];
              for (name in _this.dataChanges.sharedRemoves) {
                b = _this.blockBounds(name);
                b.text = '';
                b.source = 'code';
                repls.push(b);
              }
              ref = _this.dataChanges.sharedInserts;
              for (name in ref) {
                ref1 = ref[name], parent = ref1.parent, parentType = ref1.parentType, block = ref1.block;
                if (b = _this.blockBounds((parentType === 'block' ? parent : _this.data.lastChild(_this.data.getNamedBlockId(parent))))) {
                  b.start = b.end;
                  b.text = block.text;
                  b.source = 'code';
                  delete b.gStart;
                  delete b.gEnd;
                  repls.push(b);
                } else {
                  throw new Error("Attempt to append a block after nonexistant block: " + parent);
                }
              }
              ref2 = _this.dataChanges.sharedSets;
              for (name in ref2) {
                block = ref2[name];
                b = _this.blockBounds(name);
                b.text = block.text;
                b.source = 'code';
                repls.push(b);
              }
              return repls;
            } finally {
              _this.dataChanges = null;
            }
          };
        })(this)), ((function(_this) {
          return function() {
            var block, blocks, name, ref;
            for (name in dataChanges.localRemoves) {
              _this.data.deleteLocalBlock(name);
            }
            ref = dataChanges.localSets;
            for (name in ref) {
              block = ref[name];
              _this.data.storeLocalBlock(block);
            }
            if (!_.isEmpty(dataChanges.localSets)) {
              blocks = (function() {
                var ref1, results1;
                ref1 = dataChanges.localSets;
                results1 = [];
                for (name in ref1) {
                  block = ref1[name];
                  results1.push((block._id = this.data.getNamedBlockId(name), block));
                }
                return results1;
              }).call(_this);
              _this.changed({
                oldBlocks: [],
                newBlocks: blocks
              });
            }
            succeed(result);
            return _this.nextDataChange();
          };
        })(this)), (function(_this) {
          return function(e) {
            if (e.retryOK) {
              return _this.executeDataChange(replaceFunc, succeed, fail);
            } else {
              fail(e);
              return _this.nextDataChange();
            }
          };
        })(this));
      };

      OrgEditing.prototype.nextDataChange = function() {
        var ref;
        if ((ref = this.pendingDataChanges) != null ? ref.length : void 0) {
          return this.pendingDataChanges.shift()();
        } else {
          return this.pendingDataChanges = null;
        }
      };

      OrgEditing.prototype.blockBoundsForHeadline = function(name) {};

      OrgEditing.prototype.blockBounds = function(name) {
        var block, end, start;
        if (name) {
          block = typeof name === 'string' ? this.data.getBlockNamed(name) : name;
          start = this.data.offsetForBlock(block);
          end = start + block.text.length;
          return {
            start: start,
            end: end,
            gStart: start,
            gEnd: end
          };
        }
      };

      OrgEditing.prototype.checkChanging = function() {
        if (!this.dataChanges) {
          throw new Error("Attempt to access data outside of a change block");
        }
      };

      OrgEditing.prototype.appendDataToHeadline = function(parent, name, value, codeOpts) {
        return this.appendData('headline', parent, name, value, codeOpts);
      };

      OrgEditing.prototype.appendDataAfter = function(parent, name, value, codeOpts) {
        return this.appendData('block', parent, name, value, codeOpts);
      };

      OrgEditing.prototype.appendData = function(parentType, parent, name, value, codeOpts) {
        this.checkChanging();
        this.verifyDataObject("append", value);
        if (name && this.getData(name)) {
          throw new Error("Attempt to add block with duplicate name: " + name);
        }
        return this.dataChanges.sharedInserts[name] = {
          parentType: parentType,
          parent: parent,
          block: this.data.parseBlocks(this.data.textForDataNamed(name, value, codeOpts))[0]
        };
      };

      OrgEditing.prototype.getData = function(name, skipCheck) {
        var block, info;
        if (!skipCheck) {
          this.checkChanging();
        }
        block = skipCheck && !this.dataChanges ? this.data.getBlockNamed(name) : this.dataChanges.localRemoves[name] || this.dataChanges.sharedRemoves[name] ? null : (block = this.dataChanges.localSets[name] || this.dataChanges.sharedSets[name]) ? block : (info = this.dataChanges.sharedInserts[name]) ? info.block : this.data.getBlockNamed(name);
        return this.data.getYaml(block);
      };

      OrgEditing.prototype.setData = function(name, value, codeOpts) {
        var block, newBlock, ref;
        this.checkChanging();
        this.verifyDataObject("set " + name + " to ", value);
        if (this.dataChanges.sharedRemoves[name]) {
          delete this.dataChanges.sharedRemoves[name];
        }
        if (this.dataChanges.localRemoves[name]) {
          delete this.dataChanges.localRemoves[name];
        }
        if (!(block = this.data.getBlockNamed(name))) {
          throw new Error("No block named " + name);
        } else {
          codeOpts = _.merge({}, (ref = block.codeAttributes) != null ? ref : {}, codeOpts != null ? codeOpts : {});
          newBlock = this.data.parseBlocks(this.data.textForDataNamed(name, value, codeOpts))[0];
          newBlock._id = block._id;
          if (block.local && this.getData(name)) {
            return this.dataChanges.localSets[name] = newBlock;
          } else {
            return this.dataChanges.sharedSets[name] = newBlock;
          }
        }
      };

      OrgEditing.prototype.removeData = function(name) {
        var block;
        this.checkChanging();
        if (!(block = this.data.getBlockNamed(name))) {
          throw new Error("No block named " + name);
        } else {
          if (block.local) {
            this.dataChanges.localRemoves[name] = true;
          }
          return this.dataChanges.sharedRemoves[name] = true;
        }
      };

      OrgEditing.prototype.changed = function(changes) {
        var block, i, id, j, l, len, len1, len2, nameNodes, nb, newBlock, newBlocks, node, o, oldBlock, oldBlocks, ref, ref1, viewNodes;
        newBlocks = changes.newBlocks, oldBlocks = changes.oldBlocks;
        if ((newBlocks.length === (ref = oldBlocks.length) && ref === 1)) {
          for (i = j = 0, len = newBlocks.length; j < len; i = ++j) {
            newBlock = newBlocks[i];
            oldBlock = oldBlocks[i];
            if (trickyChange(oldBlock, newBlock)) {
              return OrgEditing.__super__.changed.call(this, changes);
            }
          }
          nb = newBlocks.slice();
          viewNodes = $();
          nameNodes = $();
          for (l = 0, len1 = newBlocks.length; l < len1; l++) {
            block = newBlocks[l];
            viewNodes = viewNodes.add(this.find("[data-view-block='" + block._id + "']"));
            if (block.codeName) {
              nameNodes = viewNodes.add(this.find("[data-view-block-name='" + block.codeName + "']"));
            }
            viewNodes = this.findViewsForDefiner(block, viewNodes);
            viewNodes = this.findViewsForDefiner(changes.old[block._id], viewNodes);
            ref1 = this.find("[data-observe~=" + block._id + "]");
            for (o = 0, len2 = ref1.length; o < len2; o++) {
              node = ref1[o];
              if (id = this.idForNode(node)) {
                nb.push(this.getBlock(id, changes));
              }
            }
          }
          nb = _.values(_.keyBy(nb, '_id'));
          this.mode.renderChanged(this, nb, this.idPrefix, true);
          return this.withNewContext((function(_this) {
            return function() {
              var blk, blkName, data, len3, len4, name, q, ref2, ref3, ref4, ref5, ref6, ref7, results1, s, view;
              ref2 = viewNodes.filter(function(n) {
                return !nb[_this.idForNode(n)];
              });
              for (q = 0, len3 = ref2.length; q < len3; q++) {
                node = ref2[q];
                node = $(node);
                if (data = _this.data.getYaml(block = _this.blockForNode(node))) {
                  ref4 = ((ref3 = $(node).attr('data-requested-view')) != null ? ref3 : '').split('/'), view = ref4[0], name = ref4[1];
                  renderView(view, name, data, node, block);
                }
              }
              ref5 = nameNodes.filter(function(n) {
                return !nb[_this.idForNode(n)];
              });
              results1 = [];
              for (s = 0, len4 = ref5.length; s < len4; s++) {
                node = ref5[s];
                node = $(node);
                if (data = _this.data.getYaml(blk = _this.data.getBlockNamed(blkName = node.attr('data-view-block-name')))) {
                  ref7 = ((ref6 = $(node).attr('data-requested-view')) != null ? ref6 : '').split('/'), view = ref7[0], name = ref7[1];
                  results1.push(renderView(view, name, data, node, blk, blkName));
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            };
          })(this));
        } else {
          return OrgEditing.__super__.changed.call(this, changes);
        }
      };

      OrgEditing.prototype.blockForNode = function(node) {
        var ref;
        return (ref = this.getBlock(node.attr('data-view-block'))) != null ? ref : this.data.getBlockNamed(node.attr('data-view-block-name'));
      };

      OrgEditing.prototype.find = function(sel) {
        return $(this.editor.node).find(sel);
      };

      OrgEditing.prototype.findViewsForDefiner = function(block, nodes) {
        var attrs, ref, viewType;
        if (block) {
          attrs = block.type === 'code' && block.codeAttributes;
          if (attrs && (viewType = (ref = attrs.control) != null ? ref : attrs.defview)) {
            nodes = nodes.add(this.find("[data-view='" + viewType + "']"));
            nodes = nodes.add(this.find("[data-requested-view='" + viewType + "']"));
          }
        }
        return nodes;
      };

      OrgEditing.prototype.withNewContext = function(func) {
        return mergeContext(Leisure.rootContext, (function(_this) {
          return function() {
            UI.context.opts = _this;
            UI.context.prefix = _this.idPrefix;
            return func();
          };
        })(this));
      };

      OrgEditing.prototype.initToolbar = function() {
        this.withNewContext((function(_this) {
          return function() {
            return $(_this.editor.node).before(renderView('leisure-toolbar', null, null));
          };
        })(this));
        return initializePendingViews();
      };

      OrgEditing.prototype.slideFor = function(thing) {
        var block, parent;
        block = this.data.getBlock(thing);
        while (block && !(block.type === 'headline' && block.level === 1)) {
          parent = this.data.parent(block);
          if (!parent) {
            break;
          }
          block = parent;
        }
        return block;
      };

      OrgEditing.prototype.slidesFor = function(blocks) {
        var block, j, len, slide, slides;
        slides = {};
        for (j = 0, len = blocks.length; j < len; j++) {
          block = blocks[j];
          if (slide = this.slideFor(block)) {
            slides[slide._id] = block;
          }
        }
        return slides;
      };

      OrgEditing.prototype.toggleSlide = function(id) {
        var block;
        block = this.data.getBlock(id);
        if (((block != null ? block.type : void 0) === 'headline' && block.level === 1) || (block && !block.prev)) {
          if (this.toggledSlides[id]) {
            return delete this.toggledSlides[id];
          } else {
            return this.toggledSlides[id] = true;
          }
        }
      };

      OrgEditing.prototype.isToggled = function(thing) {
        var slide;
        return (slide = this.slideFor(thing)) && this.toggledSlides[slide._id];
      };

      OrgEditing.prototype.removeToggles = function() {
        return this.toggledSlides = {};
      };

      OrgEditing.prototype.toggleHidden = function() {
        this.hiding = !this.hiding;
        return this.rerenderAll();
      };

      OrgEditing.prototype.hideHiddenSlides = function() {
        if (!this.hiding) {
          return this.toggleHidden();
        }
      };

      OrgEditing.prototype.showAllSlides = function() {
        if (this.hiding) {
          return this.toggleHidden();
        }
      };

      OrgEditing.prototype.isHidden = function(thing) {
        return blockIsHidden(this.slideFor(thing));
      };

      OrgEditing.prototype.canHideSlides = function() {
        return this.hiding && this.mode === Leisure.fancyMode;
      };

      OrgEditing.prototype.shouldHide = function(thing) {
        var slide;
        return this.canHideSlides() && (slide = this.slideFor(thing)) && this.isHidden(slide) && !this.isToggled(slide);
      };

      OrgEditing.prototype.setEditor = function(ed) {
        var opts;
        OrgEditing.__super__.setEditor.call(this, ed);
        $(ed.node).addClass('leisure-editor');
        this.setMode(this.mode);
        this.initToolbar();
        this.bindings = {
          __proto__: this.bindings,
          'C-C C-C': ((function(_this) {
            return function(editor, e, r) {
              setTimeout((function() {
                return _this.execute();
              }), 1);
              return false;
            };
          })(this))
        };
        this.bindings.PAGEUP = (function(_this) {
          return function(editor, e, r) {
            if (_this.mode.showPrevSlide(_this)) {
              e.preventDefault();
            }
            return false;
          };
        })(this);
        this.bindings.PAGEDOWN = (function(_this) {
          return function(editor, e, r) {
            if (_this.mode.showNextSlide(_this)) {
              e.preventDefault();
            }
            return false;
          };
        })(this);
        opts = this;
        changeAdvice(ed, true, {
          keyPress: {
            options: function(parent) {
              return function(e) {
                return opts.mode.keyPress(opts, parent, e);
              };
            }
          },
          enter: {
            options: function(parent) {
              return function(e) {
                return opts.mode.enter(opts, parent, e);
              };
            }
          },
          handleDelete: {
            options: function(parent) {
              return function(e, sel, forward) {
                return opts.mode.handleDelete(opts, parent, e, sel, forward);
              };
            }
          },
          setCurrentScript: {
            options: function(parent) {
              return function(script) {
                return Leisure.UI.currentScript = script;
              };
            }
          },
          activateScripts: {
            options: function(parent) {
              return function(jq) {
                if (UI.context) {
                  return UI.activateScripts(jq, UI.context);
                } else {
                  return parent(jq);
                }
              };
            }
          }
        });
        return $(this.editor.node).on('scroll', updateSelection);
      };

      OrgEditing.prototype.setMode = function(mode) {
        this.mode = mode;
        if (this.mode && this.editor) {
          this.editor.node.attr('data-edit-mode', this.mode.name);
        }
        return this;
      };

      OrgEditing.prototype.setPrefix = function(prefix) {
        this.idPrefix = prefix;
        return this.idPattern = new RegExp("^" + prefix + "(.*)$");
      };

      OrgEditing.prototype.nodeForId = function(id) {
        return $("#" + this.idPrefix + id);
      };

      OrgEditing.prototype.idForNode = function(node) {
        var ref, ref1;
        return (ref = $(node).closest('[data-block]')[0]) != null ? (ref1 = ref.id.match(this.idPattern)) != null ? ref1[1] : void 0 : void 0;
      };

      OrgEditing.prototype.parseBlocks = function(text) {
        return this.data.parseBlocks(text);
      };

      OrgEditing.prototype.renderBlock = function(block) {
        return this.mode.render(this, block, this.idPrefix);
      };

      OrgEditing.prototype.replaceTextEffects = function(start, end, text, skipMode) {
        var changes, newBlocks, oldBlocks, prev, ref, sets;
        ref = this.data.changesForReplacement(start, end, text), prev = ref.prev, oldBlocks = ref.oldBlocks, newBlocks = ref.newBlocks;
        if (!oldBlocks) {
          oldBlocks = [];
          newBlocks = [this.data.getBlock(this.data.blockForOffset(start))];
          sets = {};
          sets[newBlocks._id] = newBlocks[0];
          changes = {
            first: this.data.getFirst(),
            oldBlocks: oldBlocks,
            newBlocks: newBlocks,
            sets: sets,
            removes: {}
          };
        } else {
          changes = this.changesFor(prev, oldBlocks, newBlocks);
        }
        if (!skipMode) {
          this.mode.handleChanges(this, changes);
        }
        return changes;
      };

      OrgEditing.prototype.replaceText = function(repl, skipEffects) {
        var j, len, ref, repls, results1;
        if (!skipEffects && (ref = this.replaceTextEffects(repl.start, repl.end, repl.text), repls = ref.repls, ref)) {
          this.data.allowObservation((function(_this) {
            return function() {
              return OrgEditing.__super__.replaceText.call(_this, repl);
            };
          })(this));
          if (repls) {
            results1 = [];
            for (j = 0, len = repls.length; j < len; j++) {
              repl = repls[j];
              results1.push(this.replaceText(repl, true));
            }
            return results1;
          }
        } else {
          return this.data.allowObservation((function(_this) {
            return function() {
              return OrgEditing.__super__.replaceText.call(_this, repl);
            };
          })(this));
        }
      };

      OrgEditing.prototype.changesFor = function(first, oldBlocks, newBlocks) {
        var change, changedProperties, changes, child, computedProperties, id, j, l, len, len1, oldBlock, parent, props, ref, ref1, ref2;
        changes = this.data.changesFor(first, oldBlocks, newBlocks);
        changes.repls = [];
        computedProperties = {};
        changedProperties = [];
        ref = changes.sets;
        for (id in ref) {
          change = ref[id];
          oldBlock = this.getBlock(change._id);
          if (this.checkPropertyChange(changes, change, oldBlock)) {
            changedProperties.push(change._id);
          }
          this.checkCodeChange(changes, change, oldBlock, oldBlocks, newBlocks);
        }
        for (j = 0, len = changedProperties.length; j < len; j++) {
          change = changedProperties[j];
          if (parent = (ref1 = this.data.parent(change, changes)) != null ? ref1._id : void 0) {
            if (!computedProperties[parent]) {
              computedProperties[parent] = true;
              props = {};
              ref2 = this.data.children(parent, changes);
              for (l = 0, len1 = ref2.length; l < len1; l++) {
                child = ref2[l];
                props = _.defaults(props, child.properties);
              }
              addChange(this.data.getBlock(parent, changes), changes).properties = props;
            }
          }
        }
        return changes;
      };

      OrgEditing.prototype.change = function(changes) {
        if (changes) {
          this.mode.handleChanges(this, changes);
        }
        return OrgEditing.__super__.change.call(this, changes);
      };

      OrgEditing.prototype.replaceBlock = function(block, textOrBlock, source) {
        var offset, text;
        block = this.getBlock(block);
        offset = this.data.offsetForBlock(block);
        if (typeof text === 'object') {
          text = text.text;
        }
        return this.replaceText({
          start: offset,
          end: offset + block.text.length,
          text: text,
          source: source
        });
      };

      OrgEditing.prototype.update = function(block) {
        var oldBlock;
        oldBlock = this.getBlock(block._id);
        if (!_.isEqual(block, oldBlock)) {
          return this.replaceBlock(oldBlock, block.text, 'code');
        }
      };

      OrgEditing.prototype.changesHidden = function(changes) {
        var change, j, len, ref;
        if (this.canHideSlides()) {
          ref = changes.oldBlocks;
          for (j = 0, len = ref.length; j < len; j++) {
            change = ref[j];
            if (this.shouldHide(change)) {
              return true;
            }
          }
        }
        return false;
      };

      OrgEditing.prototype.checkPropertyChange = function(changes, change, oldBlock) {
        var ref;
        return change.type === 'chunk' && !_.isEqual(change.properties, (ref = this.getBlock(change._id)) != null ? ref.properties : void 0);
      };

      OrgEditing.prototype.checkCodeChange = function(changes, change, oldBlock, oldBlocks, newBlocks) {
        var block, env, envM, finished, hasChange, i, j, len, newBlock, newResults, newSource, oldCode, oldSource, opts, ref, ref1, ref2, repl, res, result, start, sync;
        if (!this.data.running[change._id] && change.type === 'code' && isDynamic(change) && !isObserver(change) && (envM = blockEnvMaker(change))) {
          ref = blockCodeItems(this, change), newSource = ref.source, newResults = ref.results;
          hasChange = !oldBlock || oldBlock.type !== 'code' || !(isDynamic(oldBlock) && !isObserver(oldBlock)) || (oldBlock ? (oldSource = blockSource(oldBlock), newSource.content !== oldSource.content) : void 0);
          if (hasChange) {
            result = '';
            newBlock = setError(change);
            sync = true;
            env = envM({
              __proto__: defaultEnv,
              write: function() {},
              opts: this,
              data: this.data,
              prompt: function(str, defaultValue, cont) {
                return cont(prompt(str, defaultValue));
              }
            });
            opts = this;
            (function(_this) {
              return (function(change) {
                env.errorAt = function(offset, msg) {
                  newBlock = setError(change, offset, msg);
                  if (newBlock !== change && !sync) {
                    return opts.replaceBlock(change, newBlock.text, 'code');
                  }
                };
                return env.write = function(str) {
                  result += presentHtml(str);
                  if (result[result.length - 1] !== '\n') {
                    result += '\n';
                  }
                  if (!sync) {
                    return _this.replaceResult(change._id, result);
                  }
                };
              });
            })(this)(change);
            finished = {};
            res = (((ref1 = change.codeAttributes) != null ? ref1.post : void 0) ? this.data.getCode(newBlock)(function(data) {
              result = env.formatResult(newBlock, '', data);
              return finished;
            }) : env.executeText(newSource.content, Nil, (function() {
              return finished;
            })));
            if (finished === res) {
              oldCode = newBlock.code;
              newBlock = setResult(newBlock, result);
              newBlock.code = oldCode;
              if (newBlock.text !== change.text) {
                changes.sets[newBlock._id] = newBlock;
                ref2 = changes.newBlocks;
                for (i = j = 0, len = ref2.length; j < len; i = ++j) {
                  block = ref2[i];
                  if (block._id === newBlock._id) {
                    changes.newBlocks[i] = newBlock;
                  }
                }
                start = this.offsetForNewBlock(newBlock, oldBlocks, newBlocks);
                changes.repls.push(repl = replacementFor(start, change.text, newBlock.text));
                repl.source = 'code';
              }
            }
            return sync = false;
          }
        }
      };

      OrgEditing.prototype.offsetForNewBlock = function(newBlock, oldBlocks, newBlocks) {
        var block, j, len, start;
        start = oldBlocks.length === 0 ? 0 : this.data.offsetForBlock(oldBlocks[0]);
        for (j = 0, len = newBlocks.length; j < len; j++) {
          block = newBlocks[j];
          if (block._id === newBlock._id) {
            return start;
          }
          start += block.text.length;
        }
        return -1;
      };

      OrgEditing.prototype.execute = function() {
        var block, envM;
        block = this.editor.blockForCaret();
        if (block.type === 'code' && (envM = blockEnvMaker(block))) {
          return this.executeBlock(block, envM);
        }
      };

      OrgEditing.prototype.env = function(language) {
        var env;
        env = this.data.env(language);
        env.opts = this;
        env.prompt = function(str, defaultValue, cont) {
          return cont(prompt(str, defaultValue));
        };
        return env;
      };

      OrgEditing.prototype.executeText = function(language, text, cont) {
        return this.env(language).executeText(text, Nil, cont != null ? cont : function(x) {
          return x;
        });
      };

      OrgEditing.prototype.executeBlock = function(block, envM) {
        var env, newBlock, opts, result, source, sync;
        if (envM = blockEnvMaker(block)) {
          source = blockCodeItems(this, block).source;
          result = '';
          sync = true;
          env = envM({
            __proto__: defaultEnv
          });
          env.opts = opts = this;
          newBlock = setError(block);
          env.errorAt = function(offset, msg) {
            newBlock = setError(block, offset, msg);
            if (newBlock !== block && !sync) {
              return opts.update(newBlock);
            }
          };
          env.write = function(str) {
            result += presentHtml(str);
            if (!sync) {
              return opts.update(newBlock = setResult(block, result));
            }
          };
          env.prompt = function(str, defaultValue, cont) {
            return cont(prompt(str, defaultValue));
          };
          env.executeText(source.content, Nil, function() {});
          sync = false;
          newBlock = setResult(newBlock, result);
          if (newBlock !== block) {
            return opts.update(newBlock);
          }
        }
      };

      OrgEditing.prototype.renderImage = function(src, title) {
        var m, ref;
        if (this.loadName && ((m = src.match(/^file:(\/\/)?(.*)$/)) || !(src.match(/^.*:/)))) {
          src = new URL((ref = m != null ? m[2] : void 0) != null ? ref : src, this.loadName).toString();
        }
        return "<img src='" + src + "'" + title + ">";
      };

      OrgEditing.prototype.followLink = function(e) {
        if (e.target.href.match(/^elisp/)) {
          console.log("Attempt to follow elisp link at " + (this.editor.docOffset(e.target, 0)));
          alert("Elisp links not supported:\n" + e.target.href);
        } else {
          open(e.target.href);
        }
        return false;
      };

      OrgEditing.prototype.replaceResult = function(block, str) {
        return replaceResult(this, this.data, block, str);
      };

      return OrgEditing;

    })(DataStoreEditingOptions);
    replaceResult = function(source, data, block, str) {
      var blockId, current, end, ref, results, start;
      if (typeof block !== 'string') {
        blockId = block._id;
      }
      if (current = data.getBlock(block)) {
        start = data.offsetForBlock(current);
        ref = blockCodeItems(this, current), results = ref.results, last = ref.last;
        if (str[str.length - 1] !== '\n') {
          str += '\n';
        }
        str = "#+RESULTS:\n" + str;
        if (results) {
          start += results.offset;
          end = start + results.text.length;
        } else {
          end = (start += last.end());
        }
        return source.replaceText({
          start: start,
          end: end,
          text: str,
          source: 'code'
        }, true);
      }
    };
    trickyChange = function(oldBlock, newBlock) {
      var t;
      return oldBlock._id !== newBlock._id || (indexOf.call((t = [oldBlock.type, newBlock.type]), 'headline') >= 0 && t[0] !== t[1]) || (t[0] === 'headline' && oldBlock.level !== newBlock.level);
    };
    setResult = function(block, result) {
      var newBlock, prop, ref, ref1, ref2, results, text, tmp, value;
      if ((ref = block != null ? (ref1 = block.codeAttributes) != null ? (ref2 = ref1.results) != null ? ref2.toLowerCase() : void 0 : void 0 : void 0) === 'def' || ref === 'silent') {
        result = '';
      }
      results = blockCodeItems(this, block).results;
      if (!results && ((result == null) || result === '')) {
        return block;
      } else {
        newBlock = copyBlock(block);
        text = (result == null) || result === '' ? block.text.substring(0, results.offset) + block.text.substring(results.offset + results.text.length) : results ? block.text.substring(0, results.offset + results.contentPos) + result + block.text.substring(results.offset + results.text.length) : block.text + ("#+RESULTS:\n" + result);
        tmp = orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')))[0];
        for (prop in tmp) {
          value = tmp[prop];
          newBlock[prop] = value;
        }
        return newBlock;
      }
    };
    setError = function(block, offset, msg) {
      var err, error, newBlock, prop, ref, results, text, tmp, value;
      ref = blockCodeItems(this, block), error = ref.error, results = ref.results;
      if ((offset == null) && !error) {
        return block;
      } else {
        newBlock = copyBlock(block);
        msg = msg ? msg.trim() + "\n" : void 0;
        err = "#+ERROR: " + offset + ", " + msg;
        text = error ? offset == null ? block.text.substring(0, error.offset) + block.text.substring(error.offset + error.text.length) : block.text.substring(0, error.offset) + err + block.text.substring(error.offset + error.text.length) : results ? block.text.substring(0, results.offset) + err + block.text.substring(results.offset) : block.text + err;
        tmp = orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')))[0];
        for (prop in tmp) {
          value = tmp[prop];
          newBlock[prop] = value;
        }
        return newBlock;
      }
    };
    isDynamic = function(block) {
      return hasCodeAttribute(block, 'results', 'dynamic');
    };
    isObserver = function(block) {
      var ref;
      return block != null ? (ref = block.codeAttributes) != null ? ref.observe : void 0 : void 0;
    };
    blockEnvMaker = function(block) {
      return languageEnvMaker(block.language);
    };
    createBlockEnv = function(block, envMaker) {};
    blockCodeItems = function(data, block) {
      var org;
      if ((block != null ? block.type : void 0) === 'code') {
        org = blockOrg(data, block);
        if (org instanceof Fragment || org instanceof Headline) {
          org = org.children[0];
        }
        return getCodeItems(org);
      } else {
        return {};
      }
    };
    createLocalData = function() {
      return new OrgData();
    };
    installSelectionMenu = function() {
      $(document.body).append("<div id='selectionBubble' contenteditable='false'></div>").append("<div id='topCaretBox' contenteditable='false'></div>").append("<div id='bottomCaretBox' contenteditable='false'></div>");
      return monitorSelectionChange();
    };
    selectionMenu = "<div>\n<ul>\n  <li name='insert'><a href='javascript:void(0)'><span>Insert</span></a>\n    <ul>\n      <li><a href='javascript:void(0)'><span>Leisure</span></a></li>\n      <li><a href='javascript:void(0)'><span>YAML</span></a></li>\n      <li><a href='javascript:void(0)'><span>HTML</span></a></li>\n      <li><a href='javascript:void(0)'><span>CoffeeScript</span></a></li>\n      <li><a href='javascript:void(0)'><span>JavaScript</span></a></li>\n    </ul>\n  </li>\n</ul>\n</div>";
    configureMenu = function(menu) {
      return console.log("configure menu");
    };
    actualSelectionUpdate = function() {
      var bubble, c, editor, left, p, top;
      if (selectionActive) {
        if (editor = findEditor(getSelection().focusNode)) {
          c = editor.domCursorForCaret();
          if (!c.isEmpty() && (p = c.textPosition()) && isContentEditable(c.node)) {
            left = p.left;
            top = p.top;
            bubble = $("#selectionBubble")[0];
            bubble.style.left = (left + bubbleLeftOffset) + "px";
            bubble.style.top = (top - bubble.offsetHeight + bubbleTopOffset) + "px";
            $(document.body).addClass('selection');
            editor.trigger('selection');
            return;
          }
        }
      }
      $(document.body).removeClass('selection');
      return editor != null ? editor.trigger('selection') : void 0;
    };
    updateSelection = _.throttle((function() {
      actualSelectionUpdate();
      return actualSelectionUpdate();
    }), 30, {
      leading: true,
      trailing: true
    });
    monitorSelectionChange = function() {
      $(document).on('selectionchange', updateSelection);
      $(window).on('scroll', updateSelection);
      return $(window).on('blur focus', function(e) {
        selectionActive = e.type === 'focus';
        return updateSelection();
      });
    };
    toolbarFor = function(el) {
      return $(el).closest('[data-view]')[0];
    };
    editorForToolbar = function(el) {
      return findEditor(toolbarFor(el).nextSibling);
    };
    editorToolbar = function(editorNode) {
      return findEditor(editorNode).node.prev();
    };
    showHide = function(toolbar) {
      var editingOpts;
      editingOpts = editorForToolbar(toolbar).options;
      editingOpts.toggleHidden();
      return editingOpts.hiding;
    };
    breakpoint = function() {
      console.log();
      return console.log("breakpoint");
    };
    isContentEditable = function(node) {
      return (node instanceof Element ? node : node.parentElement).isContentEditable;
    };
    getDocumentParams = function() {
      var j, k, len, param, ref, ref1, v;
      if (!documentParams) {
        documentParams = {};
        ref = document.location.search.substring(1).split('&');
        for (j = 0, len = ref.length; j < len; j++) {
          param = ref[j];
          ref1 = param.split('='), k = ref1[0], v = ref1[1];
          documentParams[k.toLowerCase()] = v;
        }
      }
      return documentParams;
    };
    followLink = function(e) {
      var ref;
      return ((ref = Leisure.findEditor(e.target)) != null ? ref.options.followLink(e) : void 0) || false;
    };
    replacementFor = function(start, oldText, newText) {
      var endOff, lim, startOff;
      lim = Math.min(oldText.length, newText.length);
      startOff = endOff = 0;
      while (startOff < lim && oldText[startOff] === newText[startOff]) {
        startOff++;
      }
      if (startOff < lim) {
        lim -= startOff;
        endOff = 0;
        while (endOff < lim && oldText[oldText.length - endOff - 1] === newText[newText.length - endOff - 1]) {
          endOff++;
        }
      }
      return {
        start: start + startOff,
        end: start + oldText.length - endOff,
        text: newText.substring(startOff, newText.length - endOff)
      };
    };
    ajaxGet = function(url) {
      return new Promise(function(resolve, reject) {
        var xhr;
        xhr = new XMLHttpRequest;
        xhr.responseType = 'arraybuffer';
        xhr.onerror = reject;
        xhr.onload = function(e) {
          var binary, i, j, len, ref;
          binary = '';
          ref = new Uint8Array(e.target.response);
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            binary += String.fromCharCode(i);
          }
          return resolve(binary);
        };
        xhr.open("GET", url);
        return xhr.send(null);
      });
    };
    mergeExports({
      blockCodeItems: blockCodeItems,
      findEditor: findEditor,
      showHide: showHide,
      toolbarFor: toolbarFor,
      editorToolbar: editorToolbar,
      editorForToolbar: editorForToolbar,
      breakpoint: breakpoint,
      blockOrg: blockOrg,
      parseOrgMode: parseOrgMode,
      followLink: followLink,
      defaultEnv: defaultEnv,
      preserveSelection: preserveSelection,
      rootContext: {},
      isDynamic: isDynamic,
      ParsedCodeBlock: ParsedCodeBlock,
      setLounge: setLounge
    });
    return {
      createLocalData: createLocalData,
      OrgData: OrgData,
      OrgEditing: OrgEditing,
      installSelectionMenu: installSelectionMenu,
      blockOrg: blockOrg,
      setResult: setResult,
      setError: setError,
      toolbarFor: toolbarFor,
      editorToolbar: editorToolbar,
      editorForToolbar: editorForToolbar,
      blockCodeItems: blockCodeItems,
      escapeAttr: escapeAttr,
      blockIsHidden: blockIsHidden,
      blockEnvMaker: blockEnvMaker,
      controllerEval: controllerEval,
      getDocumentParams: getDocumentParams,
      basicDataFilter: basicDataFilter,
      replacementFor: replacementFor,
      ajaxGet: ajaxGet
    };
  });

}).call(this);

//# sourceMappingURL=editorSupport.js.map
