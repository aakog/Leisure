// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['cs!./base', 'cs!./org', 'cs!./docOrg.litcoffee', 'cs!./ast', 'cs!./eval.litcoffee', 'cs!./editor.litcoffee', 'lib/lodash.min', 'jquery', 'handlebars'], function(Base, Org, DocOrg, Ast, Eval, Editor, _, $, Handlebars) {
    var DataStore, DataStoreEditingOptions, Fragment, HandlebarsEnvironment, Headline, Html, LeisureEditCore, Nil, OrgData, OrgEditing, actualSelectionUpdate, addChange, blockCodeItems, blockEnvMaker, blockOrg, blockText, configureMenu, copy, createBlockEnv, createLocalData, defaultEnv, escapeExpression, escapeHtml, fancyEditDiv, fancyMode, findEditor, getCodeItems, getId, greduce, installSelectionMenu, isContentEditable, isDynamic, languageEnvMaker, last, monitorSelectionChange, orgDoc, parseOrgMode, plainEditDiv, plainMode, posFor, selectionActive, selectionMenu, setHtml, throttledUpdateSelection, updateSelection;
    defaultEnv = Base.defaultEnv;
    parseOrgMode = Org.parseOrgMode, Fragment = Org.Fragment, Headline = Org.Headline, Nil = Org.Nil;
    orgDoc = DocOrg.orgDoc, getCodeItems = DocOrg.getCodeItems;
    Nil = Ast.Nil;
    languageEnvMaker = Eval.languageEnvMaker, Html = Eval.Html, escapeHtml = Eval.escapeHtml;
    LeisureEditCore = Editor.LeisureEditCore, last = Editor.last, DataStore = Editor.DataStore, DataStoreEditingOptions = Editor.DataStoreEditingOptions, blockText = Editor.blockText, posFor = Editor.posFor, escapeHtml = Editor.escapeHtml, copy = Editor.copy, setHtml = Editor.setHtml, findEditor = Editor.findEditor;
    HandlebarsEnvironment = Handlebars.HandlebarsEnvironment, escapeExpression = Handlebars.escapeExpression;
    selectionActive = true;
    blockOrg = function(data, blockOrText) {
      var frag, org, ref, text;
      text = typeof blockOrText === 'string' ? (ref = data.getBlock(blockOrText)) != null ? ref : blockOrText : blockOrText.text;
      org = parseOrgMode(text);
      org = org.children.length === 1 ? org.children[0] : (frag = new Fragment(org.offset, org.children), frag);
      if (typeof blockOrText === 'object') {
        org.nodeId = blockOrText._id;
        org.shared = blockOrText.type;
      }
      org.linkNodes();
      return org;
    };
    OrgData = (function(superClass) {
      extend(OrgData, superClass);

      function OrgData() {
        return OrgData.__super__.constructor.apply(this, arguments);
      }

      OrgData.prototype.getBlock = function(thing, changes) {
        var ref;
        if (typeof thing === 'string') {
          return (ref = changes != null ? changes.sets[thing] : void 0) != null ? ref : OrgData.__super__.getBlock.call(this, thing);
        } else {
          return thing;
        }
      };

      OrgData.prototype.load = function(first, blocks) {
        var changes;
        OrgData.__super__.load.call(this, first, blocks);
        if (first) {
          changes = {
            sets: {},
            oldBlocks: {},
            first: this.getFirst()
          };
          this.linkAllSiblings(changes);
          return this.change(changes);
        }
      };

      OrgData.prototype.parseBlocks = function(text) {
        if (text === '') {
          return [];
        } else {
          return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
        }
      };

      OrgData.prototype.nextSibling = function(thing, changes) {
        return this.getBlock(this.getBlock(thing, changes).nextSibling, changes);
      };

      OrgData.prototype.previousSibling = function(thing, changes) {
        return this.getBlock(this.getBlock(thing, changes).previousSibling, changes);
      };

      OrgData.prototype.reducePreviousSiblings = function(thing, changes, func, arg) {
        return greduce(this.getBlock(thing, changes), changes, func, arg, (function(_this) {
          return function(b) {
            return _this.getBlock(b.previousSibling, changes);
          };
        })(this));
      };

      OrgData.prototype.reduceNextSiblings = function(thing, changes, func, arg) {
        return greduce(this.getBlock(thing, changes), changes, func, arg, (function(_this) {
          return function(b) {
            return _this.getBlock(b.nextSibling, changes);
          };
        })(this));
      };

      OrgData.prototype.lastSibling = function(thing, changes) {
        return this.reduceNextSiblings(thing, changes, (function(x, y) {
          return y;
        }), null);
      };

      OrgData.prototype.firstSibling = function(thing, changes) {
        return this.reducePreviousSiblings(thing, changes, (function(x, y) {
          return y;
        }), null);
      };

      OrgData.prototype.parent = function(thing, changes) {
        var ref;
        return this.getBlock((ref = this.firstSibling(thing, changes)) != null ? ref.prev : void 0, changes);
      };

      OrgData.prototype.firstChild = function(thing, changes) {
        var block, n;
        if ((block = this.getBlock(thing, changes)) && (n = this.getBlock(block.next, changes)) && !n.previousSibling) {
          return n;
        }
      };

      OrgData.prototype.lastChild = function(thing, changes) {
        return this.lastSibling(this.firstChild(thing, changes), changes);
      };

      OrgData.prototype.children = function(thing, changes) {
        var c;
        c = [];
        this.reduceNextSiblings(this.firstChild(thing, changes), changes, (function(x, y) {
          return c.push(y);
        }), null);
        return c;
      };

      OrgData.prototype.linkAllSiblings = function(changes) {
        var block, cur, curParent, emptyNexts, id, par, parentStack, prev, previousSibling, results1, siblingStack;
        parentStack = ['TOP'];
        siblingStack = [null];
        emptyNexts = {};
        cur = this.getBlock(changes.first, changes);
        while (cur) {
          if (cur.nextSibling) {
            emptyNexts[cur._id] = cur;
          }
          curParent = this.getBlock(last(parentStack), changes);
          if (cur.type === 'headline') {
            while (curParent && cur.level <= curParent.level) {
              parentStack.pop();
              siblingStack.pop();
              curParent = this.getBlock(last(parentStack), changes);
            }
          } else if (cur.type === 'chunk' && (cur.properties != null)) {
            par = this.getBlock(last(parentStack), changes);
            if (!_(par.propertiesBlocks).contains(cur._id)) {
              if (!par.propertiesBlocks) {
                par.propertiesBlocks = [];
              }
              par.propertiesBlocks.push(cur._id);
            }
          }
          if (previousSibling = last(siblingStack)) {
            delete emptyNexts[previousSibling];
            if ((prev = this.getBlock(previousSibling, changes)).nextSibling !== cur._id) {
              addChange(prev, changes).nextSibling = cur._id;
            }
            if (cur.previousSibling !== previousSibling) {
              addChange(cur, changes).previousSibling = previousSibling;
            }
          } else if (cur.previousSibling) {
            delete addChange(cur, changes).previousSibling;
          }
          siblingStack[siblingStack.length - 1] = cur._id;
          if (cur.type === 'headline') {
            parentStack.push(cur._id);
            siblingStack.push(null);
          }
          cur = this.getBlock(cur.next, changes);
        }
        results1 = [];
        for (id in emptyNexts) {
          block = emptyNexts[id];
          results1.push(delete addChange(block, changes).nextSibling);
        }
        return results1;
      };

      return OrgData;

    })(DataStore);
    addChange = function(block, changes) {
      if (!changes.oldBlocks[block._id]) {
        changes.oldBlocks[block._id] = copy(block);
      }
      return changes.sets[block._id] = block;
    };
    greduce = function(thing, changes, func, arg, next) {
      if (typeof changes === 'function') {
        next = arg;
        arg = func;
        func = changes;
      }
      if (thing && typeof arg === 'undefined') {
        arg = thing;
        thing = next(thing);
      }
      while (thing) {
        arg = func(arg, thing);
        thing = next(thing);
      }
      return arg;
    };
    getId = function(thing) {
      if (typeof thing === 'string') {
        return thing;
      } else {
        return thing._id;
      }
    };
    OrgEditing = (function(superClass) {
      extend(OrgEditing, superClass);

      function OrgEditing(data) {
        OrgEditing.__super__.constructor.call(this, data);
        data.on('load', (function(_this) {
          return function() {
            return setHtml(_this.editor.node[0], _this.renderBlocks());
          };
        })(this));
        this.setPrefix('leisureBlock-');
        this.plain();
      }

      OrgEditing.prototype.setPrefix = function(prefix) {
        this.idPrefix = prefix;
        return this.idPattern = new RegExp("^" + prefix + "(.*)$");
      };

      OrgEditing.prototype.nodeForId = function(id) {
        return $("#" + this.idPrefix + id);
      };

      OrgEditing.prototype.idForNode = function(node) {
        var ref;
        return (ref = node.id.match(this.idPattern)) != null ? ref[1] : void 0;
      };

      OrgEditing.prototype.parseBlocks = function(text) {
        return this.data.parseBlocks(text);
      };

      OrgEditing.prototype.renderBlock = function(block) {
        return this.mode.render(block, this.idPrefix);
      };

      OrgEditing.prototype.plain = function() {
        this.mode = plainMode;
        return this;
      };

      OrgEditing.prototype.fancy = function() {
        this.mode = fancyMode;
        return this;
      };

      OrgEditing.prototype.blockLineFor = function(node, offset) {
        var block, ref;
        ref = this.editor.blockOffset(node, offset), block = ref.block, offset = ref.offset;
        return this.blockLine(block, offset);
      };

      OrgEditing.prototype.blockLine = function(block, offset) {
        var lines, text;
        text = block.text.substring(0, offset);
        lines = text.split('\n');
        return {
          line: lines.length,
          col: last(lines).length
        };
      };

      OrgEditing.prototype.change = function(changes) {
        var change, changedProperties, child, computedProperties, id, j, k, len, len1, parent, props, ref, ref1;
        computedProperties = {};
        changedProperties = [];
        ref = changes.sets;
        for (id in ref) {
          change = ref[id];
          if (this.checkPropertyChange(changes, change)) {
            changedProperties.push(change._id);
          } else {
            this.checkCodeChange(changes, change);
          }
        }
        this.data.linkAllSiblings(changes);
        for (j = 0, len = changedProperties.length; j < len; j++) {
          change = changedProperties[j];
          parent = this.data.parent(change, changes)._id;
          if (!computedProperties[parent]) {
            computedProperties[parent] = true;
            props = {};
            ref1 = this.data.children(parent, changes);
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              child = ref1[k];
              props = _.merge(props, child.properties);
            }
            addChange(this.data.getBlock(parent, changes), changes).properties = props;
          }
        }
        return OrgEditing.__super__.change.call(this, changes);
      };

      OrgEditing.prototype.checkPropertyChange = function(changes, change) {
        var ref;
        return change.type === 'chunk' && !_.isEqual(change.properties, (ref = this.getBlock(change._id)) != null ? ref.properties : void 0);
      };

      OrgEditing.prototype.checkCodeChange = function(changes, change) {
        var block, env, envM, hasChange, i, j, len, newBlock, newResults, newSource, oldBlock, oldSource, opts, ref, ref1, ref2, result, sync;
        if (change.type === 'code' && isDynamic(change) && (envM = blockEnvMaker(change))) {
          ref = blockCodeItems(this, change), newSource = ref.source, newResults = ref.results;
          oldBlock = this.getBlock(change._id);
          hasChange = !oldBlock || oldBlock.type !== 'code' || oldBlock.codeAttributes.results !== 'dynamic' || (oldBlock ? ((ref1 = blockCodeItems(this, oldBlock), oldSource = ref1.source, ref1), newSource.content !== oldSource.content) : void 0);
          if (hasChange) {
            result = '';
            newBlock = this.setError(change);
            sync = true;
            env = envM({
              __proto__: defaultEnv
            });
            opts = this;
            (function(change) {
              env.errorAt = function(offset, msg) {
                newBlock = opts.setError(change, offset, msg);
                if (newBlock !== change && !sync) {
                  return opts.change({
                    first: opts.data.getFirst(),
                    removes: {},
                    sets: change._id
                  }, newBlock);
                }
              };
              return env.write = function(str) {
                result += ': ' + (str instanceof Html ? str.content : escapeHtml(String(str).replace(/\r?\n/g, '\n: ') + '\n'));
                if (!sync) {
                  newBlock = opts.setResult(change, str);
                  return opts.change({
                    first: opts.data.getFirst(),
                    removes: {},
                    sets: change._id
                  }, newBlock);
                }
              };
            })(change);
            env.executeText(newSource.content, Nil, function() {});
            newBlock = this.setResult(newBlock, result);
            changes.sets[newBlock._id] = newBlock;
            ref2 = changes.newBlocks;
            for (i = j = 0, len = ref2.length; j < len; i = ++j) {
              block = ref2[i];
              if (block._id === newBlock._id) {
                changes.newBlocks[i] = newBlock;
              }
            }
            return sync = false;
          }
        }
      };

      OrgEditing.prototype.setResult = function(block, result) {
        var newBlock, prop, results, text, tmp, value;
        results = blockCodeItems(this, block).results;
        if (!results && ((result == null) || result === '')) {
          return block;
        } else {
          newBlock = this.copyBlock(block);
          text = (result == null) || result === '' ? block.text.substring(0, results.offset) + block.text.substring(results.offset + results.text.length) : results ? block.text.substring(0, results.offset + results.contentPos) + result + block.text.substring(results.offset + results.text.length) : block.text + ("#+RESULTS:\n" + result);
          tmp = orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')))[0];
          for (prop in tmp) {
            value = tmp[prop];
            newBlock[prop] = value;
          }
          return newBlock;
        }
      };

      OrgEditing.prototype.setError = function(block, offset, msg) {
        var err, error, newBlock, prop, ref, results, text, tmp, value;
        ref = blockCodeItems(this, block), error = ref.error, results = ref.results;
        if ((offset == null) && !error) {
          return block;
        } else {
          newBlock = this.copyBlock(block);
          msg = msg ? msg.trim() + "\n" : void 0;
          err = "#+ERROR: " + offset + ", " + msg;
          text = error ? offset == null ? block.text.substring(0, error.offset) + block.text.substring(error.offset + error.text.length) : block.text.substring(0, error.offset) + err + block.text.substring(error.offset + error.text.length) : results ? block.text.substring(0, results.offset) + err + block.text.substring(results.offset) : block.text + err;
          tmp = orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')))[0];
          for (prop in tmp) {
            value = tmp[prop];
            newBlock[prop] = value;
          }
          return newBlock;
        }
      };

      return OrgEditing;

    })(DataStoreEditingOptions);
    isDynamic = function(block) {
      var ref;
      return ((ref = block.codeAttributes) != null ? ref.results : void 0) === 'dynamic';
    };
    blockEnvMaker = function(block) {
      return languageEnvMaker(block.language);
    };
    createBlockEnv = function(block, envMaker) {};
    blockCodeItems = function(data, block) {
      var org;
      if ((block != null ? block.type : void 0) === 'code') {
        org = blockOrg(data, block);
        if (org instanceof Fragment || org instanceof Headline) {
          org = org.children[0];
        }
        return getCodeItems(org);
      } else {
        return {};
      }
    };
    plainMode = {
      name: 'plain',
      render: function(block, prefix) {
        var error, pos, ref, ref1, ref2, ref3, results, source, text;
        ref = blockCodeItems(this, block), source = ref.source, error = ref.error, results = ref.results;
        text = "<span id='" + prefix + block._id + "' data-block='" + block.type + "'>";
        if (!results && !error) {
          text += "" + (escapeHtml(block.text));
        } else {
          if (!error) {
            text += block.text.substring(0, (ref1 = results != null ? results.offset : void 0) != null ? ref1 : block.text.length);
          } else {
            pos = source.offset + source.contentPos + Number(error.info.match(/([^,]*),/)[1]) - 1;
            text += escapeHtml(block.text.substring(0, pos)) + "<span class='errorMark' contenteditable='false' data-noncontent>✖</span>" + escapeHtml(block.text.substring(pos, (ref2 = results != null ? results.offset : void 0) != null ? ref2 : block.text.length));
          }
          if (results != null) {
            text += "" + ((ref3 = results != null ? results.text : void 0) != null ? ref3 : '') + (escapeHtml(block.text.substring(results.offset + results.text.length)));
          }
        }
        return [text + "</span>", block.next];
      }
    };
    fancyMode = {
      render: function(block, prefix) {
        if (!block || (block.shared && isHidden(block._id))) {
          return '';
        }
      }
    };
    createLocalData = function() {
      return new OrgData();
    };
    plainEditDiv = function(div, data) {
      $(div).addClass('plain');
      return new LeisureEditCore($(div), new OrgEditing(data));
    };
    fancyEditDiv = function(div, data) {
      return new LeisureEditCore($(div), new OrgEditing(data).fancy());
    };
    monitorSelectionChange = function() {
      $(document).on('selectionchange', updateSelection);
      $(window).on('scroll', updateSelection);
      return $(window).on('blur focus', function(e) {
        selectionActive = e.type === 'focus';
        return updateSelection();
      });
    };
    installSelectionMenu = function() {
      $(document.body).append("<div id='selectionBubble' contenteditable='false'></div>").append("<div id='topCaretBox' contenteditable='false'></div>").append("<div id='bottomCaretBox' contenteditable='false'></div>");
      $("#selectionBubble").html(selectionMenu).on('mouseenter', function() {
        return configureMenu($("#selectionBubble ul"));
      });
      $("#selectionBubble ul").menu({
        select: function(event, ui) {
          console.log("MENU SELECT");
          return false;
        }
      });
      return monitorSelectionChange();
    };
    selectionMenu = "<div>\n<ul>\n  <li name='insert'><a href='javascript:void(0)'><span>Insert</span></a>\n    <ul>\n      <li><a href='javascript:void(0)'><span>Leisure</span></a></li>\n      <li><a href='javascript:void(0)'><span>YAML</span></a></li>\n      <li><a href='javascript:void(0)'><span>HTML</span></a></li>\n      <li><a href='javascript:void(0)'><span>CoffeeScript</span></a></li>\n      <li><a href='javascript:void(0)'><span>JavaScript</span></a></li>\n    </ul>\n  </li>\n</ul>\n</div>";
    configureMenu = function(menu) {
      return console.log("configure menu");
    };
    throttledUpdateSelection = _.throttle((function() {
      return actualSelectionUpdate();
    }), 30, {
      leading: true,
      trailing: true
    });
    updateSelection = function() {
      return throttledUpdateSelection();
    };
    actualSelectionUpdate = function() {
      var bubble, c, editor, left, p, top;
      if (selectionActive) {
        if (editor = findEditor(getSelection().focusNode)) {
          c = editor.domCursorForCaret();
          if (!c.isEmpty() && (p = c.textPosition()) && isContentEditable(c.node)) {
            left = p.left;
            top = p.top;
            bubble = $("#selectionBubble")[0];
            bubble.style.left = left + "px";
            bubble.style.top = (top - bubble.offsetHeight) + "px";
            $(document.body).addClass('selection');
            return;
          }
        }
      }
      return $(document.body).removeClass('selection');
    };
    isContentEditable = function(node) {
      return (node instanceof Element ? node : node.parentElement).isContentEditable;
    };
    return {
      createLocalData: createLocalData,
      plainEditDiv: plainEditDiv,
      fancyEditDiv: fancyEditDiv,
      OrgData: OrgData,
      installSelectionMenu: installSelectionMenu,
      blockOrg: blockOrg
    };
  });

}).call(this);

//# sourceMappingURL=editorSupport.js.map
