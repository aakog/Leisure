// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['cs!./base', 'cs!./org', 'cs!./docOrg.litcoffee', 'cs!./ast', 'cs!./eval.litcoffee', 'cs!./editor.litcoffee', 'lib/lodash.min', 'jquery', 'cs!./ui.litcoffee', 'handlebars', 'cs!./export.litcoffee'], function(Base, Org, DocOrg, Ast, Eval, Editor, _, $, UI, Handlebars, BrowserExports) {
    var DataStore, DataStoreEditingOptions, Fragment, HL_LEVEL, HL_PRIORITY, HL_TAGS, HL_TEXT, HL_TODO, Headline, Html, LeisureEditCore, Link, Nil, OrgData, OrgEditing, SimpleMarkup, _workSpan, actualSelectionUpdate, addChange, addController, addView, blockCodeItems, blockEnvMaker, blockOrg, blockSource, blockText, blockViewType, configureMenu, controllerEval, copy, copyBlock, createBlockEnv, createLocalData, createWorkSpan, defaultEnv, defaults, escapeHtml, fancyEditDiv, fancyMode, findEditor, followLink, getCodeItems, getId, goodHtml, goodText, greduce, hasView, headlineRE, hideSlide, html, initializePendingViews, installSelectionMenu, isContentEditable, isControl, isCss, isDynamic, languageEnvMaker, last, mergeContext, mergeExports, monitorSelectionChange, orgDoc, parseMeat, parseOrgMode, plainEditDiv, plainMode, posFor, preserveSelection, removeController, removeView, renderView, resultsArea, selectionActive, selectionMenu, setError, setHtml, setResult, throttledUpdateSelection, toggleSlideMode, updateSelection, withContext, workSpan;
    defaultEnv = Base.defaultEnv;
    parseOrgMode = Org.parseOrgMode, parseMeat = Org.parseMeat, Fragment = Org.Fragment, Headline = Org.Headline, SimpleMarkup = Org.SimpleMarkup, Link = Org.Link, Nil = Org.Nil, headlineRE = Org.headlineRE, HL_LEVEL = Org.HL_LEVEL, HL_TODO = Org.HL_TODO, HL_PRIORITY = Org.HL_PRIORITY, HL_TEXT = Org.HL_TEXT, HL_TAGS = Org.HL_TAGS;
    orgDoc = DocOrg.orgDoc, getCodeItems = DocOrg.getCodeItems, blockSource = DocOrg.blockSource;
    Nil = Ast.Nil;
    languageEnvMaker = Eval.languageEnvMaker, Html = Eval.Html, escapeHtml = Eval.escapeHtml, html = Eval.html;
    LeisureEditCore = Editor.LeisureEditCore, last = Editor.last, DataStore = Editor.DataStore, DataStoreEditingOptions = Editor.DataStoreEditingOptions, blockText = Editor.blockText, posFor = Editor.posFor, escapeHtml = Editor.escapeHtml, copy = Editor.copy, setHtml = Editor.setHtml, findEditor = Editor.findEditor, copyBlock = Editor.copyBlock, preserveSelection = Editor.preserveSelection;
    addView = UI.addView, removeView = UI.removeView, renderView = UI.renderView, hasView = UI.hasView, addController = UI.addController, removeController = UI.removeController, withContext = UI.withContext, mergeContext = UI.mergeContext, initializePendingViews = UI.initializePendingViews;
    mergeExports = BrowserExports.mergeExports;
    selectionActive = true;
    headlineRE = /^(\*+ *)(.*)(\n)$/;
    defaults = {
      views: {},
      controls: {}
    };
    blockOrg = function(data, blockOrText) {
      var frag, org, ref, text;
      text = typeof blockOrText === 'string' ? (ref = data.getBlock(blockOrText)) != null ? ref : blockOrText : blockOrText.text;
      org = parseOrgMode(text);
      org = org.children.length === 1 ? org.children[0] : (frag = new Fragment(org.offset, org.children), frag);
      if (typeof blockOrText === 'object') {
        org.nodeId = blockOrText._id;
        org.shared = blockOrText.type;
      }
      org.linkNodes();
      return org;
    };
    OrgData = (function(superClass) {
      extend(OrgData, superClass);

      function OrgData() {
        DataStore.apply(this, arguments);
        this.namedBlocks = {};
      }

      OrgData.prototype.getBlock = function(thing, changes) {
        var ref;
        if (typeof thing === 'string') {
          return (ref = changes != null ? changes.sets[thing] : void 0) != null ? ref : OrgData.__super__.getBlock.call(this, thing);
        } else {
          return thing;
        }
      };

      OrgData.prototype.load = function(first, blocks, changes) {
        var block, id, ref;
        if (!first) {
          return OrgData.__super__.load.call(this, first, blocks);
        } else {
          if (!changes) {
            changes = {
              sets: blocks,
              oldBlocks: {},
              first: first
            };
          }
          this.linkAllSiblings(changes);
          for (block in this.blockList()) {
            this.checkChange(block, null);
          }
          ref = changes.sets;
          for (id in ref) {
            block = ref[id];
            this.checkChange(null, block);
          }
          return OrgData.__super__.load.call(this, first, blocks);
        }
      };

      OrgData.prototype.parseBlocks = function(text) {
        if (text === '') {
          return [];
        } else {
          return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
        }
      };

      OrgData.prototype.nextSibling = function(thing, changes) {
        var ref;
        return this.getBlock((ref = this.getBlock(thing, changes)) != null ? ref.nextSibling : void 0, changes);
      };

      OrgData.prototype.previousSibling = function(thing, changes) {
        return this.getBlock(this.getBlock(thing, changes).previousSibling, changes);
      };

      OrgData.prototype.reducePreviousSiblings = function(thing, changes, func, arg) {
        return greduce(this.getBlock(thing, changes), changes, func, arg, (function(_this) {
          return function(b) {
            return _this.getBlock(b.previousSibling, changes);
          };
        })(this));
      };

      OrgData.prototype.reduceNextSiblings = function(thing, changes, func, arg) {
        return greduce(this.getBlock(thing, changes), changes, func, arg, (function(_this) {
          return function(b) {
            return _this.getBlock(b.nextSibling, changes);
          };
        })(this));
      };

      OrgData.prototype.lastSibling = function(thing, changes) {
        return this.reduceNextSiblings(thing, changes, (function(x, y) {
          return y;
        }), null);
      };

      OrgData.prototype.firstSibling = function(thing, changes) {
        return this.reducePreviousSiblings(thing, changes, (function(x, y) {
          return y;
        }), null);
      };

      OrgData.prototype.parent = function(thing, changes) {
        var ref;
        return this.getBlock((ref = this.firstSibling(thing, changes)) != null ? ref.prev : void 0, changes);
      };

      OrgData.prototype.firstChild = function(thing, changes) {
        var block, n;
        if ((block = this.getBlock(thing, changes)) && (n = this.getBlock(block.next, changes)) && !n.previousSibling) {
          return n;
        }
      };

      OrgData.prototype.lastChild = function(thing, changes) {
        return this.lastSibling(this.firstChild(thing, changes), changes);
      };

      OrgData.prototype.children = function(thing, changes) {
        var c;
        c = [];
        this.reduceNextSiblings(this.firstChild(thing, changes), changes, (function(x, y) {
          return c.push(y);
        }), null);
        return c;
      };

      OrgData.prototype.nextRight = function(thing, changes) {
        var sib;
        while (thing) {
          if (sib = this.nextSibling(thing, changes)) {
            return sib;
          }
          thing = this.parent(thing, changes);
        }
        return null;
      };

      OrgData.prototype.linkAllSiblings = function(changes) {
        var block, cur, emptyNexts, id, parent, ref, results1, sibling, stack;
        stack = [];
        parent = null;
        sibling = null;
        emptyNexts = {};
        cur = this.getBlock(changes.first, changes);
        while (cur) {
          if (cur.nextSibling) {
            emptyNexts[cur._id] = cur;
          }
          if (cur.type === 'headline') {
            while (parent && cur.level <= parent.level) {
              ref = stack.pop(), parent = ref[0], sibling = ref[1];
            }
          } else if (cur.type === 'chunk' && (cur.properties != null) && parent && !_(parent.propertiesBlocks).contains(cur._id)) {
            if (!parent.propertiesBlocks) {
              parent.propertiesBlocks = [];
            }
            parent.propertiesBlocks.push(cur._id);
          }
          if (sibling) {
            delete emptyNexts[sibling._id];
            if (sibling.nextSibling !== cur._id) {
              addChange(sibling, changes).nextSibling = cur._id;
            }
            if (cur.previousSibling !== sibling._id) {
              addChange(cur, changes).previousSibling = sibling._id;
            }
          } else if (cur.previousSibling) {
            delete addChange(cur, changes).previousSibling;
          }
          sibling = cur;
          if (cur.type === 'headline') {
            stack.push([parent, sibling]);
            parent = cur;
            sibling = null;
          }
          cur = this.getBlock(cur.next, changes);
        }
        results1 = [];
        for (id in emptyNexts) {
          block = emptyNexts[id];
          results1.push(delete addChange(block, changes).nextSibling);
        }
        return results1;
      };

      OrgData.prototype.makeChange = function(changes) {
        var block, id, removes, sets;
        sets = changes.sets, removes = changes.removes;
        for (id in removes) {
          this.checkChange(this.getBlock(id), null);
        }
        for (id in sets) {
          block = sets[id];
          this.checkChange(this.getBlock(id), block);
        }
        return OrgData.__super__.makeChange.call(this, changes);
      };

      OrgData.prototype.processDefaults = function(lorgText) {
        var block, j, len, results1, viewBlocks;
        viewBlocks = orgDoc(parseOrgMode(lorgText.replace(/\r\n?/g, '\n')));
        results1 = [];
        for (j = 0, len = viewBlocks.length; j < len; j++) {
          block = viewBlocks[j];
          results1.push(this.checkChange(null, block, true));
        }
        return results1;
      };

      OrgData.prototype.checkChange = function(oldBlock, newBlock, isDefault) {
        this.checkCssChange(oldBlock, newBlock, isDefault);
        this.checkCodeChange(oldBlock, newBlock, isDefault);
        this.checkViewChange(oldBlock, newBlock, isDefault);
        return this.checkControlChange(oldBlock, newBlock, isDefault);
      };

      OrgData.prototype.checkCssChange = function(oldBlock, newBlock, isDefault) {
        if (isCss(oldBlock) || isCss(newBlock)) {
          $("#css-" + ((oldBlock != null ? oldBlock._id : void 0) || (newBlock != null ? newBlock._id : void 0))).filter('style').remove();
        }
        if (isCss(newBlock)) {
          return $('head').append("<style id='css-" + newBlock._id + "'>" + (blockSource(newBlock)) + "</style>");
        }
      };

      OrgData.prototype.checkCodeChange = function(oldBlock, newBlock, isDefault) {
        var differentName;
        differentName = (oldBlock != null) !== (newBlock != null) || oldBlock.type !== newBlock.type || (oldBlock != null ? oldBlock.codeName : void 0) !== (newBlock != null ? newBlock.codeName : void 0);
        if (oldBlock != null ? oldBlock.codeName : void 0) {
          delete this.namedBlocks[newBlock.codeName];
        }
        if (newBlock != null ? newBlock.codeName : void 0) {
          return this.namedBlocks[newBlock.codeName] = newBlock._id;
        }
      };

      OrgData.prototype.checkViewChange = function(oldBlock, newBlock, isDefault) {
        var ov, source, view, vt;
        removeView(ov = blockViewType(oldBlock));
        if (vt = blockViewType(newBlock)) {
          source = blockSource(newBlock);
          addView(vt, null, source.substring(0, source.length - 1));
          if (isDefault) {
            defaults.views[vt] = source.substring(0, source.length - 1);
          }
        }
        if (ov && ov !== vt && (view = defaults.views[ov])) {
          return addView(ov, null, view);
        }
      };

      OrgData.prototype.checkControlChange = function(oldBlock, newBlock, isDefault) {
        var controller, env, ov, vt;
        if ((oldBlock != null ? oldBlock.type : void 0) !== 'code' || blockSource(oldBlock) !== blockSource(newBlock) || isControl(oldBlock) !== isControl(newBlock)) {
          removeController(ov = blockViewType(oldBlock, 'control'));
          if (vt = blockViewType(newBlock, 'control')) {
            env = blockEnvMaker(newBlock)({
              __proto__: defaultEnv
            });
            controller = {};
            addController(vt, null, controller);
            env["eval"] = function(text) {
              return controllerEval.call(controller, text);
            };
            env.write = function(str) {};
            env.errorAt = function(offset, msg) {
              return console.log(msg);
            };
            return env.executeText(blockSource(newBlock), Nil, (function() {}));
          }
        }
      };

      return OrgData;

    })(DataStore);
    controllerEval = function(txt) {
      return eval(txt);
    };
    isCss = function(block) {
      return (block != null ? block.language : void 0) === 'css';
    };
    isControl = function(block) {
      var ref;
      return (block != null ? block.type : void 0) === 'code' && ((ref = block.codeAttributes) != null ? ref.control : void 0);
    };
    blockViewType = function(block, attr) {
      var ref;
      if (attr == null) {
        attr = 'defview';
      }
      return ((block != null ? block.type : void 0) === 'code' && ((ref = block.codeAttributes) != null ? ref[attr] : void 0)) || null;
    };
    addChange = function(block, changes) {
      if (!changes.oldBlocks[block._id]) {
        changes.oldBlocks[block._id] = copy(block);
      }
      return changes.sets[block._id] = block;
    };
    greduce = function(thing, changes, func, arg, next) {
      if (typeof changes === 'function') {
        next = arg;
        arg = func;
        func = changes;
      }
      if (thing && typeof arg === 'undefined') {
        arg = thing;
        thing = next(thing);
      }
      while (thing) {
        arg = func(arg, thing);
        thing = next(thing);
      }
      return arg;
    };
    getId = function(thing) {
      if (typeof thing === 'string') {
        return thing;
      } else {
        return thing._id;
      }
    };
    OrgEditing = (function(superClass) {
      extend(OrgEditing, superClass);

      function OrgEditing(data) {
        OrgEditing.__super__.constructor.call(this, data);
        data.on('load', (function(_this) {
          return function() {
            setHtml(_this.editor.node[0], _this.renderBlocks());
            return initializePendingViews();
          };
        })(this));
        data.on('change', function() {
          return initializePendingViews();
        });
        this.setPrefix('leisureBlock-');
        this.setMode(plainMode);
        this.hiddenSlides = {};
        this.toggledSlides = {};
      }

      OrgEditing.prototype.toggleSlide = function(id) {
        if (this.toggledSlides[id]) {
          return delete this.toggledSlides[id];
        } else {
          return this.toggledSlides[id] = true;
        }
      };

      OrgEditing.prototype.isToggled = function(thing) {
        return thing && (this.toggledSlides[typeof thing === 'string' ? thing : thing._id] || this.isToggled(this.data.parent(thing)));
      };

      OrgEditing.prototype.removeToggles = function() {
        return this.toggledSlides = {};
      };

      OrgEditing.prototype.hideSlide = function(id) {
        return this.hiddenSlides[id] = true;
      };

      OrgEditing.prototype.showSlide = function(id) {
        return delete this.hiddenSlides[id];
      };

      OrgEditing.prototype.showAllSlides = function() {
        return this.hiddenSlides = {};
      };

      OrgEditing.prototype.isHidden = function(thing) {
        return thing && (this.hiddenSlides[typeof thing === 'string' ? thing : thing._id] || this.isHidden(this.data.parent(thing)));
      };

      OrgEditing.prototype.setEditor = function(ed) {
        OrgEditing.__super__.setEditor.call(this, ed);
        return this.setMode(this.mode);
      };

      OrgEditing.prototype.setMode = function(mode) {
        var ref;
        this.mode = mode;
        if ((ref = this.editor) != null) {
          ref.node.attr('data-edit-mode', this.mode.name);
        }
        return this;
      };

      OrgEditing.prototype.setPrefix = function(prefix) {
        this.idPrefix = prefix;
        return this.idPattern = new RegExp("^" + prefix + "(.*)$");
      };

      OrgEditing.prototype.nodeForId = function(id) {
        return $("#" + this.idPrefix + id);
      };

      OrgEditing.prototype.idForNode = function(node) {
        var ref;
        return (ref = node.id.match(this.idPattern)) != null ? ref[1] : void 0;
      };

      OrgEditing.prototype.parseBlocks = function(text) {
        return this.data.parseBlocks(text);
      };

      OrgEditing.prototype.renderBlock = function(block) {
        if (!(this.isHidden(block))) {
          return this.mode.render(this, block, this.idPrefix);
        } else {
          return ['', block.next];
        }
      };

      OrgEditing.prototype.change = function(changes) {
        var change, changedProperties, child, computedProperties, id, j, k, len, len1, oldBlock, parent, props, ref, ref1;
        computedProperties = {};
        changedProperties = [];
        ref = changes.sets;
        for (id in ref) {
          change = ref[id];
          oldBlock = this.getBlock(change._id);
          if (this.checkPropertyChange(changes, change, oldBlock)) {
            changedProperties.push(change._id);
          }
          this.checkCodeChange(changes, change, oldBlock);
        }
        this.data.linkAllSiblings(changes);
        for (j = 0, len = changedProperties.length; j < len; j++) {
          change = changedProperties[j];
          parent = this.data.parent(change, changes)._id;
          if (!computedProperties[parent]) {
            computedProperties[parent] = true;
            props = {};
            ref1 = this.data.children(parent, changes);
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              child = ref1[k];
              props = _.merge(props, child.properties);
            }
            addChange(this.data.getBlock(parent, changes), changes).properties = props;
          }
        }
        return OrgEditing.__super__.change.call(this, changes);
      };

      OrgEditing.prototype.checkPropertyChange = function(changes, change, oldBlock) {
        var ref;
        return change.type === 'chunk' && !_.isEqual(change.properties, (ref = this.getBlock(change._id)) != null ? ref.properties : void 0);
      };

      OrgEditing.prototype.checkCodeChange = function(changes, change, oldBlock) {
        var block, env, envM, hasChange, i, j, len, newBlock, newResults, newSource, oldSource, opts, ref, ref1, result, sync;
        if (change.type === 'code' && isDynamic(change) && (envM = blockEnvMaker(change))) {
          ref = blockCodeItems(this, change), newSource = ref.source, newResults = ref.results;
          hasChange = !oldBlock || oldBlock.type !== 'code' || oldBlock.codeAttributes.results !== 'dynamic' || (oldBlock ? (oldSource = blockSource(oldBlock), newSource.content !== oldSource.content) : void 0);
          if (hasChange) {
            result = '';
            newBlock = setError(change);
            sync = true;
            env = envM({
              __proto__: defaultEnv
            });
            opts = this;
            (function(change) {
              env.errorAt = function(offset, msg) {
                newBlock = setError(change, offset, msg);
                if (newBlock !== change && !sync) {
                  return opts.change({
                    first: opts.data.getFirst(),
                    removes: {},
                    sets: change._id
                  }, newBlock);
                }
              };
              return env.write = function(str) {
                result += str;
                if (!sync) {
                  newBlock = setResult(change, str);
                  return opts.change({
                    first: opts.data.getFirst(),
                    removes: {},
                    sets: change._id
                  }, newBlock);
                }
              };
            })(change);
            env.executeText(newSource.content, Nil, function() {});
            newBlock = setResult(newBlock, result);
            changes.sets[newBlock._id] = newBlock;
            ref1 = changes.newBlocks;
            for (i = j = 0, len = ref1.length; j < len; i = ++j) {
              block = ref1[i];
              if (block._id === newBlock._id) {
                changes.newBlocks[i] = newBlock;
              }
            }
            return sync = false;
          }
        }
      };

      return OrgEditing;

    })(DataStoreEditingOptions);
    setResult = function(block, result) {
      var newBlock, prop, results, text, tmp, value;
      results = blockCodeItems(this, block).results;
      if (!results && ((result == null) || result === '')) {
        return block;
      } else {
        newBlock = copyBlock(block);
        text = (result == null) || result === '' ? block.text.substring(0, results.offset) + block.text.substring(results.offset + results.text.length) : results ? block.text.substring(0, results.offset + results.contentPos) + result + block.text.substring(results.offset + results.text.length) : block.text + ("#+RESULTS:\n" + result);
        tmp = orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')))[0];
        for (prop in tmp) {
          value = tmp[prop];
          newBlock[prop] = value;
        }
        return newBlock;
      }
    };
    setError = function(block, offset, msg) {
      var err, error, newBlock, prop, ref, results, text, tmp, value;
      ref = blockCodeItems(this, block), error = ref.error, results = ref.results;
      if ((offset == null) && !error) {
        return block;
      } else {
        newBlock = copyBlock(block);
        msg = msg ? msg.trim() + "\n" : void 0;
        err = "#+ERROR: " + offset + ", " + msg;
        text = error ? offset == null ? block.text.substring(0, error.offset) + block.text.substring(error.offset + error.text.length) : block.text.substring(0, error.offset) + err + block.text.substring(error.offset + error.text.length) : results ? block.text.substring(0, results.offset) + err + block.text.substring(results.offset) : block.text + err;
        tmp = orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')))[0];
        for (prop in tmp) {
          value = tmp[prop];
          newBlock[prop] = value;
        }
        return newBlock;
      }
    };
    isDynamic = function(block) {
      var ref;
      return ((ref = block.codeAttributes) != null ? ref.results : void 0) === 'dynamic';
    };
    blockEnvMaker = function(block) {
      return languageEnvMaker(block.language);
    };
    createBlockEnv = function(block, envMaker) {};
    blockCodeItems = function(data, block) {
      var org;
      if ((block != null ? block.type : void 0) === 'code') {
        org = blockOrg(data, block);
        if (org instanceof Fragment || org instanceof Headline) {
          org = org.children[0];
        }
        return getCodeItems(org);
      } else {
        return {};
      }
    };
    plainMode = {
      name: 'plain',
      render: function(opts, block, prefix) {
        var attrs, error, pos, ref, ref1, ref2, ref3, results, source, text;
        ref = blockCodeItems(this, block), source = ref.source, error = ref.error, results = ref.results;
        attrs = "id='" + prefix + block._id + "' data-block='" + block.type + "'";
        if (block.type === 'headline') {
          attrs += " data-headline='" + block.level + "'";
        }
        text = '';
        if (!results && !error) {
          text += this.renderMainBlock(block);
        } else {
          if (!error) {
            text += this.renderMainText(block.text.substring(0, (ref1 = results != null ? results.offset : void 0) != null ? ref1 : block.text.length));
          } else {
            pos = source.offset + source.contentPos + Number(error.info.match(/([^,]*),/)[1]) - 1;
            text += escapeHtml(block.text.substring(0, pos)) + "<span class='errorMark' contenteditable='false' data-noncontent>✖</span>" + escapeHtml(block.text.substring(pos, (ref2 = results != null ? results.offset : void 0) != null ? ref2 : block.text.length));
          }
          if (results != null) {
            text += "" + (escapeHtml((ref3 = results != null ? results.text : void 0) != null ? ref3 : '')) + (escapeHtml(block.text.substring(results.offset + results.text.length)));
          }
        }
        return ["<span " + attrs + ">" + text + "</span>", block.next];
      },
      renderMainBlock: function(block) {
        var text, txt;
        txt = block.text;
        if (block.type === 'headline') {
          text = parseOrgMode(block.text).children[0].partOffsets().text;
          return "<span class='plain-headline'>" + (escapeHtml(txt.substring(0, text.start))) + (this.renderMainText(txt.substring(text.start, text.end))) + (escapeHtml(txt.substring(text.end))) + "</span>";
        } else {
          return this.renderMeat(parseOrgMode(block.text).children[0]);
        }
      },
      renderMainText: function(txt) {
        return this.renderMeat(parseMeat(txt, 0, '', true)[0]);
      },
      renderMeat: function(org) {
        var result;
        result = '';
        while (org) {
          result += org instanceof SimpleMarkup ? this.renderSimple(org) : escapeHtml(org.allText());
          org = org.next;
        }
        return result;
      },
      renderSimple: function(org) {
        var c, guts, j, len, ref;
        guts = '';
        ref = org.children;
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          guts += this.renderMeat(c, true);
        }
        guts = "" + org.text[0] + guts + org.text[org.text.length - 1];
        switch (org.type === 'simple' && org.markupType) {
          case 'bold':
            return "<b>" + guts + "</b>";
          case 'italic':
            return "<i>" + guts + "</i>";
          case 'underline':
            return "<span style='text-decoration: underline'>" + guts + "</span>";
          case 'strikethrough':
            return "<span style='text-decoration: line-through'>" + guts + "</span>";
          case 'code':
            return "<code>" + guts + "</code>";
          case 'verbatim':
            return "<code>" + guts + "</code>";
          default:
            return escapeHtml(org.allText());
        }
      },
      renderSimpleChild: function(org) {
        if (!org.children) {
          return escapeHtml(org.text);
        } else {
          return this.renderSimple(org.children[0]);
        }
      }
    };
    hideSlide = function(slideDom) {
      var editor;
      if (editor = findEditor(slideDom)) {
        editor.options.hideSlide(slideDom[0].id);
        return slideDom.remove();
      }
    };
    toggleSlideMode = function(slideDom) {
      var block, blockHtml, opts, ref;
      if (opts = (ref = findEditor(slideDom)) != null ? ref.options : void 0) {
        block = opts.getBlock(opts.idForNode(slideDom[0]));
        opts.toggleSlide(block._id);
        blockHtml = opts.renderBlock(opts.getBlock(block))[0];
        preserveSelection(function() {
          return slideDom.closest('[data-view]').replaceWith($(blockHtml));
        });
        return initializePendingViews();
      }
    };
    Handlebars.registerHelper('render', function(block) {
      return fancyMode.render(UI.context.opts, block, UI.context.prefix)[0];
    });
    Handlebars.registerHelper('renderPlain', function(data) {
      var block, end, next, plainText, ref, text;
      text = '';
      block = UI.context.opts.data.getBlock(data.blockId);
      end = UI.context.opts.data.nextRight(block);
      while (block && block._id !== end) {
        ref = plainMode.render(UI.context.opts, block, UI.context.prefix), plainText = ref[0], next = ref[1];
        text += plainText;
        block = UI.context.opts.data.getBlock(next);
      }
      return text;
    });
    Handlebars.registerHelper('sourceHeader', function(src) {
      return src.text.substring(0, src.contentPos);
    });
    Handlebars.registerHelper('sourceBoiler', function(src) {
      return src.text.substring(0, src.infoPos);
    });
    Handlebars.registerHelper('sourceInfo', function(src) {
      return src.text.substring(src.infoPos, src.contentPos);
    });
    Handlebars.registerHelper('sourceFooter', function(src) {
      return src.text.substring(src.contentPos + src.content.length);
    });
    Handlebars.registerHelper('resultsHeader', function(res) {
      return res.text.substring(0, res.contentPos);
    });
    Handlebars.registerHelper('resultsContents', function(res) {
      return resultsArea(res.text.substring(res.contentPos));
    });
    fancyMode = {
      name: 'fancy',
      render: function(opts, block, prefix) {
        return mergeContext({}, (function(_this) {
          return function() {
            var ref;
            UI.context.opts = opts;
            UI.context.prefix = prefix;
            if (!block || ((ref = block.properties) != null ? ref.hidden : void 0)) {
              return ['', opts.data.nextRight(block)];
            } else if (block.type === 'headline') {
              return _this.renderHeadline(opts, block, prefix);
            } else if (block.type === 'chunk') {
              return _this.renderChunk(opts, block, prefix);
            } else if (block.type === 'code') {
              return _this.renderCode(opts, block, prefix);
            } else {
              return plainMode.render(opts, block, prefix);
            }
          };
        })(this));
      },
      renderView: function(type, ctx, next, data) {
        return [renderView(type, ctx, data), next];
      },
      renderHeadline: function(opts, block, prefix) {
        var id, m, next, nextText, ref, ref1, ref2, text, viewName;
        next = (ref = opts.data.nextRight(block)) != null ? ref._id : void 0;
        viewName = block.type === 'headline' && block.level === 1 && opts.isToggled(block) ? (UI.context.viewAttrs = _.merge({
          "class": 'plain'
        }, (ref1 = UI.context.viewAttrs) != null ? ref1 : {}), 'leisure-headline-plain') : 'leisure-headline';
        if (hasView(viewName)) {
          m = block.text.match(headlineRE);
          return this.renderView(viewName, null, next, {
            id: prefix + block._id,
            blockId: block._id,
            EOL: '\n',
            topLevel: block.level === 1,
            level: block.level,
            stars: m[HL_LEVEL].trim(),
            maintext: block.text.substring(m[HL_LEVEL].length),
            children: opts.data.children(block)
          });
        } else {
          text = "<span id='" + prefix + block._id + "' data-block='" + block.type + "'>";
          text += escapeHtml(block.text);
          id = block.next;
          while (id && id !== next) {
            ref2 = this.render(opts, opts.data.getBlock(id), prefix), nextText = ref2[0], id = ref2[1];
            text += nextText;
          }
          return [text + "</span>", next];
        }
      },
      renderChunk: function(opts, block, prefix) {
        if (hasView('leisure-chunk')) {
          return this.renderView('leisure-chunk', null, block.next, {
            id: prefix + block._id,
            text: this.renderOrg(blockOrg(opts.data, block)),
            EOL: '\n'
          });
        } else {
          return this.renderOrgBlock(opts, block, prefix);
        }
      },
      renderCode: function(opts, block, prefix) {
        var org, ref, ref1, ref2, results, source, viewKey;
        viewKey = "leisure-code";
        if (hasView(viewKey, block.language)) {
          org = blockOrg(opts.data, block);
          ref2 = getCodeItems((ref = (ref1 = org.children) != null ? ref1[0] : void 0) != null ? ref : org), source = ref2.source, results = ref2.results;
          return this.renderView(viewKey, block.language, block.next, {
            id: prefix + block._id,
            language: block.language,
            text: this.renderCodeOrg(block.language, org, block),
            header: block.text.substring(0, block.codePrelen),
            source: blockSource(block),
            sourceOrg: source,
            footer: block.text.substring(block.text.length - block.codePostlen, source.end()),
            inter: results ? block.text.substring(source.end(), results != null ? results.offset : void 0) : block.text.substring(source.end()),
            results: results ? resultsArea(block.text.substring(results.offset, results.end())) : '',
            resultsContent: results ? resultsArea(results.text.substring(results.contentPos)) : ''
          });
        } else {
          return plainMode.render(opts, block, prefix);
        }
      },
      renderOrgBlock: function(opts, block, prefix) {
        var text;
        text = this.renderOrg(blockOrg(opts.data, block));
        return ["<span id='" + block._id + "'>" + text + "</span>", block.next];
      },
      renderCodeOrg: function(language, org, block) {
        var allText, ctx, error, name, pos, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, source, text;
        ref2 = getCodeItems((ref = (ref1 = org.children) != null ? ref1[0] : void 0) != null ? ref : org), name = ref2.name, source = ref2.source, error = ref2.error, results = ref2.results;
        allText = org.allText();
        text = '';
        pos = 0;
        ctx = {
          allText: allText,
          language: language
        };
        ref3 = this.renderCodeSegment('name', name, allText, language, pos, text, block), pos = ref3[0], text = ref3[1];
        ref4 = this.renderCodeSegment('source', source, allText, language, pos, text, block), pos = ref4[0], text = ref4[1];
        ref5 = this.renderCodeSegment('error', error, allText, language, pos, text, block), pos = ref5[0], text = ref5[1];
        ref6 = this.renderCodeSegment('results', results, allText, language, pos, text, block), pos = ref6[0], text = ref6[1];
        if (pos < allText.length) {
          text += escapeHtml(allText.substring(pos));
        }
        return text;
      },
      renderCodeSegment: function(name, org, allText, language, pos, text, block) {
        var key;
        if (org) {
          if (hasView(key = "leisure-code-" + name, language)) {
            if (org.offset > pos) {
              text += escapeHtml(allText.substring(pos, org.offset));
            }
            text += (this.renderView(key, language, null, _.merge({
              block: block
            }, org)))[0];
            return [org.end(), text];
          } else if (name === 'results') {
            return [org.end(), resultsArea(org.allText())];
          } else {
            return [pos, text];
          }
        } else {
          return [pos, text];
        }
      },
      renderOrg: function(org) {
        var child;
        if (org instanceof SimpleMarkup) {
          return this.renderSimple(org);
        } else if (org instanceof Link) {
          return this.renderLink(org);
        } else if (org instanceof Fragment) {
          return ((function() {
            var j, len, ref, results1;
            ref = org.children;
            results1 = [];
            for (j = 0, len = ref.length; j < len; j++) {
              child = ref[j];
              results1.push(this.renderOrg(child));
            }
            return results1;
          }).call(this)).join('');
        } else {
          return org.allText();
        }
      },
      renderLink: function(org) {
        var c, desc, guts, j, leisureMatch, len, ref, title;
        if (false && (leisureMatch = org.isLeisure())) {

        } else if (org.isImage()) {
          title = ((desc = org.descriptionText()) ? " title='" + (escapeHtml(desc)) + "'" : "");
          return "<img src='" + (escapeHtml(org.path)) + "'" + title + "><span class='hidden'>" + (escapeHtml(org.allText())) + "</span>";
        } else {
          guts = this.renderMeat;
          ref = org.children;
          for (j = 0, len = ref.length; j < len; j++) {
            c = ref[j];
            guts += this.renderMeat(c, true);
          }
          if (!guts) {
            return "<span class='hidden'>[[</span><a onclick='Leisure.followLink(event)' href='" + org.path + "'>" + org.path + "</a><span class='hidden'>]]</span>";
          } else {
            return "<span class='hidden'>[[" + org.path + "][</span><a onclick='Leisure.followLink(event)' href='" + org.path + "'>" + guts + "</a><span class='hidden'>]]</span>";
          }
        }
      },
      renderSimple: function(org) {
        var c, guts, j, len, ref, text;
        guts = '';
        ref = org.children;
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          guts += this.renderOrg(c, true);
        }
        text = (function() {
          switch (org.markupType) {
            case 'bold':
              return "<b>" + guts + "</b>";
            case 'italic':
              return "<i>" + guts + "</i>";
            case 'underline':
              return "<span style='text-decoration: underline'>" + guts + "</span>";
            case 'strikethrough':
              return "<span style='text-decoration: line-through'>" + guts + "</span>";
            case 'code':
              return "<code>" + guts + "</code>";
            case 'verbatim':
              return "<code>" + guts + "</code>";
            default:
              return guts;
          }
        })();
        return "<span class='hidden'>" + org.text[0] + "</span>" + text + "<span class='hidden'>" + (goodText(org.text[0])) + "</span>";
      }
    };
    _workSpan = null;
    workSpan = function() {
      return _workSpan || createWorkSpan();
    };
    createWorkSpan = function() {
      return _workSpan = $("<span></span>");
    };
    goodHtml = function(text) {
      var ref;
      return (ref = workSpan().html(text).html()) != null ? ref : '';
    };
    goodText = function(text) {
      var ref;
      return (ref = workSpan().text(text).html()) != null ? ref : '';
    };
    resultsArea = function(results) {
      return "<span class='hidden'>" + (goodText(results)) + "</span><span data-noncontent>" + (results.replace(/^(: )(.*\n)/gm, function(m, g1, g2) {
        return goodHtml(g2);
      })) + "</span>";
    };
    createLocalData = function() {
      return new OrgData();
    };
    plainEditDiv = function(div, data) {
      $(div).addClass('plain');
      return new LeisureEditCore($(div), new OrgEditing(data));
    };
    fancyEditDiv = function(div, data) {
      return new LeisureEditCore($(div), new OrgEditing(data).setMode(fancyMode));
    };
    monitorSelectionChange = function() {
      $(document).on('selectionchange', updateSelection);
      $(window).on('scroll', updateSelection);
      return $(window).on('blur focus', function(e) {
        selectionActive = e.type === 'focus';
        return updateSelection();
      });
    };
    installSelectionMenu = function() {
      $(document.body).append("<div id='selectionBubble' contenteditable='false'></div>").append("<div id='topCaretBox' contenteditable='false'></div>").append("<div id='bottomCaretBox' contenteditable='false'></div>");
      $("#selectionBubble").html(selectionMenu).on('mouseenter', function() {
        return configureMenu($("#selectionBubble ul"));
      });
      $("#selectionBubble ul").menu({
        select: function(event, ui) {
          console.log("MENU SELECT");
          return false;
        }
      });
      return monitorSelectionChange();
    };
    selectionMenu = "<div>\n<ul>\n  <li name='insert'><a href='javascript:void(0)'><span>Insert</span></a>\n    <ul>\n      <li><a href='javascript:void(0)'><span>Leisure</span></a></li>\n      <li><a href='javascript:void(0)'><span>YAML</span></a></li>\n      <li><a href='javascript:void(0)'><span>HTML</span></a></li>\n      <li><a href='javascript:void(0)'><span>CoffeeScript</span></a></li>\n      <li><a href='javascript:void(0)'><span>JavaScript</span></a></li>\n    </ul>\n  </li>\n</ul>\n</div>";
    configureMenu = function(menu) {
      return console.log("configure menu");
    };
    throttledUpdateSelection = _.throttle((function() {
      return actualSelectionUpdate();
    }), 30, {
      leading: true,
      trailing: true
    });
    updateSelection = function() {
      return throttledUpdateSelection();
    };
    actualSelectionUpdate = function() {
      var bubble, c, editor, left, p, top;
      if (selectionActive) {
        if (editor = findEditor(getSelection().focusNode)) {
          c = editor.domCursorForCaret();
          if (!c.isEmpty() && (p = c.textPosition()) && isContentEditable(c.node)) {
            left = p.left;
            top = p.top;
            bubble = $("#selectionBubble")[0];
            bubble.style.left = left + "px";
            bubble.style.top = (top - bubble.offsetHeight) + "px";
            $(document.body).addClass('selection');
            editor.trigger('selection');
            return;
          }
        }
      }
      $(document.body).removeClass('selection');
      return editor != null ? editor.trigger('selection') : void 0;
    };
    isContentEditable = function(node) {
      return (node instanceof Element ? node : node.parentElement).isContentEditable;
    };
    followLink = function(e) {
      return console.log("Click link", e);
    };
    mergeExports({
      findEditor: findEditor,
      hideSlide: hideSlide,
      toggleSlideMode: toggleSlideMode,
      followLink: followLink
    });
    return {
      createLocalData: createLocalData,
      plainEditDiv: plainEditDiv,
      fancyEditDiv: fancyEditDiv,
      OrgData: OrgData,
      installSelectionMenu: installSelectionMenu,
      blockOrg: blockOrg,
      setResult: setResult,
      setError: setError
    };
  });

}).call(this);

//# sourceMappingURL=editorSupport.js.map
