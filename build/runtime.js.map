{
  "version": 3,
  "file": "runtime.js",
  "sourceRoot": "..",
  "sources": [
    "src/runtime.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\n'use strict'\ndefine ['./base', './docOrg', './ast', 'lodash', 'immutable', 'lib/js-yaml', 'bluebird', 'browser-source-map-support'], (Base, DocOrg, Ast, _, Immutable, Yaml, Bluebird)->\n  SourceMapSupport?.install()\n  {\n    readFile\n    statFile\n    readDir\n    writeFile\n    defaultEnv\n    SimpyCons\n    simpyCons\n    resolve\n    lazy\n    nsLog\n    funcInfo\n    argNames\n    getDebugType\n    debugTypes\n  } = root = Base\n  {\n    parseYaml\n  } = DocOrg\n  {\n    define\n    nakedDefine\n    cons\n    Nil\n    head\n    tail\n    getType\n    getDataType\n    ast2Json\n    ensureLeisureClass\n    LeisureObject\n    mkProto\n    setType\n    setDataType\n    functionInfo\n    nameSub\n    isPartial\n    partialCall\n    leisureFunctionNamed\n    LeisureObject\n    classNameForType\n    classForType\n    types\n    declareTypeFunc\n  } = Ast\n  {\n    Map\n    Set\n    List\n  } = Immutable\n  {\n    dump\n  } = Yaml\n  {\n    Promise\n  } = Bluebird\n\n  rz = resolve\n  lz = lazy\n  lc = Leisure_call\n  gensymCounter = 0\n  functionInfo = (window ? global).LeisureFunctionInfo\n  #(window ? global).L_PROMISE_MONAD = true\n\n#########\n# code\n#########\n\n  checkPartial = (window ? global).L_checkPartial = (func, args, traceCreate, traceCall)->\n    if typeof func == 'string' then func = leisureFunctionNamed func\n    if func.L$info.length != args.length then Leisure_primCall func, 0, args, func.length, traceCreate, traceCall\n\n  call = (args...)-> basicCall(args, defaultEnv, identity)\n\n  callMonad = (args..., env, cont)-> basicCall(args, env, cont)\n\n  basicCall = (args, env, cont)->\n    res = rz global[\"L_#{args[0]}\"]\n    for arg in args[1..]\n      res = do (arg)-> res(lz arg)\n    runMonad2 res, env, cont\n\n  consFrom = (array, i)->\n    i = i || 0\n    if i < array.length then cons array[i], consFrom(array, i + 1) else rz L_nil\n\n  noMemo = (f)->\n    Object.defineProperty f, 'memo', set: ->\n    f\n\n############\n# LOGIC\n############\n\n  identity = (x)-> x\n  _identity = (x)-> rz x\n  _unit = setType ((x)->rz x), 'unit'\n  _true = setDataType (setType ((a)->(b)->rz a), 'true'), 'true'\n  _false = setDataType (setType ((a)->(b)->rz b), 'false'), 'false'\n  left = (x)-> setType ((lCase)->(rCase)-> rz(lCase)(lz x)), 'left'\n  right = (x)-> setType ((lCase)->(rCase)-> rz(rCase)(lz x)), 'right'\n  some = (x)-> setType ((someCase)->(noneCase)-> rz(someCase)(lz x)), 'some'\n  none = setType ((someCase)->(noneCase)-> rz(noneCase)), 'none'\n  booleanFor = (bool)-> if bool then rz L_true else rz L_false\n  do ->\n    'use strict'\n    define 'eq', (a, b)-> checkPartial(L_eq, arguments) || booleanFor rz(a) == rz(b)\n    define '==', (a, b)-> checkPartial(L_$p$p, arguments) || booleanFor rz(a) == rz(b)\n    define '!=', (a, b)-> checkPartial(L_$k$p, arguments) || booleanFor rz(a) != rz(b)\n    define 'hasType', (data, func)-> checkPartial(L_hasType, arguments) ||(\n      typeName = rz func\n      if typeof typeName != 'string'\n        hadFunc = true\n        typeName = getDataType(rz func)\n      booleanFor if typeName in ['string','number'] then typeof rz(data) == typeName\n      else\n        type = if typeName[0] == '*' then (window ? global)[typeName.substring 1] else types[typeName]\n        if !type\n          if !hadFunc then console.log new Error \"Warning, undeclared type #{typeName}, doing simple string compare\"\n          getType(rz data) == typeName\n        else rz(data) instanceof type)\n    define 'getDataType', (func)-> if typeof rz(func) == 'string' then rz(func) else getDataType(rz(func))\n    # using arity makes compiling parseAst.lsr crash\n    define 'assert', (bool, msg, expr)-> checkPartial(L_assert, arguments) || rz(bool)(expr)(->\n      err = new Error(rz msg)\n      #err.stack = \"Leisure stack:\\n#{err}\\n   at #{L$thunkStack.reverse().join '\\n   at '}\\n\\nJS Stack:\\n#{err.stack}\"\n      console.error err.stack\n      throw err\n      )\n    define 'assertLog', (bool)->(msg)->(expr)-> rz(bool)(expr)(->\n      console.log new Error(rz msg).stack\n      console.log \"LOGGED ERROR -- RESUMING EXECUTION...\"\n      rz expr)\n    define 'trace', (msg)->\n      console.log \"STACKTRACE: \", new Error(rz msg).stack\n      msg\n    define 'jsTrue', (x)-> if rz(x) then _true else _false\n    define 'error', (msg)-> throw new Error rz msg\n\n############\n# MATH\n############\n\n  define '+', (x, y)-> checkPartial(L_$o, arguments) || rz(x) + rz(y)\n  define '-', (x, y)-> checkPartial(L_$_, arguments) || rz(x) - rz(y)\n  define '*', (x, y)-> checkPartial(L_$g, arguments) || rz(x) * rz(y)\n  define '/', (x, y)-> checkPartial(L_$f, arguments) || rz(x) / rz(y)\n  define '%', (x, y)-> checkPartial(L_$A, arguments) || rz(x) % rz(y)\n  define '<', (x, y)-> checkPartial(L_$y, arguments) || booleanFor rz(x) < rz(y)\n  define '<=', (x, y)-> checkPartial(L_$y$p, arguments) || booleanFor rz(x) <= rz(y)\n  define '>', (x, y)-> checkPartial(L_$z, arguments) || booleanFor rz(x) > rz(y)\n  define '>=', (x, y)-> checkPartial(L_$z$p, arguments) || booleanFor rz(x) >= rz(y)\n  define 'floor', (x)-> Math.floor(rz x)\n  define 'ceil', (x)-> Math.ceil(rz x)\n  define 'min', (x, y)-> checkPartial(L_min, arguments) || Math.min rz(x), rz(y)\n  define 'max', (x, y)-> checkPartial(L_max, arguments) || Math.max rz(x), rz(y)\n  define 'round', (x)-> Math.round(rz x)\n  define 'abs', (x)-> Math.abs(rz x)\n  define 'sqrt', (x)-> Math.sqrt(rz x)\n  define 'acos', (x)-> Math.acos(rz x)\n  define 'asin', (x)-> Math.asin(rz x)\n  define 'atan', (x)-> Math.atan(rz x)\n  define 'atan2', (x, y)-> checkPartial(L_atan2, arguments) || Math.atan2(rz(x), rz(y))\n  define 'cos', (x)-> Math.cos(rz x)\n  #define 'log', (x)-> Math.log(rz x)\n  define 'sin', (x)-> Math.sin(rz x)\n  define 'tan', (x)-> Math.tan(rz x)\n\n  define 'rand', -> makeSyncMonad (env, cont)->\n    cont (Math.random())\n  define 'randInt', (low, high)-> checkPartial(L_randInt, arguments) ||\n    makeSyncMonad (env, cont)->\n      cont (Math.floor(rz(low) + Math.random() * rz(high)))\n  define '^', (x, y)-> checkPartial(L_$i, arguments) || Math.pow(rz(x), rz(y))\n  define 'number', setDataType ((n)-> Number rz n), 'number'\n\n############\n# STRINGS\n############\n\n  define '_show', (data)->\n    if typeof rz(data) in ['string', 'number', 'boolean'] then JSON.stringify rz data\n    else if getType(rz data) == 'err' then rz(L_errMsg)(data)\n    else String rz data\n  define 'strString', (data)-> String rz data\n  define '_strAsc', (str)-> rz(str).charCodeAt(0)\n  define '_strChr', (i)-> String.fromCharCode(rz i)\n  define '_strAt', (str, index)-> checkPartial(L__strAt, arguments) ||\n    rz(str)[strCoord(rz(str), rz(index))]\n  define '_strStartsWith', (str, prefix)-> checkPartial(L__strStartsWith, arguments) ||\n    booleanFor rz(str).substring(0, rz(prefix).length) == rz(prefix)\n  define '_strLen', (str)-> rz(str).length\n  define '_strTrim', (str)-> String(rz str).trim()\n  define '_strToLowerCase', (str)-> rz(str).toLowerCase()\n  define '_strToUpperCase', (str)-> rz(str).toUpperCase()\n  define '_strReverse', (str)->\n    s = rz(str)\n    result = ''\n    for i in [s.length - 1 .. 0] by -1\n      result += s[i]\n    result\n  define '_strReplace', (str, pat, repl)-> checkPartial(L__strReplace, arguments) ||\n    rz(str).replace rz(pat), rz(repl)\n  strCoord = (str, coord)-> if coord < 0 then str.length + coord else coord\n  define '_strSubstring', (str, start, end)-> if p = checkPartial(L__strSubstring, arguments) then p else\n    a = strCoord(rz(str), rz(start))\n    b = strCoord(rz(str), rz(end))\n    if b < a && rz(end) == 0 then b = rz(str).length\n    rz(str).substring a, b\n  define '_strSplit', (str, pat)-> checkPartial(L__strSplit, arguments) ||\n    consFrom rz(str).split if rz(pat) instanceof RegExp then rz(pat) else new RegExp rz(pat)\n  define '_strJoin', (list, sep)-> checkPartial(L__strJoin, arguments) ||\n    rz(list).toArray().join rz(sep)\n  define '_strCat', (list)-> _.map(rz(list).toArray(), (el)-> if typeof el == 'string' then el else rz(L_show)(lz el)).join('')\n  define '_strAdd', (s1, s2)-> checkPartial(L__strAdd, arguments) ||\n    rz(s1) + rz(s2)\n  define '_strMatch', (str, pat)-> if p = checkPartial(L__strMatch, arguments) then p else\n    m = rz(str).match (if rz(pat) instanceof RegExp then rz pat else new RegExp rz pat)\n    if m\n      groups = []\n      pos = 1\n      while m[pos]\n        groups.push m[pos++]\n      if typeof m.index != 'undefined' then consFrom [m[0], consFrom(groups), m.index, m.input]\n      else consFrom [m[0], consFrom(groups)]\n    else if L_nil then rz L_nil\n    else Nil\n  define '_strToList', (str)-> strToList rz str\n  strToList = (str)-> if str == '' then Nil else cons str[0], strToList str.substring 1\n  define '_strFromList', (list)-> strFromList rz list\n  strFromList = (list)-> if list instanceof Leisure_nil then '' else head(list) + strFromList(tail list)\n  define '_regexp', (str)-> new RegExp rz str\n  define '_regexpFlags', (str, flags)-> checkPartial(L__regexpFlags, arguments) ||\n    new RegExp rz(str), rz(flags)\n  define '_jsonParse', (str, failCont, successCont)-> if p = checkPartial(L__jsonParse, arguments) then p else\n    #str = rz str\n    #try\n    #  p = JSON.parse str\n    #catch err\n    #  if str.match /^0+[0-9]/\n    #    try\n    #      p = JSON.parse str.replace /^0+/, ''\n    #    catch err\n    #  if p then return rz(failCont) lz err\n    #rz(successCont) lz p\n    try\n      p = JSON.parse rz str\n      rz(successCont) lz p\n    catch err\n      rz(failCont) lz err\n  define 'jsonStringify', (obj, failCont, successCont)-> if p = checkPartial(L_jsonStringify, arguments) then p else\n    try\n      s = JSON.stringify rz obj\n      rz(successCont) lz s\n    catch err\n      rz(failCont) lz err\n\n############\n# arrays\n############\n\n  define '_sort', (predicate, list)-> checkPartial(L__sort, arguments) || (\n    result = rz(list).toArray()\n    pred = rz(predicate)\n    result.sort (a, b)-> pred(a)(b)(-1)(1)\n    consFrom result)\n\n############\n# properties\n############\n\n  define 'getProperties', (func)-> if rz(func)?.properties then rz(func).properties else rz L_nil\n\n  define 'setProperty', (func, name, value)-> checkPartial(L_setProperty, arguments) ||\n    makeSyncMonad (env, cont)->\n      f = rz func\n      f.properties = rz(L_aconsf)(name, value, lz f.properties ? rz(L_nil))\n      cont f.properties\n\n############\n# Diagnostics\n############\n\n  define 'log', (str, res)-> checkPartial(L_log, arguments) || (\n    console.log rz str\n    rz res)\n\n  define 'logStack', (str, res)-> checkPartial(L_logStack, arguments) || (\n    console.log new Error(rz str).stack\n    rz res)\n\n  # an identity function you can put a breakpoint on\n  define 'breakpoint', (x)->\n    console.log 'Break point ', rz x\n    rz x\n\n############\n# IO Monads\n############\n\n# Make a new function and hide func and binding in properties on it\n# making them inaccessible to pure Leisure code\n# so people won't accidentally fire off side effects\n  makeMonad = (guts)->\n    m = -> throw new Error \"ILLEGAL CALL TO MONAD FUNCTION!\"\n    m.__proto__ = io.prototype\n    m.cmd = guts\n    m.type = 'io'\n    m\n\n  makeSyncMonad = (guts)->\n    m = makeMonad guts\n    m.sync = true\n    m\n\n  nextMonad = (cont)-> cont\n\n  replaceErr = (err, msg)->\n    err.message = msg\n    err\n\n  defaultEnv.write = (str)-> process.stdout.write(str)\n  defaultEnv.err = (err)-> @write \"ENV Error: #{err.stack ? err}\"\n  defaultEnv.prompt = ->throw new Error 'Environment does not support prompting!'\n\n  monadModeSync = false\n\n  getMonadSyncMode = -> monadModeSync\n\n  withSyncModeDo = (newMode, block)->\n    oldMode = monadModeSync\n    monadModeSync = newMode\n    try\n      block()\n    catch err\n      console.log \"ERR: #{err.stack ? err}\"\n    finally\n      #if !monadModeSync && oldMode then console.log \"REENABLING SYNC\"\n      #monadModeSync = oldMode\n\n  runMonad = (monad, env, cont)->\n    env = env ? root.defaultEnv\n    withSyncModeDo true, -> newRunMonad monad, env, cont, []\n\n  isIO = (v)-> typeof v == 'function' && v.cmd?\n\n  continueMonads = (contStack, env)->\n    (result)-> withSyncModeDo false, -> newRunMonad result, env, null, contStack\n\n  asyncMonad = {toString: -> \"<asyncMonadResult>\"}\n\n  warnAsync = false\n\n  setWarnAsync = (state)-> warnAsync = state\n\n  newRunMonad = (monad, env, cont, contStack)->\n    #if monad instanceof Monad2\n    #  console.log 'MONAD 2'\n    #  return runMonad2 monad, env, cont, contStack\n    if cont then contStack.push cont\n    try\n      while true\n        #monad = L_asIO?()(lz monad) ? monad\n        if monad instanceof Monad2\n          return runMonad2 monad, env, continueMonads(contStack, env), []\n        else if isIO monad\n          if monad.binding\n            do (bnd = monad.binding)-> contStack.push (x)-> rz(bnd) lz x\n            monad = rz monad.monad\n            continue\n          else if !monad.sync\n            monadModeSync = false\n            #console.log \"turned off sync\"\n            if warnAsync then console.log \"async monad\"\n            monad.cmd(env, continueMonads(contStack, env))\n            return asyncMonad\n          result = monad.cmd(env, identity)\n        else\n          monadModeSync = true\n          result = monad\n        if !contStack.length then return result\n        monad = contStack.pop() result\n    catch err\n      err = replaceErr err, \"\\nERROR RUNNING MONAD, MONAD: #{monad}, ENV: #{env}...\\n#{err.message}\"\n      console.log err.stack ? err\n      if env.errorHandlers.length then env.errorHandlers.pop() err\n\n  callBind = (value, contStack)->\n    func = contStack.pop()\n    val = lz value\n    tmp = L_bind()(val)(lz func)\n    if isIO(tmp) && (tmp.monad == val || tmp.monad == value)\n      console.log \"peeling bind\"\n      func value\n    else tmp\n    #if isIO(tmp) && tmp?.binding? then func value else tmp\n\n  class io extends LeisureObject\n    toString: -> \"Monad: #{@cmd.toString()}\"\n\n  declareTypeFunc 'io', io\n\n  (global ? window).L_runMonads = (array, env, cont)->\n    runMonad2 array.slice().reverse().reduce((result, element)->\n      bind element, lz (x)-> rz result), env ? root.defaultEnv, cont ? resolve\n\n  ensureLeisureClass 'unit'\n\n  class Leisure_unit extends LeisureObject\n    toString: -> 'unit'\n\n  _unit = mkProto Leisure_unit, setType ((_x)-> rz(_x)), 'unit'\n\n  unit = -> L_unit || _unit\n\n  define 'define', (name, arity, src, def)-> checkPartial(L_define, arguments) ||\n    makeSyncMonad (env, cont)->\n      nakedDefine rz(name), def, rz(arity), rz(src)\n      cont unit()\n\n#  define 'newDefine', (name, arity, src, def)-> checkPartial(L_newDefine, arguments) ||\n#    new Monad2 (env, cont)->\n#      if global.verbose?.gen then console.log \"DEFINE: #{name}\"\n#      nakedDefine rz(name), def, rz(arity), rz(src), null, null, true\n#      cont unit()\n\n  define 'newDefine', (name, arity, src, def, debugDef)-> checkPartial(L_newDefine, arguments) ||\n    new Monad2 (env, cont)->\n      if global.verbose?.gen then console.log \"DEFINE: #{name}\"\n      nakedDefine rz(name), def, rz(arity), rz(src), null, null, true, false, getDebugType(), debugDef\n      #nakedDefine rz(name), def, rz(arity), rz(src), null, null, true\n      cont unit()\n\n#  runMonads = (monads, i, arg)->\n#    if i < monads.length\n#      console.log \"running monad #{i}\"\n#      setTimeout (-> newRunMonad monads[i](arg), defaultEnv, ((x)-> runMonads monads, i + 1, x), []), 1\n#\n#  global.L_runMonads = (monadArray)->\n#    console.log \"RUNNING #{monadArray.length} monads, ...\"\n#    runMonads monadArray, 0, 0\n#    monadArray\n\n  if global.L_DEBUG\n    (window ? global).runMonad2 = runMonad2 = (monad, env, cont)->\n      if monad instanceof Monad2\n        if !env then env = {}\n        st = env.monadStack  ? (env.monadStack = [])\n        st.push monad\n        try\n          monad.cmd(env, cont)\n          st.pop()\n        catch err\n          dumpMonadStack err, env\n          throw err\n      else if isIO monad\n        #console.log \"OLD MONAD: #{monad}\"\n        monad.cmd(env, cont)\n      else cont monad\n  else if (window ? global).L_PROMISE_MONAD\n    (window ? global).runMonad2 = runMonad2 = (monad, env, cont)->\n      if monad instanceof Monad2 then new window.Promise((resolve, reject)-> monad.cmd(env, resolve)).then cont\n      else if isIO monad\n        #console.log \"OLD MONAD: #{monad}\"\n        monad.cmd(env, cont)\n      else cont monad\n  else\n    (window ? global).runMonad2 = runMonad2 = (monad, env, cont)->\n      if (monad instanceof Monad2) || isIO monad\n        sync = false\n        promiseSucceed = null\n        r = null\n        result = monad.cmd env, (res)->\n          sync = true\n          r = cont res\n          if promiseSucceed then promiseSucceed r else r\n        if sync then r\n        else new Promise (succeed, fail)->\n          promiseSucceed = succeed\n          null\n      else cont monad\n\n  if global.L_DEBUG\n    class Monad2 extends io\n      constructor: (@mname, @cmd, @cmdToString)->\n        super()\n        @err = new Error()\n        if typeof @mname == 'function'\n          @cmdToString = @cmd\n          @cmd = @mname\n          @mname = null\n        if !@cmdToString then @cmdToString = => (if name then \"#{mname}: \" else '') + @cmd.toString()\n      stack: ->\n        n = 0\n        for i in [0...3]\n          n = @err.stack.indexOf('\\n', n) + 1\n        @err.stack.substring(n, @err.stack.indexOf('\\n', n)).trim().substring 3\n  else\n    class Monad2 extends io\n      constructor: (@mname, @cmd, @cmdToString)->\n        super()\n        if typeof @mname == 'function'\n          @cmdToString = @cmd\n          @cmd = @mname\n          @mname = null\n        if !@cmdToString then @cmdToString = => (if @mname then \"#{@mname}: \" else '') + @cmd.toString()\n\n  Monad2::toString = -> \"Monad2: #{@cmdToString()}\"\n\n  class Monad3 extends io\n    constructor: (@mname, @cmd, @cmdToString)->\n      super()\n      @err = new Error()\n      if typeof @mname == 'function'\n        @cmdToString = @cmd\n        @cmd = @mname\n        @mname = null\n        if !@cmdToString then @cmdToString = => (if name then \"#{mname}: \" else '') + @cmd.toString()\n\n  Monad3::toString = -> \"Monad3: #{@cmdToString()}\"\n\n  dumpMonadStack = (err, env)->\n    if global.L_DEBUG && !err.L_LOGGED && env.monadStack\n      err.L_LOGGED = true\n      console.log 'ERROR IN MONAD, STACK...'\n      (console.log \"#{n.mname}: #{n.stack()}\") for n in env.monadStack\n      console.log()\n\n  define 'isIO', (m)->\n    val = rz(m)\n    if isIO(val) || val instanceof Monad2 || val instanceof Monad3 then _true else _false\n\n  define 'dumpStack', new Monad2 (env, cont)->\n    e = new Error()\n    dumpMonadStack e, env\n    console.log e.stack\n    cont unit()\n\n#  define 'return', (v)-> new Monad2 ((env, cont)-> cont rz v), -> \"return #{rz v}\"\n\n  define 'defer', (v)-> new Monad2 ((env, cont)-> setTimeout (->cont rz v), 1), ->\n    \"defer #{rz v}\"\n\n  define 'bind', bind = (m, binding)-> if p = checkPartial(L_bind, arguments) then p else\n    bnd = new Monad2 'bind', ((env, cont)->\n      b = bnd\n      while b instanceof Monad2 && b.isBind\n        sync = true\n        async = true\n        runMonad2 rz(b.arg), env, (result)->\n          b = rz(b.binding)(lz result)\n          if sync then async = false\n          else runMonad2 b, env, cont\n        sync = false\n        if async then return _true\n      runMonad2 b, env, cont)\n    bnd.isBind = true\n    bnd.arg = m\n    bnd.binding = binding\n    bnd\n\n  define 'pierce', (value)->\n    new Monad2 'bind', (env, cont)->\n      ret = null\n      runMonad2 rz(value), env, (r)->\n        ret = cont r\n      ret\n\n  envTag = 0\n\n  define 'tagEnv', new Monad2 'tagEnv', (env, cont)->\n    if !env.tag then env.tag = ++envTag\n    cont lz env.tag\n\n  define 'currentTag', new Monad2 'currentTag', (env, cont)-> cont lz envTag\n\n  values = {}\n\n  define 'primBind', bind\n\n#\n# Error handling\n#\n  define 'protect', (value)->\n    makeMonad (env, cont)->\n      hnd = (err)->\n        console.log \"PROTECTED ERROR: #{err.stack ? err}\"\n        cont left err.stack ? err\n      env.errorHandlers.push hnd\n      runMonad2 rz(value), env, ((result)->\n        #console.log \"PROTECT CONTINUING WITH RESULT: #{result}\"\n        if env.errorHandlers.length\n          if env.errorHandlers[env.errorHandlers.length - 1] == hnd then env.errorHandlers.pop()\n          else if _.inclues(env.errorHandlers, hnd)\n            while env.errorHandlers[env.errorHandlers.length - 1] != hnd\n              env.errorHandlers.pop()\n        cont right result), []\n\n#\n# ACTORS\n#\n# To create an actor:\n#   actor name function\n#     -- function takes one arg, to process messages\n#     -- if function returns a monad, it executes the monad\n#\n# To send a message:\n#   send name message\n#     -- send message to the named actor\n#\n  actors = {}\n\n  define 'actor', (name, func)-> checkPartial(L_actor, arguments) || (\n    actors[name] = func\n    func.env = values: {}\n    func.env.__proto__ = defaultEnv)\n\n  define 'send', (name, msg)-> checkPartial(L_send, arguments) ||\n    setTimeout (-> runMonad2 (rz(actors[name])(msg)), rz(actors[name]).env), 1\n\n######\n## global values\n######\n\n  define 'hasValue', (name)->\n    makeSyncMonad (env, cont)->\n      cont booleanFor values[rz name]?\n\n  define 'getValueOr', (name, defaultValue)-> checkPartial(L_getValueOr, arguments) ||\n    new Monad2 (env, cont)->\n      cont(values[rz name] ? rz(defaultValue))\n\n  define 'getValueOpt', (name)-> checkPartial(L_getValueOpt, arguments) ||\n    new Monad2 (env, cont)->\n      if v = values[rz name] then cont some v\n      else cont none\n\n  define 'getValue', (name)->\n    new Monad2 'getValue', (env, cont)->\n      if v = values[rz name] then cont v\n      else cont unit()\n\n# New getValue for when the option monad is integrated with the parser\n#define 'getValue', (name)->\n#  makeSyncMonad (env, cont)->\n#    cont (if !(rz(name) of values) then none else some values[rz name])\n\n  define 'setValue', (name, value)-> checkPartial(L_setValue, arguments) ||\n    new Monad2 'setValue', (env, cont)->\n      values[rz name] = rz value\n      cont unit()\n\n  define 'deleteValue', (name)->\n    new Monad2 (env, cont)->\n      delete values[rz name]\n      cont unit()\n\n  setValue = (key, value)-> values[key] = value\n\n  getValue = (key)-> values[key]\n\n######\n## local values\n######\n\n  define 'envHas', (name)->\n    makeSyncMonad (env, cont)->\n      cont booleanFor env.values?[rz name]?\n\n  define 'envGetOr', (name, defaultValue)-> checkPartial(L_envGetOr, arguments) ||\n    makeSyncMonad (env, cont)->\n      cont(env.values?[rz name] ? rz(defaultValue))\n\n  define 'envGet', (name)->\n    makeSyncMonad (env, cont)->\n      cont env.values?[rz name] ? unit()\n\n  define 'envGetOpt', (name)->\n    makeSyncMonad (env, cont)->\n      cont if (v = env.values?[rz name])? then some v else none\n\n  define 'envSet', (name, value)-> checkPartial(L_envSet, arguments) ||\n    makeSyncMonad (env, cont)->\n      if !env.values? then env.values = {}\n      env.values[rz name] = rz(value)\n      cont unit()\n\n  define 'envDelete', (name)->\n    makeSyncMonad (env, cont)->\n      if env.values? then delete env.values[rz name]\n      cont unit()\n\n  setValue 'macros', Nil\n\n  define 'defMacro', (name, def)-> checkPartial(L_defMacro, arguments) ||\n    makeSyncMonad (env, cont)->\n      values.macros = cons cons(rz(name), rz(def)), values.macros\n      cont unit()\n\n  hasMacro = (mac)-> values.macros[mac]\n\n  define 'funcList', makeSyncMonad (env, cont)->\n    cont consFrom global.leisureFuncNames.toArray().sort()\n\n  define 'funcs', makeSyncMonad (env, cont)->\n    cont lz global.leisureFuncNames\n\n  define 'funcSrc', (func)->\n    if typeof rz(func) == 'function'\n      info = functionInfo[rz(func).L$info?.name]\n      if info?.src then some info.src else none\n\n  define 'ast2Json', (ast)-> JSON.stringify ast2Json rz ast\n\n  define 'override', (name, newFunc)-> checkPartial(L_override, arguments) ||\n    makeSyncMonad (env, cont)->\n      n = \"L_#{nameSub rz name}\"\n      oldDef = global[n]\n      if !oldDef then throw new Error(\"No definition for #{rz name}\")\n      global[n] = lz rz(newFunc)(oldDef)\n      cont unit()\n\n#######################\n# type cases\n#######################\n\n  define '_defTypeCase', (funcName, type, func)-> checkPartial(L__defTypeCase, arguments) || (\n    funcName = rz funcName\n    type = rz type\n    func = rz func\n    n = \"L_#{nameSub funcName}\"\n    oldDef = functionInfo[funcName]?.mainDef ? global[n]\n    #if oldDef && func.length != oldDef.length\n    #  throw new Error \"Attempt to define a type case with different arity than the base\"\n    if !cl = classForType type\n      throw new Error \"Attempt to define a type case for a nonexistent type: #{type}\"\n    if !functionInfo[funcName]?.typeCase\n      args = argNames oldDef ? func\n      dispatch = \"\"\"\n        \"use strict\";\n        (function(#{args.join ', '}) {\n          return (resolve(#{args[0]}).#{n} || LeisureObject.prototype.#{n} || function(){throw new Error(\"No typecase for #{funcName}.\" + L_getType(#{args[0]}))}).apply(null, arguments);\n        })\n      \"\"\"\n      dispFunc = lz eval dispatch\n      if !global[n] then nakedDefine funcName, dispFunc, args.length, dispatch\n      else\n        global[n] = global.leisureFuncs[n] = functionInfo[funcName].mainDef = dispFunc\n        if !dispFunc.L$info then dispFunc.L$info = {}\n        dispFunc.L$info.length = args.length\n        if functionInfo[funcName].altList.length then buildAdvisedFunc funcName\n      functionInfo[funcName].typeCase = true\n      LeisureObject.prototype[n] = oldDef\n    cl.prototype[n] = func\n    unit())\n\n  define '_declareType', (subtype, supertype)-> checkPartial(L__declareType, arguments) || (\n    subtype = rz subtype\n    supertype = rz supertype\n    nilSupertype = supertype == 0\n    if !nilSupertype && !supercl = classForType supertype\n      throw new Error \"Attempt to extend a nonexistant type: #{supertype}\"\n    if subcl = classForType subtype\n      if supercl && subcl.prototype.__proto__ != supercl.prototype\n        subcl.prototype.__proto__ = supercl.prototype\n    else\n      subcl = ensureLeisureClass subtype, !nilSupertype && supertype\n      #if supercl\n      #  subcl.prototype = Object.create(supercl.prototype)\n      #  subcl.prototype.constructor = subcl\n    unit())\n\n#######################\n# IO\n#######################\n\n#  define 'trace', (msg)->\n#    makeSyncMonad (env, cont)->\n#      cont (root.E = new Error(msg)).stack\n\n  define 'debug', ->\n    debugger\n    unit()\n\n  noMemo L_debug\n\n  define 'debugX', (x)->\n    debugger\n    resolve x\n\n  #define 'debug', new Monad2 'debug', (env, cont)->\n  #    debugger\n  #    cont unit()\n\n# TODO make this use eval.litcoffee's gensym\n\n  define 'gensym', makeSyncMonad (env, cont)-> cont \"G#{gensymCounter++}\"\n\n  define 'print', (msg)->\n    makeSyncMonad (env, cont)->\n      env.write env.presentValue rz msg\n      cont unit()\n\n  define 'print2', (msg)->\n    new Monad2 'print2', ((env, cont)->\n      env.write env.presentValue rz msg\n      cont unit()), -> \"print2 #{rz msg}\"\n\n  define 'write', (msg)->\n    new Monad2 'write', ((env, cont)->\n      env.write String(rz msg)\n      cont unit()), -> \"write #{rz msg}\"\n\n  define 'prompt', (msg)->\n    new Monad2 'promptDefault', ((env, cont)->\n      env.prompt(String(rz msg), undefined, (input)->\n        cont if input then some input else none)), ->\n      \"prompt #{rz msg} #{rz defaultValue}\"\n\n\n  define 'promptDefault', (msg, defaultValue)-> if r = doPartial arguments then r else\n    new Monad2 'promptDefault', ((env, cont)->\n      env.prompt(String(rz msg), String(rz defaultValue), (input)->\n        cont if input then some input else none)), ->\n      \"prompt #{rz msg} #{rz defaultValue}\"\n\n  define 'oldWrite', (msg)->\n    makeSyncMonad (env, cont)->\n      env.write String(rz msg)\n      cont unit()\n\n  define 'readFile', (name)->\n    new Monad2 'readFile', (env, cont)->\n      env.readFile rz(name), (err, contents)->\n        cont (if err then left err.stack ? err else right contents)\n\n  define 'readDir', (dir)->\n    new Monad2 'readDir', (env, cont)->\n      env.readDir rz(dir), (err, files)->\n        cont (if err then left err.stack ? err else right files)\n\n  define 'writeFile', (name, data)-> checkPartial(L_writeFile, arguments) ||\n    new Monad2 'writeFile', (env, cont)->\n      env.writeFile rz(name), rz(data), (err, contents)->\n        cont (if err then left err.stack ? err else right contents)\n\n  define 'statFile', (file)->\n    makeMonad (env, cont)->\n      env.statFile rz(file), (err, stats)->\n        cont (if err then left err.stack ? err else right stats)\n\n  define 'rand', makeSyncMonad (env, cont)->\n    cont(Math.random())\n\n  define 'js', (str)->\n    makeSyncMonad (env, cont)-> (Leisure.setLounge ? (e, cont)-> cont()) env, ->\n      try\n        cont right leisurify eval rz '\"use strict\";\\n' + str\n      catch err\n        cont left err\n\n  leisurify = (value)->\n    if typeof value == 'function'\n      if !value.memo then value.memo = nFunction value.length, ->\n        valueArgs = arguments\n        new Monad2 (env, cont)-> cont value (_.map valueArgs, (x)-> rz x)...\n      value.memo\n    else value\n\n  nFunction = (nArgs, def)->\n    (eval \"\"\"\n      (function (def) {\n        return function (#{(\"arg#{i}\" for i in [0...nArgs]).join ', '}) {\n          return checkPartial(f, arguments) || def.apply(null, arguments);\n        };\n        //var f = function (#{(\"arg#{i}\" for i in [0...nArgs]).join ', '}) {\n        //  return checkPartial(f, arguments) || def.apply(null, arguments);\n        //};\n        //return f;\n      })\n    \"\"\") def\n\n  define 'delay', (timeout)->\n    new Monad2 (env, cont)->\n      setTimeout (-> cont unit()), rz(timeout)\n\n  define 'currentTime', new Monad2 (env, cont)-> cont Date.now\n\n  define 'once', makeSyncMonad (->\n    ran = false\n    (env, cont)->\n      if !ran\n        console.log \"RUNNING\"\n        ran = true\n        cont unit()\n      else console.log \"ALREADY RAN\")()\n\n##################\n# Function advice\n##################\n\n# later advice overrides earlier advice\n  buildAdvisedFunc = (name)->\n    nm = \"L_#{nameSub name}\"\n    info = functionInfo[name]\n    main = buildAdvisedFuncDef name, nm, info, info.alts, info.alts, info.mainDef\n    if info.debugType\n      debugMain = buildAdvisedFuncDef name, nm, info, info.debugAlts, info.alts, info.mainDebugDef || info.mainDef\n    currentDef = if debugTypes[info.debugType] == 'active' then debugMain else main\n    global[nm] = global.leisureFuncNames[nm] = lz currentDef\n\n  buildAdvisedFuncDef = (name, nm, info, alts, fallbackAlts, mainDef)->\n    alts = (alts[i] || fallbackAlts[i] for i in info.altList)\n    alts.reverse()\n    newDef = -> if p = checkPartial(mainDef, arguments) then p else\n      for alt in alts\n        opt = alt\n        # TODO -- once lambdas are properly generated, opt.apply(null, arguments)\n        for arg in arguments\n          opt = opt arg\n        if getType(opt) == 'some' then return opt(lz (x)->rz x)(lz _false)\n      if mainDef\n        res = mainDef\n        for arg in arguments\n          res = res arg\n        return res\n      throw new Error \"No default definition for #{name}\"\n    newDef.L$info = length: info.mainDef?.L$info.length, name: name\n    functionInfo[name].newArity = true\n    newDef\n\n  advise = (name, alt, arity, def)->\n    info = functionInfo[name]\n    if !info then info = functionInfo[name] =\n      src: ''\n      arity: -1\n      alts: {}\n      altList: []\n    if !info.alts[alt] then info.altList.push alt\n    info.alts[alt] = def\n    buildAdvisedFunc name\n    def\n\n  define 'advise', (name, alt, arity, def)-> checkPartial(L_advise, arguments) ||\n    makeMonad (env, cont)->\n      cont advise rz(name), rz(alt), rz(arity), rz(def)\n\n  curry = (arity, func)-> -> lz (arg)-> lz (subcurry arity, func, null) arg\n\n  subcurry = (arity, func, args)->\n    lz (arg)->\n      #console.log \"Got arg # #{arity}: #{rz arg}\"\n      args = simpyCons arg, args\n      if arity == 1 then func(args.toArray().reverse()) else subcurry arity - 1, func, args\n\n#######################\n# Presentation\n#######################\n\n  presentationReplacements =\n    '<': '&lt;'\n    '>': '&gt;'\n    '&': '&amp;'\n    '\\n': '\\\\n'\n    '\\\\': '\\\\\\\\'\n\n  escapePresentationHtml = (str)->\n    if typeof str == 'string' then str.replace /[<>&\\n\\\\]/g, (c)-> presentationReplacements[c]\n    else str\n\n  presentationToHtmlReplacements =\n    '&lt;': '<'\n    '&gt;': '>'\n    '&amp;': '&'\n    '\\\\n': '\\n'\n    '\\\\\\\\': '\\\\'\n\n  unescapePresentationHtml = (str)-> str.replace /&lt;|&gt;|&amp;|\\\\n|\\\\/g, (c)-> presentationToHtmlReplacements[c]\n\n  define 'escapeHtml', (h)-> escapePresentationHtml rz(h)\n  define 'unescapeHtml', (h)-> unescapePresentationHtml rz(h)\n\n#######################\n# AMTs\n#######################\n\n  makeMap = (map)->\n    h = (f)-> f(-> mapFirst map)(-> mapRest map)\n    h.map = map\n    setType h, 'hamt'\n    h.leisureType = 'hamt'\n    h\n\n  hamt = makeMap Map()\n  setDataType hamt, 'hamt'\n\n  define 'hamt', hamt\n  \n  define 'mapSize', (map)-> rz(map).map.size\n\n  define 'mapSet', (key, value, map)-> checkPartial(L_mapSet, arguments) ||\n    makeMap rz(map).map.set rz(key), rz(value)\n\n  define 'mapGet', (key, map)-> checkPartial(L_mapGet, arguments) || (\n    m = rz(map).map\n    k = rz(key)\n    if m.has rz(key) then m.get(rz(key)) else Nil)\n\n  define 'mapGetOpt', (key, map)-> checkPartial(L_mapGetOpt, arguments) || (\n    v = rz(map).map.get rz(key)\n    if v != undefined then some v else none)\n\n  define 'mapRemove', (key, map)-> checkPartial(L_mapRemove, arguments) ||\n    makeMap rz(map).map.remove rz(key)\n\n  mapFirst = (map)->\n    entry = map.entrySeq().last()\n    rz(L_cons) lz(entry[0]), lz(entry[1])\n\n  define 'mapFirst', (map)-> mapFirst rz(map).map\n\n  mapRest = (map)-> makeMap map.butLast()\n\n  define 'mapRest', (map)-> mapRest rz(map).map\n\n  define 'mapContains', (item, map)-> checkPartial(L_mapContains, arguments) ||\n    booleanFor rz(map).map.has rz(item)\n\n  define 'mapPairs', (map)->\n    h = rz(map).map.reverse()\n    nextMapPair h, h.keySeq()\n\n  nextMapPair = (map, keys)->\n    if !keys.size then rz L_nil\n    else\n      k = keys.first()\n      rz(L_cons)(lz(rz(L_cons)(lz(k), lz(map.get(k)))), -> nextMapPair map, keys.rest())\n\n  define 'mapReverse', (map)-> makeMap rz(map).map.reverse()\n\n  makeSet = (set)->\n    s = (f)-> f(-> set.first())(-> setRest set)\n    s.set = set\n    setType s, 'amtSet'\n    s.leisureType = 'amtSet'\n    s\n\n  amtSet = makeSet Set()\n  setDataType amtSet, 'amtSet'\n\n  define 'amtSet', amtSet\n\n  define 'setSize', (set)-> rz(set).set.size\n\n  define 'setContains', (item, set)-> checkPartial(L_setContains, arguments) ||\n    booleanFor rz(set).set.contains rz(item)\n\n  define 'setAdd', (value, set)-> checkPartial(L_setAdd, arguments) ||\n    makeSet rz(set).set.add rz value\n\n  define 'setRemove', (value, set)-> checkPartial(L_setRemove, arguments) ||\n    makeSet rz(set).set.delete rz value\n\n  define 'setUnion', (setA, setB)-> checkPartial(L_setUnion, arguments) ||\n    makeSet rz(setA).set.union rz(setB).set\n\n  define 'setIntersect', (setA, setB)-> checkPartial(L_setIntersect, arguments) ||\n    makeSet rz(setA).set.intersect rz(setB).set\n\n  define 'setSubtract', (setA, setB)-> checkPartial(L_setSubtract, arguments) ||\n    makeSet rz(setA).set.subtract rz(setB).set\n\n  define 'setItems', (set)-> nextSetItem rz(set).set.reverse()\n\n  nextSetItem = (s)->\n    if !s.size then rz L_nil\n    else rz(L_cons)(lz(s.first()), -> nextSetItem s.rest())\n\n  define 'setFirst', (set)-> rz(set).set.first()\n\n  setRest = (set)-> makeSet set.butLast()\n\n  define 'setRest', (set)-> setRest rz(set).set\n\n  define 'setReverse', (set)-> makeSet rz(set).set.reverse()\n\n  makeVector = (vec)->\n    v = (f)-> f(-> vec.first())(-> vectorRest vec)\n    v.vector = vec\n    setType v, 'vector'\n    v.leisureType = 'vector'\n    v\n\n  vector = makeVector List()\n  setDataType vector, 'vector'\n\n  define 'vector', vector\n\n  define 'vectorSize', (value, vec)-> rz(vec).vector.size\n\n  define 'vectorContains', (item, vec)-> checkPartial(L_vectorContains, arguments) ||\n    booleanFor rz(vec).vector.contains rz(item)\n\n  define 'vectorPush', (value, vec)-> checkPartial(L_vectorPush, arguments) ||\n    makeVector rz(vec).vector.push rz value\n\n  define 'vectorPop', (value, vec)-> checkPartial(L_vectorPop, arguments) ||\n    makeVector rz(vec).vector.pop()\n\n  define 'vectorShift', (value, vec)-> checkPartial(L_vectorShift, arguments) ||\n    makeVector rz(vec).vector.shift()\n\n  define 'vectorUnshift', (value, vec)-> checkPartial(L_vectorUnshift, arguments) ||\n    makeVector rz(vec).vector.unshift rz value\n\n  define 'vectorConcat', (vecA, vecB)-> checkPartial(L_vectorConcat, arguments) ||\n    makeVector rz(vecA).vector.concat rz(vecB).vector\n\n  define 'vectorItems', (vec)-> nextVectorItem rz(vec).vector\n\n  nextVectorItem = (v)->\n    if !v.size then rz L_nil\n    else rz(L_cons)(lz(v.first()), -> nextVectorItem v.rest())\n\n  define 'vectorFirst', (vec)-> rz(vec).vector.first()\n\n  vectorRest = (vec)-> makeVector vec.rest()\n\n  define 'vectorRest', (vec)-> vectorRest rz(vec).vector\n\n  define 'vectorReverse', (vec)-> makeVector rz(vec).vector.reverse()\n\n  define 'vectorRemove', (item, vec)-> checkPartial(L_vectorRemove, arguments) || (\n    item = rz item\n    makeVector rz(vec).vector.filter (el)-> el != item)\n\n#################\n# YAML and JSON\n#################\n\n  lacons = (k, v, list)-> rz(L_acons)((lz k), (lz v), (lz list))\n\n  jsonConvert = (obj)->\n    if obj instanceof Array\n      consFrom (_.map obj, jsonConvert)\n    else if typeof obj == 'object'\n      t = rz L_nil\n      for k, v of obj\n        t = lacons k, jsonConvert(v), t\n      t\n    else obj\n\n  define 'fromJson', (obj)-> jsonConvert rz obj\n\n  define 'parseYaml', (obj)-> parseYaml rz obj\n\n  define 'toJsonArray', (list)->\n    list = rz list\n    array = []\n    while !list.isNil()\n      array.push list.head()\n      list = list.tail()\n    array\n\n  define 'toJsonObject', (list)->\n    list = rz list\n    obj = {}\n    while !list.isNil()\n      head = list.head()\n      if !obj[head.head()]? then obj[head.head()] = head.tail()\n      list = list.tail()\n    obj\n\n  define 'jsonToYaml', (json)->\n    try\n      right dump rz json\n    catch err\n      left err.stack\n\n\n#######################\n# Control\n#######################\n\n  define 'protect', (value)->\n    try\n      right rz value\n    catch err\n      left err\n\n#######################\n# Trampolines\n#######################\n\n  define '_withRecur', (value)->\n    ret = rz value\n    while getType(ret) == '_recur'\n      ret = ret lz _identity\n    ret\n\n#######################\n# NAME SPACES\n#######################\n\n  define 'setNameSpace', (name)->\n    makeSyncMonad (env, cont)->\n      root.currentNameSpace = rz name\n      newNameSpace = false\n      if name\n        newNameSpace = !LeisureNameSpaces[name]\n        if newNameSpace then LeisureNameSpaces[name] = {}\n        nsLog \"SETTING NAME SPACE: #{name}\"\n      cont (if newNameSpace then _true else _false)\n\n  define 'pushNameSpace', (newNameSpace)->\n    makeSyncMonad (env, cont)->\n      pushed = LeisureNameSpaces[newNameSpace] && ! (newNameSpace in root.nameSpacePath)\n      if pushed then root.nameSpacePath.push newNameSpace\n      cont (if pushed then _true else _false)\n\n  define 'clearNameSpacePath', makeSyncMonad (env, cont)->\n    root.nameSpacePath = []\n    cont unit()\n\n  define 'resetNameSpaceInfo', makeSyncMonad (enf, cont)->\n    old = [root.nameSpacePath, root.currentNameSpace]\n    root.nameSpacePath = ['core']\n    root.currentNameSpace = null\n    nsLog \"SETTING NAME SPACE: null\"\n    cont old\n\n  define 'setNameSpaceInfo', (info)->\n    makeSyncMonad (env, cont)->\n      #console.log \"RESTORING NAME SPACE INFO: #{require('util').inspect rz info}\"\n      [root.nameSpacePath, root.currentNameSpace] = rz info\n      nsLog \"SETTING NAME SPACE: #{root.currentNameSpace}\"\n      cont unit()\n\n#######################\n# Classes for Printing\n#######################\n\n  ensureLeisureClass 'token'\n  Leisure_token.prototype.toString = -> \"Token(#{JSON.stringify(tokenString(this))}, #{posString tokenPos(this)})\"\n\n  tokenString = (t)-> t(lz (txt)->(pos)-> rz txt)\n  tokenPos = (t)-> t(lz (txt)->(pos)-> rz pos)\n  ensureLeisureClass 'filepos'\n  posString = (p)->\n    if p instanceof Leisure_filepos then p(lz (file)->(line)->(offset)-> \"#{rz file}:#{rz line}.#{rz offset}\")\n    else p\n\n  ensureLeisureClass 'parens'\n  Leisure_parens.prototype.toString = -> \"Parens(#{posString parensStart @}, #{posString parensEnd @}, #{parensContent @})\"\n\n  parensStart = (p)-> p(lz (s)->(e)->(l)-> rz s)\n  parensEnd = (p)-> p(lz (s)->(e)->(l)-> rz e)\n  parensContent = (p)-> p(lz (s)->(e)->(l)-> rz l)\n\n  ensureLeisureClass 'true'\n  Leisure_true.prototype.toString = -> \"true\"\n\n  ensureLeisureClass 'false'\n  Leisure_false.prototype.toString = -> \"false\"\n\n  ensureLeisureClass 'left'\n  Leisure_left.prototype.toString = -> \"Left(#{@(lz _identity)(lz _identity)})\"\n\n  ensureLeisureClass 'right'\n  Leisure_right.prototype.toString = -> \"Right(#{@(lz _identity)(lz _identity)})\"\n\n#######################\n# LOADING\n#######################\n\n  requireFiles = (req, cont, verbose)->\n    (req[..].reverse().reduce ((acc, el)-> ->\n      if verbose then console.log \"REQUIRING FILE: #{el}\"\n      require [el], acc), cont)()\n\n#######################\n# Func info\n#######################\n\n  define 'funcInfo', (f)-> funcInfo rz f\n\n  define 'funcName', (f)-> if rz(f).L$info?.name then some rz(f).L$info.name else none\n  \n  define 'getFunction', (name)->\n    f = rz global['L_' + (nameSub rz name)]\n    if f then some f else none\n\n  define 'isType', (f)->\n    f = rz f\n    booleanFor (typeof f == 'function' && (f.typeFunction || f.dataType))\n\n  define 'typeName', (f)-> rz(f).L$info?.name\n\n#######################\n# Exports\n#######################\n\n  if window?\n    window.runMonad = runMonad\n    window.setType = setType\n    window.setDataType = setDataType\n    window.defaultEnv = defaultEnv\n    window.identity = identity\n\n  Runtime = {\n    requireFiles\n    _true\n    _false\n    unit\n    _identity\n    some\n    none\n    stateValues: values\n    runMonad\n    runMonad2\n    newRunMonad\n    isIO\n    Monad2\n    identity\n    setValue\n    getValue\n    makeMonad\n    makeSyncMonad\n    replaceErr\n    left\n    right\n    getMonadSyncMode\n    asyncMonad\n    setWarnAsync\n    call\n    callMonad\n    basicCall\n    booleanFor\n    newConsFrom: consFrom\n    escapePresentationHtml\n    unescapePresentationHtml\n    makeMap\n    jsonConvert\n    lacons\n    dumpMonadStack\n    define\n    isPartial\n    partialCall\n    bind\n    buildAdvisedFuncDef\n    hasMacro\n  }\n\n  Object.assign Leisure, {\n    stateValues: values\n    runMonad: runMonad2\n    Runtime\n    leisureFunctionNamed\n    nameSub\n    dbg: -> debugger\n  }\n\n  Runtime\n"
  ]
}