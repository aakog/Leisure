{
  "version": 3,
  "file": "odbWorker.js",
  "sourceRoot": "..",
  "sources": [
    "src/odbWorker.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Shared worker for Leisure's ODB maintains multiple in-memory trace logs and\npersists between page refreshes so we can browse logs as if it were a database\n\n    self.traceRecords = traceRecords = {}\n    shared = SharedWorkerGlobalScope?\n\n    defKey = (context, id)-> key = \"#{context.id}-#{id}\"\n\n    verbose = ->\n    #verbose = (args...)-> console.log args...\n\n    class OdbWorker\n      constructor: ->\n        if shared then self.onconnect = (e)=> @init e.ports[0]\n        else @init self\n      init: (@port)->\n        @port.onmessage = (e)->\n          verbose \"message \", e.data.msg\n          try\n            worker[e.data.msg] e, e.data\n          catch err\n            console.log err.stack\n            if e.data.msgId then @port.postMessage {\n              msgId\n              error:\n                message: err.message\n                stack: err.stack\n            }\n      setVerbose: (e, {verbose: state})->\n        verbose = if state then (args...)-> console.log args...\n        else ->\n      queueValues: (e, {logName, values})->\n        records = traceRecords[logName] ? newTraceRecords(logName)\n        pos = 0\n        while pos < values.length\n          pos = this[values[pos]] records, pos, values\n        null\n      getTraceRecords: (e)->\n        if logName = e.data.logName\n          traceRecords[logName] || throw new Error \"No trace log named #{logName}\"\n        else throw new Error \"No trace log specified\"\n      dumpValues: (e, {logName})-> console.log(traceRecords[logName].dump())\n      latestEntry: (e, {logName, msgId})->\n        console.log \"GETTING LATEST ENTRY\"\n        @port.postMessage {\n          return: (r = @getTraceRecords e) && r.sequence[r.sequenceCount - 1]\n          msgId\n        }\n      getEntry: (e, {logName, type, key, msgId})->\n        if !type then type = 'sequence'\n        @port.postMessage {\n          return: (records = @getTraceRecords e) && records[type]?[key]\n          msgId\n        }\n      getCallGraphInfo: (e, {logName, msgId})->\n        records = @getTraceRecords e\n        @port.postMessage {\n          return:\n            length: records.callGraphs.length\n            latest: records.callGraphs[records.callGraphs.length - 10..]\n          msgId\n        }\n      getCallGraphEntry: (e, {logName, msgId, number})->\n        @port.postMessage {\n          return: @getTraceRecords(e).callGraphs[number]\n          msgId\n        }\n      clearEntries: (e, {logName})-> newTraceRecords logName\n      deleteEntries: (e, {logName})-> traceRecords[logName] = {}\n      getContextDef: (e, {logName, context, id, msgId})->\n        context = @getTraceRecords(e).contexts[context]\n        @port.postMessage {\n          return: context.lazyDefs[id] || context.lambdaDefs[id]\n          msgId\n        }\n      getLambdaDef: (e, {logName, lambdaName})->\n        @port.postMessage {\n          return: @getTraceRecords(e).lambdaDefsByName[lambdaName]\n          msgId\n        }\n      lazyValue: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        context = values[pos++]\n        id = values[pos++]\n        record = records.add records.values, instance, {\n          type\n          instance\n          context\n          id\n        }\n        records.addCallGraphEntry 0, record.sequence\n        pos\n      resolve: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        result = [values[pos++]]\n        if result[0] == -1 then result.push values[pos++]\n        record = records.add records.resolves, instance, {\n          type\n          instance\n          value: result\n        }\n        records.addCallGraphEntry 0, record.sequence\n        pos\n      lambda: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        context = values[pos++]\n        id = values[pos++]\n        parent = values[pos++]\n        records.add records.lambdas, instance, {\n          type\n          instance\n          context\n          id\n          parent\n        }\n        records.lambdaList.push instance\n        pos\n      call: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        context = values[pos++]\n        id = values[pos++]\n        args = []\n        for i in [0...values[pos++]]\n          args.push v = values[pos++]\n          if v == -1 then args.push values[pos++]\n        record = records.add records.calls, null, {\n          type\n          instance\n          context\n          id\n          args\n        }\n        records.stack.push record\n        records.addCallGraphEntry 1, record.sequence\n        pos\n      return: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        context = values[pos++]\n        id = values[pos++]\n        result = [values[pos++]]\n        if result[0] == -1 then result.push values[pos++]\n        caller = records.stack.pop()\n        record = records.add records.returns, null, {\n          type\n          instance\n          context\n          id\n          caller: caller.sequence\n          value: result\n        }\n        records.addCallGraphEntry -1, record.sequence\n        pos\n      createPartial: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        lambda = values[pos++]\n        context = values[pos++]\n        id = values[pos++]\n        args = []\n        for i in [0...values[pos++]]\n          args.push v = values[pos++]\n          if v == -1 then args.push values[pos++]\n        record = records.add records.partials, instance, {\n          type\n          instance\n          lambda\n          context\n          id\n          args\n        }\n        pos\n      callPartial: (records, pos, values)->\n        type = values[pos++]\n        instance = values[pos++]\n        lambda = values[pos++]\n        context = values[pos++]\n        id = values[pos++]\n        args = []\n        for i in [0...values[pos++]]\n          args.push v = values[pos++]\n          if v == -1 then args.push values[pos++]\n        record = records.add records.partialCalls, instance, {\n          type\n          instance\n          lambda\n          context\n          id\n          args\n        }\n        records.addCallGraphEntry 0, record.sequence\n        pos\n      mark: (records, pos, values)->\n        type = values[pos++]\n        count = values[pos++]\n        record = records.add records.marks, null, {\n          type\n          count\n        }\n        pos\n      context: (records, pos, values)->\n        [type, context, source, inlineMap, externalMap, debugType, length] = values[pos...pos + 7]\n        pos += 7\n        defs = []\n        lambdaDefs = {}\n        lazyDefs = {}\n        records.contexts[context] = {type, id:context, source, inlineMap, externalMap, defs, lambdaDefs, lazyDefs, debugType}\n        id = 0\n        length += pos\n        while pos < length\n          [type, line, col, parent] = values[pos...pos + 4]\n          pos += 4\n          if type == 'lazy'\n            defs.push lazyDefs[id] = {context, id, type: 'lazyDef', line, col, parent}\n          else\n            [name, argCount] = values[pos...pos + 2]\n            pos += 2\n            args = values[pos...pos + argCount]\n            pos += argCount\n            defs.push lambdaDefs[id] = {context, id, type: 'lambdaDef', line, col, parent, name, args}\n            if name then records.lambdaDefsByName[name] = lambdaDefs[id]\n          id++\n        pos\n\n    self.worker = worker = new OdbWorker()\n    self.traceRecords = traceRecords\n\n    console.log \"global: \", self\n    console.log \"worker: \", worker\n    console.log \"records: \", traceRecords\n\n    addRecord = (records, map, instanceId, record)->\n      seq = record.sequence = records.sequenceCount++\n      records.sequence[seq] = record\n      if map then map[if instanceId != null then instanceId else seq] = record\n      if !records.items[instanceId]? then records.items[instanceId] = record\n      record\n\n    newTraceRecords = (name)->\n      records = traceRecords[name] =\n        callGraphs: []\n        sequenceCount: 0\n        sequence: []\n        contexts: traceRecords[name]?.contexts ? []\n        lambdaDefsByName: traceRecords[name]?.lambdaDefsByName ? {}\n        values: {}\n        resolves: {}\n        lambdas: {}\n        lambdaIds: []\n        calls: {}\n        partials: {}\n        partialCalls: {}\n        returns: {}\n        items: {}\n        contexts: []\n        stack: []\n      records.add = addRecord.bind null, records\n      records.dump = dump.bind null, name\n      records.addCallGraphEntry = addCallGraphEntry.bind null, records\n      records\n\n    last = (a)-> a[a.length - 1]\n\n    addCallGraphEntry = (records, delta, seq)->\n      cg = records.callGraphs\n      if cg.length == 0 || entry = last(cg).level == 0\n        entry =\n          size: 0\n          level: 0\n          start: seq\n        cg.push entry\n      entry.size++\n      entry.level += delta\n      if entry.level < 0 then throw new Error \"Call level dropped below zero\"\n      else if entry.level == 0 then entry.end = seq\n\n    processTrace = (records, value)->\n\n    class TraceDumper\n      dump: (@records)->\n        @level = 0\n        @called = {}\n        result = (for context in @records.contexts\n          @dumpRecord(context) + '\\n' + (for def in context.defs\n            type = if def.type == 'lazy' then 'lazyDef' else 'lambdaDef'\n            @dumpRecord Object.assign {}, def, {type}).join '\\n').join '\\n'\n        result + '\\n' + (for i in [0...@records.sequenceCount]\n          @dumpRecord @records.sequence[i]).join '\\n'\n      dumpRecord: (record)->\n        prefix = if record.sequence? then pad(7, String(record.sequence)) + ' ' else ''\n        for i in [0...@level]\n          prefix = prefix + '  '\n        \"#{prefix}#{record.type} \" + this[record.type](record).join ' '\n      nameForLambda: (lambda, context, id)->\n        if !context? && typeof lambda == 'number'\n          if l = @records.lambdas[lambda]\n            def = @records.contexts[l.context].defs[l.id]\n        else if context? then def = @records.contexts[context].defs[id]\n        else if lambda.context?\n          def = @records.contexts[lambda.context].defs[lambda.id]\n        if def\n          if def.name then def.name\n          else\n            id = def.id\n            ctx = @records.contexts[def.context]\n            while def && !def.name\n              def = ctx.defs[def.parent]\n            \"#{def?.name ? ''}[#{id}]\"\n        else \"[#{lambda}]\"\n      nextValue: (value, pos)->\n        pos = pos ? 0\n        if value[pos] == -1 then value[pos + 1]\n        else if typeof value[pos] == 'number'\n          if v = @records.values[value[pos]]\n            \"VALUE[#{v.instance} in #{@nameForLambda v.parent}]\"\n          else @nameForLambda value[pos]\n        else value[pos]\n      context: ({id, source, debugType})-> [id, source, debugType]\n      lambdaDef: ({line, col, context, id, parent, name, argNames})->\n        #[name ? (if parent? then 'unknown' else '????'), \"id: #{context}:#{id}:#{parent ? '-'}\", \"position: #{line ? '?'}:#{col ? '?'}\", argNames]\n        [@nameForLambda('unknown', context, id) ? '????', \"id: #{context}:#{id}:#{parent ? '-'}\", \"position: #{line ? '?'}:#{col ? '?'}\", argNames]\n      lazyDef: ({line, col, context, id, parent})->\n        [\"id: #{context}:#{id}:#{parent ? '-'}\", \"position: #{line ? '?'}:#{col ? '?'}\"]\n      lazyValue: ({instance, id, parent, context})->\n        [\"(#{instance} #{@nameForLambda(\"unknown\", context, id)})\"]\n      resolve: ({instance, value})->\n        [\"(#{instance}):\", @nextValue value]\n      lambda: ({instance, context, id, parent})->\n        [@nameForLambda(instance, context, id), @records.contexts[context].defs[id].args.join ', ']\n      call: ({instance, context, id, args})->\n        if @called[instance] then @called[instance]++\n        else @called[instance] = 1\n        @level++\n        result = [@nameForLambda(instance, context, id), \"(#{instance}):\"]\n        pos = 0\n        while pos < args.length\n          result.push @nextValue args, pos\n          pos += if args[pos] == -1 then 2 else 1\n        result\n      return: ({caller, instance, context, id, value})->\n        if @called[instance]\n          @called[instance]--\n          @level--\n        [\"from\", @nameForLambda(instance, context, id), \"(#{instance} caller: #{caller}):\", @nextValue value]\n      createPartial: ({instance, lambda, args})->\n        [@nameForLambda(lambda), instance, args]\n      callPartial: ({instance, args})->\n        [@nameForLambda(@records.partials[instance].lambda), instance, args]\n\n    pad = (number, string)->\n      while string.length < number\n        string = \" \" + string\n      string\n\n    dump = (logName)-> new TraceDumper().dump traceRecords[logName]\n\n    self.dump = dump\n"
  ]
}