{
  "version": 3,
  "file": "hamtData.js",
  "sourceRoot": "..",
  "sources": [
    "src/hamtData.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "    'use strict'\n    define ['immutable', './editor', './editorSupport'], (immutable, Editor, Support)->\n      {\n        Map\n      } = window.Immutable = immutable\n      {\n        DataStore\n        preserveSelection\n      } = Editor\n      {\n        OrgData\n      } = Support\n\n`HamtOrgData` uses a HAMT for blocks instead of a regular JS object,\nto make it easier to handle merges.\n\n      class HamtOrgData extends OrgData\n        constructor: ->\n          super()\n          @blocks = new Map()\n          @namedBlocks = new Map()\n        snapshot: ->\n          data = new HamtOrgData()\n          data.installSnapshot this\n          data\n        installSnapshot: (data)->\n          @blocks = data.blocks\n          @blockIndex = data.blockIndex\n          @namedBlocks = data.namedBlocks\n        getFirst: -> getFirst @blocks\n        setFirst: (firstId)-> @blocks = setFirst @blocks, firstId\n        getBlock: (id, changes)->\n          if typeof id != 'string' then id else changes?.sets[id] ? @blocks.get id\n        setBlock: (id, block)->\n          @makeChanges =>\n            @runFilters @getBlock(id), block\n            @blocks = @blocks.set id, block\n            @indexBlock block\n        deleteBlock: (id)->\n          @makeChanges =>\n            @runFilters @getBlock(id), null\n            @blocks = @blocks.delete id\n            @unindexBlock id\n        getNamedBlockId: (name)-> @namedBlocks.get name\n        setBlockName: (name, blockId)-> @namedBlocks = @namedBlocks.set name, blockId\n        deleteBlockName: (name)-> @namedBlocks = @namedBlocks.delete name\n        load: (first, newBlocks)->\n          @makeChanges =>\n            super first, setFirst((new Map newBlocks), first),\n              sets: newBlocks\n              oldBlocks: {}\n              first: first\n        makeChange: (change)->\n          ch = super change\n          ch.origin = change.origin\n          ch\n\n      getFirst = (blocks)-> blocks.get 'FIRST'\n      setFirst = (blocks, firstId)-> blocks.set 'FIRST', firstId\n\n      {\n        HamtOrgData\n      }\n"
  ]
}