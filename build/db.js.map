{
  "version": 3,
  "file": "db.js",
  "sourceRoot": "..",
  "sources": [
    "src/db.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "IndexedDb support for Leisure\n\n    'use strict'\n    define ['bluebird'], (Bluebird)->\n      {\n        Promise\n      } = Bluebird\n\n      stores = {}\n      dbName = 'leisureStorage'\n      deleteStore = false\n      #deleteStore = true\n      localStore = null\n\n      getLocalStore = (id)->\n        if deleteStore then (new Promise (succeed, fail)->\n          deleteStore = false\n          delete stores[id]\n          req = indexedDB.deleteDatabase dbName\n          req.onsuccess = succeed\n          req.onerror = fail).then -> openStore id\n        else openStore id\n\n      openStore = (id, version)-> stores[id] || stores[id] = new Promise (succeed, fail)->\n        req = indexedDB.open dbName, version ? 1\n        req.onupgradeneeded = (e)->\n          db = req.result\n          if !db.objectStoreNames.contains id\n            db.createObjectStore id, keyPath: '_id'\n        req.onsuccess = ->\n          db = req.result\n          if !db.objectStoreNames.contains id then openStore id, db.version + 1\n          else succeed localStore = req.result\n        req.onerror = fail\n\n      defer = (cont)-> setTimeout cont, 1\n\n      localTransaction = (id, type)->\n        p = getLocalStore(id)\n        action = (db)->\n          if db.objectStoreNames.contains id\n            db.transaction [id], type || 'readwrite'\n          else Promise.reject \"No object store named #{id}\"\n        if p.isResolved() then action p.value() else p.then action\n\n      promiseForRequest = (req)-> new Promise (succeed, fail)->\n        req.onsuccess = (e)-> succeed req.result\n        req.onerror = (e)->\n          console.log \"Database failure:\", e\n          fail e\n\n      hasDatabase = (id)-> stores[id]\n\n      transaction = (id, type)->\n        trans = null\n        p = localTransaction id, type\n        obj =\n          transaction: null\n          store: null\n          then: (func)-> if trans then func trans else p.then obj\n          put: (value, key)->\n            console.log \"Putting value into store #{id}\", value\n            doAction => @store.put value, key\n          get: (key)-> doAction => @store.get key\n          delete: (key)-> doAction => @store.delete key\n          clear: -> doAction => @store.clear()\n          getAll: (index)->\n            results = []\n            doAction => new Promise (succeed, fail)=>\n              cursorReq = (if index then @store.index index else @store).openCursor()\n              cursorReq.onsuccess = (e)->\n                if cursor = e.target.result\n                  results.push cursor.value\n                  cursor.continue()\n                else succeed results\n              cursorReq.onerror = fail\n        setTrans = (t)->\n          trans = obj.transaction = t\n          obj.store = t.objectStore id\n        if p instanceof Promise then p = p.then((t)-> setTrans t) else setTrans p\n        doAction = (action)-> if trans then promiseForRequest action()\n        else p.then -> promiseForRequest action()\n        obj\n\n      {\n        hasDatabase\n        transaction\n      }\n"
  ]
}