{
  "version": 3,
  "file": "gen.js",
  "sourceRoot": "..",
  "sources": [
    "src/gen.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\n'use strict'\ndefine ['./base', './ast', './runtime', 'lodash', 'lib/source-map', 'browser-source-map-support', 'lib/js-yaml'], (Base, Ast, Runtime, _, SourceMap, SourceMapSupport, Yaml)->\n  #SourceMapSupport?.install()\n  {\n    simpyCons\n    resolve\n    lazy\n    verboseMsg\n    nsLog\n    isResolved\n    addDebugType\n    getDebugType\n    setDebugType\n  } = Base\n  {\n    dump\n  } = Yaml\n  rz = resolve\n  lz = lazy\n  lc = Leisure_call\n  {\n    nameSub\n    getLitVal\n    getRefName\n    getLambdaVar\n    getLambdaBody\n    getApplyFunc\n    getApplyArg\n    getAnnoName\n    getAnnoData\n    getAnnoBody\n    getLetName\n    getLetValue\n    getLetBody\n    Leisure_lit\n    Leisure_ref\n    Leisure_lambda\n    Leisure_apply\n    Leisure_let\n    Leisure_anno\n    setType\n    setDataType\n    cons\n    Nil\n    define\n    functionInfo\n    getPos\n    isNil\n    getType\n    ast2Json\n    rangeToJson\n    getPos\n  } = root = Ast\n  {\n    Monad2\n    _true\n    _false\n    unit\n    left\n    right\n    booleanFor\n    newConsFrom\n    dumpMonadStack\n  } = Runtime\n\n  consFrom = newConsFrom\n\n  {\n    SourceNode\n    SourceMapConsumer\n    SourceMapGenerator\n  } = SourceMap\n\n  varNameSub = (n)-> \"L_#{nameSub n}\"\n\n  useArity = true\n  megaArity = false\n  curDef = null\n  #trace = false\n  trace = true\n  stackSize = 20\n  USE_STRICT = '\"use strict\";\\n'\n  #USE_STRICT = ''\n\n  setMegaArity = (setting)-> megaArity = setting\n\n  setDebugType 'User'\n\n#########\n# Code\n#########\n\n  setDebugType = (type)->\n    addDebugType type\n    Base.setDebugType type\n\n  collectArgs = (args, result)->\n    for i in args\n      if Array.isArray i then collectArgs i, result else result.push i\n    result\n\n  locateAst = (ast)->\n    [line, col] = pos = getPos(ast).toArray()\n    [line,col]\n\n  check = (bool, arg)->\n    if !bool then console.log new Error(\"Bad sourcemap arg: #{arg}\").stack\n\n  checkChild = (child)->\n    if Array.isArray child\n      child.forEach checkChild\n    else check (typeof child == 'string') || (child instanceof SourceNode), child\n\n  currentFile = 'NEVERGIVENFILE.lsr'\n  currentFuncName = undefined\n\n  withFile = (file, name, block)->\n    oldFileName = currentFile\n    oldFuncName = currentFuncName\n    currentFile = file\n    currentFuncName = name\n    try\n      block()\n    finally\n      currentFile = oldFileName\n      currentFuncName = oldFuncName\n\n  sn = (ast, str...)->\n    [line, offset] = locateAst ast\n    check typeof line == 'number', 'line'\n    check typeof offset == 'number', 'offset'\n    checkChild str\n    if line < 1 then line = 1\n    if currentFile == 'NEVERGIVENFILE.lsr'\n      console.log new Error(\"SN CALLED WITHOUT FILE\").stack\n    if currentFuncName?\n      new SourceNode(line, offset, currentFile, str, currentFuncName)\n    else new SourceNode(line, offset, currentFile, str)\n\n  jstr = (str)-> JSON.stringify str\n\n  jsCodeFor = (codeMap, mapType, externalMap)->\n    code = codeMap.code\n    if mapType == 'inline'\n      code = code.replace /map: '@SOURCEMAP@'/, 'inlineMap: ' + jstr codeMap.map.toJSON()\n    else if mapType == 'external'\n      code = code.replace /map: '@SOURCEMAP@'/, 'externalMap: ' + jstr externalMap\n    #\"#{code}\\n//# sourceMappingURL=data:application/json;base64,#{btoa jstr codeMap.map.toJSON()}\\n\"\n    \"#{code}\\n//# sourceMappingURL=data:application/json,#{jstr codeMap.map.toJSON()}\\n\"\n\n  functionId = 0\n  codeNum = 0\n\n  class CodeGenerator\n    constructor: (fileName, @useContext, @noFile, @suppressContextCreation, @source)->\n      @debugType = getDebugType()\n      @fileName = fileName ? \"dynamic code with source #{++codeNum}\"\n      @startId = functionId\n      @positions = []\n      @createContext = !@suppressContextCreation\n      @decls = []\n      @declStack = []\n      @funcInfo = []\n      @debug = false\n    contextInit: ->\n      if @useContext then '\\n  L$F.context = L_$context;'\n      else ''\n    funcVar: (index)-> \"L$FUNC_#{index}\"\n    addFuncInfo: (info)->\n      info.funcId = @funcInfo.length\n      @funcInfo.push info\n      @funcVar info.funcId\n    decl: (ast, dec)->\n      if @debug\n        dec.id = @decls.length\n        [line, col] = getPos(ast).toArray()\n        dec.line = line\n        dec.col = col\n        if @declStack.length then dec.parent = _.last(@declStack).id\n        @decls.push dec\n        @declStack.push dec\n    declLazy: (ast, arg)->\n      @decl ast, lazy: true\n      if arg?\n        result = arg()\n        @popDecl()\n        result\n    declLambda: (ast, name, args)->\n      @decl ast, dec = (lambda: name, args: args)\n      varName = @addFuncInfo info = {length:args.length, name, args, parent: dec.parent, id: dec.id}\n      dec.funcId = info.funcId\n      varName\n    popDecl: -> if @debug then @declStack.pop()\n    genSource: (source, ast)->\n      if @noFile\n        sm = @genNode(ast).prepend(USE_STRICT + '(').add(')').toStringWithSourceMap file: @fileName\n        map = JSON.parse sm.map.toString()\n        result = sm.code\n      else\n        funcName = if ast instanceof Leisure_anno && getAnnoName(ast) == 'leisureName'\n          getAnnoData ast\n        else null\n        #fileName = \"dynamic code with source #{++codeNum}\"\n        withFile @fileName, funcName, =>\n          try\n            sm = @genNode(ast).toStringWithSourceMap file: @fileName\n            map = JSON.parse sm.map.toString()\n            map.sourcesContent =  [source]\n            result = sm.code\n          catch err\n            err.message = \"Error generating code for:\\n  #{source.trim().replace /\\n/g, '\\n  '}\\n#{err.message}\"\n            throw err\n      @endId = functionId\n      jsCodeFor sm, 'inline'\n    genNode: (ast)->\n      result = @genUniq ast, Nil, [Nil, 0]\n      @endId = functionId\n      @genTopLevel ast, result\n    genMap: (ast)->\n      hasFile = ast instanceof Leisure_anno && getAnnoName(ast) == 'filename'\n      #filename = if hasFile then getAnnoData ast else 'GENFORUNKNOWNFILE.lsr'\n      filename = if hasFile then getAnnoData ast else @fileName\n      nameAst = if hasFile then getAnnoBody ast else null\n      funcname = if nameAst instanceof Leisure_anno && getAnnoName(nameAst) == 'leisureName'\n        getAnnoData nameAst\n      else currentFuncName\n      sub = withFile filename, null, => @genNode(ast)\n      @endId = functionId\n      if !funcname then sub\n      else withFile filename, funcname, -> sn ast, sub\n    gen: (ast)->\n      result = @genMap(ast)\n      checkChild result\n      new SourceNode(1, 0, currentFile, ['(', result, ')']).toStringWithSourceMap(file: currentFile).code\n    genUniq: (ast, names, uniq)->\n      switch ast.constructor\n        when Leisure_lit then sn ast, jstr getLitVal ast\n        when Leisure_ref then sn ast, \"resolve(\", (@genRefName ast, uniq, names, true), \")\"\n        when Leisure_lambda then @genLambda ast, names, uniq\n        when Leisure_apply\n          if useArity then @genArifiedApply ast, names, uniq\n          else sn ast, (@genUniq (getApplyFunc ast), names, uniq), \"(\", (@genApplyArg (getApplyArg ast), names, uniq), \")\"\n        when Leisure_let then sn ast, \"(function(){\", (@genLets ast, names, uniq), \"})()\"\n        when Leisure_anno\n          name = getAnnoName ast\n          data = getAnnoData ast\n          if name == 'arity' && useArity && data > 1\n            @genArifiedLambda (getAnnoBody ast), names, uniq, data\n          else\n            try\n              switch name\n                when 'leisureName'\n                  oldDef = curDef\n                  curDef = data\n                when 'debug'\n                  if Leisure_generateDebuggingCode\n                    oldDebug = @debug\n                    @debug = true\n                when 'define' then @declLazy getAnnoBody ast\n              genned = @genUniq (getAnnoBody ast), names, uniq\n              if name == 'debug' && Leisure_generateDebuggingCode then @debug = oldDebug\n              switch name\n                when 'type' then sn ast, \"setType(\", (genned), \", '\", data, \"')\"\n                when 'dataType' then sn ast, \"setDataType(\", genned, \", '\", data, \"')\"\n                when 'define'\n                  [funcName, arity, src] = data.toArray()\n                  @popDecl()\n                  sn ast, \"define('\", funcName, \"', \", lazify(ast, genned), \", \", arity, \", \", jstr(src), \")\"\n                when 'leisureName' then genned\n                else genned\n            finally\n              if name == 'leisureName' then curDef = oldDef\n        else \"CANNOT GENERATE CODE FOR UNKNOWN AST TYPE: #{ast}, #{ast.constructor} #{Leisure_lambda}\"\n    genArifiedApply: (ast, names, uniq)->\n      args = []\n      func = ast\n      while dumpAnno(func) instanceof Leisure_apply\n        args.push getApplyArg dumpAnno func\n        func = getApplyFunc dumpAnno func\n      args.reverse()\n      defaultArity = false\n      if args.length > 1 && ((dmp = dumpAnno(func)) instanceof Leisure_ref) && (((info = functionInfo[funcName = getRefName dmp]) && ((info.newArity && (arity = info.arity) && arity <= args.length) || (!arity && megaArity))) || (!info && isNil names.find (el)-> el == funcName))\n        if defaultArity = !arity then arity = args.length\n        argCode = []\n        argCode.push ast\n        if defaultArity then argCode.push 'L$('\n        argCode.push @genUniq func, names, uniq\n        if defaultArity then argCode.push ')('\n        else argCode.push '('\n        for i in [0...arity]\n          if i > 0 then argCode.push ', '\n          argCode.push sn args[i], @genApplyArg args[i], names, uniq\n        argCode.push ')'\n        for i in [arity...args.length] by 1\n          argCode.push '(', (sn args[i], @genApplyArg args[i], names, uniq), ')'\n        sn argCode...\n      else\n        ast = dumpAnno ast\n        sn ast, (@genUniq (getApplyFunc ast), names, uniq), \"(\", (@genApplyArg (getApplyArg ast), names, uniq), \")\"\n    genLambda: (ast, names, uniq)->\n      name = getLambdaVar ast\n      u = addUniq name, names, uniq\n      n = cons name, names\n      argName = (uniqName name, u)\n      defName = curDef\n      curDef = null\n      infoVar = @declLambda ast, defName, [name]\n      bodyCode = @genUniq (getLambdaBody ast), n, u\n      code = sn ast, \"function(#{argName}){return \", @genTraceCall(ast, bodyCode, argName), \";}\"\n      #addLambdaProperties ast, @genLambdaDecl ast, 'L$F.length', code\n      result = @genLambdaDecl ast, infoVar, defName, [name], 1, addLambdaProperties ast, code\n      @popDecl()\n      result\n    genArifiedLambda: (ast, names, uniq, arity)->\n      if arity < 2 then @genLambda ast, names, uniq, 0\n      else\n        args = getNArgs(arity, ast).toArray()\n        argList = _.map(args, ((x)-> 'L_' + x)).join ', '\n        defName = curDef\n        curDef = null\n        infoVar = @declLambda ast, defName, args\n        bodyCode = @genUniq(getNthLambdaBody(ast, arity), names, uniq)\n        if @debug then code = sn ast, \"\"\"\n          function(#{argList}) {\n            return L_checkPartial(L$F, arguments, Leisure_traceCreatePartial#{@debugType}, Leisure_traceCallPartial#{@debugType}) || \"\"\", @genTraceCall(ast, bodyCode, argList), \"\"\";\n          };\n        \"\"\"\n        else code = sn ast, \"\"\"\n          function(#{argList}) {\n            return L_checkPartial(L$F, arguments) || \"\"\", @genTraceCall(ast, bodyCode, argList), \"\"\";\n          };\n        \"\"\"\n        result = @genLambdaDecl ast, infoVar, defName, args, args.length, addLambdaProperties ast, code\n        annoAst = ast\n        while annoAst instanceof Leisure_anno\n          name = getAnnoName annoAst\n          data = getAnnoData annoAst\n          switch name\n            when 'type' then result = sn ast, \"setType(\", result, \", '\", data, \"')\"\n            when 'dataType' then result = sn ast, \"setDataType(\", result, \", '\", data, \"')\"\n          annoAst = getAnnoBody annoAst\n        @popDecl()\n        result\n    genRefName: (ref, uniq, names, checkMacro)->\n      name = getRefName ref\n      if isNil (val = names.find (el)-> el == name)\n        vname = varNameSub name\n        if !(window ? global)[vname] && Leisure.stateValues.macroDefs?.map.has name\n          throw new Error \"Attempt to use a macro as a value: #{name}\"\n        ns = findName nameSub name\n        if ns == root.currentNameSpace then nsLog \"LOCAL NAME: #{name} FOR #{root.currentNameSpace} #{location ref}\"\n        else if !ns then nsLog \"GUESSING LOCAL NAME #{name} FOR #{root.currentNameSpace} #{location ref}\"\n        vname\n      else uniqName name, uniq\n    genApplyArg: (arg, names, uniq)->\n      d = dumpAnno arg\n      if d instanceof Leisure_apply\n        @declLazy arg, => @lazify d, @genUniq arg, names, uniq\n      else if d instanceof Leisure_ref then @genRefName d, uniq, names\n      else if d instanceof Leisure_lit then sn arg, jstr getLitVal d\n      else if d instanceof Leisure_let\n        @declLazy arg, => @lazify arg, (@genUniq arg, names, uniq)\n      else if d instanceof Leisure_lambda then sn arg, 'lazy(', (@genUniq arg, names, uniq), ')'\n      else @declLazy arg, => @lazify arg, (@genUniq arg, names, uniq)\n    genLetAssign: (arg, names, uniq)->\n      @declLazy arg, => @lazify arg, (@genUniq arg, names, uniq)\n    lazify: (ast, body)->\n      lazify ast, body, (if @debug then _.last(@decls).id), @debug && @debugType\n    genLets: (ast, names, uniq)->\n      bindings = letList ast, []\n      [letUniq, decs, assigns, ln] = _.reduce bindings, ((result, l)=>\n        [u, code, assigns, ln] = result\n        newU = addUniq (getLetName l), ln, u\n        letName = uniqName (getLetName l), newU\n        newNames = cons (getLetName l), ln\n        [newU,\n          (cons (sn ast, letName + ' = ', @genLetAssign(getLetValue(l), newNames, u)), code),\n          (cons letName, assigns),\n          newNames]), [uniq, Nil, Nil, names]\n      sn ast, \"  var \", assigns.reverse().intersperse(', ').toArray(), \";\\n  \", decs.reverse().intersperse(';\\n  ').toArray(), \";\\n\\n  return \", (@genUniq (getLastLetBody ast), ln, letUniq)\n    genTraceCall: (ast, code, argNames)->\n      if @debug then sn ast, \"\"\"\n        (\n          Leisure_traceCall#{@debugType}(L$F, arguments),\n          Leisure_traceReturn#{@debugType}(L$F, (\"\"\", code, \"\"\"))\n        )\n      \"\"\"\n      else code\n    genLambdaDecl: (ast, infoVar, name, args, length, code)->\n      if name then nameCode = jstr name\n      else nameCode = 'undefined'\n      infoVar = @addFuncInfo info = {length}\n      if @debug\n        info.id = _.last(@declStack).id\n        sn ast, \"\"\"\n          (function(L$instance, L$parent){\n            var L$F = \"\"\", code, \"\"\";\n            L$F.L$info = #{infoVar};\n            L$F.L$instanceId = L$instance;\n            L$F.L$parentId = L$parent;\n            return Leisure_traceLambda#{@debugType}(L$F);\n          })(++Leisure_traceInstance, L$instance)\n        \"\"\"\n      else sn ast, \"\"\"\n        (function(){\n          var L$F = \"\"\", code, \"\"\";\n          L$F.L$info = #{infoVar};\n          return L$F;\n        })()\n      \"\"\"\n    genAddSource: ->\n      if @source then \"\\n  Leisure_addSourceFile(@fileName, #{jstr @source});\"\n      else ''\n    genTraceMemos: ->\n      # memos for trace codes\n      ''\n    genTopLevel: (ast, node)->\n      if dumpAnno(ast).constructor in [Leisure_lit, Leisure_ref] then node\n      else if @decls.length || @debug\n        header = \"var L$ret;\"\n        if @createContext then header += @genContext()\n        sn ast, \"\"\"\n          (function(L$instance){\n            #{header}\n            return \"\"\", node, \"\"\";\n          })(++Leisure_traceInstance)\n        \"\"\"\n      else sn ast, \"\"\"\n        (function(){\n          var L$context = null;\n          #{@genFuncInfo()}\n          return \"\"\", node, \"\"\";\n        })()\n        \"\"\"\n    genContext: ->\n      source = if @source || @noFile then \"\"\"\n        source: Leisure_addSourceFile(#{jstr @fileName}, #{jstr @source}),\n            map: '@SOURCEMAP@'\n      \"\"\"\n      else if @sourceMap then \"\"\"\n        source: #{jstr @fileName},\n            map: '@SOURCEMAP@'\n      \"\"\"\n      else \"\"\"\n        source: #{jstr @fileName}\n      \"\"\"\n      decls = []\n      for decl in @decls\n        type = if decl.lazy then 'lazy' else 'lambda'\n        decls.push type, decl.line, decl.col, decl.parent\n        if type == 'lambda' then decls.push decl.lambda, decl.args.length, decl.args...\n      context = \"\"\"\n        \\n  var L$context = Leisure_traceTopLevel#{@debugType}({\n            id: Leisure_traceContext++,\n            traceCreatePartial: function(){return Leisure_traceCreatePartial#{@debugType};},\n            traceCallPartial: function(){return Leisure_traceCallPartial#{@debugType};},\n            debugType: #{JSON.stringify @debugType},\n            #{source},\n            decls: #{JSON.stringify decls}\n          });\n      \"\"\" + @genFuncInfo()\n    genFuncInfo: ->\n      header = ''\n      if @decls.length\n        for info, i in @funcInfo\n          parent = info.parent? && @decls[info.parent]\n          while parent && parent.lazy\n            parent = @decls[parent.parent]\n          parent = if parent?.funcId then @funcVar parent.funcId\n          else 'null'\n          header += \"\\n  var #{@funcVar i} = {name: #{JSON.stringify info.name}, args: #{JSON.stringify info.args}, id: #{info.id}, length: #{info.length}, parent: #{parent}, context: L$context};\"\n      else\n        for info, i in @funcInfo\n          header += \"\"\"\n            \\n  var #{@funcVar i} = {name: #{JSON.stringify info.name}, length: #{info.length}};\n          \"\"\"\n      header\n\n  lazify = (ast, body, id, debugType)->\n    if debugType\n      sn ast, \"\"\"\n        (function(L$instance, L$parent) {\n          return Leisure_traceLazyValue#{debugType}(L$instance, L$context, #{id}, function(){\n            return Leisure_traceResolve#{debugType}(L$instance, \"\"\", body, \"\"\");\n          });\n        })(++Leisure_traceInstance, L$instance)\n      \"\"\"\n    else sn ast, \"\"\"\n      function(){\n        return \"\"\", body, \"\"\";\n      }\n    \"\"\"\n\n  findName = (name)->\n    for i in [root.nameSpacePath.length - 1 .. 0]\n      if LeisureNameSpaces[root.nameSpacePath[i]]?[name] then return root.nameSpacePath[i]\n    if root.currentNameSpace && LeisureNameSpaces[root.currentNameSpace][name] then root.currentNameSpace\n    else null\n\n  location = (ast)->\n    [line, col] = locateAst ast\n    \"#{line}:#{col}\"\n\n  getLambdaArgs = (ast)->\n    args = []\n    while ast instanceof Leisure_lambda\n      args.push getLambdaVar ast\n      ast = getLambdaBody ast\n    [args, ast]\n\n  getNthLambdaBody = (ast, n)->\n    if n == 0 then ast\n    else if (d = dumpAnno ast) instanceof Leisure_lambda then getNthLambdaBody getLambdaBody(d), n - 1\n    else throw new Error \"Expected lambda but got #{ast}\"\n\n  (window ? global ? {}).curryCall = curryCall = (args, func)->\n    f = func args[0]\n    for i in [1...args.length]\n      f = f args[i]\n    f\n\n  getNArgs = (n, ast)->\n    d = dumpAnno ast\n    if !n then Nil else cons (getLambdaVar d), getNArgs n - 1, getLambdaBody d\n\n  specialAnnotations = ['type', 'dataType', 'define']\n\n  arrayify = (cons)->\n    if cons instanceof Leisure_cons then cons.map((el)-> arrayify el).toArray()\n    else cons\n\n  getLambdaProperties = (body, props)->\n    if body instanceof Leisure_anno\n      if !_.includes specialAnnotations, getAnnoName(body)\n        if !props then props = {}\n        value = getAnnoData body\n        props[getAnnoName body] = arrayify value\n      getLambdaProperties getAnnoBody(body), props\n    props\n\n  addLambdaProperties = (ast, def, extras)->\n    props = getLambdaProperties getLambdaBody ast\n    if props || extras\n      p = {}\n      if props then _.merge p, props\n      if extras then _.merge p, extras\n      sn ast, \"setLambdaProperties(\", def, \", \", (jstr p), \")\"\n    else def\n\n  lcons = (a, b)-> rz(L_cons)(lz a)(lz b)\n  parseErr = (a, b)-> rz(L_parseErr)(a, b)\n\n  lconsFrom = (array)->\n    if array instanceof Array\n      p = rz L_nil\n      for el in array.reverse()\n        p = lcons lconsFrom(el), p\n      p\n    else array\n\n  assocListProps = null\n\n  getAssocListProps = ->\n    if !assocListProps\n      assocListProps = lcons lcons('assoc', 'true'), rz(L_nil)\n      assocListProps.properties = assocListProps\n    assocListProps\n\n  lacons = (key, value, list)->\n    alist = lcons lcons(key, value), list\n    alist.properties = getAssocListProps()\n    alist\n\n  (window ? global).setLambdaProperties = (def, props)->\n    p = rz L_nil\n    for k, v of props\n      p = lacons k, lconsFrom(v), p\n    def.properties = p\n    def\n\n  (global ? window).L$convertError = (err, args)->\n    if !err.L_stack\n      console.log 'CONVERTING ERROR:', err\n      (global ? window).ERR = err\n      err.L_stack = args.callee.L$stack\n      err.L_args = args\n    err\n\n  dumpAnno = (ast)-> if ast instanceof Leisure_anno then dumpAnno getAnnoBody ast else ast\n\n  addUniq = (name, names, uniq)->\n    if (names.find (el)-> el == name) != Nil\n      [overrides, num] = uniq\n      [(cons (cons name, \"#{name}_#{num}\"), overrides), num + 1]\n    else uniq\n\n  uniqName = (name, uniq)->\n    [uniq] = uniq\n    kv = uniq.find ((el)-> el.head() == name), uniq\n    varNameSub (if kv != Nil then kv.tail() else name)\n\n  letList = (ast, buf)->\n    if ast instanceof Leisure_let\n      buf.push ast\n      letList getLetBody(ast), buf\n    else buf\n\n  getLastLetBody = (ast)-> if ast instanceof Leisure_let then getLastLetBody getLetBody ast else ast\n\n  define 'debugType', (lvl)->\n    new Monad2 'debugType', (env, cont)->\n      setDebugType String rz lvl\n      cont unit()\n\n  define 'debugMessage', (type, msg)-> checkPartial(L_vectorRemove, arguments) || (\n    new Monad2 'debugMessage', (env, cont)->\n      count = (window ? global)[\"Leisure_traceMessage#{rz type}\"] rz msg\n      env.writeTraceMessage count, rz msg\n      cont unit())\n\n  define 'traceOff', new Monad2 'traceOff', (env, cont)->\n    trace = false\n    cont unit()\n\n  define 'traceOn', new Monad2 'traceOn', (env, cont)->\n    trace = true\n    cont unit()\n\n  define 'runAst', ((code)->(ast)->\n    new Monad2 'runAst', (env, cont)->\n      #console.log \"running code\", code\n      jsCode = null\n      try\n        jsCode = if env.fileName then withFile env.fileName, null, =>\n          new CodeGenerator(env.fileName, false, true).genSource null, rz(ast)\n        else new CodeGenerator().genSource rz(code), rz(ast)\n        cont eval jsCode\n      catch err\n        dumpMonadStack err, env\n        codeMsg = (if jsCode then \"CODE: \\n#{jsCode}\\n\" else '')\n        baseMsg = \"\\n\\nParse error: #{err.message}\\n#{codeMsg}AST: \"\n        err.message = \"#{baseMsg}#{ast()}\"\n        err.L$ast = ast\n        cont err), null, null, null, 'parser'\n\n  define 'genAst', ((ast)->\n    try\n      gen rz ast\n    catch err\n      parseErr (lz '\\n\\nParse error: ' + err.toString() + \"AST: \"), (ast)), null, null, null, 'parser'\n\n\n#####\n# TMP HOOKS\n#####\n\n#####\n# END TMP HOOKS\n#####\n\n  gen = (ast)-> new CodeGenerator().gen ast\n  genMap = (ast, fileName)->\n    new CodeGenerator(fileName, false, false, fileName).genMap ast\n  genSource = (source, ast)-> new CodeGenerator().genSource source, ast\n\n  {\n    gen\n    genMap\n    genSource\n    sourceNode: sn\n    withFile\n    curryCall\n    #useNameSpace: useNameSpace\n    #pushNameSpace: pushNameSpace\n    #getNameSpacePath: getNameSpacePath\n    #clearNameSpacePath: clearNameSpacePath\n    #saveNameSpace: saveNameSpace\n    #restoreNameSpace: restoreNameSpace\n    SourceNode\n    SourceMapConsumer\n    SourceMapGenerator\n    setMegaArity\n    CodeGenerator\n    setDebugType\n    jsCodeFor\n  }\n"
  ]
}