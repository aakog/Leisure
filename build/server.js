// Generated by CoffeeScript 1.9.3
(function() {
  var MasterHandler, MessageHandler, SlaveHandler, badIdError, badMsgTypeError, crypto, guid, http, masters, ref, s4, slaves, socketPrefix, sockjs, sockjsUtil, startServer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  sockjs = require('sockjs');

  sockjsUtil = require('sockjs/lib/utils');

  http = require('http');

  crypto = require('crypto');

  ref = require('requirejs').config({
    baseUrl: path.dirname(module.filename)
  })('./common'), badIdError = ref.badIdError, badMsgTypeError = ref.badMsgTypeError;

  masters = {};

  slaves = {};

  socketPrefix = '/Leisure/(master|slave(?:-([^/]*)))';

  s4 = function() {
    var bytes, n;
    bytes = crypto.randomBytes(2);
    n = (bytes[0] + (bytes[1] << 8)).toString(16);
    while (n.length < 4) {
      n = '0' + n;
    }
    return n;
  };

  guid = function() {
    return "" + (s4()) + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + (s4()) + (s4());
  };

  MessageHandler = (function() {
    function MessageHandler() {
      this.id = guid();
    }

    MessageHandler.prototype.setConnection = function(con1) {
      this.con = con1;
      console.log(this.type + " connection: " + this.id);
      this.con.leisure = this;
      this.con.on('data', (function(_this) {
        return function(msg) {
          return _this.handleMessage(JSON.parse(msg));
        };
      })(this));
      return this.con.on('close', (function(_this) {
        return function() {
          return _this.closed();
        };
      })(this));
    };

    MessageHandler.prototype.type = 'Unknown Handler';

    MessageHandler.prototype.close = function() {
      return this.con.close();
    };

    MessageHandler.prototype.closed = function() {
      return console.log(this.type + " closed: " + this.id);
    };

    MessageHandler.prototype.send = function(msg) {
      return this.con.write(JSON.stringify(msg));
    };

    MessageHandler.prototype.sendError = function(msg) {
      msg.type = 'error';
      this.send(msg);
      return setTimeout(((function(_this) {
        return function() {
          return _this.close();
        };
      })(this)), 1);
    };

    MessageHandler.prototype.handleMessage = function(msg) {
      msg.connectionId = this.connectionId;
      if (!(msg.type in this.handler)) {
        console.log("Received bad message " + msg.type, msg);
        return this.close();
      } else {
        return this.handler[msg.type].call(this, msg);
      }
    };

    MessageHandler.prototype.handler = {
      log: function(msg) {
        return console.log(msg.msg);
      },
      replace: function(msg) {
        return this.master.relay(msg);
      }
    };

    MessageHandler.prototype.sendEcho = function() {
      return this.send({
        type: 'echo'
      });
    };

    return MessageHandler;

  })();

  MasterHandler = (function(superClass) {
    extend(MasterHandler, superClass);

    function MasterHandler() {
      MasterHandler.__super__.constructor.call(this);
      this.master = this;
      this.msgCount = 0;
      this.connectionId = "peer-0";
      this.slaves = {};
      this.pendingSlaves = {};
      this.doc = '';
      this.peerCount = 0;
    }

    MasterHandler.prototype.type = 'Master';

    MasterHandler.prototype.setConnection = function(con) {
      masters[this.id] = this;
      MasterHandler.__super__.setConnection.call(this, con);
      return this.send({
        type: 'connect',
        id: this.id,
        connectionId: this.connectionId
      });
    };

    MasterHandler.prototype.addSlave = function(slave) {
      slave.connectionId = "peer-" + (++this.peerCount);
      this.pendingSlaves[slave.connectionId] = slave;
      return this.send({
        type: 'slaveConnect',
        slaveId: slave.connectionId
      });
    };

    MasterHandler.prototype.removeSlave = function(slave) {
      delete this.slaves[slave.connectionId];
      delete this.pendingSlaves[slave.connectionId];
      return this.send({
        type: 'slaveDisconnect',
        slaveId: slave.connectionId
      });
    };

    MasterHandler.prototype.closed = function() {
      var id, ref1, slave;
      delete masters[this.con.leisure.id];
      ref1 = this.slaves;
      for (id in ref1) {
        slave = ref1[id];
        slave.close();
      }
      this.slaves = {};
      return MasterHandler.__super__.closed.call(this);
    };

    MasterHandler.prototype.relay = function(msg) {
      var end, id, ref1, replId, results, slave, start, text;
      if (msg.type === 'replace') {
        start = msg.start, end = msg.end, text = msg.text, replId = msg.connectionId;
        this.doc = this.doc.substring(0, start) + text + this.doc.substring(end);
        if (msg.connectionId === this.connectionId) {
          this.sendEcho();
        } else {
          this.slaves[replId].sendEcho();
        }
      }
      msg.msgCount = this.msgCount++;
      if (replId !== this.connectionId) {
        this.send(msg);
      }
      ref1 = this.slaves;
      results = [];
      for (id in ref1) {
        slave = ref1[id];
        if (replId !== slave.connectionId) {
          results.push(slave.send(msg));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    MasterHandler.prototype.handler = {
      __proto__: MessageHandler.prototype.handler,
      initDoc: function(arg) {
        this.doc = arg.doc;
      },
      slaveApproval: function(arg) {
        var approval, slave, slaveId;
        slaveId = arg.slaveId, approval = arg.approval;
        if (slave = this.pendingSlaves[slaveId]) {
          delete this.pendingSlaves[slaveId];
          if (approval) {
            this.slaves[slaveId] = slave;
            return slave.send({
              type: 'connect',
              id: this.id,
              connectionId: slave.connectionId,
              doc: this.doc
            });
          } else {
            return slave.sendError(disapprovedError());
          }
        }
      }
    };

    return MasterHandler;

  })(MessageHandler);

  SlaveHandler = (function(superClass) {
    extend(SlaveHandler, superClass);

    function SlaveHandler() {
      return SlaveHandler.__super__.constructor.apply(this, arguments);
    }

    SlaveHandler.prototype.type = 'Slave';

    SlaveHandler.prototype.setConnection = function(con, masterId) {
      if (!(this.master = masters[masterId])) {
        this.sendError(badMasterIdError(masterId));
      } else {
        this.master.addSlave(this);
      }
      return SlaveHandler.__super__.setConnection.call(this, con);
    };

    SlaveHandler.prototype.setId = function(id1) {
      this.id = id1;
    };

    SlaveHandler.prototype.closed = function() {
      this.master.removeSlave(this);
      return SlaveHandler.__super__.closed.call(this);
    };

    return SlaveHandler;

  })(MessageHandler);

  startServer = function(port) {
    var http_server;
    http_server = http.createServer();
    sockjs.createServer({
      sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js',
      prefix: socketPrefix
    }).on('connection', function(con) {
      var ignore, masterId, ref1, type;
      ref1 = con.pathname.match(socketPrefix), ignore = ref1[0], type = ref1[1], masterId = ref1[2];
      if (type === 'master') {
        return new MasterHandler().setConnection(con);
      } else {
        return new SlaveHandler().setConnection(con, masterId);
      }
    }).installHandlers(http_server);
    return http_server.listen(port, '0.0.0.0');
  };

  module.exports = {
    startServer: startServer,
    guid: guid
  };

}).call(this);

//# sourceMappingURL=server.js.map
