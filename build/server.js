// Generated by CoffeeScript 1.9.3
(function() {
  var BAD_ID_ERROR, crypto, guid, http, masterConnection, masterPrefix, masters, rerequire, s4, slaveConnection, slavePrefix, slaves, sockjs, sockjsUtil, startServer;

  sockjs = require('sockjs');

  sockjsUtil = require('sockjs/lib/utils');

  http = require('http');

  crypto = require('crypto');

  BAD_ID_ERROR = require('requirejs').config({
    baseUrl: path.dirname(module.filename)
  })('./common').BAD_ID_ERROR;

  masters = {};

  slaves = {};

  masterPrefix = '/Leisure/master[^/]*';

  slavePrefix = '/Leisure/slave[^/]*';

  s4 = function() {
    var bytes, n;
    bytes = crypto.randomBytes(2);
    n = (bytes[0] + (bytes[1] << 8)).toString(16);
    while (n.length < 4) {
      n = '0' + n;
    }
    return n;
  };

  guid = function() {
    return "" + (s4()) + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + (s4()) + (s4());
  };

  startServer = function(port) {
    var http_server;
    http_server = http.createServer();
    sockjs.createServer({
      sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js',
      prefix: masterPrefix
    }).on('connection', function(con) {
      return masterConnection(con);
    }).installHandlers(http_server);
    sockjs.createServer({
      sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js',
      prefix: slavePrefix
    }).on('connection', function(con) {
      return slaveConnection(con);
    }).installHandlers(http_server);
    return http_server.listen(port, '0.0.0.0');
  };

  masterConnection = function(con) {
    con.leisure = {
      id: guid()
    };
    masters[con.leisure.id] = con;
    console.log("Master connection: " + con.leisure.id);
    con.write(JSON.stringify({
      id: con.leisure.id
    }));
    con.on('data', function(msg) {
      console.log("Master message: " + msg);
      return con.write('pong');
    });
    return con.on('close', function() {
      console.log("Closed master: " + con.leisure.id);
      return delete masters[con.leisure.id];
    });
  };

  slaveConnection = function(con) {
    var ignore, master, masterId, ref;
    ref = con.pathname.match(con.prefix)[0].match(/.*([0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12})/), ignore = ref[0], masterId = ref[1];
    console.log("Slave connection to " + masterId);
    if (master = masters[masterId]) {
      con.leisure = {
        master: master,
        id: guid()
      };
      con.write(JSON.stringify({
        id: con.leisure.id
      }));
      con.on('data', function(msg) {
        console.log("Slave message: " + msg);
        return con.write('pong');
      });
      return con.on('close', function() {
        console.log("Closed slave: " + con.leisure.id);
        return delete slaves[con.leisure.id];
      });
    } else {
      con.write(JSON.stringify({
        error: "Bad master Id",
        code: BAD_ID_ERROR
      }));
      return con.close();
    }
  };

  rerequire = function(module) {
    var exp, k, ref, removeKey, v;
    removeKey = null;
    if (module.match(/^\.[\/\\]/)) {
      exp = new RegExp((module.substring(2)) + "\.js$");
      console.log(exp);
      ref = require.cache;
      for (k in ref) {
        v = ref[k];
        if ((k.match(exp)) && !k.match(/node_modules/)) {
          if (removeKey) {
            console.log("WARNING: More than one module matches " + module);
            removeKey = null;
            break;
          }
          removeKey = k;
        }
      }
      if (removeKey) {
        delete require.cache[removeKey];
      }
    }
    return require(module);
  };

  module.exports = {
    startServer: startServer,
    rerequire: rerequire,
    guid: guid
  };

}).call(this);

//# sourceMappingURL=server.js.map
