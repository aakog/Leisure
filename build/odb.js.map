{
  "version": 3,
  "file": "odb.js",
  "sourceRoot": "..",
  "sources": [
    "src/odb.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Basic omniscient debugger\n\n    define ['./base', 'bluebird'], (Base, Bluebird)->\n      {\n        useDebugging\n        trackDebugging\n        flushTraceLog\n      } = Base\n      {\n        Promise\n      } = Bluebird\n\n      messageId = 1\n      requestPromises = {}\n      currentOdb = null\n      worker = new Worker 'build/odbWorker.js'\n\n      worker.onmessage = (e)->\n        console.log \"Received response: #{JSON.stringify e}\"\n        if e.data.msgId && p = requestPromises[e.data.msgId]\n          requestPromises[e.data.msgId] = null\n          if e.data.error\n            err = new Error()\n            err.message = e.data.error.message\n            err.stack = e.data.error.stack\n            p.reject err\n          else p.resolve e.data.return\n\n      useOdb = (types...)->\n        for type in types\n          useDebugging 100, handleTraceValues, type\n\n      trackOdb = ->\n        console.log 'ODB tracking'\n        trackDebugging 100, handleTraceValues\n\n      handleTraceValues = (values)-> currentOdb.handleTraceValues values\n\n      dumpTraceValues = -> currentOdb.dumpTraceValues()\n\n      setVerbose = (state)-> currentOdb.setVerbose state\n\n      getLatestEntry = -> currentOdb.getLatestEntry()\n\n      getEntry = (type, key)-> currentOdb.getEntry type, key\n\n      getCallGraphInfo = -> currentOdb.getCallGraphInfo()\n\n      getCallGraphEntry = (n)-> currentOdb.getCallGraphEntry n\n\n      getContextDef = (contextId, defId)-> currentOdb.getContextDef contextId, defId\n\n      getLambdaDef = (name)-> currentOdb.getLambdaDef name\n\n      clearEntries = -> currentOdb.clearEntries()\n\n      deleteEntries = -> currentOdb.deleteEntries()\n\n      class ODB\n        constructor: (@logName)->\n        postRequest: (msg)->\n          flushTraceLog()\n          msg.logName = @logName\n          msgId = msg.msgId = messageId++\n          p = new Promise (resolve, reject)->\n            requestPromises[msgId] = {resolve, reject}\n          worker.postMessage msg\n          p\n        postMessage: (req, suppressFlush)->\n          if !suppressFlush then flushTraceLog()\n          req.logName = @logName\n          worker.postMessage req\n        handleTraceValues: (values)-> @postMessage {msg: 'queueValues', values: values}, true\n        dumpTraceValues: -> @postMessage msg: 'dumpValues'\n        getLatestEntry: -> @postRequest msg: 'latestEntry'\n        getEntry: (type, key)-> @postRequest {type, key, msg: 'getEntry'}\n        getContextDef: (contextId, defId)->\n          @postRequest {id, msg: 'getContextDef', context: contextId}\n        getLambdaDef: (name)-> @postRequest msg: 'getContextDef', lambdaName: name\n        getCallGraphInfo: -> @postRequest msg: 'getCallGraphInfo'\n        getCallGraphEntry: (number)-> @postRequest {number, msg: 'getCallGraphEntry'}\n        clearEntries: -> @postMessage msg: 'clearEntries'\n        deleteEntries: -> @postMessage msg: 'deleteEntries'\n        setVerbose: (state)-> @postMessage msg: 'setVerbose', verbose: state\n\n      currentOdb = new ODB 'testLog'\n\n      window.useOdb = useOdb\n\n      window.ODB = Leisure.ODB = {\n        dump: dumpTraceValues\n        useOdb\n        trackOdb\n        getEntry\n        dumpTraceValues\n        getLatestEntry\n        getEntry\n        getContextDef\n        getLambdaDef\n        clearEntries\n        deleteEntries\n        setVerbose\n        getCallGraphInfo\n        getCallGraphEntry\n      }\n"
  ]
}