{
  "version": 3,
  "file": "domCursor.js",
  "sourceRoot": "..",
  "sources": [
    "src/domCursor.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "DOMCursor\n=========\nCopyright (C) 2014, Bill Burdick, Roy Riggs, TEAM CTHULHU\n\nLicensed with ZLIB license (see \"License\", below).\n\nFiltered cursoring on DOM trees.  DOMCursors can move forwards or backwards, by node or by character, with settable filters that can seamlessly skip over parts of the DOM.\n\nThis readme file is also the code.\n\nHere are some examples (I'm wrapping them in a -> to make a no-op that gets syntax highlighting in viewers that support it).\n\n    'use strict'\n    ->\n\nIn Leisure, I use it like this, to retrieve text from the page (scroll down to see docs on these methods, by the way):\n\n      DOMCursor.prototype.filterOrg = ->\n        @addFilter (n)-> (n.nodeType == 1 && n.hasAttribute('data-noncontent') && 'skip') || true\n\n      domCursor = (node, pos)-> new DOMCursor(node, pos).filterOrg()\n\n      # full text for node\n      getOrgText = (node)->\n        domCursor node.firstChild, 0\n          .mutable()\n          .filterTextNodes()\n          .filterParent node\n          .getText()\n\nAnd like this for cursor movement.  Once I have the cursor, I can use forwardChar, backwardChar, forwardLine, backwardLine to move it around:\n\n      domCursorForCaret = (end)->\n        sel = getSelection()\n        c = if sel.type == 'None' then emptyDOMCursor\n        else if end then domCursor sel.extentNode, sel.extendOffset\n        else domCursor sel.anchorNode, sel.anchorOffset\n        if !c.empty\n          parent = parentForNode sel.focusNode\n          c = c\n            .mutable()\n            .filterVisibleTextNodes()\n            .filterParent parent\n            .firstText()\n          if c.pos < c.node.length then c else c.next()\n        c\n\nDOMCursor Class\n---------------\n\nDOMCursors are immutable -- operations on them return new DOMCursers.\nThere are two ways to get mutabile cursors, sending @mutable() or\nsending @withMutations (m)-> ...\n\nA DOMCursor has a node, a position, a filter, and a type.\n\n- node: like with ranges, a DOM node\n- position: like with ranges, either the index of a child, for elements, or the index of a character, for text nodes.\n- filter: a function used by @next() and @prev() to skip over portions of DOM. It returns\n  - truthy: to accept a node but its children are still filtered\n  - falsey: to reject a node but its children are still filtered\n  - 'skip': to skip a node and its children\n  - 'quit': to end to make @next() or @prev() return an empty DOMCursor\n- type: 'empty', 'text', or 'element'\n\nLicense\n=====================\nLicensed with ZLIB license.\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n\nThe DOMCursor class...\n======================\n\n    define ->\n\n      class DOMCursor\n        constructor: (@node, @pos, filter)->\n          if @node instanceof Range\n            filter = @pos\n            @pos = @node.startOffset\n            @node = @node.startContainer\n          @pos = @pos ? 0\n          @filter = filter || -> true\n          @computeType()\n          @savedTextPosition = null\n\n        isCollapsed: -> !@isEmpty() && isCollapsed @node\n\n        computeType: ->\n          @type = if !@node then 'empty'\n          else if @node.nodeType == @node.TEXT_NODE then 'text'\n          else 'element'\n          this\n\n        equals: (other)-> @node == other.node && @pos == other.pos\n\n        newPos: (node, pos)->\n          if node instanceof Range then new DOMCursor node\n          else new DOMCursor node, pos, @filter\n\n        toString: ->\n          \"DOMCursor(#{@type}, #{@pos}#{if @type == 'text' then ', ' + @posString() else ''})\"\n\n        posString: ->\n          @node.data.substring(0, @pos) + '|' + @node.data.substring @pos\n\n        textPosition: ->\n          if @isEmpty() then null\n          else @savedTextPosition ? (@savedTextPosition = getTextPosition @node, @pos)\n\n        isDomCaretTextPosition: ->\n          p = @textPosition()\n          r = document.caretRangeFromPoint p.left, p.top\n          r.startContainer == @node && r.startOffset == @pos\n\n**Character** returns the character at the position\n\n        character: ->\n          p = if @type == 'text' then this else @save().firstText()\n          p.node.data[p.pos]\n\n**isEmpty** returns true if the cursor is empty\n\n        isEmpty: -> @type == 'empty'\n\n**setFilter** sets the filter\n\n        setFilter: (f)-> new DOMCursor @node, @pos, f\n\n**addFilter** adds a filter\n\n        addFilter: (filt)->\n          oldFilt = @filter\n          @setFilter (n)->\n            (((r1 = oldFilt n) in ['quit', 'skip']) && r1) || (((r2 = filt n) in ['quit', 'skip']) && r2) || (r1 && r2)\n\n**next** moves to the next filtered node\n\n        next: (up)->\n          saved = @save()\n          n = @nodeAfter up\n          while !n.isEmpty()\n            switch res = @filter n\n              when 'skip'\n                n = n.nodeAfter true\n                continue\n              when 'quit' then break\n              else\n                if res then return n\n            n = n.nodeAfter()\n          @restore(saved).emptyNext()\n\n**prev** moves to the next filtered node\n\n        prev: (up)->\n          saved = @save()\n          n = @nodeBefore up\n          while !n.isEmpty()\n            switch res = @filter n\n              when 'skip'\n                n = n.nodeBefore true\n                continue\n              when 'quit' then break\n              else\n                if res then return n\n            n = n.nodeBefore()\n          @restore(saved).emptyPrev()\n\n**nodes** returns all of the nodes this cursor finds\n\n        nodes: ->\n          n = this\n          n.node while !(n = n.next()).isEmpty()\n\n**moveCaret** move the document selection to the current position\n\n        moveCaret: (r)->\n          if !@isEmpty()\n            if !r then r = document.createRange()\n            r.setStart @node, @pos\n            r.collapse true\n            selectRange r\n          this\n\n        scrollIntoViewIfNeeded: ->\n          (if @node.nodeType == @node.TEXT_NODE then @node.parentNode else @node).scrollIntoViewIfNeeded()\n\n        adjustForNewline: ->\n          if @isEmpty() then this\n          else\n            s = @save()\n            n = this\n            if @pos == 0 && @node.data[0] == '\\n'\n              while !n.isEmpty() && (n = n.prev()).type != 'text' then\n              if n.isEmpty() then s\n              else\n                if n.node.data[n.pos - 1] == '\\n' then s\n                else n\n            else if @pos == @node.length && @node.data[@pos - 1] == '\\n'\n              while !n.isEmpty() && (n = n.next()).type != 'text' then\n              if n.node.data[n.pos] == '\\n' then s\n              n\n            else this\n\n**range** create a range between two positions\n\n        range: (other, r)->\n          if !r then r = document.createRange()\n          if !other? then other = this\n          r.setStart @node, @pos\n          r.setEnd other.node, other.pos\n          r\n\n**firstText** find the first text node (the 'backwards' argument is optional and if true,\nindicates to find the first text node behind the cursor).\n\n        firstText: (backwards)->\n          n = this\n          while !n.isEmpty() && (n.type != 'text' || (!backwards && n.pos == n.node.data.length))\n            n = (if backwards then n.prev() else n.next())\n          n\n\n**countChars** count the characters in the filtered nodes until we get to (node, pos)\n\nInclude (node, 0) up to but not including (node, pos)\n\n        countChars: (node, pos)->\n          start = @copy()\n          if node instanceof DOMCursor\n            pos = node.pos\n            node = node.node\n          n = this\n          tot = 0\n          while !n.isEmpty() && n.node != node\n            if n.type == 'text' then tot += n.node.length\n            n = n.next()\n          if n.isEmpty() || n.node != node then -1\n          else if n.type == 'text'\n            tot += pos\n            if start.node == n.node then tot -= start.pos\n            tot\n          else tot\n\n**forwardChars** moves the cursor forward by count characters\n\nif contain is true and the final location is 0 then go to the end of\nthe previous text node (node, node.length), if contain is false but\ncontainIfSpace is true and the final location is 0 and is also a space,\nthen go to the end of the previous text node (provided we didn't start there).\n\n        forwardChars: (count, contain, containIfSpace)->\n          #if count == 0 then return this\n          n = this\n          count += @pos\n          while !n.isEmpty() && 0 <= count\n            if n.type == 'text'\n              if count < n.node.length\n                if count == 0 && (contain || containIfSpace)\n                  if skipped = n.skipToFrontOfSpace contain then return skipped\n                return n.newPos n.node, count\n              count -= n.node.length\n            n = n.next()\n          n.emptyNext()\n\n        skipToFrontOfSpace: (force)->\n          if force || (@pos == 0 && @type == 'text' && (@node.data[0] in ' \\n\\r'))\n            n = @prev()\n            while n.type != 'text' then n = n.prev()\n            n.newPos n.node, n.node.length\n\n**hasAttribute** returns true if the node is an element and has the attribute or if it is a text node and its parent has the attribute\n\n        hasAttribute: (a)-> @node? && @node.nodeType == @node.ELEMENT_NODE && @node.hasAttribute a\n\n**getAttribute** returns the attribute if the node is an element and has the attribute\n\n        getAttribute: (a)-> @node? && @node.nodeType == @node.ELEMENT_NODE && @node.getAttribute a\n\n**filterTextNodes** adds text node filtering to the current filter; the cursor will only find text nodes\n\n        filterTextNodes: -> @addFilter (n)-> n.type == 'text'\n\n**filterVisibleNodes** adds visible text node filtering to the current filter; the cursor will only find visible text nodes\n\n        filterVisibleNodes: -> @addFilter (n)-> !n.isCollapsed()\n\n**filterVisibleTextNodes** adds visible text node filtering to the current filter; the cursor will only find visible text nodes\n\n        filterVisibleTextNodes: -> @filterTextNodes().filterVisibleNodes()\n\n**filterParent** adds parent filtering to the current filter; the cursor will only find nodes that are contained in the parent (or equal to it)\n\n        filterParent: (parent)->\n          if !parent then @setFilter -> 'quit'\n          else @addFilter (n)-> parent.contains(n.node) || 'quit'\n\n**filterRange** adds range filtering to the current filter; the cursor will only find nodes that are contained in the range\n\n        filterRange: (startContainer, startOffset, endContainer, endOffset)->\n          if !startOffset?\n            if startContainer instanceof Range\n              r = startContainer\n              startContainer = r.startContainer\n              startOffset = r.startOffset\n              endContainer = r.endContainer\n              endOffset = r.endOffset\n            else return this\n          @addFilter (n)->\n            startPos = startContainer.compareDocumentPosition n.node\n            (if startPos == 0 then startOffset <= n.pos <= endOffset\n            else if startPos & Element.DOCUMENT_POSITION_FOLLOWING\n              endPos = endContainer.compareDocumentPosition n.node\n              if endPos == 0 then n.pos <= endOffset\n              else endPos & Element.DOCUMENT_POSITION_PRECEDING) || 'quit'\n\n**getText** gets all of the text at or after the cursor (useful with filtering; see above)\n\n        getText: (len)->\n          len = len ? Number.MAX_SAFE_INTEGER\n          n = @mutable().firstText()\n          if n.isEmpty() then ''\n          else\n            t = n.node.data.substring n.pos\n            while !(n = n.next()).isEmpty() && t.length < len\n              if n.type == 'text' then t += n.node.data\n            if t.length > len then t.substring 0, len\n            else if t.length\n              while n.type != 'text'\n                n = n.prev()\n              n = n.newPos n.node, n.node.length\n              while n.pos > 0 && reject n.filter n\n                n.pos--\n              t.substring 0, t.length - n.node.length + n.pos\n            else ''\n\n**getTextTo** gets all of the text at or after the cursor (useful with filtering; see above)\n\n        getTextTo: (other)->\n          n = @mutable().firstText()\n          if n.isEmpty() then ''\n          else\n            t = n.node.data.substring n.pos\n            if n.node != other.node\n              while !(n = n.next()).isEmpty()\n                if n.type == 'text' then t += n.node.data\n                if n.node == other.node then break\n            if t.length\n              while n.type != 'text'\n                n.prev()\n              if n.node == other.node then n = n.newPos n.node, other.pos\n              else n = n.newPos n.node, n.node.length\n              while n.pos > 0 && reject n.filter n\n                n.pos--\n              t.substring 0, t.length - n.node.length + n.pos\n            else ''\n\n        char: -> @type == 'text' && @node.data[@pos]\n\n**isNL** returns whether the current character is a newline\n\n        isNL: -> @char() == '\\n'\n\n**endsInNL** returns whether the current node ends with a newline\n\n        endsInNL: -> @type == 'text' && @node.data[@node.length - 1] == '\\n'\n\n**moveToStart** moves to the beginning of the node\n\n        moveToStart: -> @newPos @node, 0\n\n**moveToNextStart** moves to the beginning of the next node\n\n        moveToNextStart: -> @next().moveToStart()\n\n**moveToEnd** moves to the textual end the node (1 before the end if the node\nends in a newline)\n\n        moveToEnd: ->\n          end = @node.length - (if @endsInNL() then 1 else 0)\n          @newPos @node, end\n\n**moveToPrevEnd** moves to the textual end the previous node (1 before\nthe end if the node ends in a newline)\n\n        moveToPrevEnd: -> @prev().moveToEnd()\n\n**forwardWhile** moves forward until the given function is false or 'found',\nreturning the previous position if the function is false or the current\nposition if the function is 'found'\n\n        forwardWhile: (test)->\n          prev = n = @immutable()\n          while n = n.forwardChar()\n            if n.isEmpty() || !(t = test n) then return prev\n            if t == 'found' then return n\n            prev = n\n\n**checkToEndOfLine** checks whether a condition is true until the EOL\n\n        checkToEndOfLine: (test)->\n          n = @immutable()\n          tp = n.textPosition()\n          while !n.isEmpty() && (test n)\n            if differentLines tp, n.textPosition() then return true\n            n = n.forwardChar()\n          n.isEmpty()\n\n**checkToStartOfLine** checks whether a condition is true until the EOL\n\n        checkToStartOfLine: (test)->\n          n = @immutable()\n          tp = n.textPosition()\n          while !n.isEmpty() && (test n)\n            if differentLines tp, n.textPosition() then return true\n            n = n.backwardChar()\n          n.isEmpty()\n\n**endOfLine** moves to the end of the current line\n\n        endOfLine: ->\n          tp = @textPosition()\n          @forwardWhile (n)-> !differentLines tp, n.textPosition()\n\n**forwardLine** moves to the next line, trying to keep the current screen pixel column.  Optionally takes a goalFunc that takes the position's screen pixel column as input and returns -1, 0, or 1 from comparing the input to the an goal column\n\n        forwardLine: (goalFunc)->\n          if !goalFunc then goalFunc = -> -1\n          line = 0\n          tp = @textPosition()\n          @forwardWhile (n)->\n            pos = n.textPosition()\n            if differentLines tp, pos\n              tp = pos\n              line++\n            if line == 1 && goalFunc(pos.left + 2) > -1 then 'found'\n            else line != 2\n\n**backwardWhile** moves backward until the given function is false or 'found',\nreturning the previous position if the function is false or the current\nposition if the function is 'found'\n\n        backwardWhile: (test)->\n          prev = n = @immutable()\n          while n = n.backwardChar()\n            if n.isEmpty() || !(t = test n) then return prev\n            if t == 'found' then return n\n            prev = n\n\n**endOfLine** moves to the end of the current line\n\n        startOfLine: ->\n          tp = @textPosition()\n          @backwardWhile (n)-> !differentLines tp, n.textPosition()\n\n        differentPosition: (c)-> differentPosition @textPosition(), c.textPosition()\n\n        differentLines: (c)-> differentLines @textPosition(), c.textPosition()\n\n**backwardLine** moves to the previous line, trying to keep the current screen pixel column.  Optionally takes a goalFunc that takes the position's screen pixel column as input and returns -1, 0, or 1 from comparing the input to an internal goal column\n\n        backwardLine: (goalFunc)->\n          # optional goalFunc takes the position's screen pixel column as input\n          # It returns -1, 0, or 1, comparing the input to the internal goal column\n          if !goalFunc then goalFunc = -> -1\n          tp = @textPosition()\n          line = 0\n          (@backwardWhile (n)->\n            pos = n.textPosition()\n            if differentLines tp, pos\n              tp = pos\n              line++\n            if line == 1 && goalFunc(n.textPosition().left - 2) in [-1, 0] then 'found'\n            else line != 2).adjustBackward()\n\n        adjustBackward: ->\n          p = @textPosition()\n          @backwardWhile (n)-> !differentPosition p, n.textPosition()\n\n        forwardChar: ->\n          if @pos + 1 <= @node.length then @newPos @node, @pos + 1\n          else\n            n = this\n            while !(n = n.next()).isEmpty()\n              if n.node.length != 0 then break\n            n\n\n        boundedForwardChar: ->\n          n = @save().forwardChar()\n          if n.isEmpty() then n.prev() else n\n\n**backwardChar** move backward by one character.  If spanSpace is true and\nit moves over a space and ends up at the start of a node, move to the end of\nthe previous node instead.\n\n        backwardChar: (spanSpace)->\n          p = this\n          oldNode = @node\n          while !p.isEmpty() && p.pos == 0\n            p = p.prev()\n          if !p.isEmpty()\n            p = p.newPos p.node, (if p.node != oldNode then p.pos else p.pos - 1)\n            if spanSpace && p.pos == 0 && p.type == 'text' && (p.node.data[0] in ' \\n\\r')\n              p.prev()\n            else p\n          else p\n\n        boundedBackwardChar: ->\n          n = @save().backwardChar()\n          if n.isEmpty() then n.next() else n\n\n**show** scroll the position into view.  Optionally takes a rectangle representing a toolbar at the top of the page (sorry, this is a bit limited at the moment)\n\n        show: (topRect)->\n          if p = @textPosition()\n            top = if topRect?.width && topRect.top == 0 then topRect.bottom else 0\n            if p.bottom > window.innerHeight then window.scrollBy 0, p.bottom - window.innerHeight\n            else if p.top < top then window.scrollBy 0, p.top - top\n          this\n\n**immutable** return an immutable version of this cursor\n\n        immutable: -> this\n\n**withMutations** call a function with a mutable version of this cursor\n\n        withMutations: (func)-> func @copy().mutable()\n\n**mutable** return a mutable version of this cursor\n\n        mutable: -> new MutableDOMCursor @node, @pos, @filter\n\n**save** generate a memento which can be used to restore the state (used by mutable cursors)\n\n        save: -> this\n\n**restore** restore the state from a memento (used by mutable cursors)\n\n        restore: (n)-> n.immutable()\n\n**copy** return a copy of this cursor\n\n        copy: -> this\n\n**nodeAfter** low level method that moves to the unfiltered node after the current one\n\n        nodeAfter: (up)->\n          node = @node\n          pos = @pos\n          while node\n            if node.nodeType == node.ELEMENT_NODE && !up && pos < node.childNodes.length\n              return @newPos node.childNodes[pos], 0\n            else if node.nextSibling\n              return @newPos node.nextSibling, 0\n            else if node.parentNode\n              up = true\n              pos = 0\n              for c in node.parentNode.childNodes\n                if c == node then break\n                pos++\n              node = node.parentNode\n            else break\n          @emptyNext()\n\n**emptyNext** returns an empty cursor whose prev is the current node\n\n        emptyNext: ->\n          # return an empty next node where\n          #   prev returns this node\n          #   next returns the same empty node\n          __proto__: emptyDOMCursor\n          filter: @filter\n          prev: (up)=> if up then @prev up else this\n          nodeBefore: (up)=> if up then @nodeBefore up else this\n\n**nodeBefore** low level method that moves to the unfiltered node before the current one\n\n        nodeBefore: (up)->\n          node = @node\n          while node\n            if node.nodeType == node.ELEMENT_NODE && !up && node.childNodes.length\n              newNode = node.childNodes[node.childNodes.length - 1]\n            else if node.previousSibling then newNode = node.previousSibling\n            else\n              up = true\n              node = node.parentNode\n              continue\n            return @newPos newNode, newNode.length\n          @emptyPrev()\n\n**emptyPrev** returns an empty cursor whose next is the current node\n\n        emptyPrev: ->\n          # return an empty prev node where\n          #   next returns this node\n          #   prev returns the same empty node\n          __proto__: emptyDOMCursor\n          filter: @filter\n          next: (up)=> if up then @next up else this\n          nodeAfter: (up)=> if up then @nodeAfter up else this\n\nEmptyDOMCursor Class\n--------------------\n\nAn empty cursor\n\n      class EmptyDOMCursor extends DOMCursor\n        moveCaret: -> this\n        show: -> this\n        nodeAfter: -> this\n        nodeBefore: -> this\n        next: -> this\n        prev: -> this\n\n      #singleton empty node cursor\n      emptyDOMCursor = new EmptyDOMCursor()\n\nMutableDOMCursor Class\n----------------------\n\nA mutable cursor -- cursor movement, filter changes, etc. change the cursor instead of returning a new one.\n\n      class MutableDOMCursor extends DOMCursor\n        setFilter: (@filter)-> this\n        newPos: (@node, @pos)->\n          @savedTextPosition = null\n          @computeType()\n        copy: -> new MutableDOMCursor @node, @pos, @filter\n        mutable: -> this\n        immutable: -> new DOMCursor @node, @pos, @filter\n        save: -> @immutable()\n        restore: (np)->\n          @node = np.node\n          @pos = np.pos\n          @filter = np.filter\n          this\n        emptyPrev: ->\n          @type = 'empty'\n          @next = (up)->\n            @revertEmpty()\n            if up then @next up else this\n          @nodeAfter = (up)->\n            @computeType()\n            if up then @nodeAfter up else this\n          @prev = -> this\n          @nodeBefore = -> this\n          this\n        revertEmpty: ->\n          @computeType()\n          delete @next\n          delete @prev\n          delete @nodeAfter\n          delete @nodeBefore\n          this\n        emptyNext: ->\n          @type = 'empty'\n          @prev = (up)->\n            @revertEmpty()\n            if up then @prev up else this\n          @nodeBefore = (up)->\n            @computeType()\n            if up then @nodeBefore up else this\n          @next = -> this\n          @nodeAfter = -> this\n          this\n\nUtility functions\n-----------------\n\nThese are available as properties on DOMCursor.\n\nThanks to (rangy)[this: https://github.com/timdown/rangy] for the isCollapsed logic\n\n      isCollapsed = (node)->\n        if node\n          type = node.nodeType\n          type == 7 || # PROCESSING_INSTRUCTION\n          type == 8 || # COMMENT\n          (type == node.TEXT_NODE && (node.data == '' || isCollapsed(node.parentNode))) ||\n          /^(script|style)$/i.test(node.nodeName) ||\n          (type == node.ELEMENT_NODE && !node.offsetParent)\n\n      selectRange = (r)->\n        if r\n          debug \"select range\", r, new Error('trace').stack\n          sel = getSelection()\n          if !(sel.rangeCount == 1 && sameRanges sel.getRangeAt(0), r)\n            sel.setBaseAndExtent r.startContainer, r.startOffset, r.endContainer, r.endOffset\n\n      sameRanges = (r1, r2)->\n        r1.compareBoundaryPoints(Range.START_TO_START, r2) == 0 &&\n          r1.compareBoundaryPoints(Range.END_TO_END, r2) == 0\n\n      debug = (args...)-> if DOMCursor.debug then console.log args...\n\n      reject = (filterResult)-> !filterResult || (filterResult in ['quit', 'skip'])\n\nNode location routines\n----------------------\n\n      positioner = document.createElement 'DIV'\n\n      positioner.setAttribute 'style', 'display: inline-block'\n\n      positioner.innerHTML = 'x'\n\n      spareRange = document.createRange()\n\n      emptyRect = width: 0, height: 0\n\n      getTextPosition = (textNode, offset)->\n        if offset < textNode.length\n          spareRange.setStart textNode, offset\n          spareRange.setEnd textNode, offset + 1\n          r = getClientRect spareRange\n          if !r || (r.width == 0 && r.height == 0)\n            spareRange.selectNodeContents textNode.parentNode\n            if spareRange.getClientRects().length == 0\n              r = textNode.parentNode.getBoundingClientRect()\n        else\n          spareRange.setStart textNode, offset\n          spareRange.collapse true\n          r = getClientRect spareRange\n        if !r || (r.width == 0 && r.height == 0)\n          if offset == 0 then textNode.parentNode.insertBefore positioner, textNode\n          else if offset == textNode.length || textNode.splitText offset\n            textNode.parentNode.insertBefore positioner, textNode.nextSibling\n          spareRange.selectNode positioner\n          r = spareRange.getBoundingClientRect()\n          positioner.parentNode.removeChild positioner\n          textNode.parentNode.normalize()\n        r\n\n      chooseUpper = (r1, r2)-> r1.top < r2.top\n\n      chooseLower = (r1, r2)-> r1.top > r2.top\n\n      getClientRect = (r)->\n        rects = r.getClientRects()\n        if rects.length == 1 then rects[0]\n        else if rects.length == 2\n          result = rects[0]\n          #comp = if r.startContainer.data[r.startOffset] == '\\n' then chooseUpper\n          comp = if r.startContainer.data[r.startOffset] == '\\n' && r.startOffset > 0 && r.startContainer.data[r.startOffset] != '\\n'\n            chooseUpper\n          else chooseLower\n          for rect in rects\n            if comp rect, result then result = rect\n          result\n        else emptyRect\n\n      differentPosition = (pos1, pos2)->\n        differentLines(pos2, pos1) ||\n          if pos1.right? && pos2.right?\n            r1 = Math.floor(pos1.right)\n            r2 = Math.floor(pos2.right)\n            l1 = Math.floor(pos1.left)\n            l2 = Math.floor(pos2.left)\n            (r1 != r2 || l1 != l2) && (r2 < l1 || r1 < l2 || ((r1 < r2) == (l1 < l2) && (r1 > r2) == (l1 > l2)))\n          else Math.floor(pos1.left) != Math.floor(pos2.left)\n\n      differentLines = (pos1, pos2)->\n        (pos1.bottom - 4 <= pos2.top) || (pos2.bottom - 4 <= pos1.top)\n\n      DOMCursor.MutableDOMCursor = MutableDOMCursor\n      DOMCursor.emptyDOMCursor = emptyDOMCursor\n      DOMCursor.isCollapsed = isCollapsed\n      DOMCursor.selectRange = selectRange\n      DOMCursor.getTextPosition = getTextPosition\n      DOMCursor.differentPosition = differentPosition\n      DOMCursor.differentLines = differentLines\n      DOMCursor.debug = false\n\n      DOMCursor\n"
  ]
}