// Generated by CoffeeScript 1.9.3
(function() {
  var slice = [].slice;

  define(['./lib/fingertree', './lib/lodash.min', './testing'], function(Fingertree, _, Testing) {
    var ConcurrentReplacements, SequentialReplacements, XrunReplacements, addOp, addOperation, addOperations, assert, assertEq, buildReplacementTest, computeNodeEffect, concurrentReplacements, condenseVersions, diag, isReplace, mergeRepl, newNode, reintegrateRepl, replacementsString, runOps, runReplacements, sequentialReplacements, sortReplacements, stableSort, testData, testData2, testSort1, testSort2, testSort3, tests;
    assert = Testing.assert, assertEq = Testing.assertEq;
    diag = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    };
    ConcurrentReplacements = (function() {
      function ConcurrentReplacements(replacements1) {
        this.replacements = replacements1;
        if (!this.replacements) {
          this.replacements = Fingertree.fromArray([], {
            identity: function() {
              return {
                maxOffset: -1,
                length: 0,
                float: 0
              };
            },
            measure: function(v) {
              return {
                maxOffset: v.start,
                float: v.float,
                length: v.float + v.end
              };
            },
            sum: function(a, b) {
              return {
                maxOffset: Math.max(a.maxOffset, b.maxOffset),
                float: a.float + b.float,
                length: a.length + b.length
              };
            }
          });
        }
      }

      ConcurrentReplacements.prototype.isEmpty = function() {
        return this.replacements.isEmpty();
      };

      ConcurrentReplacements.prototype.toString = function() {
        var ops;
        ops = [];
        this.eachOperation(function(start, end, text) {
          return ops.push("(" + start + ", " + end + ", " + (JSON.stringify(text)) + ")");
        });
        return ops.join(' ');
      };

      ConcurrentReplacements.prototype.dump = function() {
        return console.log(this.toString());
      };

      ConcurrentReplacements.prototype.snapshot = function() {
        return new ConcurrentReplacements(this.replacements);
      };

      ConcurrentReplacements.prototype.floatFor = function(repl) {
        var first, float, j, len, m, n, op, ref, ref1, rest;
        ref = this.replacements.split(function(m) {
          return m.maxOffset >= repl.start;
        }), first = ref[0], rest = ref[1];
        m = first.measure();
        if (!rest.isEmpty() && (n = rest.peekFirst()).start === repl.start) {
          float = m.float;
          ref1 = n.operations;
          for (j = 0, len = ref1.length; j < len; j++) {
            op = ref1[j];
            if (op.start <= repl.start && !isReplace(op)) {
              float += op.text.length - op.end + op.start;
            }
          }
          return float;
        } else {
          return m.float;
        }
      };

      ConcurrentReplacements.prototype.replace = function(repl) {
        var first, next, node, prev, ref, rest, target;
        ref = this.replacements.split(function(m) {
          return m.maxOffset >= repl.start;
        }), first = ref[0], rest = ref[1];
        if (!first.isEmpty() && (prev = first.peekLast()).end >= repl.start) {
          first = first.removeLast();
          node = addOperation(prev, repl);
        } else {
          node = !rest.isEmpty() && (target = rest.peekFirst()).start === repl.start ? (rest = rest.removeFirst(), addOperation(target, repl)) : newNode(repl);
        }
        while (!rest.isEmpty() && node.end >= (next = rest.peekFirst()).start) {
          rest = rest.removeFirst();
          node = addOperations(node, next.operations);
        }
        return this.replacements = first.concat(rest.addFirst(node));
      };

      ConcurrentReplacements.prototype.replacementsAt = function(start) {
        var first, j, len, merged, node, ref, ref1, repl, rest, results;
        ref = this.replacements.split(function(m) {
          return m.length >= start;
        }), first = ref[0], rest = ref[1];
        if (!rest.isEmpty() && (node = rest.peekFirst()).start <= start) {
          merged = new SequentialReplacements();
          results = [];
          ref1 = node.activeOperations;
          for (j = 0, len = ref1.length; j < len; j++) {
            repl = ref1[j];
            merged.replace(repl);
          }
          merged.eachOperation(function(start, end, text, cookies) {
            return results.push({
              start: start,
              end: end,
              text: text,
              cookies: cookies
            });
          });
          return merged;
        }
      };

      ConcurrentReplacements.prototype.eachOperation = function(func) {
        var j, len, node, offset, ref, ref1, repl, results1, t;
        offset = 0;
        t = this.replacements;
        results1 = [];
        while (!t.isEmpty()) {
          node = t.peekLast();
          ref = node.activeOperations;
          for (j = 0, len = ref.length; j < len; j++) {
            repl = ref[j];
            func(repl.start, repl.end, repl.text, (ref1 = repl.cookies) != null ? ref1 : [repl], node);
          }
          results1.push(t = t.removeLast());
        }
        return results1;
      };

      return ConcurrentReplacements;

    })();
    isReplace = function(repl) {
      return repl.end > repl.start && repl.text.length;
    };
    computeNodeEffect = function(node) {
      var del, end, float, insertionText, j, k, len, len1, op, operation, operations, ref, repl;
      insertionText = '';
      repl = null;
      del = null;
      operations = [];
      float = 0;
      end = node.start;
      ref = node.operations;
      for (j = 0, len = ref.length; j < len; j++) {
        op = ref[j];
        if (op.end === op.start) {
          operations.push(op);
          float += op.text.length;
        } else if (!op.text.length) {
          del = op;
        } else {
          repl = op;
        }
      }
      if (del) {
        operations.unshift(del);
      } else if (repl) {
        operations.push(repl);
      }
      if (operation = del || repl) {
        float += operation.text.length - operation.end + operation.start;
      }
      for (k = 0, len1 = operations.length; k < len1; k++) {
        op = operations[k];
        end = Math.max(end, op.end);
      }
      node.float = float;
      node.end = end;
      node.activeOperations = operations;
      return node;
    };
    addOperation = function(node, record) {
      return addOperations(node, [record]);
    };
    addOperations = function(node, records) {
      return computeNodeEffect({
        start: node.start,
        operations: node.operations.concat(records)
      });
    };
    newNode = function(repl) {
      return computeNodeEffect({
        start: repl.start,
        operations: [repl]
      });
    };
    SequentialReplacements = (function() {
      function SequentialReplacements(reps) {
        this.replacements = reps != null ? reps : Fingertree.fromArray([], {
          identity: function() {
            return {
              initial: 0,
              final: 0
            };
          },
          measure: function(n) {
            return {
              initial: n.leading + n.length,
              final: n.leading + n.text.length
            };
          },
          sum: function(a, b) {
            return {
              initial: a.initial + b.initial,
              final: a.final + b.final
            };
          }
        });
      }

      SequentialReplacements.prototype.snapshot = function() {
        return new SequentialReplacements(this.replacements);
      };

      SequentialReplacements.prototype.isEmpty = function() {
        return this.replacements.isEmpty();
      };

      SequentialReplacements.prototype.initialBounds = function() {
        if (this.isEmpty()) {
          return {
            start: 0,
            end: 0
          };
        } else {
          return {
            start: this.replacements.peekFirst().leading,
            end: this.replacements.measure().initial
          };
        }
      };

      SequentialReplacements.prototype.finalBounds = function() {
        if (this.isEmpty()) {
          return {
            start: 0,
            end: 0
          };
        } else {
          return {
            start: this.replacements.peekFirst().leading,
            end: this.replacements.measure().final
          };
        }
      };

      SequentialReplacements.prototype.replace = function(repl) {
        var end, first, l, next, node, old, ref, ref1, rest, start, text;
        start = repl.start, end = repl.end, text = repl.text;
        ref = this.replacements.split(function(m) {
          return m.final >= start;
        }), first = ref[0], rest = ref[1];
        l = first.measure().final;
        if (!rest.isEmpty() && l + (old = rest.peekFirst()).leading <= end) {
          node = mergeRepl(l, old, repl);
          rest = rest.removeFirst();
        } else {
          node = {
            leading: repl.start - l,
            length: repl.end - repl.start,
            text: text,
            float: 0,
            cookies: (ref1 = repl.cookies) != null ? ref1 : [repl]
          };
          if (!rest.isEmpty()) {
            next = rest.peekFirst();
            rest = rest.removeFirst().addFirst(_.merge({}, next, {
              leading: next.leading + l - repl.end
            }));
          }
        }
        this.replacements = first.concat(rest.addFirst(node));
        return old != null ? old.repl : void 0;
      };

      SequentialReplacements.prototype.dump = function() {
        return console.log(this.toString());
      };

      SequentialReplacements.prototype.toString = function() {
        var strs;
        strs = [];
        this.eachOperation(function(start, end, text) {
          return strs.push(start + ", " + end + ", " + (JSON.stringify(text)));
        });
        return strs.join('\n');
      };

      SequentialReplacements.prototype.toConcurrent = function(conc) {
        conc = conc != null ? conc : new ConcurrentReplacements();
        this.eachOperation(function(start, end, text, cookies) {
          return conc.replace({
            start: start,
            end: end,
            text: text,
            cookies: cookies
          });
        });
        return conc;
      };

      SequentialReplacements.prototype.eachOperation = function(func) {
        var n, start, t;
        t = this.replacements;
        while (!t.isEmpty()) {
          n = t.peekLast();
          t = t.removeLast();
          start = t.measure().initial + n.leading;
          func(start, start + n.length, n.text, n.cookies, n);
        }
        return null;
      };

      SequentialReplacements.prototype.merge = function(replacements) {
        var newReps;
        newReps = this.snapshot();
        replacements.eachOperation(function(start, end, text, cookies, node) {
          return newReps.replace({
            start: start,
            end: end,
            text: text,
            cookies: cookies
          });
        });
        return newReps;
      };

      SequentialReplacements.prototype.addFloat = function(start, float) {
        var first, l, n, ref, rest;
        ref = this.replacements.split(function(m) {
          return m.final >= start;
        }), first = ref[0], rest = ref[1];
        l = first.measure().final;
        if (!rest.isEmpty()) {
          n = rest.peekFirst();
          rest = rest.removeFirst().addFirst(_.merge({}, n, {
            leading: n.leading + float
          }));
          return this.replacements = first.concat(rest);
        }
      };

      return SequentialReplacements;

    })();
    mergeRepl = function(offset, node, repl) {
      var end, newStart, rEnd, rStart, ref, start;
      start = offset + node.leading;
      end = start + node.length;
      rStart = Math.max(0, repl.start - start);
      rEnd = repl.end - start;
      newStart = Math.min(start, repl.start);
      return {
        leading: newStart - offset,
        length: end + Math.max(0, repl.end - start - node.text.length) - Math.min(repl.start, start),
        text: node.text.substring(0, rStart) + repl.text + node.text.substring(rEnd),
        cookies: node.cookies.concat((ref = repl.cookies) != null ? ref : [repl])
      };
    };
    XrunReplacements = function(reps, func) {
      var connectionOps, curId, curVersion, j, len, prepConnection, prepVersion, repl, versionOps;
      reps = reps.slice();
      curVersion = -1;
      curId = null;
      reps = sortReplacements(reps);
      connectionOps = new SequentialReplacements();
      versionOps = new ConcurrentReplacements();
      prepConnection = function(id) {
        if (!connectionOps.isEmpty()) {
          connectionOps.eachOperation(function(start, end, text, cookies, node) {
            return versionOps.replace({
              start: start,
              end: end,
              text: text,
              cookies: cookies
            });
          });
          connectionOps = new SequentialReplacements();
        }
        return curId = id;
      };
      prepVersion = function(v) {
        if (!versionOps.isEmpty()) {
          versionOps.eachOperation(func);
          versionOps = new ConcurrentReplacements();
        }
        return curVersion = v;
      };
      for (j = 0, len = reps.length; j < len; j++) {
        repl = reps[j];
        if (repl.version !== curVersion || repl.connectionId !== curId) {
          prepConnection(repl.connectionId);
        }
        if (repl.version > curVersion) {
          prepVersion(repl.version);
        }
        connectionOps.replace(repl);
      }
      if (!connectionOps.isEmpty()) {
        prepConnection();
      }
      if (!versionOps.isEmpty()) {
        return prepVersion();
      }
    };
    XrunReplacements = function(reps, func) {
      var curVersion, j, k, len, len1, ref, repl, results, results1, rinfo, vName, versionInfo, vinfo;
      reps = sortReplacements(reps);
      versionInfo = {
        versionList: [],
        allOps: [],
        versions: {}
      };
      vinfo = null;
      curVersion = -1;
      for (j = 0, len = reps.length; j < len; j++) {
        repl = reps[j];
        if (repl.version < curVersion) {
          reintegrateRepl(repl, versionInfo);
        } else {
          if (curVersion !== repl.version) {
            curVersion = repl.version;
            versionInfo.versionList.push(String(repl.version));
            if (vinfo) {
              condenseVersions(vinfo);
            }
            if (!(vinfo = versionInfo.versions[String(repl.version)])) {
              vinfo = versionInfo.versions[String(repl.version)] = {
                repls: null,
                cons: {}
              };
            }
          }
          if (!(rinfo = vinfo.cons[repl.connectionId])) {
            rinfo = vinfo.cons[repl.connectionId] = new SequentialReplacements();
          }
          rinfo.replace(repl);
        }
        versionInfo.allOps.push(repl);
      }
      if (vinfo) {
        results = new SequentialReplacements();
        ref = _.sortBy(_.uniq(_.map(versionInfo.versionList, function(i) {
          return Number(i);
        })));
        results1 = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          vName = ref[k];
          vinfo = versionInfo.versions[String(vName)];
          results1.push(condenseVersions(vinfo).eachOperation(func));
        }
        return results1;
      }
    };
    runReplacements = function(reps, func) {
      var adjRepl, candidates, conRepl, curVersion, first, float, ft, i, j, k, len, len1, newRepl, oldRepl, ref, ref1, ref2, ref3, ref4, remainder, repl, rest, results, rinfo, vName, versionInfo, vinfo;
      diag("START REPLACING -----------");
      reps = (function() {
        var j, len, ref, results1;
        ref = _.sortByAll(reps, ['version', 'connectionId']);
        results1 = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          repl = ref[i];
          newRepl = _.clone(repl);
          newRepl.index = i;
          if (!newRepl.cookies) {
            newRepl.cookies = [repl];
          }
          results1.push(newRepl);
        }
        return results1;
      })();
      ft = Fingertree.fromArray(_.sortByAll(reps, ['version', 'knownVersion']), {
        identity: function() {
          return {
            version: 0,
            knownVersion: 0
          };
        },
        measure: function(n) {
          return n;
        },
        sum: function(a, b) {
          return {
            version: Math.max(a.version, b.version),
            knownVersion: Math.max(a.knownVersion, b.knownVersion)
          };
        }
      });
      versionInfo = {
        versionList: [],
        allOps: [],
        versions: {}
      };
      vinfo = rinfo = curVersion = null;
      for (j = 0, len = reps.length; j < len; j++) {
        repl = reps[j];
        if (repl.messageCount != null) {
          ref = ft.split(function(m) {
            return m.knownVersion >= repl.messageCount;
          }), candidates = ref[0], remainder = ref[1];
          ref1 = candidates.split(function(m) {
            return m.version > repl.version;
          }), first = ref1[0], rest = ref1[1];
        }
        if ((repl.messageCount != null) && !rest.isEmpty()) {
          if (!(vinfo = versionInfo.versions[String(repl.version)])) {
            vinfo = versionInfo.versions[String(repl.version)] = {
              repls: null,
              cons: {}
            };
            versionInfo.versionList.push(String(repl.version));
          }
          oldRepl = (ref2 = (ref3 = condenseVersions(vinfo).replacementsAt(repl.start)) != null ? ref3.replacements.measure() : void 0) != null ? ref2 : {
            initial: 0,
            final: 0
          };
          if (!(conRepl = vinfo.cons[repl.connectionId])) {
            conRepl = vinfo.cons[repl.connectionId] = new SequentialReplacements();
          }
          conRepl.replace(repl);
          vinfo.repls = null;
          newRepl = condenseVersions(vinfo).replacementsAt(repl.start).replacements.measure();
          if (float = newRepl.final - newRepl.initial - (oldRepl.final - oldRepl.initial)) {
            while (!rest.isEmpty()) {
              adjRepl = rest.peekFirst();
              rest = rest.removeFirst();
              if (adjRepl.connectionId !== repl.connectionId) {
                adjRepl.start += float;
                adjRepl.end += float;
                diag("  ADJUST REPL v " + adjRepl.version + ", known: " + adjRepl.knownVersion);
              }
            }
          }
        } else {
          if (curVersion !== repl.version) {
            curVersion = repl.version;
            versionInfo.versionList.push(String(repl.version));
            if (!(vinfo = versionInfo.versions[String(repl.version)])) {
              vinfo = versionInfo.versions[String(repl.version)] = {
                repls: null,
                cons: {}
              };
            }
          }
          if (!(rinfo = vinfo.cons[repl.connectionId])) {
            rinfo = vinfo.cons[repl.connectionId] = new SequentialReplacements();
          }
          rinfo.replace(repl);
          vinfo.repls = null;
          diag("  ADD REPL v " + repl.version + ", known: " + repl.knownVersion + ", " + (repl.messageCount ? 'count: ' + repl.messageCount : '[pending]') + ", " + repl.start + ", " + repl.end + ", '" + repl.text + "'");
        }
        versionInfo.allOps.push(repl);
      }
      if (vinfo) {
        results = new SequentialReplacements();
        ref4 = _.sortBy(_.uniq(_.map(versionInfo.versionList, function(i) {
          return Number(i);
        })));
        for (k = 0, len1 = ref4.length; k < len1; k++) {
          vName = ref4[k];
          vinfo = versionInfo.versions[String(vName)];
          diag("  CONDENSING VERSIONS " + vName + ":\n" + (condenseVersions(vinfo).toString()));
          condenseVersions(vinfo).eachOperation(func);
        }
      }
      return diag("END REPLACING -----------\n\n");
    };
    addOp = function(ops, newOp, func) {
      var delta, insertIndex, j, len, op, ref, ret, transOp, transformIndex;
      insertIndex = _.sortedLastIndex(ops, [newOp.version, newOp.knownVersion], function(op) {
        return [op.version, op.knownVersion];
      });
      transformIndex = _.sortedLastIndex(ops, [newOp.version, newOp.messageCount], function(op) {
        return [op.version, op.knownVersion];
      });
      ret = ops.slice(0, insertIndex);
      ret.push(newOp);
      if ((delta = newOp.text.length - newOp.start + newOp.end) === 0) {
        ret = ret.concat(ops.slice.insertIndex);
      } else {
        ref = ops.slice(insertIndex);
        for (j = 0, len = ref.length; j < len; j++) {
          op = ref[j];
          if (op.knownVersion < newOp.messageCount && newOp.start < op.start) {
            transOp = _.clone(op);
            if (!op.cookies) {
              transOp.cookies = [op];
            }
            transOp.start += delta;
            transOp.end += delta;
            op = transOp;
          }
          ret.push(op);
        }
      }
      return ret;
    };
    runOps = function(reps, func) {
      var curVersion, j, k, len, len1, ref, repl, results, rinfo, vName, vinfo;
      diag("START REPLACING -----------");
      for (j = 0, len = reps.length; j < len; j++) {
        repl = reps[j];
        if (curVersion !== repl.version) {
          curVersion = repl.version;
          versionInfo.versionList.push(String(repl.version));
          if (!(vinfo = versionInfo.versions[String(repl.version)])) {
            vinfo = versionInfo.versions[String(repl.version)] = {
              repls: null,
              cons: {}
            };
          }
        }
        if (!(rinfo = vinfo.cons[repl.connectionId])) {
          rinfo = vinfo.cons[repl.connectionId] = new SequentialReplacements();
        }
        rinfo.replace(repl);
        vinfo.repls = null;
        diag("  ADD REPL v " + repl.version + ", known: " + repl.knownVersion + ", " + (repl.messageCount ? 'count: ' + repl.messageCount : '[pending]') + ", " + repl.start + ", " + repl.end + ", '" + repl.text + "'");
        versionInfo.allOps.push(repl);
      }
      if (vinfo) {
        results = new SequentialReplacements();
        ref = _.sortBy(_.uniq(_.map(versionInfo.versionList, function(i) {
          return Number(i);
        })));
        for (k = 0, len1 = ref.length; k < len1; k++) {
          vName = ref[k];
          vinfo = versionInfo.versions[String(vName)];
          diag("  CONDENSING VERSIONS " + vName + ":\n" + (condenseVersions(vinfo).toString()));
          condenseVersions(vinfo).eachOperation(func);
        }
      }
      return diag("END REPLACING -----------\n\n");
    };
    condenseVersions = function(vinfo) {
      var con, j, len, ref, results;
      if (!vinfo.repls) {
        results = vinfo.repls = new ConcurrentReplacements();
        ref = _.keys(vinfo.cons).sort();
        for (j = 0, len = ref.length; j < len; j++) {
          con = ref[j];
          vinfo.cons[con].eachOperation(function(start, end, text, cookies) {
            return results.replace({
              start: start,
              end: end,
              text: text,
              cookies: cookies
            });
          });
        }
      }
      return vinfo.repls;
    };
    reintegrateRepl = function(repl, versionInfo) {
      var affectedVersions, con, conRepl, err, float, j, k, len, newRepl, oldRepl, op, ref, ref1, ref2, repls, results1, v, vinfo;
      if (!(vinfo = versionInfo.versions[String(repl.version)])) {
        vinfo = versionInfo.versions[String(repl.version)] = {
          repls: null,
          cons: {}
        };
        versionInfo.versionList.push(String(repl.version));
      }
      oldRepl = (ref = (ref1 = condenseVersions(vinfo).replacementsAt(repl.start)) != null ? ref1.replacements.measure() : void 0) != null ? ref : {
        initial: 0,
        final: 0
      };
      if (!(conRepl = vinfo.cons[repl.connectionId])) {
        conRepl = vinfo.cons[repl.connectionId] = new SequentialReplacements();
      }
      conRepl.replace(repl);
      vinfo.repls = null;
      try {
        if (true || oldRepl) {
          newRepl = condenseVersions(vinfo).replacementsAt(repl.start).replacements.measure();
          if (float = newRepl.final - newRepl.initial - (oldRepl.final - oldRepl.initial)) {
            diag("REINTEGRATION FLOAT: " + float);
            affectedVersions = [];
            ref2 = versionInfo.allOps;
            for (j = ref2.length - 1; j >= 0; j += -1) {
              op = ref2[j];
              if (op.version > repl.version) {
                affectedVersions.push(Number(op.version));
              } else {
                break;
              }
            }
            affectedVersions = _.sortBy(_.uniq(affectedVersions));
            results1 = [];
            for (k = 0, len = affectedVersions.length; k < len; k++) {
              v = affectedVersions[k];
              vinfo = versionInfo.versions[String(v)];
              vinfo.repls = null;
              results1.push((function() {
                var ref3, results2;
                ref3 = vinfo.cons;
                results2 = [];
                for (con in ref3) {
                  repls = ref3[con];
                  results2.push(repls.addFloat(repl.start, float));
                }
                return results2;
              })());
            }
            return results1;
          }
        }
      } catch (_error) {
        err = _error;
        console.log(err.stack);
        console.log("versions: " + (vinfo.repls.toString()));
        return console.log("repl: " + repl.start + ", " + repl.end + ", " + repl.text);
      }
    };
    sequentialReplacements = function(reps) {
      var j, len, repl, s;
      s = new SequentialReplacements();
      for (j = 0, len = reps.length; j < len; j++) {
        repl = reps[j];
        s.replace(repl);
      }
      return s;
    };
    concurrentReplacements = function(reps) {
      var s;
      s = new SequentialReplacements();
      runReplacements(reps, function(start, end, text, repls) {
        return s.replace({
          start: start,
          end: end,
          text: text
        }, repls);
      });
      return s;
    };
    stableSort = function(array, func) {
      var el, i, j, len;
      for (i = j = 0, len = array.length; j < len; i = ++j) {
        el = array[i];
        el.i = i;
      }
      return array.sort(function(a, b) {
        var r;
        r = func(a, b);
        if (r === 0) {
          return a.i - b.i;
        } else {
          return r;
        }
      });
    };
    sortReplacements = function(reps) {
      return stableSort(reps, function(a, b) {
        if ((a.messageCount != null) && (b.messageCount != null)) {
          return a.messageCount - b.messageCount;
        } else if ((a.mine && b.mine) || !((a.messageCount != null) || (b.messageCount != null))) {
          return a.knownVersion - b.knownVersion;
        } else if (a.messageCount) {
          return a.messageCount - b.knownVersion;
        } else {
          return a.knownVersion - b.messageCount;
        }
      });
    };
    replacementsString = function(reps) {
      var strs;
      strs = [];
      runReplacements(reps, function(start, end, text) {
        return strs.push(start + ", " + end + ", " + (JSON.stringify(text)));
      });
      return strs.join('\n');
    };
    buildReplacementTest = function() {
      var connectionId, reps, version;
      reps = [];
      version = 0;
      connectionId = 'connection-1';
      return {
        replace: function(start, end, text) {
          reps.push({
            start: start,
            end: end,
            text: text,
            version: version,
            connectionId: connectionId,
            knownVersion: version
          });
          return this;
        },
        assertEq: function(expected) {
          var given;
          if ((given = replacementsString(reps)) !== expected) {
            throw new Error("Bad replacement, expected <" + expected + "> but got <" + given + ">");
          }
          return this;
        },
        version: function(v) {
          version = v;
          return this;
        },
        incVersion: function() {
          version++;
          return this;
        },
        setConnection: function(con) {
          connectionId = con;
          return this;
        },
        dump: function() {
          console.log(replacementsString(reps));
          return this;
        }
      };
    };
    tests = function() {
      buildReplacementTest().replace(4, 4, 'X').replace(0, 0, 'Y').assertEq("4, 4, \"X\"\n0, 0, \"Y\"");
      buildReplacementTest().replace(100, 109, 'duh').replace(101, 102, 'HELLO').assertEq("100, 109, \"dHELLOh\"").replace(100, 109, 'poop').assertEq("100, 111, \"poop\"").replace(95, 100, '').assertEq("95, 111, \"poop\"").replace(30, 35, 'smeg').assertEq("95, 111, \"poop\"\n30, 35, \"smeg\"").replace(25, 33, 'blorfl').assertEq("95, 111, \"poop\"\n25, 35, \"blorflg\"");
      console.log("duh");
      buildReplacementTest().version(3).replace(13, 13, ';').replace(14, 14, 'l').replace(15, 15, 'k').version(7).replace(16, 16, 'j').assertEq("13, 13, \";lk\"\n16, 16, \"j\"").assertEq(replacementsString([
        {
          "connectionId": "peer-0",
          "mine": true,
          "pendingCount": 5,
          "end": 13,
          "knownVersion": 3,
          "start": 13,
          "text": ";",
          "type": "replace",
          "version": 3,
          "messageCount": 6
        }, {
          "connectionId": "peer-0",
          "mine": true,
          "pendingCount": 6,
          "end": 14,
          "knownVersion": 3,
          "start": 14,
          "text": "l",
          "type": "replace",
          "version": 3,
          "messageCount": 7
        }, {
          "connectionId": "peer-0",
          "mine": true,
          "pendingCount": 7,
          "end": 15,
          "knownVersion": 5,
          "start": 15,
          "text": "k",
          "type": "replace",
          "version": 3,
          "messageCount": 9
        }, {
          "connectionId": "peer-0",
          "mine": true,
          "pendingCount": 8,
          "end": 16,
          "knownVersion": 7,
          "start": 16,
          "text": "j",
          "type": "replace",
          "version": 7
        }
      ])).dump();
      console.log('poop');
      return buildReplacementTest().version(13).replace(55, 55, "d").replace(44, 44, "l").replace(46, 46, "k").replace(45, 45, "j").version(17).replace(65, 65, "j").replace(64, 64, "l").replace(67, 67, "d").replace(66, 66, "a").replace(62, 62, ";").replace(63, 63, "k").replace(61, 61, "f").version(13).replace(51, 51, "s").replace(50, 50, "a").replace(47, 47, " ").dump();
    };
    testData = [
      {
        start: 55,
        end: 55,
        text: "d",
        version: 13,
        connectionId: "peer-0",
        messageCount: 23
      }, {
        start: 44,
        end: 44,
        text: "l",
        version: 13,
        connectionId: "peer-0",
        messageCount: 15
      }, {
        start: 46,
        end: 46,
        text: "k",
        version: 13,
        connectionId: "peer-0",
        messageCount: 17
      }, {
        start: 45,
        end: 45,
        text: "j",
        version: 13,
        connectionId: "peer-0",
        messageCount: 16
      }, {
        start: 65,
        end: 65,
        text: "j",
        version: 17,
        connectionId: "peer-0",
        messageCount: 29
      }, {
        start: 64,
        end: 64,
        text: "l",
        version: 17,
        connectionId: "peer-0",
        messageCount: 28
      }, {
        start: 67,
        end: 67,
        text: "d",
        version: 17,
        connectionId: "peer-0",
        messageCount: 32
      }, {
        start: 66,
        end: 66,
        text: "a",
        version: 17,
        connectionId: "peer-0",
        messageCount: 31
      }, {
        start: 62,
        end: 62,
        text: ";",
        version: 17,
        connectionId: "peer-0",
        messageCount: 26
      }, {
        start: 63,
        end: 63,
        text: "k",
        version: 17,
        connectionId: "peer-0",
        messageCount: 27
      }, {
        start: 61,
        end: 61,
        text: "f",
        version: 17,
        connectionId: "peer-0",
        messageCount: 25
      }, {
        start: 51,
        end: 51,
        text: "s",
        version: 13,
        connectionId: "peer-0",
        messageCount: 21
      }, {
        start: 50,
        end: 50,
        text: "a",
        version: 13,
        connectionId: "peer-0",
        messageCount: 20
      }, {
        start: 47,
        end: 47,
        text: " ",
        version: 13,
        connectionId: "peer-0",
        messageCount: 18
      }
    ];
    testData2 = [
      {
        start: 33,
        end: 33,
        text: "d",
        type: "replace",
        version: 0,
        connectionId: "peer-0",
        messageCount: 3
      }, {
        start: 34,
        end: 34,
        text: "f",
        type: "replace",
        version: 0,
        connectionId: "peer-0",
        messageCount: 4
      }, {
        start: 37,
        end: 37,
        text: ";",
        type: "replace",
        version: 0,
        connectionId: "peer-0",
        messageCount: 6
      }, {
        start: 38,
        end: 38,
        text: "l",
        type: "replace",
        version: 0,
        connectionId: "peer-0",
        messageCount: 7
      }, {
        start: 39,
        end: 39,
        text: "k",
        type: "replace",
        version: 0,
        connectionId: "peer-0",
        messageCount: 8
      }, {
        start: 43,
        end: 43,
        text: "j",
        type: "replace",
        version: 3,
        connectionId: "peer-0"
      }, {
        start: 78,
        end: 78,
        text: " ",
        type: "replace",
        version: 3,
        connectionId: "peer-0"
      }, {
        start: 79,
        end: 79,
        text: "a",
        type: "replace",
        version: 3,
        connectionId: "peer-0"
      }, {
        start: 114,
        end: 114,
        text: "s",
        type: "replace",
        version: 3,
        connectionId: "peer-0"
      }, {
        start: 149,
        end: 149,
        text: "d",
        type: "replace",
        version: 7,
        connectionId: "peer-0"
      }, {
        start: 150,
        end: 150,
        text: ";",
        type: "replace",
        version: 7,
        connectionId: "peer-0"
      }, {
        start: 151,
        end: 151,
        text: "l",
        type: "replace",
        version: 7,
        connectionId: "peer-0"
      }, {
        start: 152,
        end: 152,
        text: "f",
        type: "replace",
        version: 7,
        connectionId: "peer-0"
      }, {
        start: 153,
        end: 153,
        text: "k",
        type: "replace",
        version: 7,
        connectionId: "peer-0"
      }, {
        start: 154,
        end: 154,
        text: "j",
        type: "replace",
        version: 7,
        connectionId: "peer-0"
      }
    ];
    testSort1 = function() {
      var reps, sorted;
      reps = [
        {
          "mine": true,
          "pendingCount": 1,
          "start": 168,
          "end": 169,
          "text": "4",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 0,
          "messageCount": 2
        }, {
          "mine": true,
          "pendingCount": 2,
          "start": 168,
          "end": 169,
          "text": "3",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 0,
          "messageCount": 3
        }, {
          "mine": true,
          "pendingCount": 3,
          "start": 167,
          "end": 169,
          "text": "37",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 0,
          "messageCount": 4
        }, {
          "mine": true,
          "pendingCount": 4,
          "start": 168,
          "end": 169,
          "text": "0",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 0,
          "messageCount": 5
        }, {
          "start": 30,
          "end": 30,
          "text": "a",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-1",
          "knownVersion": 0,
          "messageCount": 6,
          "mine": false
        }, {
          "mine": true,
          "pendingCount": 5,
          "start": 167,
          "end": 169,
          "text": "24",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 0,
          "messageCount": 7
        }, {
          "mine": true,
          "pendingCount": 6,
          "start": 168,
          "end": 169,
          "text": "3",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 0,
          "messageCount": 8
        }, {
          "mine": true,
          "pendingCount": 7,
          "start": 168,
          "end": 169,
          "text": "2",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 2,
          "messageCount": 9
        }, {
          "mine": true,
          "pendingCount": 8,
          "start": 168,
          "end": 169,
          "text": "0",
          "type": "replace",
          "version": 0,
          "connectionId": "peer-0",
          "knownVersion": 3,
          "messageCount": 10
        }, {
          "start": 31,
          "end": 31,
          "text": "s",
          "type": "replace",
          "version": 3,
          "connectionId": "peer-1",
          "knownVersion": 3,
          "messageCount": 12,
          "mine": false
        }, {
          "mine": true,
          "pendingCount": 9,
          "start": 168,
          "end": 170,
          "text": "11",
          "type": "replace",
          "version": 6,
          "connectionId": "peer-0",
          "knownVersion": 6
        }, {
          "mine": true,
          "pendingCount": 10,
          "start": 168,
          "end": 170,
          "text": "9",
          "type": "replace",
          "version": 7,
          "connectionId": "peer-0",
          "knownVersion": 7
        }, {
          "mine": true,
          "pendingCount": 11,
          "start": 168,
          "end": 169,
          "text": "8",
          "type": "replace",
          "version": 7,
          "connectionId": "peer-0",
          "knownVersion": 8
        }, {
          "mine": true,
          "pendingCount": 12,
          "start": 168,
          "end": 169,
          "text": "-1",
          "type": "replace",
          "version": 7,
          "connectionId": "peer-0",
          "knownVersion": 8
        }, {
          "mine": true,
          "pendingCount": 13,
          "start": 169,
          "end": 170,
          "text": "2",
          "type": "replace",
          "version": 7,
          "connectionId": "peer-0",
          "knownVersion": 9
        }, {
          "mine": true,
          "pendingCount": 14,
          "start": 169,
          "end": 170,
          "text": "5",
          "type": "replace",
          "version": 10,
          "connectionId": "peer-0",
          "knownVersion": 10
        }, {
          "mine": true,
          "pendingCount": 15,
          "start": 169,
          "end": 170,
          "text": "10",
          "type": "replace",
          "version": 10,
          "connectionId": "peer-0",
          "knownVersion": 10
        }
      ];
      sorted = sortReplacements(reps);
      return require(['lib/js-yaml'], function(yaml) {
        console.log(yaml.dump(reps, {
          flowLevel: 1
        }));
        return console.log(yaml.dump(sorted, {
          flowLevel: 1
        }));
      });
    };
    testSort2 = function() {
      var reps;
      return reps = [
        {
          start: 168,
          end: 169,
          text: "4",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 2
        }, {
          start: 168,
          end: 169,
          text: "3",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 3
        }, {
          start: 167,
          end: 169,
          text: "37",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 4
        }, {
          start: 168,
          end: 169,
          text: "0",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 5
        }, {
          start: 30,
          end: 30,
          text: "a",
          type: "replace",
          version: 0,
          connectionId: "peer-1",
          knownVersion: 0,
          messageCount: 6
        }, {
          start: 167,
          end: 169,
          text: "24",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 7
        }, {
          start: 168,
          end: 169,
          text: "3",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 8
        }, {
          start: 168,
          end: 169,
          text: "2",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 2,
          messageCount: 9
        }, {
          start: 168,
          end: 169,
          text: "0",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 3,
          messageCount: 10
        }, {
          start: 168,
          end: 170,
          text: "11",
          type: "replace",
          version: 6,
          connectionId: "peer-0",
          knownVersion: 6,
          messageCount: 13
        }, {
          start: 168,
          end: 170,
          text: "9",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 7,
          messageCount: 14
        }, {
          start: 168,
          end: 169,
          text: "8",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 8,
          messageCount: 15
        }, {
          start: 168,
          end: 169,
          text: "-1",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 8,
          messageCount: 16
        }, {
          start: 169,
          end: 170,
          text: "2",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 9,
          messageCount: 19
        }, {
          start: 169,
          end: 170,
          text: "5",
          type: "replace",
          version: 10,
          connectionId: "peer-0",
          knownVersion: 10,
          messageCount: 20
        }, {
          start: 169,
          end: 170,
          text: "10",
          type: "replace",
          version: 10,
          connectionId: "peer-0",
          knownVersion: 10
        }, {
          start: 31,
          end: 31,
          text: "s",
          type: "replace",
          version: 3,
          connectionId: "peer-1",
          knownVersion: 3,
          messageCount: 12
        }, {
          start: 32,
          end: 32,
          text: "f",
          type: "replace",
          version: 8,
          connectionId: "peer-1",
          knownVersion: 8,
          messageCount: 18
        }, {
          start: 33,
          end: 33,
          text: "a",
          type: "replace",
          version: 9,
          connectionId: "peer-1",
          knownVersion: 9,
          messageCount: 22
        }
      ];
    };
    testSort3 = function() {
      return [
        {
          start: 168,
          end: 169,
          text: "4",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          messageCount: 2,
          i: 0
        }, {
          start: 168,
          end: 169,
          text: "3",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          i: 1,
          messageCount: 3
        }, {
          start: 167,
          end: 169,
          text: "37",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          i: 2,
          messageCount: 4
        }, {
          start: 168,
          end: 169,
          text: "0",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          i: 3,
          messageCount: 5
        }, {
          start: 30,
          end: 30,
          text: "a",
          type: "replace",
          version: 0,
          connectionId: "peer-1",
          knownVersion: 0,
          messageCount: 6,
          i: 4
        }, {
          start: 167,
          end: 169,
          text: "24",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          i: 5,
          messageCount: 7
        }, {
          start: 168,
          end: 169,
          text: "3",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 0,
          i: 6,
          messageCount: 8
        }, {
          start: 168,
          end: 169,
          text: "2",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 2,
          i: 7,
          messageCount: 9
        }, {
          start: 168,
          end: 169,
          text: "0",
          type: "replace",
          version: 0,
          connectionId: "peer-0",
          knownVersion: 3,
          i: 8,
          messageCount: 10
        }, {
          start: 168,
          end: 170,
          text: "11",
          type: "replace",
          version: 6,
          connectionId: "peer-0",
          knownVersion: 6,
          i: 10,
          messageCount: 13
        }, {
          start: 168,
          end: 170,
          text: "9",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 7,
          i: 11,
          messageCount: 14
        }, {
          start: 168,
          end: 169,
          text: "8",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 8,
          i: 12,
          messageCount: 15
        }, {
          start: 168,
          end: 169,
          text: "-1",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 8,
          i: 13,
          messageCount: 16
        }, {
          start: 169,
          end: 170,
          text: "2",
          type: "replace",
          version: 7,
          connectionId: "peer-0",
          knownVersion: 9,
          i: 15,
          messageCount: 19
        }, {
          start: 169,
          end: 170,
          text: "5",
          type: "replace",
          version: 10,
          connectionId: "peer-0",
          knownVersion: 10,
          i: 16,
          messageCount: 20
        }, {
          start: 169,
          end: 170,
          text: "10",
          type: "replace",
          version: 10,
          connectionId: "peer-0",
          knownVersion: 10,
          i: 18
        }, {
          start: 31,
          end: 31,
          text: "s",
          type: "replace",
          version: 3,
          connectionId: "peer-1",
          knownVersion: 3,
          messageCount: 12,
          i: 9
        }, {
          start: 32,
          end: 32,
          text: "f",
          type: "replace",
          version: 8,
          connectionId: "peer-1",
          knownVersion: 8,
          messageCount: 18,
          i: 14
        }, {
          start: 33,
          end: 33,
          text: "a",
          type: "replace",
          version: 9,
          connectionId: "peer-1",
          knownVersion: 9,
          messageCount: 22,
          i: 17
        }
      ];
    };
    window.replacementsString = replacementsString;
    return {
      ConcurrentReplacements: ConcurrentReplacements,
      SequentialReplacements: SequentialReplacements,
      runReplacements: runReplacements,
      replacementsString: replacementsString,
      sortReplacements: sortReplacements,
      sequentialReplacements: sequentialReplacements,
      concurrentReplacements: concurrentReplacements,
      tests: tests,
      testData2: testData2,
      addOp: addOp,
      runOps: runOps
    };
  });

}).call(this);

//# sourceMappingURL=ot.js.map
