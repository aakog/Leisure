// Generated by CoffeeScript 1.9.3
(function() {
  define([], function() {
    var addSearchDataFilter, indexQuery, normalize, searchToken, tokenize, trigrams;
    searchToken = /[^'"]+|'[^']*'|"[^"]*"/g;
    normalize = function(str) {
      return "  " + (str.toLowerCase().replace(/([^a-z0-9]|\n)+/g, '  ').trim()) + "  ";
    };
    trigrams = function(str, tri) {
      var i, j, ref;
      if (tri == null) {
        tri = {};
      }
      str = normalize(str);
      if (str.length >= 3) {
        for (i = j = 0, ref = str.length - 2; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          tri[str.substring(i, i + 3)] = true;
        }
      }
      return tri;
    };
    tokenize = function(query) {
      var j, len, ref, results, token;
      ref = query.match(searchToken);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        token = ref[j];
        results.push(normalize(token));
      }
      return results;
    };
    indexQuery = function(query) {
      var j, len, ref, token, tokens, tri;
      tri = {};
      tokens = {};
      ref = tokenize(query);
      for (j = 0, len = ref.length; j < len; j++) {
        token = ref[j];
        if (!tokens[token]) {
          tokens[token] = true;
          trigrams(token, tri);
        }
      }
      return {
        trigrams: tri,
        tokens: tokens
      };
    };
    addSearchDataFilter = function(data) {
      return data.addFilter({
        clear: function() {
          return data.index = {};
        },
        replaceBlock: function(oldBlock, newBlock) {
          var j, k, len, len1, ref, ref1, results, trigram;
          if (oldBlock) {
            ref = oldBlock.trigrams;
            for (j = 0, len = ref.length; j < len; j++) {
              trigram = ref[j];
              delete data.index[trigram][oldBlock._id];
              if (_.isEmpty(data.index[trigram])) {
                delete data.index[trigram];
              }
            }
          }
          if (newBlock) {
            ref1 = newBlock.trigrams = trigrams(newBlock.text);
            results = [];
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              trigram = ref1[k];
              if (!data.index[trigram]) {
                data.index[trigram] = {};
              }
              results.push(data.index[trigram][newBlock._id] = true);
            }
            return results;
          }
        }
      });
    };
    return {
      normalize: normalize,
      indexQuery: indexQuery,
      tokenize: tokenize,
      addSearchDataFilter: addSearchDataFilter,
      trigrams: trigrams
    };
  });

}).call(this);

//# sourceMappingURL=search.js.map
