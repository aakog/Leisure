{
  "version": 3,
  "file": "org.js",
  "sourceRoot": "..",
  "sources": [
    "src/org.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\n#\n# Parse orgmode files\n#\n#\n\n# alText() gets its text, plus its childrens'\n#\n\n'use strict'\ndefine ['lib/lazy'], (Lazy)->\n  {\n    _\n  } = Lazy\n\n  todoKeywords = ['TODO', 'DONE']\n\n  declRE = /^#\\+.*$/m\n  buildHeadlineRE = ->\n    new RegExp \"^(\\\\*+( +|$))((?:#{todoKeywords.join('|')}) *)?(\\\\[#(A|B|C)\\\\] *)?([^\\\\n]*?)(:[\\\\w@%#:]*: *)?$\", 'm'\n  HL_LEVEL = 1\n  HL_TODO = 3\n  HL_PRIORITY = 5\n  HL_TEXT = 6\n  HL_TAGS = 7\n  headlineRE = buildHeadlineRE()\n  todoRE = /^(\\*+) *(TODO|DONE)/\n  tagsRE = /:[^:]*/\n  KW_BOILERPLATE = 1\n  KW_NAME = 2\n  KW_INFO = 3\n  keywordRE = /^(#\\+([^:\\[\\n]+)(?:\\[.*\\] *)?: *)([^\\n]*)$/im\n  SRC_BOILERPLATE = 1\n  SRC_NAME = 2\n  SRC_INFO = 3\n  srcStartRE = /^(#\\+(BEGIN_SRC) +)([^\\n]*)$/im\n  END_NAME = 1\n  srcEndRE = /^#\\+(END_SRC)( *)$/im\n  exampleStartRE = /^#\\+BEGIN_EXAMPLE *$/im\n  exampleEndRE = /^#\\+END_EXAMPLE *$/im\n  RES_NAME = 1\n  resultsRE = /^#\\+(RESULTS)(?: *\\[.*\\] *)?: *$/im\n  resultsLineRE = /^([:|] .*)(?:\\n|$)/i\n  DRAWER_NAME = 1\n  drawerRE = /^ *:([^\\n:]*): *$/im\n  endRE = /^ *:END: *$/im\n  PROPERTY_KEY = 1\n  PROPERTY_VALUE = 2\n  propertyRE = /^ *:([^\\n:]+): *([^\\n]*)$/img\n  LIST_LEVEL = 1\n  LIST_BOILERPLATE = 2\n  LIST_CHECK = 3\n  LIST_CHECK_VALUE = 4\n  LIST_INFO = 5\n  listRE = /^( *)(- *)(\\[( |X)\\] +)?(.*)$/m\n  # markup characters: * / + = ~ _\n  #simpleRE = /\\B(\\*[/+=~\\w](.*?[/+=~\\w])?\\*|\\/[*+=~\\w](.*?[*+=~\\w])?\\/|\\+[*/=~\\w](.*?[*/=~\\w])?\\+|=[+*/~\\w](.*?[+*/~\\w])?=|~[=+*/\\w](.*?[=+*/\\w])?~)(\\B|$)|\\b_[^_]*\\B_(\\b|$)/\n  #simpleRE = /\\B(\\*[/+=~\\S](.*?[/+=~\\S])?\\*|\\/[*+=~\\S](.*?[*+=~\\S])?\\/|\\+[*/=~\\S](.*?[*/=~\\S])?\\+|=[+*/~\\S](.*?[+*/~\\S])?=|~[=+*/\\S](.*?[=+*/\\S])?~)(\\B|$)|\\b_[^_]*\\B_(\\b|$)/\n  simpleRE = /\\B(\\*[^\\s*]([^*]*[^\\s*])?\\*|\\/[^\\s\\/]([^\\/]*[^\\s\\/])?\\/|\\+[^\\s+]([^+]*[^\\s+])?\\+|=[^\\s=]([^=]*[^\\s=])?=|~[^\\s~]([^~]*[^\\s~])?~)(\\B|$)|\\b_[^_]*\\B_(\\b|$)/\n  LINK_HEAD = 1\n  LINK_INFO = 2\n  LINK_DESCRIPTION = 3\n  linkRE = /(\\[\\[([^\\]]*)\\])(?:\\[([^\\]]*)\\])?\\]/\n  htmlStartRE = /^#\\+(BEGIN_HTML\\b)(.*)$/im\n  HTML_START_NAME = 1\n  HTML_INFO = 2\n  htmlEndRE = /^#\\+END_HTML *$/im\n  ATTR_NAME = 1\n  attrHtmlRE = /^#\\+(ATTR_HTML): *$/im\n  attrHtmlLineRE = /^([:|] .*)(?:\\n|$)/i\n  imagePathRE = /\\.(png|jpg|jpeg|gif|svg|tiff|bmp)$/i\n  leisurePathRE = /^(?:lounge|leisure):([^\\/]*)(?:\\/([^\\/]*)(?:\\/([^\\/]*))?)?$/\n  keywordPropertyRE = /:([^ ]+)/\n\n  last = (a)-> a[a.length - 1]\n\n  matchLine = (txt)->\n    if txt.match(simpleRE)?.index == 0 then false\n    else\n      checkMatch(txt, exampleStartRE, 'exampleStart') ||\n      checkMatch(txt, exampleEndRE, 'exampleEnd') ||\n      checkMatch(txt, srcStartRE, 'srcStart') ||\n      checkMatch(txt, srcEndRE, 'srcEnd') ||\n      checkMatch(txt, resultsRE, 'results') ||\n      checkMatch(txt, attrHtmlRE, 'attr') ||\n      checkMatch(txt, keywordRE, 'keyword') ||\n      checkMatch(txt, headlineRE, (m)-> \"headline-#{m[HL_LEVEL].trim().length}\") ||\n      checkMatch(txt, listRE, 'list') ||\n      checkMatch(txt, htmlStartRE, 'htmlStart') ||\n      checkMatch(txt, htmlEndRE, 'htmlEnd') ||\n      checkMatch(txt, declRE, 'unknownDecl')\n\n  checkMatch = (txt, pat, result)->\n    m = txt.match pat\n    if m?.index == 0\n      if typeof result == 'string' then result else result m\n    else false\n\n  class Node\n    constructor: -> @markup = markupText @text\n    count: -> 1\n    length: -> @text.length\n    end: -> @offset + @text.length\n    toJson: -> JSON.stringify @toJsonObject(), null, '  '\n    toJsonObject: ->\n      obj = @jsonDef()\n      obj.nodeId = @nodeId\n      obj\n    allText: -> @text\n    block: false\n    findNodeAt: (pos)-> if @offset <= pos && pos < @offset + @text.length then this else null\n    scan: (func)-> func this\n    scanWithChildren: (func)->\n      func this\n      for c in @children\n        c.scan func\n    linkNodes: -> this\n    linkChild: (child)->\n      child.linkNodes()\n      child.linkTo this\n    linkChildren: ->\n      prev = null\n      for c in @children\n        if prev then prev.next = c\n        @linkChild c\n        c.prev = prev\n        prev = c\n      this\n    contains: (node)->\n      while node\n        if node == this then return true\n        node = node.fragment ? node.parent\n      false\n    next: null\n    prev: null\n    top: -> if !@parent then this else @parent.top()\n    toString: -> @toJson()\n    allTags: -> @parent?.allTags() ? []\n    allProperties: -> @parent?.allProperties() ? {}\n    linkTo: (@parent)->\n    fixOffsets: (newOff)->\n      @offset = newOff\n      if @children then @fixChildrenOffsets()\n      else newOff + @allText().length\n    fixChildrenOffsets: ->\n      offset = @offset + @text.length\n      for child in @children\n        offset = child.fixOffsets offset\n      offset\n    inNewMeat: -> false\n    getRightmostDescendent: ->\n      child = this\n      while child.children?.length\n        child = child.children[child.children.length - 1]\n      child\n    getLeftmostDescendent: ->\n      child = this\n      while child.children?.length\n        child = child.children[0]\n      child\n    getPrecedingNode: ->\n      if @prev then @prev.getRightmostDescendent()\n      else if parent = @fragment ? @parent\n        if parent.children[0] == this then return parent\n        parent.children[parent.children.indexOf(this) - 1].getRightmostDescendent()\n    getFollowingNode: ->\n      if @next then @next.getLeftmostDescendent()\n      else if parent = @fragment ? @parent\n        if parent.children[parent.children.length - 1] == this then return parent\n        parent.children[parent.children.indexOf(this) + 1].getLeftmostDescendent()\n\n  class Headline extends Node\n    constructor: (@text, @level, @todo, @priority, @tags, @children, @offset)->\n      super()\n      @properties = {}\n    count: ->\n      count = 1\n      for node in @children\n        count += node.count()\n      count\n    block: true\n    lowerThan: (l)-> l < @level\n    length: -> @end() - @offset\n    end: ->\n      if @children.length\n        lastChild = @children[@children.length - 1]\n        lastChild.offset + lastChild.length()\n      else super()\n    type: 'headline'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      level: @level\n      todo: @todo\n      priority: @priority\n      tags: @tags\n      children: (c.toJsonObject() for c in @children)\n      properties: @properties\n    allText: -> @text + (c.allText() for c in @children).join ''\n    findNodeAt: (pos)->\n      if pos < @offset  || @offset + @length() < pos then null\n      else if pos < @offset + @text.length then this\n      else\n        # could binary search this\n        for child in @children\n          if res = child.findNodeAt pos then return res\n        null\n    scan: Node.prototype.scanWithChildren\n    linkNodes: -> @linkChildren()\n    addTags: (set)->\n      for tag in parseTags @tags\n        set[tag] = true\n      set\n    addProperties: (props)-> Object.assign props, @properties\n    addAllTags: -> @addTags @parent?.addAllTags() || {}\n    allProperties: -> @addProperties @parent?.allProperties() || {}\n    allTags: -> _.keys @addAllTags()\n    parts: ->\n      m = @text.match headlineRE\n      level: (m[HL_LEVEL] ? '').trim().length\n      stars: m[HL_LEVEL] ? ''\n      todo: m[HL_TODO] ? ''\n      priority: m[HL_PRIORITY] ? ''\n      text: m[HL_TEXT]\n      tags: m[HL_TAGS] ? ''\n    partOffsets: ->\n      m = @text.match headlineRE\n      pos = 0\n      ret = {}\n      addPart = (name, text)->\n        ret[name] = start: pos, end: pos + text.length\n        pos += text.length\n      addPart 'stars', m[HL_LEVEL] ? ''\n      addPart 'todo', m[HL_TODO] ? ''\n      addPart 'priority', m[HL_PRIORITY] ? ''\n      addPart 'text', m[HL_TEXT]\n      addPart 'tags', m[HL_TAGS] ? ''\n      ret\n\n  class Fragment extends Node\n    #constructor: (@offset, @children)-> @text = ''\n    constructor: (@offset, @children)->\n      super()\n      @text = ''\n    count: ->\n      count = 1\n      for node in @children\n        count += node.count()\n      count\n    end: ->\n      if @children.length\n        lastChild = @children[@children.length - 1]\n        lastChild.offset + lastChild.length()\n      else super()\n    block: true\n    length: -> @end() - @offset\n    type: 'fragment'\n    jsonDef: ->\n      type: @type\n      offset: @offset\n      children: (c.toJsonObject() for c in @children)\n    allText: -> @text + (c.allText() for c in @children).join ''\n    findNodeAt: (pos)->\n      if pos < @offset  || @offset + @length() < pos then null\n      else if pos < @offset + @text.length then this\n      else\n        # could binary search this\n        for child in @children\n          if res = child.findNodeAt pos then return res\n        null\n    linkNodes: -> @linkChildren()\n    linkChild: (child)->\n      child.fragment = this\n      super child\n    linkTo: (parent)->\n      if @children.length\n        @children[0].prev = @prev\n        @children[@children.length - 1].next = @next\n        for c in @children\n          c.linkTo parent\n\n  class Meat extends Node\n    constructor: (@text, @offset)-> super()\n    lowerThan: (l)-> true\n    type: 'meat'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n    inNewMeat: ->\n      meat = []\n      cur = this\n      while cur && !(cur instanceof Headline || inListItem cur)\n        meat.push cur\n        cur = cur.getPrecedingNode()\n      meat.reverse()\n      t = ''\n      for m in meat\n        t += m.allText()\n      t.match meatStart\n\n  inListItem = (org)->\n    org && (org instanceof ListItem || inListItem org.fragment ? org.parent)\n\n  meatStart = /^\\S|\\n\\n\\S/\n\n  markupTypes =\n    '*': 'bold'\n    '/': 'italic'\n    '_': 'underline'\n    '=': 'verbatim'\n    '~': 'code'\n    '+': 'strikethrough'\n\n  #* bold, / italic, _ underline, = verbatim, ~ code, + strikethrough\n  class SimpleMarkup extends Meat\n    constructor: (@text, @offset, @children)->\n      super()\n      @markupType = markupTypes[@text[0]]\n    count: ->\n      count = 1\n      for node in @children\n        count += node.count()\n      count\n    type: 'simple'\n    linkNodes: -> @linkChildren()\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      markupType: @markupType\n      children: (c.toJsonObject() for c in @children)\n    scan: Node.prototype.scanWithChildren\n\n  class Link extends Meat\n    constructor: (@text, @offset, @path, @children)->\n      super()\n    count: ->\n      count = 1\n      for node in @children\n        count += node.count()\n      count\n    type: 'link'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      path: @path\n      children: (c.toJsonObject() for c in @children)\n    scan: Node.prototype.scanWithChildren\n    isImage: -> @path.match imagePathRE\n    isLeisure: -> @path.match leisurePathRE\n    descriptionText: -> (child.allText() for child in @children).join ' '\n\n  class ListItem extends Meat\n    constructor: (text, offset, @level, @checked, @contentOffset, @children)->\n      super text, offset\n      @text = text\n      @offset = offset\n    count: ->\n      count = 1\n      for node in @children\n        count += node.count()\n      count\n    type: 'list'\n    linkNodes: -> @linkChildren()\n    jsonDef: ->\n      obj =\n        type: @type\n        text: @text\n        level: @level\n        offset: @offset\n        contentOffset: @contentOffset\n        children: child.toJsonObject() for child in @children\n      if @checked? then obj.checked = @checked\n      obj\n    getParent: ->\n      if @level == 0 then null\n      li = this\n      while li = li.getPreviousListItem()\n        if li.level < @level then return li\n    getPreviousListItem: ->\n      parent = @fragment || @parent\n      cur = this\n      while cur = cur.getPrecedingNode()\n        if !(parent.contains cur) || cur.inNewMeat() then return null\n        if (cur.fragment ? cur.parent) == parent && cur instanceof ListItem then return cur\n      null\n    getNextListItem: ->\n      parent = @fragment || @parent\n      cur = this\n      while cur = cur.getFollowingNode()\n        if !(parent.contains cur) || cur.inNewMeat() then return null\n        if (cur.fragment ? cur.parent) == parent && cur instanceof ListItem then return cur\n      null\n    scan: Node.prototype.scanWithChildren\n    inNewMeat: -> true\n\n  class Drawer extends Meat\n    constructor: (text, offset, @name, @contentPos, @endPos)->\n      super text, offset\n      @text = text\n      @offset = offset\n    type: 'drawer'\n    jsonDef: ->\n      type: @type\n      name: @name\n      text: @text\n      offset: @offset\n      contentPos: @contentPos\n      endPos: @endPos\n    leading: -> @text.substring 0, @contentPos\n    content: -> @text.substring @contentPos, @endPos\n    trailing: -> @text.substring @endPos\n    isProperties: -> @name.toLowerCase() == 'properties'\n    properties: ->\n      props = {}\n      if @isProperties()\n        while m = propertyRE.exec @text.substring @contentPos, @endPos\n          props[m[PROPERTY_KEY]] = (m[PROPERTY_VALUE] ? '').trim()\n      props\n    #name: ->\n    #  n = @leading().trim()\n    #  n.substring 1, n.length - 1\n    linkTo: (node)->\n      super node\n      if @isProperties()\n        if !(node instanceof Headline) && !(node instanceof Fragment) then console.log \"WARNING: Drawer's parent is not a Headline'\"\n        else\n          if !node.properties then node.properties = {}\n          Object.assign node.properties, @properties()\n\n  class Example extends Meat\n    constructor: (@text, @offset, @contentPos, @contentLength)->\n      super()\n    block: true\n    type: 'example'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      contentPos: @contentPos\n      contentLength: @contentLength\n    exampleText: -> @text.substring @contentPos, @contentPos + @contentLength\n\n  class Keyword extends Meat\n    constructor: (text, offset, @name, @info)->\n      super text, offset\n      @text = text\n      @offset = offset\n    block: true\n    type: 'keyword'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      name: @name\n      info: @info\n    attributes: -> parseCodeAttributes @info\n    lead: -> _(@info.split(keywordPropertyRE)).first()\n\n  parseCodeAttributes = (attrText)->\n    o = _(attrText.split(keywordPropertyRE)).drop(1).map((str)-> str.trim())\n    if o.isEmpty() then null\n    else\n      attr = {}\n      for [k,v] in o.chunk(2).toArray()\n        if attr[k]\n          if !(attr[k] instanceof Array) then attr[k] = [attr[k]]\n          attr[k].push v\n        else attr[k] = v\n      attr\n\n  class Source extends Keyword\n    constructor: (text, offset, name, info, @infoPos, @content, @contentPos)->\n      super text, offset, name, info\n      @text = text\n      @offset = offset\n      @name = name\n      @Info = info\n    type: 'source'\n    getLanguage: -> @lead()?.trim().toLowerCase()\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      name: @name\n      info: @info\n      infoPos: @infoPos\n      content: @content\n      contentPos: @contentPos\n      contentLength: @content.length\n\n  class HTML extends Keyword\n    constructor: (text, offset, name, @contentPos, @contentLength, info)->\n      super text, offset, name, info\n      @text = text\n      @offset = offset\n      @name = name\n      @info = info\n    type: 'html'\n    leading: -> @text.substring 0, @contentPos\n    trailing: -> @text.substring @contentPos + @contentLength\n    content: -> @text.substring @contentPos, @contentPos + @contentLength\n    jsonDef: ->\n      type: @type\n      info: @info || ''\n      text: @text\n      offset: @offset\n      contentPos: @contentPos\n      contentLength: @contentLength\n\n  class Results extends Keyword\n    constructor: (text, offset, name, contentPos)->\n      super text, offset, name\n      @text = text\n      @offset = offset\n      @name = name\n      @contentPos = contentPos\n    type: 'results'\n    content: -> @text.substring @contentPos\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      name: @name\n      contentPos: @contentPos\n\n  class AttrHtml extends Keyword\n    constructor: (text, offset, name, contentPos)->\n      super text, offset, name\n      @text = text\n      @offest = offset\n      @name = name\n      @contentPos = contentPos\n    type: 'attr'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n      name: @name\n      contentPos: @contentPos\n\n  class UnknownDeclaration extends Meat\n    constructor: (@text, @offset)->\n      super()\n    type: 'unknown'\n    jsonDef: ->\n      type: @type\n      text: @text\n      offset: @offset\n\n  nextOrgNode = (node)->\n    up = false\n    while node\n      if node.children && !up && node.children.length then return node.children[0]\n      else if node.next then return node.next\n      else\n        up = true\n        node = node.parent\n    null\n\n  #\n  # Parse the content of an orgmode file\n  #\n  parseOrgMode = (text, offset, useFragment)->\n    if text instanceof Node then text\n    else\n      [res, rest] = parseHeadline '', offset ? 0, 0, undefined, undefined, undefined, text, text.length\n      if rest.length then throw new Error(\"Text left after parsing: #{rest}\")\n      if useFragment\n        if res.children.length == 1 then res = res.children[0]\n        else if res.children.length > 1 then res = new Fragment res.offset, res.children\n      res.linkNodes()\n\n  parseHeadline = (text, offset, level, todo, priority, tags, rest, totalLen)->\n    children = []\n    originalRest = rest\n    while true\n      oldRest = rest\n      [child, rest] = parseOrgChunk rest, originalRest.length - rest.length + offset, level\n      if !child then break\n      if child.lowerThan level\n        while child\n          children.push child\n          child = child.next\n      else rest = oldRest\n    [new Headline(text, level, todo, priority, tags || '', children, offset), rest]\n\n  parseTags = (text)->\n    tagArray = []\n    for t in (if text then text.split ':' else [])\n      if t then tagArray.push t\n    tagArray\n\n  fullLine = (match, text)-> text.substring match.index, match.index + match[0].length + (if text[match.index + match[0].length] == '\\n' then 1 else 0)\n\n  parseOrgChunk = (text, offset, level)->\n    if !text then [null, text]\n    else\n      m = text.match headlineRE\n      simple = text.match(simpleRE)?.index == 0\n      if m?.index == 0 && !simple\n        if m[HL_LEVEL].trim().length <= level then [null, text]\n        else\n          line = fullLine m, text\n          parseHeadline line, offset, m[HL_LEVEL].trim().length, m[HL_TODO], m[HL_PRIORITY], m[HL_TAGS], text.substring(line.length), offset + text.length\n      else\n        if m?.index == 0 && simple && (l = text.indexOf '\\n') > -1 && (m = text.substring(l).match headlineRE)\n          meatLen = m.index + l\n        else\n          meatLen = if m && (m.index > 0 || !simple) then m.index else text.length\n        meat = text.substring 0, meatLen\n        parseMeat meat, offset, text.substring(meatLen), false\n\n  class MeatParser\n    constructor: ->\n    checkPat: (pattern, cont)->\n      if !@result && match = @meat.match pattern\n        if match.index == 0\n          line = fullLine match, @meat\n          @result = cont line, @meat.substring(line.length) + @rest, match\n        else @minLen = Math.min @minLen, match.index\n    parse: (meat, offset, rest, singleLine)->\n      @meat = meat\n      @rest = rest\n      @minLen = meat.length + offset\n      @result = null\n      if !@singleLine\n        @checkPat resultsRE, (line, newRest)-> parseResults line, offset, newRest\n        @checkPat attrHtmlRE, (line, newRest)-> parseAttr line, offset, newRest\n        @checkPat srcStartRE, (line, newRest, srcStart)->\n          parseSrcBlock line, offset, srcStart[SRC_INFO], srcStart[SRC_BOILERPLATE].length, newRest\n        @checkPat htmlStartRE, (line, newRest, html)-> parseHtmlBlock line, offset, newRest, html\n        @checkPat keywordRE, (line, newRest, keyword)->\n          parseKeyword keyword, line, offset, keyword[KW_NAME], keyword[KW_INFO], newRest\n        @checkPat listRE, (line, newRest, list)->\n          parseList list, line, offset, list[LIST_LEVEL]?.length ? 0, list[LIST_CHECK_VALUE], list[LIST_INFO], newRest\n        @checkPat exampleStartRE, (line, newRest, start)->\n          if (end = newRest.match declRE) && end[0].match exampleEndRE\n            parseExample line, offset, start, end, newRest\n        @checkPat drawerRE, (line, newRest, drawer)->\n          if end = newRest.match endRE\n            parseDrawer line, drawer[DRAWER_NAME], offset, end, newRest\n        @checkPat declRE, (line, newRest)->\n          parseUnknown line, offset, newRest\n      if @result then @result\n      else\n        @checkPat simpleRE, (line, newRest, simple)->\n          inside = simple[0].substring 1, simple[0].length - 1\n          insideOffset = offset + 1\n          children = []\n          while inside\n            [child, inside] = parseMeat inside, insideOffset, '', true\n            while child\n              children.push child\n              insideOffset = child.offset + child.text.length\n              child = child.next\n          new SimpleMarkup simple[0], offset, children\n        @checkPat linkRE, (line, newRest, link)->\n          inside = link[LINK_DESCRIPTION]\n          insideOffset = offset + link[LINK_HEAD].length\n          children = []\n          while inside\n            [child, inside] = parseMeat inside, insideOffset, '', true\n            while child\n              children.push child\n              insideOffset = child.offset + child.text.length\n              child = child.next\n          new Link link[0], offset, link[LINK_INFO], children\n        if !@result\n          if newline = meat.substring(0, 2) == '\\n\\n' then meatText = meat.substring 2\n          meatText = meat.substring 0, @minLen\n          if m = meatText.match lineBreakPat\n            meatText = meat.substring 0, m.index\n          if newline then meatText = '\\n\\n' + meatText\n          @result = new Meat meatText, offset\n        parseRestOfMeat @result, meat.substring(@result.text.length), rest\n\n  lineBreakPat = /\\n\\n/\n\n  parseMeat = (meat, offset, rest, singleLine)->\n    new MeatParser().parse(meat, offset, rest, singleLine)\n\n  parseRestOfMeat = (node, meat, rest)->\n    if meat && node.text[node.text.length - 1] != '\\n'\n      [node2, rest] = parseMeat meat, node.offset + node.allText().length, rest, true\n      node.next = node2\n      [node, rest]\n    else [node, meat + rest]\n\n  parseResults = (text, offset, rest)->\n    oldRest = rest\n    while m = rest.match resultsLineRE\n      rest = rest.substring m[0].length\n    if oldRest == rest && rest.length && !(rest[0] in ['#', '\\n'])\n      rest = rest.substring (if m = rest.match /\\n/ then m.index + 1 else rest.length)\n    lines = oldRest.substring 0, oldRest.length - rest.length\n    [new Results(text + lines, offset, text.match(resultsRE)[RES_NAME], text.length), rest]\n\n  parseAttr = (text, offset, rest)->\n    oldRest = rest\n    while m = rest.match attrHrmlLineRE\n      rest = rest.substring m[0].length\n    lines = oldRest.substring 0, oldRest.length - rest.length\n    [new AttrHtml(text + lines, offset, text.match(attrHtmlRE)[ATTR_NAME], text.length), rest]\n\n  parseDrawer = (text, name, offset, end, rest)->\n    pos = end.index + (fullLine end, rest).length\n    [new Drawer(text + rest.substring(0, pos), offset, name, text.length, text.length + end.index), rest.substring pos]\n\n  parseKeyword = (match, text, offset, name, info, rest)->\n    [new Keyword(text, offset, name, text.substring match[KW_BOILERPLATE].length), rest]\n\n  parseExample = (startLine, offset, start, end, rest)->\n    lastLine = fullLine end, rest\n    newRest = rest.substring end.index + lastLine.length\n    contentPos = startLine.length\n    contentLength = end.index\n    text = startLine + rest.substring 0, rest.length - newRest.length\n    [new Example(text, offset, contentPos, contentLength), newRest]\n\n  parseSrcBlock = (text, offset, info, infoPos, rest)->\n    end = rest.match srcEndRE\n    otherSrcStart = rest.match srcStartRE\n    if !end || (otherSrcStart && otherSrcStart.index < end.index)\n      line = text.match /^.*\\n/\n      if !line then line = [text]\n      [new Meat(line[0]), text.substring(line[0].length) + rest]\n    else\n      endLine = fullLine end, rest\n      [new Source(text + rest.substring(0, end.index + endLine.length), offset, text.match(srcStartRE)[SRC_NAME], info, infoPos, rest.substring(0, end.index), text.length), rest.substring end.index + endLine.length]\n\n  parseHtmlBlock = (text, offset, rest, match)->\n    end = rest.match htmlEndRE\n    otherHtmlStart = rest.match htmlStartRE\n    line = text.match /^.*\\n/\n    if !line then line = [text]\n    if !end || (otherHtmlStart && otherHtmlStart.index < end.index)\n      [new Meat(line[0]), text.substring(line[0].length) + rest]\n    else\n      endLine = fullLine end, rest\n      [new HTML(text + rest.substring(0, end.index + endLine.length), offset, match[HTML_START_NAME], line[0].length, text.length + end.index - line[0].length, match[HTML_INFO]), rest.substring end.index + endLine.length]\n\n  parseList = (match, text, offset, level, check, info, rest)->\n    contentOffset = listContentOffset match\n    insideOffset = offset + contentOffset\n    inside = text.substring contentOffset\n    children = []\n    while inside\n      [node, inside] = parseMeat inside, insideOffset, '', true\n      while node\n        children.push node\n        insideOffset += node.allText().length\n        node = node.next\n    [new ListItem(text, offset, level, check == 'X' || (if check == ' ' then false else null), contentOffset, children), rest]\n\n  parseUnknown = (line, offset, rest)-> [new UnknownDeclaration(line, offset), rest]\n\n  listContentOffset = (match)->\n    match[LIST_LEVEL].length + match[LIST_BOILERPLATE].length + (match[LIST_CHECK]?.length ? 0)\n\n  markupText = (text)->\n\n  {\n    parseOrgMode\n    parseMeat\n    Node\n    Headline\n    Fragment\n    Meat\n    Keyword\n    Source\n    HTML\n    Results\n    resultsRE\n    ListItem\n    SimpleMarkup\n    Link\n    UnknownDeclaration\n    Drawer\n    Example\n    drawerRE\n    headlineRE\n    HL_LEVEL\n    HL_TODO\n    HL_PRIORITY\n    HL_TEXT\n    HL_TAGS\n    parseTags\n    matchLine\n    keywordRE\n    KW_BOILERPLATE\n    KW_NAME\n    KW_INFO\n    srcStartRE\n    SRC_BOILERPLATE\n    SRC_INFO\n    nextOrgNode\n    AttrHtml\n    parseCodeAttributes\n  }\n"
  ]
}