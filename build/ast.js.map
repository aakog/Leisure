{
  "version": 3,
  "file": "ast.js",
  "sourceRoot": "..",
  "sources": [
    "src/ast.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2012, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\n'use strict'\n\ndefine ['./base', 'lodash'], (base, _)->\n  {\n    resolve\n    lazy\n    nsLog\n    debugTypes\n  } = root = base\n\n  rz = resolve\n  lz = lazy\n  lc = Leisure_call\n  types = {}\n\n######\n###### naming\n######\n\n  charCodes =\n    \"'\": '$a'\n    ',': '$b'\n    '$': '$$'\n    '@': '$d'\n    '?': '$e'\n    '/': '$f'\n    '*': '$g'\n    '&': '$h'\n    '^': '$i'\n    '!': '$k'\n    '`': '$l'\n    '~': '$m'\n    '-': '$_'\n    '+': '$o'\n    '=': '$p'\n    '|': '$q'\n    '[': '$r'\n    ']': '$s'\n    '{': '$t'\n    '}': '$u'\n    '\"': '$v'\n    ':': '$w'\n    ';': '$x'\n    '<': '$y'\n    '>': '$z'\n    '%': '$A'\n    '.': '$B'\n    '#': '$C'\n    # ' ' is used for syntactically impossible characters, like gensyms\n    ' ': '$S'\n\n  nameSub = (name)->\n    s = ''\n    for i in [0...name.length]\n      code = charCodes[name[i]]\n      s += code ? name[i]\n    s\n  global.LeisureFunctionInfo = functionInfo = {}\n\n######\n###### definitions\n######\n\n  redefined = {}\n\n  leisureFunctionNamed = (n)-> LeisureFunctionInfo[nameSub n].def\n\n  setDataType = (func, dataType)->\n    if dataType then func.dataType = dataType\n    func\n\n  setType = (func, type)->\n    if type then func.type = type\n    func.__proto__ = (ensureLeisureClass type).prototype\n    func\n\n  class LeisureObject\n    className: 'LeisureObject'\n    toString: -> @L$info.name\n\n  LeisureObject.prototype.__proto__ = Function.prototype\n#  LeisureObject.prototype.className = 'LeisureObject'\n\n  if !global? && (typeof window != 'undefined') then window.global = window\n\n  global.Leisure_Object = LeisureObject\n\n  root.leisureClassChange = 0\n\n  classNameForType = (type)-> \"Leisure_#{nameSub type}\"\n\n  classForType = (type)-> types[type]\n\n  declareTypeFunc = (leisureClass, constructor)->\n    if constructor then types[leisureClass] = global['Leisure_' + nameSub(leisureClass)] = constructor\n    funcName = 'L_' + nameSub(leisureClass)\n    f = global[funcName] = lz (x)-> throw new Error \"Attempt to call type function #{funcName}\"\n    functionInfo[leisureClass] =\n      arity: 1\n      leisureName: leisureClass\n      jsName: funcName\n      alts: {}\n      altList: []\n      def: f\n    f.L$info =\n      length: 1\n      name: leisureClass\n    f.typeFunction = true\n    f.__proto__ = LeisureObject\n    setDataType f, leisureClass\n\n  ensureLeisureClass = (leisureClass, superclassName)->\n    if !(type = types[leisureClass])\n      cl = classNameForType leisureClass\n      if !global[cl]?\n        supercl = (if superclassName then global[classNameForType superclassName] else LeisureObject)\n        try\n          type = types[leisureClass] = global[cl] = eval \"(function #{cl}(){})\"\n          if supercl && typeof supercl == 'function' && (supercl == LeisureObject || supercl.prototype instanceof LeisureObject)\n            global[cl].prototype = new supercl\n            global[cl].prototype.constructor = global[cl]\n          else throw new Error \"Invalid supertype: #{superclassName}\"\n          if !functionInfo[leisureClass] then declareTypeFunc leisureClass\n          root.leisureClassChange++\n        catch err\n          console.log \"Error creating class #{leisureClass}#{if superClassName? then ' extends ' + superClassName else ''}\", \"superclass: \", supercl\n          throw err\n      else throw new Error \"System error: existing type #{leisureClass} is not in types map\"\n    type\n\n  ensureLeisureClass 'string'\n  ensureLeisureClass 'number'\n  ensureLeisureClass 'sequence'\n  # these are defined individually, below\n  #ensureLeisureClass 'list', 'sequence'\n  #ensureLeisureClass 'cons', 'list'\n  #ensureLeisureClass 'nil', 'list'\n  ensureLeisureClass 'ast'\n  ensureLeisureClass 'lit', 'ast'\n  ensureLeisureClass 'ref', 'ast'\n  ensureLeisureClass 'lambda', 'ast'\n  ensureLeisureClass 'apply', 'ast'\n  ensureLeisureClass 'let', 'ast'\n  ensureLeisureClass 'anno', 'ast'\n  ensureLeisureClass 'doc'\n  ensureLeisureClass 'srcLocation'\n  ensureLeisureClass 'pattern'\n\n  isNil = (obj)-> obj instanceof Leisure_nil\n\n  Leisure_lit.prototype.toString = -> \"lit(#{getLitVal @})\"\n  Leisure_ref.prototype.toString = -> \"ref(#{getRefName @})\"\n  Leisure_lambda.prototype.toString = -> \"lambda(#{astString @})\"\n  Leisure_apply.prototype.toString = -> \"apply(#{astString @})\"\n  Leisure_let.prototype.toString = -> \"let(#{astString @})\"\n  Leisure_anno.prototype.toString = -> \"anno(#{astString @})\"\n\n  astString = (ast)->\n    switch getType ast\n      when 'lit' then getLitVal ast\n      when 'ref' then getRefName ast\n      when 'apply'\n        funcStr = astString getApplyFunc ast\n        if getType(getApplyFunc ast) in ['lambda', 'let'] then funcStr = \"(#{funcStr})\"\n        argStr = astString getApplyArg ast\n        if getType(getApplyArg ast) == 'apply' then argStr = \"(#{argStr})\"\n        \"#{funcStr} #{argStr}\"\n      when 'lambda' then \"\\\\#{getLambdaVar ast} . #{astString getLambdaBody ast}\"\n      when 'let' then \"\\\\\\\\#{letStr ast}\"\n      when 'anno' then \"\\\\@#{getAnnoName ast} #{getAnnoData ast} . #{astString getAnnoBody ast}\"\n\n  letStr = (ast)->\n    body = getLetBody ast\n    binding = \"(#{getLetName ast} = #{astString getLetValue ast})\"\n    if body instanceof Leisure_let then \"#{binding} #{letStr body}\"\n    else \"#{binding} . #{astString body}\"\n\n#########\n######### LISTS\n#########\n\n  class Leisure_list extends Leisure_sequence\n    head: -> throw new Error(\"Not Implemented\")\n    tail: -> throw new Error(\"Not Implemented\")\n    isNil: -> false\n    find: (func)-> if func(@head()) then @head() else @tail().find(func)\n    removeAll: (func)->\n      t = @tail().removeAll(func)\n      if func(@head()) then t else if t == @tail() then @ else cons(@head(), t)\n    map: (func)-> cons func(@head()), @tail().map func\n    foldl: (func, arg)-> @tail().foldl func, func(arg, @head())\n    foldl1: (func)-> @tail().foldl func, @head()\n    foldr: (func, arg)-> func @head(), @tail().foldr(func, arg)\n    foldr1: (func)->\n      if @tail() == Nil then @head()\n      else func @head(), @tail().foldr1(func)\n    toArray: ->\n      res = []\n      cur = this\n      while !cur.isNil()\n        res.push cur.head()\n        cur = cur.tail()\n      res\n    join: (str)->@toArray().join(str)\n    intersperse: (item)-> cons @head(), @tail().foldr ((el, res)-> cons item, cons el, res), Nil\n    reverse: -> @rev Nil\n    rev: (result)-> @tail().rev cons(@head(), result)\n    elementString: -> \"#{if @head()?.constructor == @.constructor || @head() instanceof Leisure_nil then '[' + @head().elementString() + ']' else @head()}#{if @tail() instanceof Leisure_nil then '' else if @tail() instanceof Leisure_list then \" #{@tail().elementString()}\" else \" | #{@tail()}\"}\"\n    equals: (other)-> @ == other or (other instanceof Leisure_list and consEq(@head(), other.head()) and consEq(@tail(), other.tail()))\n    each: (block)->\n      block(@head())\n      @tail().each(block)\n    #length: -> @foldl ((i, el)-> i + 1), 0\n    last: ->\n      t = @tail()\n      if t == Nil then @head() else t.last()\n    append: (l)->cons @head(), @tail().append(l)\n    toString: -> \"#{@stringName()}[#{@elementString()}]\"\n    stringName: -> \"list\"\n\n  declareTypeFunc 'list', Leisure_list\n\n  consEq = (a, b)-> a == b or (a instanceof Leisure_list and a.equals(b))\n\n# cons and Nil are Leisure-based so that Leisure code can work with it transparently\n# they look like ordinary JS classes, but the \"instances\" are actually functions\n  class Leisure_cons extends Leisure_list\n    head: -> @ ->(a)->(b)->rz a\n    tail: -> @ ->(a)->(b)->rz b\n    stringName: -> \"Cons\"\n\n  types.cons = global.Leisure_cons = Leisure_cons\n\n  class Leisure_nil extends Leisure_list\n    isNil: -> true\n    find: -> @\n    removeAll: -> @\n    map: (func)-> Nil\n    foldl: (func, arg)-> arg\n    foldr: (func, arg)-> arg\n    reverse: -> @\n    rev: (result)-> result\n    equals: (other)-> other instanceof Leisure_nil\n    each: ->\n    toArray: -> []\n    join: -> ''\n    append: (l)-> l\n    toString: -> \"Cons[]\"\n    elementString: -> ''\n\n  types.nil = global.Leisure_nil = Leisure_nil\n\n  jsType = (v)->\n    t = typeof v\n    if t == 'object' then v.constructor || t\n    else t\n\n  mkProto = (protoFunc, value)->\n    value.__proto__ = protoFunc.prototype\n    value\n\n  throwError = (msg)->\n    throw (if msg instanceof Error then msg else new Error(String(msg)))\n\n  checkType = (value, type)-> if !(value instanceof type) then throwError(\"Type error: expected type: #{type}, but got: #{jsType value}\")\n\n  primCons = setDataType(((a)->(b)-> mkProto Leisure_cons, setType ((f)-> rz(f)(a)(b)), 'cons'), 'cons')\n  Nil = mkProto Leisure_nil, setDataType(setType(((a)->(b)->rz b), 'nil'), 'nil')\n  cons = (a, b)-> primCons(lz a)(lz b)\n\n  foldLeft = (func, val, thing)->\n    if thing instanceof Leisure_cons then thing.foldl func, val\n    else primFoldLeft func, val, thing, 0\n\n  primFoldLeft = (func, val, array, index)->\n    if index < array.length then primFoldLeft func, func(val, array[index]), array, index + 1\n    else val\n\n  global.leisureFuncs = {}\n  global.leisureFuncNames = Nil\n  leisureAddFunc = global.leisureAddFunc = (nm)-> global.leisureFuncNames = cons(nm, global.leisureFuncNames)\n  root.evalFunc = evalFunc = eval\n\n  root.functionCount = 0\n\n# name a function on the first access\n  nameFunc = (func, name)->\n    f = null\n    ->\n      if f == null\n        f = rz func\n        if typeof f == 'function'\n          if !f.L$info then f.L$info = {}\n          f.L$info.name = name\n        f\n      else f\n\n  global.LeisureNameSpaces =\n    core: {}\n    parser: {}\n\n  isPartial = (args)-> args.callee.length != args.length\n\n  partialCall = (args)-> Leisure_primCall args.callee, 0, args\n\n  doPartial = (args)-> if isPartial args then Leisure_primCall args.callee, 0, args\n\n# use AST, instead of arity?\n  define = (name, func, arity, src, method, namespace, isNewStyle) ->\n    arity = arity ? ((typeof func == 'function' && func.length) || 0)\n    nakedDefine name, lz(func), arity, src, method, namespace, isNewStyle || (arity > 1)\n\n  #nakedDefine = (name, func, arity, src, method, namespace, isNewStyle, redef) ->\n  nakedDefine = (name, func, arity, src, method, namespace, isNewStyle, redef, debugType, debugDef) ->\n    #can't use func(), because it might do something or might fail\n    #if typeof func() == 'function'\n    #  func().src = src\n    #  func().leisureContexts = []\n    #  func().leisureName = name\n    #  func().leisureArity = arity\n    nm = 'L_' + nameSub(name)\n    if !redef && functionInfo[name]\n      #console.error new Error \"WARNING, REDEFINING #{name}\"\n      redefined[name] = true\n    functionInfo[name] = info = \n      src: src\n      arity: arity\n      leisureName: name\n      jsName: nm\n      alts: {}\n      debugAlts: {}\n      altList: []\n      debugType: debugType\n    if isNewStyle then info.newArity = true\n    if !method and global.noredefs and global[nm]? and global[nm].typeFunc\n      throwError(\"[DEF] Attempt to redefine definition: #{name}\")\n    #namedFunc = info.mainDef = global[nm] = global.leisureFuncs[nm] = nameFunc(func, name)\n    info.def = namedFunc = if typeof func == 'function' && func.memo\n      if !func.L$info then func.L$info = {}\n      func.L$info.length = arity || func.length\n      func.L$info.name = name\n      if func.__proto__ == Function.prototype then func.__proto__ = LeisureObject\n      func\n    else nameFunc(func, name)\n    info.mainDef = Leisure.normalFuncs[name] = namedFunc\n    if debugDef\n      info.debugDef = namedDebugFunc = if typeof debugDef == 'function' && debugDef.memo\n        if !debugDef.L$info then debugDef.L$info = {}\n        if debugDef.__proto__ == Function.prototype then debugDef.__proto__ = LeisureObject\n        debugDef\n      else nameFunc(debugDef, name)\n      info.mainDebugDef = Leisure.debugFuncs[debugType][name] = namedDebugFunc\n    currentFunc = if debugTypes[debugType] == 'active' then namedDebugFunc else namedFunc\n    installFunc name, nm, currentFunc\n    #if LeisureObject.prototype[nm] then LeisureObject.prototype[nm] = currentFunc\n    #else global[nm] = global.leisureFuncs[nm] = info.mainDef = currentFunc\n    #if root.currentNameSpace\n    #  LeisureNameSpaces[namespace ? root.currentNameSpace][nameSub(name)] = currentFunc\n    #  nsLog \"DEFINING #{name} FOR #{root.currentNameSpace}\"\n    leisureAddFunc name\n    root.functionCount++\n    func\n\n  installFunc = (name, nm, func)->\n    if LeisureObject.prototype[nm] then LeisureObject.prototype[nm] = func\n    else global[nm] = global.leisureFuncs[nm] = func\n    if root.currentNameSpace\n      LeisureNameSpaces[namespace ? root.currentNameSpace][nameSub(name)] = func\n      nsLog \"DEFINING #{name} FOR #{root.currentNameSpace}\"\n\n######\n###### ASTs\n######\n\n# Make an AST for these\n# add node numder and source start and end into leisure structure\n# make lit, ref, lambda, apply, let, and anno subclasses of AST\n#\n#   LET syntax: \\\\ (f a1 a2 = body1) (var = value) . expr\n#\n# let binds a name to a value in a body and uses two backslashes in a row\n#   the body can be another let node and values can refer to any names in the let bindings\n#\n#   ANNOTATION syntax: \\@ name1 value1 name2 value2 . body\n#\n# Annotations associate key-values pairs with code\n#  name, data, body -- associates a name and data with a body of code\n#  You can nest them, so body could be another annotation\n\n# lit, ref, lambda, let each need a range\n  L_lit = setDataType ((_x)-> (_r)-> setType ((_f)-> rz(_f)(_x)(_r)), 'lit'), 'lit'\n  L_ref = setDataType ((_x)-> (_r)-> setType ((_f)-> rz(_f)(_x)(_r)), 'ref'), 'ref'\n  L_lambda = setDataType ((_v)-> (_f)-> (_r)-> setType ((_g)-> rz(_g)(_v)(_f)(_r)), 'lambda'), 'lambda'\n  L_let = setDataType ((_n)-> (_v)-> (_b)-> (_r)-> setType ((_f)-> rz(_f)(_n)(_v)(_b)(_r)), 'let'), 'let'\n  L_apply = setDataType ((_func)-> (_arg)-> setType ((_f)-> rz(_f)(_func)(_arg)), 'apply'), 'apply'\n  L_anno = setDataType ((_name)->(_data)->(_body)-> setType ((_f)-> rz(_f)(_name)(_data)(_body)), 'anno'), 'anno'\n\n  getType = (f)->\n    t = typeof f\n    if t in ['string', 'number'] then t\n    else if t == 'undefined' then \"undefined\"\n    else if f.leisureType then f.leisureType\n    else if t == 'function' and f?.type then f.type\n    else \"*#{((t == 'object') && f.constructor?.name) || t}\"\n\n  define 'getType', ((value)-> getType rz value), 1\n\n  getDataType = (f)-> (typeof f == 'function' && f.dataType) || f?.leisureDataType || ''\n\n  define 'getDataType', ((value)-> getDataType rz value), 1\n\n  save = {}\n\n# lit, ref, lambda, let each need a range\n  save.lit = lit = (l, range)-> L_lit(lz l)(lz range)\n  save.ref = ref = (r, range)-> L_ref(lz r)(lz range)\n  save.lambda = lambda = (v, body, range)->L_lambda(lz v)(lz body)(lz range)\n  save.llet = llet = (n, v, b, range)->L_let(lz n)(lz v)(lz b)(lz range)\n  save.apply = apply = (f, a)->L_apply(lz f)(lz a)\n  save.anno = anno = (name, data, body)-> L_anno(lz name)(lz data)(lz body)\n  save.cons = cons\n\n  dummyPosition = cons 1, cons 0, Nil\n\n  getPos = (ast)->\n    switch getType(ast)\n      when 'lit' then getLitRange ast\n      when 'ref' then getRefRange ast\n      when 'lambda' then getLambdaRange ast\n      when 'apply' then getApplyRange ast\n      when 'let' then getLetRange ast\n      when 'anno' then getAnnoRange ast\n\n  firstRange = (a, b)->\n    if !a || !b then console.log \"NIL = #{Nil}\"\n    [lineA, colA] = a.toArray()\n    [lineB, colB] = b.toArray()\n    if lineA? && lineB?\n      if lineA < lineB || (lineA == lineB && colA < colB) then a else b\n    else if lineA then a else b\n\n  getLitVal = (lt)-> lt lz (v)-> (r)-> rz v\n  getLitRange = (lt)-> lt lz (v)-> (r)-> rz r\n  getRefName = (rf)-> rf lz (v)-> (r)-> rz v\n  getRefRange = (rf)-> rf lz (v)-> (r)-> rz r\n  getLambdaVar = (lam)-> lam lz (v)->(b)-> (r)->  rz v\n  getLambdaBody = (lam)-> lam lz (v)->(b)-> (r)->  rz b\n  getLambdaRange = (lam)-> lam lz (v)->(b)-> (r)->  rz r\n  getLetName = (lt)-> lt lz (n)->(v)->(b)-> (r)->  rz n\n  getLetValue = (lt)-> lt lz (n)->(v)->(b)-> (r)->  rz v\n  getLetBody = (lt)-> lt lz (n)->(v)->(b)-> (r)->  rz b\n  getLetRange = (lt)-> lt lz (n)->(v)->(b)-> (r)->  rz r\n  getApplyFunc = (apl)-> apl lz (a)->(b)-> rz a\n  getApplyArg = (apl)-> apl lz (a)->(b)-> rz b\n  getApplyRange = (apl) -> firstRange (getPos getApplyFunc apl), (getPos getApplyArg apl)\n  getAnnoName = (anno)-> anno lz (name)->(data)->(body)-> rz name\n  getAnnoData = (anno)-> anno lz (name)->(data)->(body)-> rz data\n  getAnnoBody = (anno)-> anno lz (name)->(data)->(body)-> rz body\n  getAnnoRange = (anno)-> getPos getAnnoBody anno\n\n######\n###### JSON-to-AST\n######\n\n  #jsonToRange = (json)-> lz json2Ast json\n  #rangeToJson = (range)-> ast2Json range\n  jsonToRange = (json)-> lz consFrom(json)\n  rangeToJson = (range)-> range.toArray()\n\n  json2AstEncodings =\n    lit: (json)-> L_lit(lz json.value)(jsonToRange json.range)\n    ref: (json)-> L_ref(lz json.varName)(jsonToRange json.range)\n    lambda: (json)-> L_lambda(lz json.varName)(lz json2Ast json.body)(jsonToRange json.range)\n    let: (json)-> L_let(lz json.varName)(lz json2Ast(json.value))(lz json2Ast(json.body))(jsonToRange json.range)\n    apply: (json)-> L_apply(lz json2Ast(json.func))(lz json2Ast json.arg)\n    anno: (json)-> L_anno(lz json.name)(lz json2Ast json.data)(lz json2Ast json.body)\n    cons: (json)-> save.cons json2Ast(json.head), json2Ast(json.tail)\n    nil: (json)-> Nil\n\n# need these because my CS mod names the above functions with the field names :-/\n  lit = save.lit\n  ref = save.ref\n  lambda = save.lambda\n  apply = save.apply\n  llet = save.llet\n  anno = save.anno\n  cons = save.cons\n\n  json2Ast = (json)-> if typeof json == 'object' then json2AstEncodings[json._type] json else json\n\n  ast2JsonEncodings =\n    Leisure_lit: (ast)->\n      _type: 'lit'\n      value: getLitVal ast\n      range: rangeToJson getLitRange ast\n    Leisure_ref: (ast)->\n      _type: 'ref'\n      varName: getRefName ast\n      range: rangeToJson getRefRange ast\n    Leisure_lambda: (ast)->\n      _type: 'lambda'\n      varName: getLambdaVar ast\n      body: ast2Json getLambdaBody ast\n      range: rangeToJson getLambdaRange ast\n    Leisure_let: (ast)->\n      _type: 'let'\n      varName: getLetName ast\n      value: ast2Json getLetValue ast\n      body: ast2Json getLetBody ast\n      range: rangeToJson getLetRange ast\n    Leisure_apply: (ast)->\n      _type: 'apply'\n      func: ast2Json getApplyFunc ast\n      arg: ast2Json getApplyArg ast\n    Leisure_anno: (ast)->\n      _type: 'anno'\n      name: getAnnoName ast\n      data: ast2Json getAnnoData ast\n      body: ast2Json getAnnoBody ast\n    Leisure_cons: (ast)->\n      _type: 'cons'\n      head: ast2Json ast.head()\n      tail: ast2Json ast.tail()\n    Leisure_nil: (ast)->\n      _type: 'nil'\n\n  ast2Json = (ast)->\n    if ast2JsonEncodings[ast.constructor?.name] then ast2JsonEncodings[ast.constructor.name] ast else ast\n\n# Leisure interface to the JSON AST codec\n  define 'json2Ast', ((json)-> json2Ast JSON.parse rz json), null, null, null, 'parser'\n  define 'ast2Json', ((ast)-> JSON.stringify ast2Json rz ast), null, null, null, 'parser'\n\n  consFrom = (array, i)->\n    i = i || 0\n    if i < array.length then cons array[i], consFrom(array, i + 1) else Nil\n\n  head = (l)-> l.head()\n\n  tail = (l)-> l.tail()\n\n  Leisure.Ast = root\n\n  root.head = head\n  root.tail = tail\n  root.consFrom = consFrom\n  root.nameSub = nameSub\n  root.setDataType = setDataType\n  root.setType = setType\n  root.mkProto = mkProto\n  root.Nil = Nil\n  root.cons = cons\n  root.primCons = primCons\n  root.define = define\n  root.nakedDefine = nakedDefine\n  root.getType = getType\n  root.getDataType = getDataType\n  root.lit = lit\n  root.ref = ref\n  root.lambda = lambda\n  root.apply = apply\n  root.anno = anno\n  root.llet = llet\n  root.getRefName = getRefName\n  root.getRefRange = getRefRange\n  root.getLitVal = getLitVal\n  root.getLambdaBody = getLambdaBody\n  root.getLambdaVar = getLambdaVar\n  root.getApplyFunc = getApplyFunc\n  root.getApplyArg = getApplyArg\n  root.getLetName = getLetName\n  root.getLetValue = getLetValue\n  root.getLetBody = getLetBody\n  root.getAnnoName = getAnnoName\n  root.getAnnoData = getAnnoData\n  root.getAnnoBody = getAnnoBody\n  root.throwError = throwError\n  root.foldLeft = foldLeft\n  root.LeisureObject = LeisureObject\n  root.evalFunc = evalFunc\n  root.json2Ast = json2Ast\n  root.ast2Json = ast2Json\n  root.Leisure_lit = Leisure_lit\n  root.Leisure_ref = Leisure_ref\n  root.Leisure_lambda = Leisure_lambda\n  root.Leisure_apply = Leisure_apply\n  root.Leisure_let = Leisure_let\n  root.Leisure_anno = Leisure_anno\n  root.ensureLeisureClass = ensureLeisureClass\n  root.functionInfo = functionInfo\n  root.redefined = redefined\n  root.getPos = getPos\n  root.dummyPosition = dummyPosition\n  root.isNil = isNil\n  root.isPartial = isPartial\n  root.partialCall = partialCall\n  root.doPartial = doPartial\n  root.leisureFunctionNamed = leisureFunctionNamed\n  root.rangeToJson = rangeToJson\n  root.classNameForType = classNameForType\n  root.classForType = classForType\n  root.types = types\n  root.declareTypeFunc = declareTypeFunc\n  root.installFunc = installFunc\n\n  root\n"
  ]
}