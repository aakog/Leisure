// Generated by CoffeeScript 2.2.4
(function() {
  // Note data accesses and changes.
  'use strict';
  define(['./base', './org', './docOrg', 'lodash', './advice', 'bluebird'], function(Base, Org, DocOrg, _, Advice, Bluebird) {
    var BPromise, ChangeMonitor, changeAdvice, getId, monitorChanges, monitorChangesWhile;
    ({changeAdvice} = Advice);
    ({BPromise} = Bluebird);
    getId = null;
    ChangeMonitor = (function() {
      class ChangeMonitor {
        constructor(data1) {
          this.data = data1;
          this.accessed = {};
          this.original = {};
          this.set = {};
          this.deleted = {};
          if (!getId) {
            getId = Leisure.getId;
          }
        }

        start() {
          changeAdvice(this.data, true, this.advice);
          return this;
        }

        stop() {
          changeAdvice(this.data, false, this.advice);
          return this;
        }

      };

      ChangeMonitor.prototype.advice = {
        getBlock: {
          changeMonitor: function(parent) {
            return function(thing, changes) {
              changeMonitor.accessed[getId(thing)] = true;
              return parent(thing, changes);
            };
          }
        },
        setBlock: {
          changeMonitor: function(parent) {
            return function(id, block) {
              id = getId(id);
              changeMonitor.set[id] = true;
              if (!changeMonitor.original[id]) {
                changeMonitor.original[id] = this.getBlock(id);
              }
              return parent(id, block);
            };
          }
        },
        deleteBlock: {
          changeMonitor: function(parent) {
            return function(id) {
              changeMonitor.deleted[id] = true;
              if (!changeMonitor.original[id]) {
                changeMonitor.original[id] = this.getBlock(id);
              }
              return parent(id);
            };
          }
        }
      };

      return ChangeMonitor;

    }).call(this);
    monitorChanges = function(data) {
      return new ChangeMonitor(data).start();
    };
    monitorChangesWhile = function(data, func) {
      var mon;
      mon = monitorChanges(data);
      try {
        return func();
      } finally {
        mon.stop();
      }
    };
    return {monitorChanges, monitorChangesWhile};
  });

}).call(this);

//# sourceMappingURL=transaction.js.map
