{
  "version": 3,
  "file": "wispSupport.js",
  "sourceRoot": "..",
  "sources": [
    "src/wispSupport.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Clojure support for Lounge\n\n    define ['./eval', './docOrg', 'bluebird', './gen', 'immutable', './editor', './editorSupport', 'acorn', 'lodash', 'jquery'], (Eval, DocOrg, Bluebird, Gen, Immutable, Editor, EditorSupport, Acorn, _, $)->\n      {\n        setLounge\n        parseIt\n        Scope\n        lineColumnStrOffset\n        presentHtml\n      } = Eval\n      {\n        blockSource\n      } = DocOrg\n      {\n        Promise\n      } = Bluebird\n      {\n        SourceNode\n        SourceMapConsumer\n        SourceMapGenerator\n        jsCodeFor\n      } = Gen\n\n      Leisure.WispNS = lounge: tools: {}\n      Wisp = null\n      wispCompile = null\n      wispFileCounter = 0\n      modules =\n        immutable: Immutable\n        eval: Eval\n        \"doc-org\": DocOrg\n        editor: Editor\n        \"editor-support\": EditorSupport\n        lodash: _\n        jquery: $\n\n      class WispScope extends Scope\n        constructor: (nsName)->\n          super()\n          @_ns_ = id: nsName\n          @exports = {}\n        wispEval: (s)->\n          try\n            Leisure.wispScope = this\n            @eval s\n          finally\n            Leisure.wispScope = null\n\n      wispRequire = (s, base)->\n        s = new URL(s, 'http://x\\/' + base.replace(/\\./g, \"\\/\")).pathname.replace(/^\\//, '').replace /\\//g, '.'\n        _.get(modules, s) || findNs(s).exports\n\n      findNs = (nsName, create)->\n        scope = _.get Leisure.WispNS, nsName\n        if !scope && create\n          _.set Leisure.WispNS, nsName, scope = new WispScope nsName\n        scope\n\n      wp = null\n\n      translateIdentifierWord = null\n\n      wispPromise = ->\n        wp || (wp = new Promise (resolve, reject)->\n          req = window.require\n          window.require = null\n          requirejs ['lib/wisp'], (W)->\n            Leisure.Wisp = modules.wisp = Wisp = W\n            {translateIdentifierWord} = W.backend.escodegen.writer\n            baseWispCompile = Wisp.compiler.compile\n            window.require = req\n            wispCompile = (args...)->\n              node = baseWispCompile args...\n              if node.error then throw node.error\n              node\n            Leisure.wispCompilePrim = wispCompile\n            Leisure.wispCompileBase = baseWispCompile\n            exports = Leisure.WispNS.lounge.tools\n            newMacroDef = wispCompile \"\"\"\n              (defn expand-defmacro\n                \"Like defn, but the resulting function name is declared as a\n                macro and will be used as a macro by the compiler when it is\n                called.\"\n                [&form id & body]\n                (let [fn (with-meta `(defn ~id ~@body) (meta &form))\n                      form `(do ~fn ~id)\n                      ast (analyze form)\n                      code (compile ast)\n                      nsObj (or (and Leisure.wispScope Leisure.wispScope.*ns*) *ns*)\n                      nsName (if nsObj (:id nsObj))\n                      ns (or Leisure.wispScope (and *ns* (Leisure.wispFindNs nsName)))\n                      wrapped (if ns\n                                (str \\\"(function(){var exports = Leisure.WispNS.\\\" (:id (:_ns_ ns)) \\\".exports; return \\\" code \\\";})()\\\")\n                                code)\n                      macro (if ns\n                              (.eval ns wrapped)\n                              (eval code))]\n\n                (if window.DEBUG_WISP (do debugger 3))\n\n\n                  (install-macro! id macro)\n                  nil))\n              (install-macro! 'defmacro (with-meta expand-defmacro {:implicit [:&form]}))\n            \"\"\"\n            eval \"\"\"\n              (function() {\n                var symbol = Leisure.Wisp.ast.symbol;\n                var meta = Leisure.Wisp.ast.meta;\n                var withMeta = Leisure.Wisp.ast.withMeta;\n                var gensym = Leisure.Wisp.ast.gensym;\n                var installMacro = Leisure.Wisp.expander.installMacro;\n                var list = Leisure.Wisp.sequence.list;\n                var vec = Leisure.Wisp.sequence.vec;\n                var analyze = Leisure.Wisp.analyzer.analyze;\n                var compile = Leisure.Wisp.backend.escodegen.writer.compile;\n\n                #{newMacroDef.code}\n              })()\n            \"\"\"\n            resolve wispCompile)\n\nCompile Wisp code, optionally in a namespace.\n\n      class Compiler\n        constructor: ->\n        compile: (s, @nsName, @wrapFunction, @returnList)->\n          @reqs = ''\n          @splice = ''\n          @exportLocs = []\n          @pad = if @wrapFunction then '  ' else ''\n          try\n            oldScope = Leisure.wispScope\n            if @nsName && newScope = findNs @nsName\n              Leisure.wispScope = newScope\n            @result = wispCompile s, \"source-uri\": \"wispEval-#{wispFileCounter++}\"\n          finally\n            if newScope then Leisure.wispScope = oldScope\n          if @declaresNs = (@result.ast[0].op == 'ns')\n            @nsName = @result.ast[0].form.tail.head?.name\n          nameSpace: @handleNameSpace()\n          code: @scanNodes()\n        handleNameSpace: ->\n          @gennedNs = true\n          #needsExports = _.find @result.ast, (n)-> n.op == 'def'\n          needsExports = true\n          if @nsName\n            nsObj = findNs @nsName, true\n            names = {}\n            findExports @result.ast, names, @exportLocs\n            #for node in @result.ast when node.op == 'def'\n            #  names[translateIdentifierWord node.id.id.name] = true\n            if @declaresNs && @result.ast[0].require\n              for req in @result.ast[0].require\n                for ref in req.refer\n                  names[translateIdentifierWord (ref.rename ? ref.name).name] = true\n            nsObj.newNames _.keys names\n            if needsExports\n              if @wrapFunction then @reqs += \"exports = exports || window.Leisure.WispNS.#{@nsName}.exports;\\n\"\n              else @reqs += \"var exports = window.Leisure.WispNS.#{@nsName}.exports;\\n\"\n            if @result.ast[0].require then @reqs += \"\"\"\n              var require = function(s) {\n                return Leisure.wispRequire(s, '#{translateIdentifierWord @nsName}');\n              };\n\n            \"\"\"\n            if @declaresNs then @reqs += \"\"\"\n              _ns_ = {\n                id: '#{@nsName}',\n                doc: void 0\n              };\n\n            \"\"\"\n            else if @result.ast[0].doc then @splice = \"\"\"\n              exports._ns_.doc = _ns_.doc;\n\n            \"\"\"\n            @end = @result.ast[0].end ? line: 0, column: 0\n            if @pad then @splice = @splice.replace /\\n/g, '\\n' + @pad\n            @gennedNs = false\n          else if needsExports\n            if @wrapFunction then @reqs += \"exports = exports || {};\\n\"\n            else @destroyExports = true\n          if @pad then @reqs = @reqs.replace /\\n/g, '\\n' + @pad\n          nsObj\n        scanNodes: ->\n          if @returnList\n            exprs = _.filter _.map(@result.ast, (n, i)=>\n              if !(n.op in ['def', 'ns']) && n.form && !(n.op == 'var' && n.form.name == 'debugger') then @result['js-ast'].body[i].loc), identity\n            if exprs.length then @reqs += \"var $ret$ = [];\\n\"\n            else @returnList = false\n          else if @wrapFunction then addReturn = true\n          # splice in export, require, and namespace code at proper position\n          # edit out \"var \" occurances because Scope objects already declare the variables\n          # if returning a list, add expr results to list\n          # replace the bottom source-mapping comment with a new one\n          head = []\n          tail = []\n          foundEnd = false\n          startedPush = false\n          exprPos = 0\n          returnNode = null\n          destroyingExport = false\n          # prevCode lookback hack for inserting 'push(' before operation\n          prevCode = code: ''\n          con = SourceMapConsumer.fromSourceMap @result['source-map']\n          inExpr = false\n          declaredNs = false\n          #exportLocs = _.filter _.map @result.ast, (n)-> n.export && n.start\n          nodes = SourceNode.fromStringWithSourceMap @result.code, con\n          if addReturn\n            addReturn = lastLoc = _.last _.filter(_.map(@result.ast, (n, i)=> if !(n.op in ['def', 'ns']) && n.form then @result['js-ast'].body[i].loc?.start), identity)\n          prevLoc = line: 1, column: 0\n          prevSemi = null\n          nodes.walk (code, loc)=>\n            if loc?.line && (loc.line > prevLoc.line || loc.column > prevLoc.column)\n              prevLoc = loc\n            if code.match /\\/\\/# sourceMappingURL=/\n              foundEnd = true\n              code = code.replace /\\/\\/# sourceMappingURL=.*/, ''\n              if !code.trim() then return\n            else if foundEnd then return\n            if @destroyExports && !destroyingExport && code == \"exports\" && prevCode.code.match(/ *= */)\n              destroyingExport = true\n              return\n            else if destroyingExport\n              if code.match(/ *= */) then destroyingExport = false\n              return\n            if @nsName\n              if prevLoc && @exportLocs.length && atOrAfter(prevLoc, @exportLocs[0]) && code.match /^ *var/\n                declaredNs = true\n                @exportLocs.shift()\n                code = code.replace /^ *var /g, ' '\n              else if !declaredNs && @declaresNs && code.match /^ *var/\n                code = code.replace /^ *var /g, ' '\n            closeLoc = (loc.line? && loc) || prevLoc\n            if (startedPush && closeLoc.line? && ((closeLoc.line > exprs[exprPos].end.line) || (closeLoc.line == exprs[exprPos].end.line && (code.match(/^void 0;/) || closeLoc.column > exprs[exprPos].end.column))))\n              startedPush = false\n              if prevSemi\n                c = prevSemi.node.children[0]\n                c2 = c.replace(/;([ \\n]*)$/, ');$1')\n              if prevSemi.node && c != c2 then prevSemi.node.children[0] = c2\n              else code = code.replace(/;([ \\n]*)$/, ');$1')\n              exprPos++\n            if @returnList && !startedPush && (loc.line > exprs[exprPos]?.start.line || (loc.line == exprs[exprPos]?.start.line && loc.column >= exprs[exprPos].start.column))\n              startedPush = true\n              usedPrev = false\n              if prevCode?.node && !prevCode.loc.line && !prevCode.node.children[0].match /;/\n                c = prevCode.node.children[0]\n                prevCode.node.children[0] = \"$ret$.push(#{c}\"\n                usedPrev = true\n              if !usedPrev then code = \"$ret$.push(#{code}\"\n            if @pad then code = code.replace /\\n/g, '\\n' + @pad\n            node = new SourceNode loc.line, loc.column, loc.source, code, loc.name\n            if addReturn && !returnNode && loc.line == lastLoc.line && loc.column >= lastLoc.column - 1\n              returnNode = node\n            if !@gennedNs && (loc.line < @end.line + 1 || (loc.line == @end.line + 1 && loc.column < @end.column))\n              head.push node\n            else\n              @gennedNs = true\n              tail.push node\n            if code.trim()\n              prevCode = {code, loc, node}\n              if code.match(/;[ \\n]*$/) && !code.match(/^void 0;/) then prevSemi = prevCode\n              if loc.line && (loc.line > prevLoc.line || (loc.line == prevLoc.line && loc.column > prevLoc.column))\n                prevLoc = loc\n          file = (_.find nodes.children, (n)-> n instanceof SourceNode)?.source\n          children = [head, new SourceNode(1, 0, file, @splice), tail]\n          if returnNode\n            code = returnNode.children[0]\n            if _.last(tail) == returnNode then returnNode.children[0] = \"return #{code}\"\n            else\n              returnNode.children[0] = \"var $ret$ = #{code}\"\n              children.push \"\\n#{@pad}return $ret$;\\n\"\n          else if @returnList then children.push(if @wrapFunction then \"\\n#{@pad}return $ret$;\\n\" else \"\\n#{@pad}$ret$;\\n\")\n          if startedPush\n            lastChildren = _.last(tail)?.children || _.last(head)?.children\n            lastCode = lastChildren[lastChildren.length - 1]\n            lastChildren[lastChildren.length - 1] = lastCode.replace(/;([ \\n]*)$/, ');$1')\n          if @reqs then children.unshift @reqs\n          if @wrapFunction\n            children.unshift \"(function(exports, console){\\n#{@pad}console = console ? console : window.console;\\n#{@pad}\"\n            children.push '})'\n          splicedResult = new SourceNode(1, 0, file, children).toStringWithSourceMap()\n          if file then splicedResult.map.setSourceContent file, con.sourceContentFor file\n          Acorn.parse splicedResult.code\n          splicedResult.code + \"\\n//# sourceMappingURL=data:application/json;base64,#{btoa JSON.stringify splicedResult.map.toJSON()}\\n\"\n\n      dumpNodes = (nodes)->\n        output = \"\"\n        nodes.walk (code, loc)->\n          output += \"#{loc.line}:#{loc.column} #{code}\\n\"\n        output\n\n      lastExportLoc = null\n\n      findExports = (ast, names, exportLocs)->\n        baseFindExports ast, names, exportLocs\n        lastExportLoc = null\n\n      baseFindExports = (ast, names, exportLocs)->\n        if ast.start then lastExportLoc = ast.start\n        names = names ? []\n        if _.isArray ast\n          for a in ast\n            baseFindExports a, names, exportLocs\n        else\n          if ast.op == 'def'\n            names[translateIdentifierWord ast.id.id.name] = true\n            exportLocs.push lastExportLoc\n          for n in ['statements', 'result', 'methods', 'init']\n            if ast[n] then baseFindExports ast[n], names, exportLocs\n\n      atOrAfter = (nodeLoc, astLoc)->\n        nodeLoc.line - 1 > astLoc.line || (nodeLoc.line - 1 == astLoc.line && nodeLoc.column >= astLoc.column)\n\n      compile = (s, nsName, @wrapFunction, returnList)->\n        new Compiler().compile s, nsName, @wrapFunction, returnList\n\n      Leisure.wispCompile = compile\n      Leisure.wispEval = wispEval = (args...)->\n        {nameSpace, code} = compile args...\n        if nameSpace then nameSpace.wispEval code\n        else eval code\n      Leisure.wispRequire = wispRequire\n      Leisure.wispFindNs = findNs\n\n      sourceMapFromCode = (code)->\n        new SourceMapConsumer JSON.parse atob code.substring(code.lastIndexOf '\\n', code.length - 2).match(/sourceMappingURL=.*base64,([^\\n]*)\\n/)[1]\n\n      codeOffset = (err, code, src, originalSrc)->\n        [ign, line, column] = err.stack.match /\\n +at .*:([0-9]*):([0-9]*)/\n        line = Number line\n        column = Number column\n        {line, column} = sourceMapFromCode(code).originalPositionFor {line: line - 1, column}\n        lineColumnStrOffset(src, line, column) + (originalSrc ? src).length - src.length\n\n      envFunc = (env)->\n        env.presentHtml = (str)->\n          if str.toString()\n            str = str.toString()\n            if str.name then str = str.name\n          presentHtml str.replace(/\\uFEFF/g, '').replace(/\\uA789/g, ':').replace(/\\u2044/g, '\\/')\n        env.executeText = (text, props, cont)-> setLounge this, =>\n          result = [Leisure.wispEval(text)]\n          if cont then cont result else result\n        env.executeBlock = (block, cont)->\n          p = @compileBlock(block)\n          if p instanceof Promise then p.then (f)-> f.call this, cont\n          else p.call this, cont\n        env.compileBlock = (block)->\n          action = =>\n            original = res = \"#{blockSource(block).trim()}\"\n            try\n              props = @data.properties(block)\n              ns = props.namespace?.trim() ? undefined\n              if ns\n                if props.macro then macros = true\n                #res = \"(ns #{ns})\\n#{res}\"\n                ns = ns.match(/^[^ ]+/)[0]\n              {nameSpace, code} = compile res, ns, true, true\n              func = if nameSpace then nameSpace.wispEval code else eval code\n              (cont, args...)->\n                env = this\n                envConsole = log: (args...)-> env.write args.join ' '\n                try\n                  setLounge env, -> (cont ? identity) _.filter func.call(env, null, envConsole, args...), (n)-> typeof n != 'undefined'\n                catch err\n                  console.error err.stack ? err\n                  if (cur = (env.data.getBlock block._id)) && original != blockSource(cur).trim()\n                    console.error \"Warning, code is from a different version of block #{block._id}\"\n                  env.errorAt codeOffset(err, code, res, original), err.message\n                  (cont ? identity) []\n            catch err\n              console.error err.stack ? err\n              if m = err.message.match /^([^\\n]+)\\nline:([^\\n]+)\\ncolumn:([^\\n]+)(\\n|$)/\n                [ignore, msg, line, column] = m\n                pos = lineColumnStrOffset(res, Number(line.trim()), Number(column.trim()))\n                pos += original.length - res.length\n                env.errorAt pos, msg\n              else if code\n                env.errorAt codeOffset(err, code, res, original), err.message\n              else env.errorAt 0, err.message\n          if wispPromise().isResolved() then action()\n          else wispPromise().then action\n        env.generateCode = (text, noFunc)-> debugger\n        env\n\n      Leisure.assert = (test, msg)-> assert test, msg\n\n      (env)->\n        wispPromise().then ->\n          envFunc env\n          resolve envFunc\n"
  ]
}