{
  "version": 3,
  "file": "diag.js",
  "sourceRoot": "..",
  "sources": [
    "src/diag.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "    'use strict'\n    define ['./editor', './editorSupport'], (Editor, EditorSupport)->\n      bindCount = 0\n\n      {\n        posFor\n        last\n        escapeHtml\n      } = Editor\n      {\n        editorForToolbar\n      } = EditorSupport\n\n      errorDisplay = null\n\n      getDiagShowing = (node)-> editorForToolbar(node).diag\n\n      showDiag = (node, state)->\n        editor = editorForToolbar(node)\n        data = editor.options.data\n        node = editor?.node\n        editor.diag = state\n        if state\n          $(node).addClass 'diag'\n          $(node).nextAll(\".editorDiag\").addClass 'diag'\n          $(node).nextAll(\".structure\").addClass 'diag'\n          setTimeout (-> editor.options.setDiagEnabled true), 1\n          setTimeout (-> editor.options.data.setDiagEnabled true), 1\n          editor.on 'moved', statusUpdate\n          editor.on 'selection', statusUpdate\n          editor.options\n            .on 'diag', diagOptions\n            .on 'render', diagRender\n          data\n            .on 'change', observeDataChange\n            .on 'load', observeDataLoad\n            .on 'diag', observeDataDiag\n        else\n          $(node).removeClass 'diag'\n          $(node).nextAll(\".editorDiag\").removeClass 'diag'\n          $(node).nextAll(\".structure\").removeClass 'diag'\n          editor.options.setDiagEnabled false\n          editor.options.data.setDiagEnabled false\n          editor.off 'moved', statusUpdate\n          editor.off 'selection', statusUpdate\n          editor.options\n            .off 'diag', diagOptions\n            .off 'render', diagRender\n          data\n            .off 'change', observeDataChange\n            .off 'load', observeDataLoad\n            .off 'diag', observeDataDiag\n\n      createEditorDisplay = (editor)->\n        status = $(\"<div class='editorDiag'><div class='editorErrors'></div><div class='selectionInfo'>No selection</div></div>\")\n        editor.node.after(status)\n        errors = status.find '.editorErrors'\n        selection = status.find '.selectionInfo'\n\n      statusUpdate = (editor)->\n        {block, offset} = editor.getSelectedBlockRange()\n        if block\n          {line, col, blockLine, top, left} = lineInfo editor.options, block, offset\n          if line\n            return selection.html \"line: #{numSpan line} col: #{numSpan col} block: #{block._id}:#{numSpan blockLine} top: #{numSpan top} left: #{numSpan left}\"\n        selection.html \"No selection\"\n\n      diagOptions = (badBlocks)->\n        $(editor.node).find('.error').removeClass 'error'\n        for id in badBlocks ? []\n          $(editor.options.nodeForId(id)).addClass 'error'\n        if badBlocks?.length then errors.html \"BAD BLOCKS: #{JSON.stringify badBlocks}\"\n        else errors.html ''\n\n      diagRender = (editor, block)->\n        if editor.diag then console.log \"RENDER: #{block._id}\"\n\n      numSpan = (n)-> \"<span class='status-num'>#{n}</span>\"\n\n      lineInfo = (options, block, offset)->\n        if block\n          {line, col} = getBlockLine block, offset\n          startBlock = block\n          docLine = line\n          while block.prev\n            block = options.getBlock block.prev\n            docLine += block.text.split('\\n').length - 1\n          holder = options.nodeForId startBlock._id\n          if p = posFor options.editor.domCursorForTextPosition(holder, offset)\n            line: docLine\n            col: col\n            blockLine: line\n            top: Math.round(p.top)\n            left: Math.round(p.left)\n          else {}\n        else {}\n\n      getBlockLine = (block, offset)->\n        text = block.text.substring(0, offset)\n        lines = text.split('\\n')\n        line: lines.length\n        col: last(lines).length\n\n      createStructureDisplay = (data, stop)->\n        if !$(\".structure\").length\n          div = $(\"<div class='structure'><div class='dataErrors'></div><div class='blocks'></div></div>\")\n          $(document.body).append div\n          errorDisplay = div.find '.dataErrors'\n          blockDisplay = div.find '.blocks'\n\n      observeDataChange = (changes)-> displayStructure data, blockDisplay\n\n      observeDataLoad = -> displayStructure data, blockDisplay\n\n      observeDataDiag = (badBlocks)->\n        $(\".structure\").data badBlocks: badBlocks\n        showStructureErrors()\n\n      showStructureErrors = ->\n        if errorDisplay\n          if badBlocks = $('.structure').data().badBlocks\n            errorDisplay.html \"<b>BAD BLOCKS:</b> #{(b[0]+': '+b[1] for b in badBlocks).join ', '}\"\n            console.log \"ADDING ERROR TO: \" + (\".structure.diag .#{b[0]}\" for b in badBlocks).join ','\n            $((\".structure.diag .#{b[0]}\" for b in badBlocks).join ',').addClass 'error'\n          else errorDisplay.html ''\n\n      diagMessage = (msg)->\n        if errorDisplay then $(errorDisplay).html msg\n        console.log msg\n\n      displayStructure = (data, div)->\n        $(div).html structureInfo(data).description\n        showStructureErrors()\n\n      structureInfo = (data)->\n        parentStack = []\n        levels = {}\n        desc = \"\"\n        level = 0\n        cur = data.getBlock data.getFirst()\n        prevParent = null\n        checks = nextSibling: {}, previousSibling: {}, prev: {}\n        check = cur\n        prev = null\n        while check\n          checks.nextSibling[check.previousSibling] = check._id\n          checks.previousSibling[check.nextSibling] = check._id\n          checks.prev[check.next] = check._id\n          prev = check\n          check = data.getBlock check.next\n        while cur\n          bad = []\n          if cur.nextSibling != checks.nextSibling[cur._id] then bad.push 'nextSibling'\n          if cur.previousSibling != checks.previousSibling[cur._id] then bad.push 'previousSibling'\n          if cur.prev != checks.prev[cur._id] then bad.push 'prev'\n          if cur.previousSibling != cur.prev\n            p = cur\n            level = 0\n            while p = data.parent p\n              level++\n          levels[cur._id] = level\n          desc += \"<span class='#{cur._id}'>#{('   ' for i in [0...level]).join ''}#{cur._id} #{cur.type}#{checkStructure cur, bad}: #{escapeHtml JSON.stringify cur.text}\\n</span>\"\n          if !cur.nextSibling then level = 0\n          cur = data.getBlock cur.next\n        levels: levels, description: desc\n\n      checkStructure = (block, bad)->\n        if bad.length\n          ' <span class=\"err\">[' + (\"#{err}: #{block[err]}\" for err in bad).join(', ') + ']</span>'\n        else ''\n\n      Object.assign Leisure, {\n        showDiag\n        getDiagShowing\n      }\n\n      {\n        createStructureDisplay\n        createEditorDisplay\n        structureInfo\n        showDiag\n        getDiagShowing\n        diagMessage\n      }\n"
  ]
}