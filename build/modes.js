// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['./base', './org', './docOrg', './ast', './eval', './editor', 'lib/lodash.min', 'jquery', './ui', 'handlebars', './export', './lib/prism', './editorSupport', 'lib/bluebird.min', './lib/prism-leisure'], function(Base, Org, DocOrg, Ast, Eval, Editor, _, $, UI, Handlebars, BrowserExports, Prism, EditorSupport, Bluebird) {
    var DataStore, DataStoreEditingOptions, Drawer, Example, Fragment, HL_LEVEL, HL_PRIORITY, HL_TAGS, HL_TEXT, HL_TODO, HTML, Headline, Html, KEYWORD_, KW_BOILERPLATE, KW_INFO, LeisureEditCore, Link, ListItem, Meat, Nil, OrgEditing, Promise, SimpleMarkup, _workSpan, addController, addView, blockCodeItems, blockEnvMaker, blockIsHidden, blockOrg, blockSource, blockText, blockVars, classifyListItems, cleanOrg, closeList, controllerEval, copy, copyBlock, createValueSliders, createWorkSpan, currentSlider, defaultEnv, escapeAttr, escapeHtml, fancyEditDiv, fancyHtml, fancyMode, fancyReplacements, findEditor, getCodeItems, getEventChar, goodHtml, goodText, hasView, headlineRE, html, initializePendingViews, insertBreaks, isHiddenSlide, isSidebar, isYamlResult, keywordRE, languageEnvMaker, last, mayHideValueSlider, maybeReplaceHtml, mergeContext, mergeExports, mergeMeat, nextImageSrc, numPat, optWrench, orgDoc, parseMeat, parseOrgMode, plainEditDiv, plainMode, posFor, prefixBreak, preserveSelection, prevImageSrc, prismAliases, prismHighlight, pushPendingInitialzation, removeController, removeView, renderView, replacementTargets, resultsArea, setSliderValue, setSliding, showValueSlider, showsCode, showsResults, singleControllers, slideNode, slideValue, toggleSlideMode, viewKey, withContext, workSpan;
    defaultEnv = Base.defaultEnv;
    parseOrgMode = Org.parseOrgMode, parseMeat = Org.parseMeat, Fragment = Org.Fragment, Headline = Org.Headline, SimpleMarkup = Org.SimpleMarkup, Link = Org.Link, ListItem = Org.ListItem, Drawer = Org.Drawer, Meat = Org.Meat, Example = Org.Example, HTML = Org.HTML, Nil = Org.Nil, headlineRE = Org.headlineRE, HL_LEVEL = Org.HL_LEVEL, HL_TODO = Org.HL_TODO, HL_PRIORITY = Org.HL_PRIORITY, HL_TEXT = Org.HL_TEXT, HL_TAGS = Org.HL_TAGS, keywordRE = Org.keywordRE, KW_BOILERPLATE = Org.KW_BOILERPLATE, KW_INFO = Org.KW_INFO, KEYWORD_ = Org.KEYWORD_;
    orgDoc = DocOrg.orgDoc, getCodeItems = DocOrg.getCodeItems, blockSource = DocOrg.blockSource;
    Nil = Ast.Nil;
    languageEnvMaker = Eval.languageEnvMaker, Html = Eval.Html, escapeHtml = Eval.escapeHtml, html = Eval.html, blockVars = Eval.blockVars, isYamlResult = Eval.isYamlResult;
    LeisureEditCore = Editor.LeisureEditCore, last = Editor.last, DataStore = Editor.DataStore, DataStoreEditingOptions = Editor.DataStoreEditingOptions, blockText = Editor.blockText, posFor = Editor.posFor, escapeHtml = Editor.escapeHtml, copy = Editor.copy, findEditor = Editor.findEditor, copyBlock = Editor.copyBlock, preserveSelection = Editor.preserveSelection, getEventChar = Editor.getEventChar;
    addView = UI.addView, removeView = UI.removeView, renderView = UI.renderView, hasView = UI.hasView, viewKey = UI.viewKey, addController = UI.addController, removeController = UI.removeController, withContext = UI.withContext, mergeContext = UI.mergeContext, initializePendingViews = UI.initializePendingViews, escapeAttr = UI.escapeAttr, nextImageSrc = UI.nextImageSrc, prevImageSrc = UI.prevImageSrc, pushPendingInitialzation = UI.pushPendingInitialzation;
    mergeExports = BrowserExports.mergeExports;
    OrgEditing = EditorSupport.OrgEditing, blockOrg = EditorSupport.blockOrg, blockCodeItems = EditorSupport.blockCodeItems, blockIsHidden = EditorSupport.blockIsHidden, blockEnvMaker = EditorSupport.blockEnvMaker, controllerEval = EditorSupport.controllerEval;
    Promise = Bluebird.Promise;
    singleControllers = {};
    numPat = /-?[0-9][0-9.]*|-?\.[0-9.]+/;
    currentSlider = null;
    plainMode = {
      name: 'plain',
      keyPress: function(opts, parent, e) {
        return parent(e);
      },
      enter: function(opts, parent, e) {
        return parent(e);
      },
      handleDelete: function(opts, parent, e, sel, forward) {
        return parent(e);
      },
      renderBlocks: function(opt, html) {
        return html;
      },
      setSlideMode: function(opt, flag) {},
      showingSlides: function() {
        return false;
      },
      showNextSlide: function() {
        return false;
      },
      showPrevSlide: function() {
        return false;
      },
      handleChanges: function(changes) {},
      renderChanged: function(opts, blocks, prefix, replace) {
        var block, id, ref, results1;
        ref = opts.slidesFor(blocks);
        results1 = [];
        for (id in ref) {
          block = ref[id];
          results1.push(this.render(opts, block, prefix, replace));
        }
        return results1;
      },
      render: function(opts, block, prefix, replace) {
        var attrs, error, name, pos, ref, ref1, ref2, ref3, ref4, result, results, source, text;
        opts.trigger('render', opts.editor, block);
        ref = blockCodeItems(this, block), name = ref.name, source = ref.source, error = ref.error, results = ref.results;
        attrs = "id='" + prefix + block._id + "' data-block='" + block.type + "'";
        if (block.type === 'headline') {
          attrs += " data-headline='" + block.level + "'";
        }
        if (!results && !error) {
          text = this.renderMainBlock(block);
        } else {
          text = name ? this.renderMainText(block.text.substring(0, source != null ? source.offset : void 0)) : '';
          if (!error) {
            text += this.renderMainText(block.text.substring(source.offset, (ref1 = results != null ? results.offset : void 0) != null ? ref1 : block.text.length));
          } else {
            pos = source.offset + source.contentPos + Number(error.info.match(/([^,]*),/)[1]) - 1;
            text = escapeHtml(block.text.substring((ref2 = name != null ? name.offset : void 0) != null ? ref2 : 0, pos)) + "<span class='errorMark' contenteditable='false' data-noncontent>âœ–</span>" + escapeHtml(block.text.substring(pos, (ref3 = results != null ? results.offset : void 0) != null ? ref3 : block.text.length));
          }
          if (results != null) {
            text += "" + (escapeHtml((ref4 = results != null ? results.text : void 0) != null ? ref4 : '')) + (escapeHtml(block.text.substring(results.offset + results.text.length)));
          }
        }
        result = "<span " + attrs + ">" + text + "</span>";
        maybeReplaceHtml(block, prefix, result, replace);
        return [result, block.next];
      },
      renderMainBlock: function(block) {
        var text, txt;
        txt = block.text;
        if (block.type === 'headline') {
          text = parseOrgMode(block.text).children[0].partOffsets().text;
          return "<span class='plain-headline maintext'>" + (escapeHtml(txt.substring(0, text.start))) + (this.renderMainText(txt.substring(text.start, text.end))) + (escapeHtml(txt.substring(text.end))) + "</span>";
        } else {
          return this.renderMeat(parseOrgMode(block.text).children[0]);
        }
      },
      renderMainText: function(txt) {
        var org, pos, remaining, result;
        result = '';
        remaining = txt;
        pos = 0;
        while (remaining) {
          org = parseMeat(remaining, 0, '', true)[0];
          result += this.renderMeat(org);
          pos += org.offset + org.allText().length;
          remaining = txt.substring(pos);
        }
        return result;
      },
      renderMeat: function(org) {
        var result;
        result = '';
        while (org) {
          result += org instanceof SimpleMarkup ? this.renderSimple(org) : escapeHtml(org.allText());
          org = org.next;
        }
        return result;
      },
      renderSimple: function(org) {
        var c, guts, j, len, ref;
        guts = '';
        ref = org.children;
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          guts += this.renderMeat(c, true);
        }
        guts = "" + org.text[0] + guts + org.text[org.text.length - 1];
        switch (org.type === 'simple' && org.markupType) {
          case 'bold':
            return "<b>" + guts + "</b>";
          case 'italic':
            return "<i>" + guts + "</i>";
          case 'underline':
            return "<span style='text-decoration: underline'>" + guts + "</span>";
          case 'strikethrough':
            return "<span style='text-decoration: line-through'>" + guts + "</span>";
          case 'code':
            return "<code>" + guts + "</code>";
          case 'verbatim':
            return "<code>" + guts + "</code>";
          default:
            return escapeHtml(org.allText());
        }
      },
      renderSimpleChild: function(org) {
        if (!org.children) {
          return escapeHtml(org.text);
        } else {
          return this.renderSimple(org.children[0]);
        }
      }
    };
    toggleSlideMode = function(slideDom) {
      var block, blockHtml, opts, ref;
      if (opts = (ref = findEditor(slideDom)) != null ? ref.options : void 0) {
        block = opts.getBlock(opts.idForNode(slideDom[0]));
        opts.toggleSlide(block._id);
        blockHtml = opts.renderBlock(block)[0];
        preserveSelection(function() {
          var next, prev, results1;
          if (!opts.isToggled(block)) {
            next = block;
            while (isSidebar(next = opts.data.nextSibling(next))) {
              $(opts.nodeForId(next._id)).closest('.slideholder').closest('[data-view]').remove();
            }
          }
          prev = opts.editor.setHtml((block.type === 'headline' ? slideDom.closest('[data-view]') : slideDom.closest('[data-view="leisure-top-chunk"]'))[0], blockHtml, true);
          next = block;
          if (opts.isToggled(block)) {
            results1 = [];
            while (isSidebar(next = opts.data.nextSibling(next))) {
              $(prev).after(opts.renderBlock(next)[0]);
              results1.push(prev = prev.nextSibling);
            }
            return results1;
          }
        });
        return initializePendingViews();
      }
    };
    Handlebars.registerHelper('render', function(block) {
      return fancyMode.render(UI.context.opts, block, UI.context.prefix)[0];
    });
    Handlebars.registerHelper('renderHtml', function(html) {
      var data, id, ids, opts, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, vars;
      ref4 = blockVars((ref = UI.context) != null ? (ref1 = ref.opts) != null ? ref1.data : void 0 : void 0, (ref2 = this.block) != null ? (ref3 = ref2.codeAttributes) != null ? ref3["var"] : void 0 : void 0), vars = ref4[0], ids = ref4[1];
      data = (ref5 = UI.context) != null ? (ref6 = ref5.opts) != null ? ref6.data : void 0 : void 0;
      if (ids.length > 0 && (id = (ref7 = (ref8 = UI.context) != null ? ref8.simpleViewId : void 0) != null ? ref7 : this.id) && (opts = (ref9 = UI.context) != null ? ref9.opts : void 0)) {
        pushPendingInitialzation((function(_this) {
          return function() {
            var block, blocks, controller, controllerName, env, j, len, node, ref10, viewNode;
            viewNode = $("#" + id);
            if ((node = opts.nodeForId(_this.block._id)) && (node[0] === viewNode[0] || node[0].compareDocumentPosition(viewNode[0]) & Element.DOCUMENT_POSITION_CONTAINS)) {
              blocks = (ref10 = node.attr('data-observe')) != null ? ref10 : '';
              for (j = 0, len = ids.length; j < len; j++) {
                id = ids[j];
                blocks += " " + id;
              }
              node.attr('data-observe', blocks);
            }
            if (controllerName = _this.block.codeAttributes.controller) {
              if (!(controller = singleControllers[controllerName])) {
                if (block = opts.data.getBlockNamed(controllerName)) {
                  controller = singleControllers[controllerName] = {};
                  env = blockEnvMaker(block)({
                    __proto__: defaultEnv
                  });
                  env["eval"] = function(text) {
                    return controllerEval.call(controller, text);
                  };
                  env.write = function(str) {
                    return console.log(str);
                  };
                  env.errorAt = function(offset, msg) {
                    return console.log(msg);
                  };
                  env.executeText(blockSource(block), Nil, (function() {}));
                }
              }
              return controller != null ? typeof controller.initializeView === "function" ? controller.initializeView(viewNode[0], vars) : void 0 : void 0;
            }
          };
        })(this));
      }
      return Handlebars.compile(html)(vars, {
        data: UI.context
      });
    });
    initializePendingViews = function() {
      UI.initializePendingViews();
      return singleControllers = {};
    };
    Handlebars.registerHelper('renderPlain', function(data) {
      var block, edata, end, next, plainText, ref, ref1, text;
      text = '';
      edata = UI.context.opts.data;
      block = edata.getBlock(data.blockId);
      end = (ref = edata.nextRight(block)) != null ? ref._id : void 0;
      while (block && block._id !== end) {
        ref1 = plainMode.render(UI.context.opts, block, UI.context.prefix), plainText = ref1[0], next = ref1[1];
        text += plainText;
        block = edata.getBlock(next);
      }
      return text;
    });
    Handlebars.registerHelper('hiddenBeforeSource', function() {
      var source;
      source = this.codeItems.source;
      if (source.offset) {
        return "<span class='hidden'>" + (this.block.text.substring(0, source.offset)) + "</span>";
      } else {
        return '';
      }
    });
    Handlebars.registerHelper('hiddenAfterSource', function() {
      var end, source;
      source = this.codeItems.source;
      if ((end = source.end()) > this.block.text.length) {
        return "<span class='hidden'>" + (this.block.text.substring(source.end())) + "</span>";
      } else {
        return '';
      }
    });
    Handlebars.registerHelper('htmlDataUrl', function() {
      return "data:text/html;charset=utf-8," + (encodeURI(this.source));
    });
    Handlebars.registerHelper('sourceHeader', function() {
      var src;
      src = this.codeItems.source;
      return src.text.substring(0, src.contentPos);
    });
    Handlebars.registerHelper('sourceBoiler', function() {
      var src;
      src = this.codeItems.source;
      return src.text.substring(0, src.infoPos);
    });
    Handlebars.registerHelper('sourceInfo', function() {
      var src;
      src = this.codeItems.source;
      return src.text.substring(src.infoPos, src.contentPos);
    });
    Handlebars.registerHelper('renderSource', function() {
      var error, pos, ref, source;
      ref = this.codeItems, error = ref.error, source = ref.source;
      if (error) {
        pos = Number(error.info.match(/([^,]*),/)[1]) - 1;
        return fancyHtml(source.content.substring(0, pos)) + "<span class='errorMark' contenteditable='false' data-noncontent>âœ–</span>" + fancyHtml(source.content.substring(pos));
      } else {
        return prismHighlight(this.language, this.source);
      }
    });
    Handlebars.registerHelper('sourceFooter', function() {
      var src;
      src = this.codeItems.source;
      return src.text.substring(src.contentPos + src.content.length);
    });
    Handlebars.registerHelper('resultsHeader', function() {
      var res;
      res = this.codeItems.results;
      return res.text.substring(0, res.contentPos);
    });
    Handlebars.registerHelper('resultsContents', function() {
      var res;
      res = this.codeItems.results;
      if (this.hideResults) {
        return "<span class='hidden'>" + (escapeHtml(res.text)) + "</span>";
      } else {
        return resultsArea(UI.context.options, res.text.substring(res.contentPos));
      }
    });
    slideNode = function(node) {
      return $(node).closest('slideHolder').closest('[data-view]');
    };
    isHiddenSlide = function(block) {
      return block.type === 'headline' && blockIsHidden(block);
    };
    closeList = function(level, lastItem, stack) {
      var closeCount, prevLast;
      closeCount = 0;
      prevLast = lastItem;
      while (lastItem && lastItem.level > level) {
        delete lastItem.middleItem;
        lastItem.lastItem = true;
        lastItem = stack.pop();
        closeCount++;
      }
      prevLast.closeCount = closeCount;
      return lastItem;
    };
    classifyListItems = function(org) {
      var lastItem, stack;
      if (!(org.firstItem || org.middleItem || org.lastItem)) {
        stack = [];
        org.firstItem = true;
        lastItem = org;
        while (org = org.next) {
          if (org instanceof ListItem) {
            if (lastItem.level > org.level) {
              lastItem = closeList(org.level, lastItem, stack);
            }
            if (lastItem.level < org.level) {
              org.firstItem = true;
              stack.push(lastItem);
            } else {
              org.middleItem = true;
            }
            lastItem = org;
          }
        }
        return closeList(-1, lastItem, stack);
      }
    };
    fancyReplacements = {
      '<': '&lt;',
      '>': '&gt;',
      '&': '&amp;',
      '"': '&quot;',
      "'": '&#39;',
      " ": ' '
    };
    fancyHtml = function(str) {
      if (typeof str === 'string') {
        return str.replace(/[<>&'"]| +/g, function(c) {
          var i, j, ref, s;
          if (c === ' ') {
            return c;
          } else if (c[0] === ' ') {
            s = '';
            for (i = j = 1, ref = c.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
              s += '&nbsp;';
            }
            s += ' ';
            return s;
          } else {
            return fancyReplacements[c];
          }
        });
      } else {
        return str;
      }
    };
    fancyMode = {
      name: 'fancy',
      keyPress: function(opts, parent, e) {
        var block, pos, sel;
        sel = getSelection();
        if (sel.type === 'Caret') {
          pos = opts.editor.getSelectedDocRange();
          sel = opts.editor.getSelectedBlockRange();
          block = opts.getBlock(sel.block);
          if (!opts.isToggled(block) && block.type !== 'code' && sel.offset === 0 && block.text[0] === '\n' && block.text[1] !== '\n') {
            e.preventDefault();
            opts.editor.replace(e, sel, (getEventChar(e)) + '\n', false);
            pos.type = 'Caret';
            pos.length = 0;
            pos.start++;
            opts.editor.selectDocRange(pos);
            return;
          }
        }
        return parent(e);
      },
      enter: function(opts, parent, e) {
        var block, endBlock, endSel, pt, sel, startBlock, t;
        block = opts.getBlock(opts.idForNode(getSelection().getRangeAt(0).startContainer));
        console.log("enter in block ", block._id);
        if (opts.isToggled(block) || block.type === 'code') {
          return parent(e);
        } else {
          sel = opts.editor.getSelectedBlockRange();
          startBlock = opts.data.getBlock(sel.block);
          endSel = opts.data.blockOffsetForDocOffset(opts.data.offsetForBlock(startBlock) + sel.offset + sel.length);
          endBlock = opts.data.getBlock(endSel.block);
          t = startBlock.text;
          if (!sel.offset && startBlock.prev) {
            pt = opts.data.getBlock(startBlock.prev).text;
            t = pt + t;
            sel.offset += pt.length;
          }
          if ((t.substring(0, sel.offset).match(/\n*$/)[0].length + endBlock.text.substring(endSel.offset).match(/^\n*/)[0].length) % 2) {
            return parent(e);
          }
          e.preventDefault();
          return opts.editor.replace(e, sel, '\n\n', false);
        }
      },
      handleDelete: function(opts, parent, e, sel, forward) {
        var block, blockOff, del, end, nt, ntNls, pos, prevBlock, pt, ptNls, r, start;
        r = sel.getRangeAt(0);
        start = opts.editor.docOffset(r.startContainer, r.startOffset);
        blockOff = opts.data.blockOffsetForDocOffset(start);
        block = opts.getBlock(blockOff.block);
        if (((block != null ? block.type : void 0) === 'code') || (forward && start === opts.getLength()) || (!forward && start === 0)) {
          return parent(e, sel, forward);
        }
        if (!forward) {
          --blockOff.offset;
          --start;
        }
        pos = start;
        if (blockOff.offset <= 0) {
          prevBlock = opts.getBlock(block.prev);
          blockOff.block = prevBlock;
          pt = prevBlock.text;
          blockOff.offset += pt.length;
          pt += block.text;
        } else {
          pt = block.text;
        }
        del = pt.substring(blockOff.offset, blockOff.offset + 1);
        nt = pt.substring(blockOff.offset + 1);
        pt = pt.substring(0, blockOff.offset);
        ptNls = pt.match(/\n*$/)[0].length;
        ntNls = nt.match(/^\n*/)[0].length;
        end = start + 1;
        if (ptNls > 0 && ntNls > 0) {
          if ((ptNls + ntNls) % 2) {
            start--;
          }
        } else if (del === '\n') {
          if (ntNls % 2) {
            end++;
          } else if (ptNls % 2) {
            start--;
            pos--;
          }
        }
        opts.replaceText({
          start: start,
          end: end,
          text: '',
          source: 'edit'
        });
        opts.editor.domCursorForDocOffset(pos).moveCaret();
        if (pos < opts.getLength() && pos !== opts.editor.docOffset(opts.editor.moveForward())) {
          return opts.editor.moveBackward();
        }
      },
      renderBlocks: function(opt, html) {
        var header;
        header = hasView('header') ? opt.withNewContext((function(_this) {
          return function() {
            return _this.renderView('header', null, null, {})[0];
          };
        })(this)) : "<div id='dummy_headline'></div>";
        return "" + header + html;
      },
      handleChanges: function(opts, changes) {
        var block, j, len, newNode, old, ref, results1, sibling, siblingNode;
        ref = changes.newBlocks;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          block = ref[j];
          if (changes.sets[block._id] && (old = opts.getBlock(block._id)) && isHiddenSlide(block) !== isHiddenSlide(old)) {
            if (isHiddenSlide(block)) {
              results1.push(slideNode(opts.nodeForId(block._id)).remove());
            } else {
              siblingNode = null;
              newNode = this.render(opts, block, opts.prefix)[0];
              sibling = block;
              while (!siblingNode && (sibling = opts.data.previousSibling(sibling, changes))) {
                if ((siblingNode = opts.nodeForId(sibling._id)).length === 0) {
                  siblingNode = null;
                }
              }
              if (siblingNode) {
                slideNode(siblingNode).after(newNode);
              } else {
                sibling = block;
                while (!siblingNode && (sibling = opts.data.nextSibling(sibling, changes))) {
                  if ((siblingNode = opts.nodeForId(sibling._id)).length === 0) {
                    siblingNode = null;
                  }
                }
                if (siblingNode) {
                  slideNode(siblingNode).before(newNode);
                } else {
                  $(opts.editor.node).prepend(newNode);
                }
              }
              results1.push(initializePendingViews());
            }
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      },
      renderChanged: function(opts, blocks, prefix, replace) {
        var block, j, len, ref, rendered, results1, slide;
        rendered = {};
        results1 = [];
        for (j = 0, len = blocks.length; j < len; j++) {
          block = blocks[j];
          if (!opts.isToggled(block)) {
            results1.push(this.render(opts, block, prefix, replace));
          } else if (opts.isToggled(block) && !rendered[(ref = (slide = opts.slideFor(block))) != null ? ref._id : void 0]) {
            rendered[slide._id] = true;
            results1.push(this.render(opts, slide, prefix, replace));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      },
      render: function(opts, block, prefix, replace) {
        var ref;
        opts.trigger('render', block);
        if (opts.shouldHide(block)) {
          return ['', (ref = opts.data.nextRight(block)) != null ? ref._id : void 0];
        } else {
          return opts.withNewContext((function(_this) {
            return function() {
              UI.context.currentView = opts.nodeForId(block._id);
              UI.context.block = block;
              pushPendingInitialzation(function() {
                var j, len, node, ref1, results1;
                ref1 = opts.nodeForId(block._id).find('[title]');
                results1 = [];
                for (j = 0, len = ref1.length; j < len; j++) {
                  node = ref1[j];
                  results1.push($(node).tooltip().tooltip('option', 'content', $(node).attr('title')));
                }
                return results1;
              });
              if (block.type === 'headline') {
                return _this.renderHeadline(opts, block, prefix, replace);
              } else if (!block.prev) {
                return _this.renderFirstBlocks(opts, block, prefix, replace);
              } else {
                return _this.renderNontop(opts, block, prefix, replace);
              }
            };
          })(this));
        }
      },
      renderNontop: function(opts, block, prefix, replace) {
        if (block.type === 'chunk') {
          return this.renderChunk(opts, block, prefix, replace);
        } else if (block.type === 'code') {
          return this.renderCode(opts, block, prefix, replace);
        } else {
          return plainMode.render(opts, block, prefix, replace);
        }
      },
      renderView: function(type, ctx, next, data, targets) {
        return [renderView(type, ctx, data, targets), next];
      },
      renderHeadline: function(opts, block, prefix, replace) {
        var id, m, next, nextText, parent, ref, ref1, ref2, ref3, sblock, sidebars, targets, text, viewName;
        next = (ref = opts.data.nextRight(block)) != null ? ref._id : void 0;
        viewName = block.type === 'headline' && block.level === 1 ? opts.isToggled(block) ? (UI.context.viewAttrs = _.merge({
          "class": 'plain'
        }, (ref1 = UI.context.viewAttrs) != null ? ref1 : {}), 'leisure-headline-plain') : 'leisure-top-headline' : 'leisure-headline';
        if (hasView(viewName)) {
          m = block.text.match(headlineRE);
          UI.context.currentView = targets = replacementTargets(block, prefix, replace);
          if (!opts.isToggled(block)) {
            if (block.level === 1 && isSidebar(block)) {
              parent = block;
              while (parent && isSidebar(parent)) {
                parent = opts.data.previousSibling(parent);
              }
              if (!parent || !opts.isToggled(parent)) {
                viewName = 'leisure-sidebar';
              }
            } else if (sidebars = this.getSidebars(opts, block)) {
              next = (ref2 = opts.data.nextRight(_.last(sidebars))) != null ? ref2._id : void 0;
              sidebars = (function() {
                var j, len, results1;
                results1 = [];
                for (j = 0, len = sidebars.length; j < len; j++) {
                  sblock = sidebars[j];
                  results1.push(this.render(opts, sblock, prefix)[0]);
                }
                return results1;
              }).call(this);
              viewName += '-with-sidebar';
            }
          }
          return this.renderView(viewName, null, next, {
            id: prefix + block._id,
            blockId: block._id,
            EOL: '\n',
            topLevel: block.level === 1,
            level: block.level,
            stars: m[HL_LEVEL],
            maintext: this.renderOrg(opts, cleanOrg(block.text.substring(m[HL_LEVEL].length))) + optWrench(block),
            children: opts.data.children(block),
            sidebars: sidebars
          }, targets);
        } else {
          text = "<span id='" + prefix + block._id + "' data-block='" + block.type + "'>";
          text += fancyHtml(block.text);
          id = block.next;
          while (id && id !== next) {
            ref3 = this.render(opts, opts.data.getBlock(id), prefix), nextText = ref3[0], id = ref3[1];
            text += nextText;
          }
          text += "</span>";
          maybeReplaceHtml(block, prefix, text, replace);
          return [text, next];
        }
      },
      getSidebars: function(opts, block) {
        var sidebars;
        if (block && (block.level === 1 || !block.prev) && !isSidebar(block)) {
          sidebars = [];
          while (isSidebar(block = opts.data.nextSibling(block))) {
            if (!opts.shouldHide(block)) {
              sidebars.push(block);
            }
          }
          if (sidebars.length) {
            return sidebars;
          }
        }
      },
      renderFirstBlocks: function(opts, block, prefix, replace) {
        var cur, next, plain, ref, ref1, targets, text, txt;
        if (hasView('leisure-top-chunk')) {
          if (plain = opts.isToggled(block)) {
            UI.context.viewAttrs = _.merge({
              "class": 'plain'
            }, (ref = UI.context.viewAttrs) != null ? ref : {});
          }
          text = '';
          cur = block;
          UI.context.currentView = targets = replacementTargets(block, prefix, replace);
          while (!(cur.type === 'headline' && cur.level === 1)) {
            ref1 = plain ? plainMode.render(opts, cur, prefix) : this.renderNontop(opts, cur, prefix), txt = ref1[0], next = ref1[1];
            text += txt;
            if (!next) {
              break;
            }
            cur = opts.getBlock(next);
          }
          return this.renderView('leisure-top-chunk', null, next, {
            id: prefix + block._id,
            text: text,
            topLevel: !block.prev,
            EOL: '\n'
          }, targets);
        } else {
          return this.renderNontop(opts, block, prefix);
        }
      },
      renderChunk: function(opts, block, prefix, replace) {
        var targets, viewType;
        viewType = 'leisure-chunk';
        UI.context.currentView = targets = replacementTargets(block, prefix, replace);
        if (hasView(viewType)) {
          return this.renderView(viewType, null, block.next, {
            id: prefix + block._id,
            text: this.renderOrgChunk(opts, blockOrg(opts.data, block)),
            topLevel: !block.prev,
            EOL: '\n'
          }, targets);
        } else {
          return this.renderOrgBlock(opts, block, prefix, replace);
        }
      },
      renderCode: function(opts, block, prefix, replace) {
        var hideResults, items, key, lang, m, name, nameBoiler, org, ref, ref1, ref2, ref3, results, source, sourceData, targets;
        key = "leisure-code";
        org = blockOrg(opts.data, block);
        hideResults = !showsResults(block);
        ref2 = items = getCodeItems((ref = (ref1 = org.children) != null ? ref1[0] : void 0) != null ? ref : org), name = ref2.name, source = ref2.source, results = ref2.results;
        lang = results && results.text.length > results.contentPos && !showsCode(block) ? 'results-only' : items.source instanceof HTML ? 'inline-html' : block.language;
        if (hasView(key, lang)) {
          nameBoiler = name && (m = name.text.match(keywordRE)) ? m[KW_BOILERPLATE] : void 0;
          UI.context.currentView = targets = replacementTargets(block, prefix, replace);
          sourceData = {
            id: prefix + block._id,
            codeItems: items,
            language: block.language,
            hideResults: hideResults,
            block: block,
            header: block.text.substring(0, block.codePrelen),
            source: blockSource(block),
            footer: block.text.substring(block.text.length - block.codePostlen, source.end()),
            nameBoiler: nameBoiler != null ? nameBoiler : '',
            nameText: name ? name.text.substring(nameBoiler.length, name.text.length - 1) : '',
            name: name ? name.text.substring(name.info) : '',
            afterName: name ? this.renderOrg(opts, cleanOrg(block.text.substring(name.end(), source.offset)), true) : '',
            inter: results ? block.text.substring(source.end(), results != null ? results.offset : void 0) : block.text.substring(source.end()),
            results: !results ? '' : hideResults ? "<span class='hidden'>" + (escapeHtml(results.text)) + "</span>" : resultsArea(opts, results.text, block),
            beforeResults: block.text.substring(0, (ref3 = results != null ? results.offset : void 0) != null ? ref3 : source.end())
          };
          sourceData.text = this.renderCodeOrg(opts, sourceData);
          return this.renderView(key, lang, block.next, sourceData, targets);
        } else {
          return plainMode.render(opts, block, prefix, replace);
        }
      },
      renderOrgBlock: function(opts, block, prefix, replace) {
        var text;
        text = "<span id='" + block._id + "'>" + (this.renderOrg(opts, blockOrg(opts.data, block), true)) + "</span>";
        maybeReplaceHtml(block, prefix, replace);
        return [text, block.next];
      },
      renderCodeOrg: function(opts, context) {
        var block, error, name, pos, ref, ref1, ref2, ref3, ref4, results, source, text;
        block = context.block;
        ref = context.codeItems, name = ref.name, source = ref.source, error = ref.error, results = ref.results;
        text = '';
        pos = 0;
        ref1 = this.renderCodeSegment(opts, 'name', pos, text, context), pos = ref1[0], text = ref1[1];
        ref2 = this.renderCodeSegment(opts, 'source', pos, text, context), pos = ref2[0], text = ref2[1];
        ref3 = this.renderCodeSegment(opts, 'error', pos, text, context), pos = ref3[0], text = ref3[1];
        ref4 = this.renderCodeSegment(opts, 'results', pos, text, context), pos = ref4[0], text = ref4[1];
        if (pos < block.text.length) {
          text += fancyHtml(block.text.substring(pos));
        }
        return text;
      },
      renderCodeSegment: function(opts, name, pos, text, context) {
        var block, key, org;
        if (org = context.codeItems[name]) {
          block = context.block;
          if (hasView(key = "leisure-code-" + name, block.language)) {
            if (org.offset > pos) {
              text += fancyHtml(block.text.substring(pos, org.offset));
            }
            text += (this.renderView(key, block.language, null, context))[0];
            return [org.end(), text];
          } else if (name === 'results') {
            return [org.end(), resultsArea(opts, org.allText(), block)];
          } else {
            return [pos, text];
          }
        } else {
          return [pos, text];
        }
      },
      renderOrgChunk: function(opts, org) {
        var m, t;
        t = this.renderOrg(opts, org, true);
        if (m = t.match(/\n$/)) {
          return "<span class='org-chunk'>" + (t.substring(0, t.length - 1)) + "</span><span class='hidden'>\n</span>";
        } else {
          return "<span class='org-chunk'>" + t + "</span>";
        }
      },
      renderExample: function(opts, org) {
        var end, key, start, text;
        start = org.text.substring(0, org.contentPos);
        text = org.exampleText();
        end = org.text.substring(org.contentPos + org.contentLength);
        if (hasView(key = "leisure-example")) {
          return (this.renderView(key, null, null, {
            start: start,
            text: text,
            end: end,
            org: org
          }))[0];
        } else {
          return "<span class='hidden'>" + (escapeHtml(start)) + "</span><span class='example'>" + (fancyHtml(text)) + "</span><span class='hidden'>" + (escapeHtml(end)) + "</span>";
        }
      },
      renderOrg: function(opts, org, start) {
        var child, i, text;
        text = org instanceof SimpleMarkup ? this.renderSimple(opts, org) : org instanceof Link ? this.renderLink(opts, org) : org instanceof Fragment ? ((function() {
          var j, len, ref, results1;
          ref = mergeMeat(org).children;
          results1 = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            child = ref[i];
            results1.push(this.renderOrg(opts, child));
          }
          return results1;
        }).call(this)).join('') : org instanceof ListItem ? this.renderList(opts, org) : org instanceof Drawer ? this.renderDrawer(opts, org) : org instanceof Example ? this.renderExample(opts, org) : insertBreaks(fancyHtml(org.allText()));
        if (start) {
          return prefixBreak(text);
        } else {
          return text;
        }
      },
      renderHtml: function(opts, org) {
        return "<span class='hidden'>" + (escapeHtml(org.leading)) + "</span>" + ($(org.content)[0].outerHTML) + "<span class='hidden'>" + (escapeHtml(org.trailing)) + "</span>";
      },
      renderList: function(opts, org) {
        var child, i, j, ref, text;
        classifyListItems(org);
        text = org.firstItem ? '<ul>' : '';
        text += "<li><span class='hidden'>" + (escapeHtml(org.text.substring(0, org.contentOffset))) + "</span>" + (((function() {
          var j, len, ref, results1;
          ref = org.children;
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            child = ref[j];
            results1.push(this.renderOrg(opts, child));
          }
          return results1;
        }).call(this)).join(''));
        for (i = j = 0, ref = org.closeCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          text += '</ul>';
        }
        return text;
      },
      renderLink: function(opts, org) {
        var block, c, data, desc, error, guts, ignore, j, leisureMatch, len, obj, objectName, ref, src, title, type, typeName, viewName;
        if (leisureMatch = org.isLeisure()) {
          ignore = leisureMatch[0], objectName = leisureMatch[1], viewName = leisureMatch[2], typeName = leisureMatch[3];
          data = UI.context.opts.data;
          error = !(obj = data.getBlockNamed(objectName)) ? "No object named " + objectName : !(obj = data.getYaml(block = data.getBlockNamed(objectName))) ? "Object " + objectName + " isn't yaml" : !(type = typeName || (obj != null ? obj.type : void 0)) ? "No type field in object " + objectName : !hasView(type, viewName) ? "No view '" + (viewKey(type, viewName)) + "'" : void 0;
          if (error) {
            return "<span class='error' data-noncontent title='" + (escapeAttr(error)) + "'><b>âœ–</b></span>" + (fancyHtml(org.allText()));
          } else {
            return "<span class='hidden link'>" + (escapeHtml(org.allText())) + "</span><span data-noncontent contenteditable='false'>" + (renderView(type, viewName, obj, null, block, objectName)) + "</span>";
          }
        } else if (org.isImage()) {
          title = ((desc = org.descriptionText()) ? " title='" + (fancyHtml(desc)) + "'" : "");
          src = fancyHtml(org.path);
          if (org.path.indexOf('file:') === 0) {
            src = prevImageSrc(src);
          }
          return (opts.renderImage(src, title)) + "<span class='hidden link'>" + (escapeHtml(org.allText())) + "</span>";
        } else {
          guts = '';
          ref = org.children;
          for (j = 0, len = ref.length; j < len; j++) {
            c = ref[j];
            guts += this.renderOrg(opts, c);
          }
          if (!guts) {
            return "<span class='hidden link'>[[</span><a onclick='Leisure.followLink(event)' href='" + org.path + "'>" + org.path + "</a><span class='hidden'>]]</span>";
          } else {
            return "<span class='hidden link'>[[" + org.path + "][</span><a onclick='Leisure.followLink(event)' href='" + org.path + "'>" + guts + "</a><span class='hidden'>]]</span>";
          }
        }
      },
      renderSimple: function(opts, org) {
        var c, guts, j, len, ref, text;
        guts = '';
        ref = org.children;
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          guts += this.renderOrg(opts, c);
        }
        text = (function() {
          switch (org.markupType) {
            case 'bold':
              return "<b>" + guts + "</b>";
            case 'italic':
              return "<i>" + guts + "</i>";
            case 'underline':
              return "<span style='text-decoration: underline'>" + guts + "</span>";
            case 'strikethrough':
              return "<span style='text-decoration: line-through'>" + guts + "</span>";
            case 'code':
              return "<code>" + guts + "</code>";
            case 'verbatim':
              return "<code>" + guts + "</code>";
            default:
              return guts;
          }
        })();
        return "<span class='hidden'>" + org.text[0] + "</span>" + text + "<span class='hidden'>" + (goodText(org.text[0])) + "</span>";
      },
      renderDrawer: function(opts, org) {
        if (org.name.toLowerCase() === 'properties') {
          return "<span class='hidden'>" + (escapeHtml(org.allText())) + "</span>";
        } else {
          return "<span class='org-properties'>" + (fancyHtml(org.allText())) + "</span>";
        }
      },
      showingSlides: function(opt) {
        return opt.editor.node.is('.slides');
      },
      setSlideMode: function(opt, flag) {
        var slides;
        if (flag) {
          opt.editor.node.addClass('slides');
          slides = this.getSlides(opt);
          slides.removeClass('firstSlide').removeClass('lastSlide');
          slides.first().addClass('firstSlide');
          slides.last().addClass('lastSlide');
          return this.showSlide(opt, slides.first());
        } else {
          opt.editor.node.removeClass('slides');
          $(opt.editor.node).find('.currentSlide').removeClass('currentSlide');
          return opt.currentSlide = null;
        }
      },
      getSlides: function(opt) {
        return $(opt.editor.node).find('[data-view=leisure-top-headline], [data-view=leisure-top-chunk]');
      },
      firstSlide: function(opt) {
        return this.getSlides(opt).first();
      },
      lastSlide: function(opt) {
        return this.getSlides(opt).last();
      },
      showSlide: function(opt, slide, slides) {
        var top;
        slides = slides != null ? slides : this.getSlides(opt);
        top = $(opt.editor.node);
        top.removeClass('firstSlide').removeClass('lastSlide');
        $(opt.editor.node).find('.currentSlide').removeClass('currentSlide');
        $(slide).addClass('currentSlide');
        if ($(slide)[0] === slides[0]) {
          top.addClass('firstSlide');
        }
        if ($(slide)[0] === _.last(slides)) {
          top.addClass('lastSlide');
        }
        return opt.currentSlide = opt.idForNode($(slide).find('[data-block]:first'));
      },
      showNextSlide: function(opt) {
        var next;
        if (this.showingSlides(opt)) {
          next = $('.currentSlide').next('[data-view=leisure-top-headline], [data-view=leisure-top-chunk]');
          if (next.length) {
            this.showSlide(opt, next);
            return true;
          }
        }
        return false;
      },
      showPrevSlide: function(opt) {
        var prev;
        if (this.showingSlides(opt)) {
          prev = $('.currentSlide').prev('[data-view=leisure-top-headline], [data-view=leisure-top-chunk]');
          if (prev.length) {
            this.showSlide(opt, prev);
            return true;
          }
        }
        return false;
      }
    };
    isSidebar = function(block) {
      var ref;
      return (block != null ? (ref = block.properties) != null ? ref.note : void 0 : void 0) === 'sidebar';
    };
    optWrench = function(block) {
      var k, props, ref, v, wrench;
      if (block.properties && !_.isEmpty(block.properties)) {
        props = "<div><b>Properties</b></div>";
        ref = block.properties;
        for (k in ref) {
          v = ref[k];
          props += "<p>:" + k + ": " + v;
        }
        wrench = $("<i class='fa fa-wrench'></i>")[0];
        wrench.setAttribute('title', props);
        return wrench.outerHTML;
      } else {
        return '';
      }
    };
    insertBreaks = function(text) {
      return text.replace(/\n\n/g, function(match, offset, str) {
        if (str[offset + 2] === '\n') {
          return "\n<span class='hidden'>\n</span><span contenteditable='false'><div style='white-space: pre; height: 2em' data-noncontent></div></span><div style='height: 1em; white-spaceX: pre' data-noncontent>\n</div><span class='hidden'></span>";
        } else {
          return "\n<span class='hidden'>\n</span><span contenteditable='false'><div style='height: 2em; white-space: pre' data-noncontent></div></span>";
        }
      });
    };
    prefixBreak = function(text) {
      if (text[0] === '\n' && text[1] !== '\n') {
        return "\n<div style='height: 2em; white-space: pre' data-noncontent>\n</div>" + (text.substring(1));
      } else {
        return text;
      }
    };
    createValueSliders = function() {
      var j, len, num, ref, results1;
      ref = $(UI.context.currentView).find('.token.number');
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        num = ref[j];
        results1.push($(num).on('click', function() {
          return showValueSlider(this);
        }));
      }
      return results1;
    };
    showValueSlider = function(number) {
      var blockOff, data, editor, widget;
      editor = findEditor(number);
      data = editor.options.data;
      widget = editor.node.find('[name=valueSlider]');
      blockOff = editor.blockOffset(number, 0);
      currentSlider = {
        editor: editor,
        data: data,
        widget: widget,
        sliding: true
      };
      widget.removeClass('hidden');
      widget.position({
        my: 'center top',
        at: 'center bottom',
        of: number
      });
      data.addMark('__slider__', data.docOffsetForBlockOffset(blockOff));
      return setSliderValue(Number(number.textContent));
    };
    setSliderValue = function(val) {
      var widget;
      widget = currentSlider.widget;
      if ((-50 <= val && val <= 50)) {
        widget.slider('option', 'min', Math.min(-100, -Math.abs(val * 2)));
        widget.slider('option', 'max', Math.max(100, Math.abs(val * 2)));
      } else if (val > 50) {
        widget.slider('option', 'min', 0);
        widget.slider('option', 'max', val * 2);
      } else {
        widget.slider('option', 'min', val * 2);
        widget.slider('option', 'max', 0);
      }
      return widget.slider('value', val);
    };
    setSliding = function(flag) {
      if (!flag && currentSlider) {
        setSliderValue(currentSlider.widget.slider('value'));
      }
      return setTimeout((function() {
        return currentSlider != null ? currentSlider.sliding = flag : void 0;
      }), 1);
    };
    slideValue = function() {
      var block, blockOff, cs, m, newText, start;
      if ((cs = currentSlider) && !cs.editor.options.awaitingGuard) {
        start = cs.data.getMarkLocation('__slider__');
        blockOff = cs.data.blockOffsetForDocOffset(start);
        block = cs.editor.options.getBlock(blockOff.block);
        m = numPat.exec(block.text.substring(blockOff.offset));
        newText = String(currentSlider.widget.slider('value'));
        if (m[0] !== newText) {
          if (block.local) {
            return cs.editor.options.replaceText({
              start: start,
              end: start + m[0].length,
              text: newText,
              source: 'edit'
            });
          } else {
            cs.editor.options.awaitingGuard = true;
            return cs.editor.options.batchReplace((function() {
              var batch, blockStart, j, len, r, ref, repl;
              start = cs.data.getMarkLocation('__slider__');
              blockOff = cs.data.blockOffsetForDocOffset(start);
              block = cs.editor.options.getBlock(blockOff.block);
              m = numPat.exec(block.text.substring(blockOff.offset));
              newText = String(currentSlider.widget.slider('value'));
              if (block.local) {
                return cs.editor.options.replaceText({
                  start: start,
                  end: start + m[0].length,
                  text: newText,
                  source: 'edit'
                });
              } else if (m[0] === newText) {
                return [];
              } else {
                blockStart = cs.editor.options.data.offsetForBlock(block);
                repl = {
                  start: start,
                  end: start + m[0].length,
                  text: newText,
                  gStart: blockStart,
                  gEnd: blockStart + block.text.length
                };
                batch = [repl];
                ref = cs.editor.options.replaceTextEffects(repl.start, repl.end, repl.text, true).repls;
                for (j = 0, len = ref.length; j < len; j++) {
                  r = ref[j];
                  batch.push(r);
                }
                return batch;
              }
            }), (function() {
              return cs.editor.options.awaitingGuard = false;
            }), (function() {
              return cs.editor.options.awaitingGuard = false;
            }));
          }
        }
      }
    };
    mayHideValueSlider = function() {
      if (currentSlider && !(currentSlider != null ? currentSlider.sliding : void 0)) {
        currentSlider.data.removeMark('__slider__');
        currentSlider.widget.addClass('hidden');
        return currentSlider = null;
      }
    };
    showsCode = function(codeBlock) {
      var exports, ref, ref1;
      exports = (ref = codeBlock.codeAttributes) != null ? (ref1 = ref.exports) != null ? ref1.split(' ') : void 0 : void 0;
      return !exports || !(indexOf.call(exports, 'results') >= 0);
    };
    showsResults = function(codeBlock) {
      var exports, ref, ref1;
      exports = (ref = codeBlock.codeAttributes) != null ? (ref1 = ref.exports) != null ? ref1.split(' ') : void 0 : void 0;
      return !exports || !(indexOf.call(exports, 'code') >= 0);
    };
    _workSpan = null;
    workSpan = function() {
      return _workSpan || createWorkSpan();
    };
    createWorkSpan = function() {
      return _workSpan = $("<span></span>");
    };
    goodHtml = function(text) {
      var ref;
      return (ref = workSpan().html(text).html()) != null ? ref : '';
    };
    goodText = function(text) {
      var ref;
      return (ref = workSpan().text(text).html()) != null ? ref : '';
    };
    resultsArea = function(opts, results, block) {
      var firstResult;
      firstResult = results.indexOf('\n') + 1;
      if (false && isYamlResult(block)) {
        return "<span class='hidden'>" + (results.substring(0, firstResult)) + "</span><span class='yaml results-verbatim' data-noncontent>" + (results.substring(firstResult).replace(/^(: )(.*\n)/gm, function(m, g1, g2) {
          return goodHtml(g2);
        })) + "</span>";
      } else if (!firstResult || results[firstResult] === ':') {
        return "<span class='hidden'>" + (goodText(results)) + "</span><span class='results-verbatim' data-noncontent>" + (results.substring(firstResult).replace(/^(: )(.*\n)/gm, function(m, g1, g2) {
          return goodHtml(g2);
        })) + "</span>";
      } else {
        return "<span class='hidden'>" + (results.substring(0, firstResult)) + "</span>" + (fancyMode.renderOrg(opts, cleanOrg(results.substring(firstResult))));
      }
    };
    plainEditDiv = function(div, data) {
      $(div).addClass('plain');
      return new LeisureEditCore($(div), new OrgEditing(data));
    };
    fancyEditDiv = function(div, data) {
      return new LeisureEditCore($(div), new OrgEditing(data).setMode(fancyMode));
    };
    prismAliases = {
      html: 'markup',
      coffee: 'coffeescript',
      cs: 'coffeescript',
      js: 'javascript',
      lisp: 'scheme',
      leisure: 'leisure'
    };
    prismHighlight = function(lang, text) {
      var l;
      if (l = prismAliases[lang]) {
        lang = l;
      }
      if (Prism.languages[lang]) {
        return Prism.highlight(text, Prism.languages[lang], lang);
      } else {
        return "<span class='unknown-language'>" + (fancyHtml(text)) + "</span>";
      }
    };
    replacementTargets = function(block, prefix, replace) {
      var targets;
      if (replace && (targets = $("#" + prefix + block._id)) && targets.length) {
        return targets.closest('[data-view]');
      }
    };
    maybeReplaceHtml = function(block, prefix, html, replace) {
      var ref;
      if ((ref = replacementTargets(block, prefix, replace)) != null) {
        ref.replaceWith(html);
      }
      if (replace) {
        return initializePendingViews();
      }
    };
    cleanOrg = function(text) {
      return blockOrg(null, {
        text: text
      });
    };
    mergeMeat = function(fragment) {
      var c, i, j, len, newC, newChildren, prevMeat, ref;
      newChildren = [];
      prevMeat = null;
      ref = fragment.children;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        c = ref[i];
        if (c.__proto__ === Meat.prototype) {
          if (!prevMeat) {
            prevMeat = new Meat(c.text, c.offset);
            newChildren.push(prevMeat);
          } else {
            prevMeat.text += c.text;
          }
        } else {
          if (prevMeat) {
            prevMeat = null;
          }
          newC = _.clone(c);
          newC.__proto__ = c.__proto__;
          newChildren.push(newC);
        }
      }
      return new Fragment(fragment.offset, newChildren).linkNodes();
    };
    mergeExports({
      plainMode: plainMode,
      fancyMode: fancyMode,
      toggleSlideMode: toggleSlideMode,
      blockVars: blockVars,
      createValueSliders: createValueSliders,
      slideValue: slideValue,
      mayHideValueSlider: mayHideValueSlider,
      setSliding: setSliding,
      cleanOrg: cleanOrg,
      showsCode: showsCode,
      showsResults: showsResults
    });
    return {
      plainMode: plainMode,
      fancyMode: fancyMode,
      plainEditDiv: plainEditDiv,
      fancyEditDiv: fancyEditDiv
    };
  });

}).call(this);

//# sourceMappingURL=modes.js.map
