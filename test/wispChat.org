#+TITLE:Wisp Chat Test
* Namespace
#+BEGIN_SRC wisp :results def
    (ns chat
      (:require
       [wisp.runtime :refer [print]]
       [wisp.ast :refer [symbol symbol? keyword? keyword name namespace
                         gensym unquote? unquote-splicing? quote?
                         syntax-quote? quote-string pr-str]]
       [wisp.sequence :refer [lazy-seq lazy-seq? list? list cons
                              sequential? reverse map filter reduce
                              count empty? first second third rest
                              last butlast take take-while drop conj
                              assoc concat seq seq? vec sort repeat
                              every? some partition interleave nth]]
       ))
#+END_SRC
* Testing
:properties:
:namespace: chat
:end:
#+BEGIN_SRC wisp :results dynamic
(+ "3" " " nil " " null " " ())
null
(rest '(a))
(rest [1 2])
(sum 1 2 3)
(subtract 10 1 2)
(strict-equal? 1 2)
(greater-than 1)
(less-than 1)
#+END_SRC

Hit C-c C-c to execute this -- it should make new peeps data

#+BEGIN_SRC wisp
(test)
#+END_SRC
* Shared data
:properties:
:name: shared
:end:
#+NAME: gameState
#+BEGIN_SRC yaml
currentId: 0
peeps: []
#+END_SRC
* Notes on collaboration
Collaborative code must be registered by name so the "session master" can run it
on a peer's behalf.
* GUI
#+BEGIN_HTML :var block=playerState :controller player-controller

#+END_HTML
* Code
:properties:
:namespace: chat
:end:
properties has (ns chat (:require [wisp.sequence :refer [map]] [wisp.runtime :refer [print]]))
** Utilities
#+BEGIN_SRC wisp :results def
  (defn sum [& args]
    (loop [tot 0
           a args]
      (if (empty? a)
        tot
        (recur (+ tot (first a)) (rest a)))))
  (defn multiply [& args]
    (loop [tot 1
           a args]
      (if (empty? a)
        tot
        (recur (* tot (first a)) (rest a)))))
  (defn subtract [& args]
    (if (empty? args)
      (throw (Error "Wrong number of arguments (0) passed to: subtract"))
      (loop [tot (first args)
             a (rest args)]
        (if (empty? a)
          tot
          (recur (- tot (first a)) (rest a))))))
  (defn divide [& args]
    (if (empty? args)
      (throw (Error "Wrong number of arguments (0) passed to: divide"))
      (loop [tot (first args)
             a (rest args)]
        (if (empty? a)
          tot
          (recur (/ tot (first a)) (rest a))))))
  (defn strict-equal? [& args]
    (if (or (empty? args) (empty? (rest args)))
      (throw (Error (str "Wrong number of arguments (" (.-length args)  ") passed to: strict-equal?")))
      (let [target (first args)]
        (loop [a (rest args)]
          (cond (empty? a) true
                (not (== target (first a))) false
                :else (recur (rest a)))))))
  (defn- gt [name args]
    (loop [min (first args)
           a (rest args)]
      (if (empty? a)
        true
        (and (> min (first a)) (recur (first a) (rest a))))))
  (defn- lt [name args]
    (loop [max (first args)
           a (rest args)]
      (if (empty? a)
        true
        (and (< max (first a)) (recur (first a) (rest a))))))
  (defn not-greater-than [& args] (not (gt "not-greater-than" args)))
  (defn greater-than [& args] (gt "greater-than" args))
  (defn not-less-than [& args] (not (lt "not-less-than" args)))
  (defn less-than [& args] (lt "less-than" args))
  (print "utilties")
#+END_SRC
** Initial defs
#+BEGIN_SRC wisp :results def
  (def data Lounge.data)
  (defmacro collaboratively [name & args] `(.doCollaboratively data (.-name ~name) ~args))
  (defn registerCollaborativeFuncs [funcs] (map #(.registerCollaborativeCode data %1) funcs))
  (defn findPeeps [] (.find data "peeps"))
  (defn nextId []
    (let [game (.getData data "gameState")
          id (+ 1 (:currentId game))]
      (.log window.console "currentId: " id)
      (set! (:currentId game) id)
      (.setData data "gameState" game)
      id))
  (defn addPeep []
    (let [peep {:id (nextId)}]
      (.appendDataToHeadline
       data "shared" nil
       peep
       {:flowLevel 3 :index "peeps id"})
      peep))
#+END_SRC

#+BEGIN_SRC wisp :results def
  (defn rtest [] (print (addPeep)))
  (defn addChatLine [] (.log console "hello"))

  (registerCollaborativeFuncs
   [
    addChatLine
    rtest
    ])
  (defn test []
    (collaboratively rtest)
    nil)
  (.log window.console "hello")
#+END_SRC

* Local data
#+NAME: playerState
#+BEGIN_SRC yaml :local
maluba: 3
#+END_SRC
