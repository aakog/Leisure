* anon
#+BEGIN_SRC leisure :results dynamicX
person name addr = \f . f name addr
getType (person 3 4)
funcInfo (person 1 2)
funcName (person 1 2)
getType 1
getType \x . x
p = person 1 2
person 2 3

#+END_SRC
#+RESULTS:
: 
: person
: nil
: a none
: number
: *function
: 
: a person
* numbers
#+BEGIN_SRC leisure :results dynamic
ascending x = [x | ascending x + 1]
naturals = ascending 1
evens = map (* 2) naturals
print (at naturals 4)
print (at evens 4)
#+END_SRC
#+RESULTS:
: 5
: 10

#+BEGIN_SRC leisure :results dynamic
at [1 2 3 4] 2
#+END_SRC
#+RESULTS:
: 3

* Hello
duhasdfasdfasdfdas
(leisure/conInfo-websocket leisure/bufferConnection)
(setf leisure/bufferConnection nil)
(leisure/withBuffer leisure/bufferConnection
  (message (current-buffer)))
(leisure/getBuffer leisure/bufferConnection)
(leisure/conInfo-bufferName leisure/bufferConnection)
#+BEGIN_SRC css

#+END_SRC

* Duh
- duhaaa
- asdf
- adsf
adsfsdf
con
asdf
asdfasdf
asddf
asdfd
