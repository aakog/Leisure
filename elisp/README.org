* Leisure connection mode for Emacs
This is a minor mode that connects an emacs buffer to Leisure web page.

*NOTE: LEISURE CURRENTLY ONLY RUNS IN CHROMIUM-BASED BROWSERS (LIKE CHROME).*

*If you are in Emacs* and you have leisure-connection-mode loaded, you
can try this out by [[elisp:leisure-connection-mode][CLICKING THIS LINK]] and then switching to your
newly opened browser page (if it doesn't automatically switch you to
the browser).

*NOTE:* We're not orgmode experts and we need help from people who are!
* Bidirectional connection to Emacs
Leisure is an editable, web-based computing environment that uses
orgmode format and it can hook up to Emacs.

Toggling leisure-connection-mode will open and close a web page associated with
the current buffer.

You can also initiate connections from Leisure to emacs, provided that
you have started Emacs' Leisure service.  Leisure-connection-mode
automatically turns on the service but you can also control it with
the leisure-start and leisure-stop commands.

Once connected, changes in Emacs are mirrored in Leisure, and vice
versa.  In Leisure, if you hit C-C C-C or click an elisp link, it will
delegate that to Emacs. Leisure will also attempt to fetch "file:"
image data from Emacs so it can display the results of your file-based
computations.
* What is Leisure?
Leisure is an interactive, web-based, document-oriented exploratory
computing environment that implements *Illuminated Programming* for
people at all levels of expertise.  *Illuminated Programming* is our
term for interactive documents that are applications, source code, and
data, all rolled up into one.  Sort of a zero-install version of
reproducible research.
* Work in progress
** Leisure is not stable, yet
- Leisure is a *work in progress*
- It's *NOT HARDENED*
  - *Don't rely on Leisure for super-important tasks yet!*
  - Leisure won't destroy Emacs' undo history, so it *should* be safe to use
- It doesn't support parts of orgmode, yet
  - Like tables
  - And stuff
  - We'll get there
  - There's a lot to do, pitch in and help!
** But that doesn't mean you can't use it!
- You can still benefit from Leisure's features, like interactive views, value sliders, etc.
- You can edit in Emacs and keep a Leisure browser next to it to see your formatted document as you type
- Leisure just changes the document text and then sends to Emacs.
- If Leisure gets messed up, you can just reload the webpage one of these ways!
  - revert the buffer
  - use the [[elisp:leisure-reload][leisure-reload]] command
  - use the browser to reload the page
  - close the page and reopen it from Emacs
  - execute [[elisp:leisure-connection-mode]] to close and open the browser window
  - Leisure will connect right back to your Emacs buffer
- You can use Emacs' fabulous undo support if you use Leisure to
  make a change and it somehow messes up.
  - Leisure and Emacs are just sending text changes to each other
* Emacs code-execution
Hit C-c C-c in this code block in Leisure and it will attempt to
execute in Emacs.

#+BEGIN_SRC sh :results output
ls /tmp
#+END_SRC

Click this in Leisure and it will [[elisp:(message "Hello from Leisure!")][show a message]] in Emacs.
** (Why) does Leisure flicker after an Emacs command?
- When Emacs asks you permission to execute a code block, the Emacs
window takes input focus
- After the command executes, the Leisure connection code in Emacs attempts to send focus back to the browser.
- Browser focus is a tricky thing because of spammers

You may notice a popup notice in your browser's location bar.  If you
enable popups from Leisure, the browser will be able to take focus
back after it executes a remote Emacs command.

Once you enable popups, the browser will flicker, slightly when it
takes focus back.  This is because in order to reactivate the browser,
Leisure has to quickly open a temporary window and that is what causes
the flicker.
* Emacs file service
When connected to Emacs, Leisure uses Emacs to access file: links so
that it can display them in the browser.

Here's the emacs logo from a file link: [[file:EmacsSplashScreen.png]]

When not connected to Emacs, Leisure attempts to use local urls
instead.  Sometimes that works :).
* Code syntax highlighting
Leisure uses [[http://prismjs.com/][Prism]] to highlight syntax as you type.  Here's an
example:

#+BEGIN_SRC cs
# Some CoffeeScript
@maluba = (x)-> x + 52
#+END_SRC
* Source and slides
- You can click the martini glass to view/edit orgmode source
- You can use the toolar to start a slideshow using top-level headlines as slides
* Themes
Leisure was built to be modded.
- You can choose themes in the Leisure toolbar
- You can set a default theme in the Emacs [[elisp:(customize-group-other-window "leisure")][leisure customize group]]
- Your documents can override a *lot* of how Leisure renders
- You can experiment with the built-in themes in the "Visual" panel above
* Views
Leisure uses Handlebars to define HTML views for different types of data.
This is what it uses for its normal display (called "fancy mode").
- You can tweak Leisure's rendering by overriding parts of [[elisp:(browse-url-emacs "http://textcraft.org/newLeisure/src/defaults.lorg")][defaults.lorg]] in your document
* HTML templates
Leisure uses [[http://handlebarsjs.com/][Handlebars]] templates and it use data from the document
when it renders them.

#+NAME: fred
This is Fred.  The HTML snippet below displays Fred's name and the
name's length.  Change it to see the HTML below update.
#+BEGIN_SRC yaml
name: Fred
#+END_SRC

Here's some Html that uses Fred and Fred's controller.

#+BEGIN_HTML :var __proto__=fred :controller fred-controller
<b>Hello {{name}}</b>
Name length: <b name='len'></b>
#+END_HTML

#+NAME: fred-controller
This is Fred's controller
#+BEGIN_SRC cs
@initializeView = (view, data)->
  $(view).find('[name=len]').html data.name.length
#+END_SRC
* View definitions
Leisure uses "leisure:" links to display data, based on the data's
"type" field.  You can nest views and even pick alternate views for
the same types of data by specifying a view name in the link.  At this
point, Leisure uses YAML data for its views.

Leisure uses this presentation system when it displays every Leisure
document and you can redefine how Leisure displays its document parts
in the documents themselves (but you have to be verrry careful when
you redefine things at such a low-level.  So a lot of Leisure's
document display is defined in Leisure.  It's so meta

#+NAME: rotator
This YAML data controls the rotating square and line below.
- Click the degrees value and move the slider that pops up
- When you let go of the sider, it snaps to the middle so the value can keep changing
- Watch it update in both Emacs and Leisure
- You can edit the value in Emacs and it will update in Leisure
#+BEGIN_SRC yaml 
type: rotator
degrees: 90
#+END_SRC

[[leisure:rotator]] [[leisure:rotator/two]]

Fiddle with these view definitions and you'll see the views change.

#+BEGIN_SRC html :defview rotator
<div style='padding: 25px; display: inline-block'>
  <div style='transform: rotate({{degrees}}deg); height: 100px;width: 100px;background: green'></div>
</div>
#+END_SRC

#+BEGIN_SRC html :defview rotator/two
<div style='padding: 25px; padding-left: 100px; display: inline-block'>
  <div style='transform-origin: 5px 100px; transform: rotate(calc(90deg - {{degrees}}deg));height: 100px;width: 10px;background: red'></div>
</div>
#+END_SRC
* Media
It's the web.  You can has media.

[[https://imgs.xkcd.com/comics/lisp_cycles.png]]

Here is a nice video by John Kitchin about Orgmode

#+BEGIN_HTML
<iframe width="420" height="315" src="https://www.youtube.com/embed/fgizHHd7nOo" frameborder="0" allowfullscreen></iframe>
#+END_HTML
* Babel
If you are connected to Emacs and have access to plantuml and ditaa, you
can change these diagrams and the pictures will update in Leisure.

#+begin_src plantuml :file sequence.png :exports results :cache yes
title Example Sequence Diagram
activate Client
Client -> Server: Session Initiation
note right: Client requests new session
activate Server
Client <-- Server: Authorization Request
note left: Server requires authentication
Client -> Server: Authorization Response
note right: Client provides authentication details
Server --> Client: Session Token
note left: Session established
deactivate Server
Client -> Client: Saves token
deactivate Client
#+end_src

#+results:
[[file:sequence.png]]

* Features in Old Leisure
This new version doesn't have all of the features of the old version, yet...
** Collaboration
The new version will take a more peer-to-peer approach, still using a
server but designating the session-initiator as the "master".

#+begin_src ditaa :file communication.png :cmdline -r -s 0.8 :exports results :cache yes
                                                   +-----------------------------+
                                                   |            User             |
                                                   +---+---------------------+---+
                                                       |                     |
                                                       v                     v
     +-----------------------------+             +-----------+           +-------+
     |            User             |             |  Leisure  | <-------> | Emacs |
     +---+---------------------+---+             +-----------+  Changes  +-------+
         |                     |                       ^
         v                     v                       |
     +-------+            +---------+       Changes    |
     | Emacs |<---------->| Leisure |<-----------------+ 
     +-------+   Changes  +---------+                  |
                                                       |
                                                       v
                                                 +-----------+  Changes  +-------+
                                                 |  Leisure  | <-------> | Emacs |
                                                 +-----------+           +-------+
                                                       ^                     ^
                                                       |                     |
                                                   +---+---------------------+---+
                                                   |            User             |
                                                   +-----------------------------+

#+end_src

#+RESULTS[dc18a5bec7d75eaee8ffea84abd0ad3679c1d5ed]:
[[file:communication.png]]
** Code Discussions
The old version uses GitHub issues so other people can discuss your
code.  but we may switch to a service(s) like [[https://disqus.com/][Disqus]].
** Test cases
Converting code into a visual test case result is an imporant feature
we plan to bring back soon.
* Some Leisure History
Leisure started out as an experimental, dynamically typed, lazy,
functional programming language with strong support for
metaprogramming (quite a mouthful, isn't it?).  Soon, TEAM CTHUHLU
wanted to extend our experiment into programming environments.
Leisure was already web-based, why shouldn't it exploit the powers of
the Web?

We didn't start from orgmode -- we hadn't even heard of it.  We did,
however, already know the power of text; we had experimented with
text-based computing environments more than [[http://ober.sourceforge.net/][10 years ago]], we even had
a text-based auto-formatted table that could use spreadsheet formulas!
So when we did learn about orgmode, we immediately felt a great
affinity for it.

We started with Markdown and it was great.  For a while.  When we
decided that Leisure documents should contain data, as well as code,
we started running up against Markdown's lack of metadata.

Investigations pointed us towards orgmode.
* How you can help
- Report bugs
- Contribute code
- Contribute documentation
- Request features
* Hidden slides
There are some hidden settings and you can reveal and hide them by
clicking Show/Hide at the top of the page.
* Settings
:properties:
:hidden: true
:end:
#+STARTUP: showeverything
