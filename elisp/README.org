* What is Leisure? ([[http://zot.github.io/Leisure/?load=elisp/README.org][this document]], [[https://raw.githubusercontent.com/zot/Leisure/master/elisp/README.org][source]], [[https://github.com/zot/Leisure/][repository]])
Leisure is an open-source web-based platform for interactive editable documents
in orgmode format that provides what we call *[[https://en.wikipedia.org/wiki/Illuminated_manuscript][Illuminated Programming]]*. Leisure
documents are:
- collaborative (for editing and running applications)
- edited modelessly (like Emacs!)
- interactive
- graphical
- web-based (zero install)
- codetime/runtime modeless (same environment for developing and running)
*[[https://en.wikipedia.org/wiki/Illuminati][Illuminated Programming]]* is our term for application, source code, and data,
all rolled up into one interactive, collboratively editable document. A Leisure
document might hide its code and data and appear to be just an app or it might
present the code and data along with the app(s), like [[http://textcraft.org:3333/#load=/demo/game.lorg][this game]] in the old
version of Leisure does, or it might be mostly a document with interactive
examples in it.

Some of these ideas have been around for quite a while, [[http://hypercard.org/][Hypercard]], [[http://www.wolfram.com/mathematica/][Mathematica]],
and [[http://tiddlywiki.com/][Tiddly Wiki]] implement interactive documents that contain code and data, as
do [[http://orgmode.org/][Emacs' orgmode]] (of course) and [[https://jupyter.org/][Jupyter/iPython Notebook]]. Leisure is trying to
add a few ideas to this field, like social coding, collaborative editing, and
application collaboration.

Leisure is just HTML/JS/CSS and it has a pretty simple architecture. It only
needs a static HTML server for basic document operation. For collaboration,
there is a small JavaScript server that can run in node.js. It's easy to manage
because it has so few requirements, which means less worry about language or
library version conflicts.

Leisure can also connect directly to an Emacs orgmode buffer. Once connected,
Emacs and Leisure will mirror changes between each other.

TEAM CTHULHU has been working (somewhat) quietly on Leisure since 2011. This is
a new version, we've been overhauling a lot of it, and we're finally ready to
talk more publicly about it.

*NOTE: LEISURE CURRENTLY ONLY RUNS IN CHROMIUM-BASED BROWSERS (LIKE CHROME).*
* Views
** Click the degrees value and move the slider that pops up
#+NAME: rotator
#+BEGIN_SRC yaml
type: rotator
degrees: 98
#+END_SRC

A couple rotator views: [[leisure:rotator]] [[leisure:rotator/two]]
** Fiddle with these view definitions and you'll see the views change.

#+BEGIN_SRC html :defview rotator
<div style='padding: 25px; display: inline-block; vertical-align: middle'>
  <div style='transform: rotate({{degrees}}deg); height: 100px;width: 100px;background: green'></div>
</div>
#+END_SRC

#+BEGIN_SRC html :defview rotator/two
<div style='padding: 25px; padding-left: 100px; display: inline-block; vertical-align: middle'>
  <div style='transform-origin: 5px 100px; transform: rotate(calc(90deg - {{degrees}}deg));height: 100px;width: 10px;background: red'></div>
</div>
#+END_SRC
** The rotating square and line reflect the YAML data
- Edit the "degrees" value and the views change
- When you let go of the sider, it snaps to the middle so the range can extend
- If you are connected to Emacs
  - You can watch the degrees value update in Emacs
  - You can edit the value in Emacs and it will update in Leisure
** "leisure:" links
"leisure:" links display views, based on data's "type" fields. You can nest
views and even pick alternate views for the same types of data by specifying a
view name in the link. Leisure defines views in HTML/CSS, controllers in any
supported code block, and data in YAML.

Leisure uses this presentation system when it displays every Leisure
document and you can redefine how Leisure displays its document parts
in the documents themselves (but you have to be verrry careful when
you redefine things at such a low-level.  So a lot of Leisure's
document display is defined in Leisure.  It's so meta.
* Searches with live, editable results
Click the search button above or this
#+BEGIN_HTML
 <button name='openSearch'>Search</button>
<script>
console.log("current script: " + Leisure.UI.currentScript)
  $(Leisure.UI.currentScript.parentNode).find('[name=openSearch]').button()
    .on('click', function(e){Leisure.openSearch(e);});
</script>
#+END_HTML
button, here, and type *rot* into the field at the top of the window. Then, you
can edit the result inside the search window.
* Leisure connection mode for Emacs
Leisure comes with a minor mode that connects an emacs buffer to a Leisure web page.

*If you are viewing this in Emacs* and you already have
leisure-connection-mode loaded, you can try this out by [[elisp:leisure-connection-mode][CLICKING THIS
LINK]] in emacs.

Leisure uses orgmode as its file format and it can hook up to Emacs.

*NOTE:* We're not orgmode experts and we need help from people who are!

Toggling leisure-connection-mode will open and close a web page
connected to the current buffer.

You can also start in Leisure and connect to Emacs, provided that
Emacs is running the Leisure service.  Leisure-connection-mode
automatically turns on the service but you can also control it with
the [[elisp:leisure-start]] and [[elisp:leisure-stop]] commands.

Once connected, changes in Emacs are mirrored in Leisure, and vice
versa.  In Leisure, if you hit C-C C-C or click an elisp link, it will
delegate that to Emacs. Leisure will also attempt to fetch "file:"
image data from Emacs so it can display the results of your file-based
computations.
** Getting leisure-connection-mode for Emacs
The emacs code lives in the Leisure repository, in the elisp
directory.  Soon, this will be published to Melpa but until then, for
feedback purposes, you can get the emacs code by cloning the [[https://github.com/zot/Leisure][GitHub
repository]], adding the elisp directory to your Emacs load-path, and
requiring leisure-connection-mode.

Once you have leisure-connection-mode loaded in emacs, open this file
(which is elisp/README.org in the project) in Emacs and click the link
in Emacs above that says "CLICKING THIS LINK".  This will open a live
connection to the buffer that mirrors your changes.

Please note, there are still bugs in the mirroring, but we may not
know about all of them, so if you're motivated to report them in
GitHub, that would be nice :).
* Emacs code execution
*(Wanna see my source?  Click the martini glass.)*

Leisure can use orgmode's code execution features.

If you hit C-c C-c in a language that Leisure can't execute (e.g. sh),
Leisure will attempt to execute in Emacs.  You can try it here:

#+BEGIN_SRC sh
echo hello there
#+END_SRC

Clicking an elisp link in Leisure will run it in Emacs.  Click this
and it will [[elisp:(message "Hello from Leisure!")][show a message]] in Emacs.
* In-browser code execution
Webby code blocks execute in the browser directly.

Go to Leisure and hit C-C C-C in this block:

#+BEGIN_SRC coffee :results silent
 alert 'hello'
#+END_SRC

This is a dynamic block. Go to Emacs and alter the code in this block and
Leisure will update the results as you type. You can also slide the values in
the browser.

#+BEGIN_SRC coffee :results dynamic
3 + 4
#+END_SRC
#+RESULTS:
: 7
* Emacs file service
When connected to Emacs, Leisure uses Emacs to access file: links so
that it can display them in the browser.

Here's the emacs logo from a file link: [[file:EmacsSplashScreen.png]]

When not connected to Emacs, Leisure attempts to use local urls
instead.  Sometimes that works :).
* Code syntax highlighting
Leisure uses [[http://prismjs.com/][Prism]] to highlight syntax as you type.  Here's an
example:

#+BEGIN_SRC cs
# Some CoffeeScript
@maluba = (x)-> x + 52
#+END_SRC
* Collaboration
Leisure uses [[http://operational-transformation.github.io/][operational transformation]] for collaboration and also implements
its own flavor of [[https://en.wikipedia.org/wiki/Software_transactional_memory][Software Transactional Memory]] to allow programs to make
changes to data in a safe fashion. Also, Leisure allows "local" source blocks
and headlines (see below)

#+begin_src ditaa :file architecture.png :cmdline -r -s 0.8 :exports results :cache yes
                                                   +-----------------------------+
                                                   |            User             |
                                                   +---+---------------------+---+
                                                       |                     |
                                                       v                     v
     +-----------------------------+             +-----------+           +-------+
     |            User             |             |  Leisure  | <-------> | Emacs |
     +--------------+--------------+             +-----------+  Changes  +-------+
                    |                                  ^
                    v                                  |
               +---------+                             |
               | Leisure |<----------------------------+
               +---------+                             |
                                                       |
                                                       v
                                                 +-----------+  Changes  +-------+
                                                 |  Leisure  | <-------> | Emacs |
                                                 +-----------+           +-------+
                                                       ^                     ^
                                                       |                     |
                                                   +---+---------------------+---+
                                                   |            User             |
                                                   +-----------------------------+
#+end_src

#+RESULTS[145d33e6b8c76835b4003568f33d948e8a82b88c]:
[[file:architecture.png]]
* Local headlines and source blocks
Headlines and blocks can have "local" properties that make data blocks
copy-on-write and the copy is optionally stored in your browser's local storage.
This isolates user changes from the main document and lets users make
(potentially persistent) changes that don't leave the user's browser.

Also, this is very important for collaboration because it lets users have their
own versions of shared data. This would allow, for instance, each user to see
their own user-specific data in the "same" GUI, because it's contained in a
local source block.

#+begin_src ditaa :file local-data.png :cmdline -r -s 0.8 :exports results :cache yes
      +-------+
      |       |
    +-| Local |
  +-| | Copy  |<--+---Local copies
  | | |       |   |
  | | +-------+   |
  | |       |<----+
  | +-------+
  |       |<-----Original version
  +-------+
#+end_src

#+RESULTS[8f525d7acb6f55f411b0f4c44f9b18ea81b398b7]:
[[file:local-data.png]]
* Imports
Imported document data is merged into the current document as local locks.
* Source and slides
- You can click the martini glass to view/edit orgmode source
- You can use the toolar to start a slideshow using top-level headlines as slides
* Themes
Leisure was built to be modded.
- You can choose themes in the Leisure toolbar
- You can set a default theme in the Emacs [[elisp:(customize-group-other-window "leisure")][leisure customize group]]
- Your documents can override a *lot* of how Leisure renders
- You can experiment with the built-in themes in the "Visual" panel above
* Views
Leisure uses Handlebars to define HTML views for different types of data. This
is what it uses for its normal display (called "fancy mode").
- You can tweak Leisure's rendering by overriding parts of [[elisp:(browse-url-emacs "http://textcraft.org/newLeisure/src/defaults.lorg")][defaults.lorg]] in your document
* HTML templates
Leisure uses [[http://handlebarsjs.com/][Handlebars]] templates and it use data from the document
when it renders them.

#+NAME: fred
#+BEGIN_SRC yaml
name: Fred
#+END_SRC

Here's some Html that uses Fred and Fred's controller.

#+BEGIN_HTML :var block=fred :controller fred-controller :allowupdates
<b>Hello <input type='text' data-value='fred.name'></input></b><br>
Name length: <b name='len'></b>
#+END_HTML

#+NAME: fred-controller
This is Fred's controller
#+BEGIN_SRC cs
@initializeView = (view, data)->
  $(view).find('[name=len]').html data.block.name.length
#+END_SRC
* You Can Haz Media.  Because Web.
Here is a nice video by John Kitchin about Orgmode.

#+BEGIN_HTML
<iframe width="420" height="315" src="https://www.youtube.com/embed/fgizHHd7nOo" frameborder="0" allowfullscreen></iframe>
#+END_HTML
* Babel
When Leisure's connected to Emacs, you can use babel by hitting c-c c-c in a
source block. If you have access to plantuml, you can change the diagrams in
this document, execute them, and the pictures will update in Leisure. Click the
martini glass, edit the plantuml source, and hit c-c c-c (click the martini
glass again, to see the picture).

#+begin_src plantuml :file sequence.png :exports results :cache yes
title Example Sequence Diagram
activate Client
Client -> Server: Session Initiation
note right: Client requests new session
activate Server
Client <-- Server: Authorization Request
note left: Server requires authentication
Client -> Server: Authorization Response
note right: Client provides authentication details
Server --> Client: Session Token
note left: Session established
deactivate Server
Client -> Client: Saves token
deactivate Client
#+end_src

#+RESULTS[a577aefedcdf1de2c3136ddd8320c4c2359a3cd8]:
[[file:sequence.png]]
* Work in progress
** Leisure is not quite stable, yet
- Leisure is a *work in progress*
- It's *NOT HARDENED*
  - *Don't rely on Leisure for super-important tasks yet!*
  - Leisure won't destroy Emacs' undo history, so it *should* be safe to use
- It doesn't support some parts of orgmode, yet
  - Like tables and spreadsheets
  - Agenda
  - And stuff
  - We'll get there
  - There's a lot to do, so pitch in and help!
** But that doesn't mean you can't use it!
- You can still benefit from Leisure's features, like interactive views, value sliders, etc.
- You can edit in Emacs and keep a Leisure browser next to it to see your formatted document as you type
- Leisure just changes the document text and then sends to Emacs.
- If Leisure gets messed up, you can just reload the webpage one of these ways!
  - revert the buffer
  - use the [[elisp:leisure-reload][leisure-reload]] command
  - use the browser to reload the page
  - close the page and reopen it from Emacs
  - execute [[elisp:leisure-connection-mode]] to close and open the browser window
  - Leisure will connect right back to your Emacs buffer
- You can use Emacs' fabulous undo support if you use Leisure to
  make a change and it somehow messes up.
  - Leisure and Emacs are just sending text changes to each other
* Features in Old Leisure
This new version doesn't have all of the features of the old version, yet but
they are coming...
** Code Discussions
The old version uses GitHub issues so other people can discuss your
code.  but we may switch to a service(s) like [[https://disqus.com/][Disqus]].
** Test cases
Converting code into a visual test case result is an imporant feature
we plan to bring back very soon.
** Saving files
- Old Leisure can connect to Google Drive
- New Leisure needs connectors for Google Drive, GitHub, DropBox, etc.
- The Emacs connection helps, because you can save from Emacs
* Some Leisure History
Leisure started out as an experimental, dynamically typed, lazy,
functional programming language with strong support for
metaprogramming (quite a mouthful, isn't it?).  Soon, TEAM CTHUHLU
wanted to extend our experiment into programming environments.
Leisure was already web-based, why shouldn't it exploit the powers of
the Web?

We didn't start from orgmode -- we hadn't even heard of it. We did, however,
already know the power of text; we had experimented with text-based computing
environments more than [[http://ober.sourceforge.net/][10 years ago]], based on Oberon, Wily, and Acme, we even
had a text-based auto-formatted table that could use spreadsheet formulas! So
when learned about orgmode, we immediately felt a great affinity for it.

We started with Markdown and it was great.  For a while.  When we
decided that Leisure documents should contain data, as well as code,
we started running up against Markdown's lack of metadata.

Since that time, there have been several architectural overhauls and
now the architectore seems to be relatively stable and simpler than it
has been in the past.

Investigations pointed us towards orgmode.
* Orgmode features missing from Leisure
Leisure is a stand-alone computation environment that uses
orgmode's excellent file format, it's primary purpose is not to be an
extension of orgmode.  Nevertheless, using it as such is a fine way to
use Leisure, if that's all you need it for.

There are a lot of things left to do!
- orgmode-style collapse-cycling
- more org structure support
  - tables
  - tags
  - lots of other things :)
* Why does Leisure flicker when Emacs runs ditaa?
- When Emacs asks you permission to execute a code block, the Emacs
  window takes input focus
- After the command executes, the Leisure connection code in Emacs attempts to
  send focus back to the browser.
- Browser focus is a tricky thing because of spammers

You may see a popup notice in your browser's location bar.  If you
enable popups from Leisure, the browser will be able to take focus
back after it executes a remote Emacs command.

Once you enable popups, the browser will flicker, slightly when it
takes focus back.  This is because in order to reactivate the browser,
Leisure has to quickly open a temporary window and that is what causes
the flicker.
* How you can help!
- Report bugs
- Contribute code
- Contribute documentation
  - We need a lot of it
  - In Leisure documents (of course)
  - With interactive examples (illuminated documents)
- Request features
* Hidden slides
There are some hidden settings and you can reveal and hide them by
clicking Show/Hide at the top of the page.
* Settings
:properties:
:hidden: true
:end:
#+STARTUP: showeverything
Local Variables:
org-confirm-babel-evaluate: nil
End:
