* Title heading
** This should put a title in the HTML and show a title screen in slide mode
#+TITLE:Lounge, a Document-Centered, Illuminated Programming Environment
* In Lounge, the concept of "illuminated programming" means...
- Media-rich, interactive, collaborative documents
- Each document is like a tiny (virtual) machine, with code, data, presentation, and it also *runs*
- You can edit using WYSIWYG (click here and type stuff) or you can use markup (click a martini glass)
- No (/required/) distinction between runtime and development
- Editing means changing content, code, data, etc.; anything in the document
* Some features
- Polyglot: JavaScript,  CoffeeScript, Leisure, HTML (Handlebars), CSS, YAML
- Dynamically updates as you edit code, data, views, content
- Org-mode format (documents are just plain text)
- Reactive connection between views and a collaborative data model
- Support for collaborative and local data access
* Here are two rectangles connected to the same data (that you can change)
** Click the degrees value and move the slider that pops up
#+NAME: rotator
This block of data represents a rotation.
#+BEGIN_SRC yaml
type: rotator
degrees: 70
#+END_SRC
 [[leisure:rotator]] [[leisure:rotator/two]]
** Want to edit these views?  Click Show/hide or search for rot.
** Don't worry about messing things up, you can just reload the page.
* Fiddle with these view definitions and you'll see the views change.
:properties:
:hidden: true
:end:
#+BEGIN_SRC html :defview rotator
<div style='padding: 25px; display: inline-block; vertical-align: middle'>
  <div style='transform: rotate({{degrees}}deg); height: 100px;width: 100px;background: green'></div>
</div>
#+END_SRC

#+BEGIN_SRC html :defview rotator/two
<div style='padding: 25px; padding-left: 100px; display: inline-block; vertical-align: middle'>
  <div style='transform-origin: 5px 100px; transform: rotate(calc(90deg - {{degrees}}deg));height: 100px;width: 10px;background: red'></div>
</div>
#+END_SRC

* Here's a rectangle connected to some CoffeeScript code (that you can change)
** Click on the degrees value below and slide the value to recompute the model and see the view change.
#+NAME: rotator2
#+BEGIN_SRC coffee :results dynamic yaml
do ->
  o = type: 'rotator'
  o.degrees = 115
  o
#+END_SRC
#+RESULTS:
: degrees: 115
: type: rotator
 [[leisure:rotator2]]

* Here's that annoying shadow box button, defined as an app
#+BEGIN_HTML :controller appController
<div name='floater'>
  <div name='background'></div>
  <button name='dismisser'></button>
</div>
#+END_HTML

** You can click Show/hide to show the button code and other goodies
* A small app
:properties:
:hidden: true
:end:
** App initialization
#+BEGIN_SRC coffee :results def
window.App = window.App ?
  shadowbox: true
#+END_SRC
** Intro controller
#+NAME: appController
#+BEGIN_SRC coffee
@initializeView = (view)->
  view = $(view)
  floater = view.find '[name=floater]'
  configureButton view, App.shadowbox
  view.find('[name=dismisser]').button().on 'click', (e)->
    e.stopPropagation()
    configureButton view, !App.shadowbox
  floater.on 'click', -> if App.shadowbox then configureButton view, false

configureButton = (view, newState)->
  App.shadowbox = newState
  floater = view.find '[name=floater]'
  button = view.find('[name=dismisser]').button()
  if App.shadowbox = newState
    floater.addClass 'float'
    button.button 'option', 'label', 'Click anywhere to dismiss this annoying shadow box'
  else
    floater.removeClass 'float'
    button.button 'option', 'label', 'Click to show the annoying shadow box'
#+END_SRC

#+BEGIN_SRC css
.float {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 100;
}
.float [name=background] {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: black;
  opacity: 0.5;
  z-index: -1;
}
#+END_SRC
