* (Title heading should put a title in the HTML and show a title screen in slide mode)
#+TITLE:Lounge, an Illuminated Programming Environment
* Building on the Smalltalk Vision
** What if programs were delivered as virtual machines that were easy to checkpoint and duplicate, they came with their development environments, and they included all their source code, data, and graphic interface definitions?
** This vision was achieved and released to the world as Smalltalk-80
** Lounge builds on this vision and mixes in elements from other sources, such as Oberon, Hypercard, Mathematica, Self, and TiddlyWiki
** Lounge provides a collaborative environment with many of Smalltalk's benefits, where each virtual machine is actually a human-readable text document that you can easily put into version control or mail to a friend
** Collaborators can interact with shared Lounge documents and even work together on code while a document is in use.
* Illuminated programs live in documents that are...
** Self-hosted: the source document is the medium for user interaction
** Introspective: a program can interact with and observe its document and its facilities
** Self-contained: document contains its own code, data, presentation, content
** Media-rich: programs should be interesting and fun to read!
** Interactive: Lounge documents are active programs that can interact with users
** Collaborative: users and developers can conntec to a document and interact with it together
** Editable: everything is editable, including code, data, presentation, and content
* Details and Implications
** There is no /required/ distinction between runtime and development
** Lounge documents are like tiny, shared virtual machines: they have code, data, and presentation, and they also /run/
** The properties above are not absolute
*** Self-hosted: you /can/ obfuscate code
*** Self-contained: you /can/ include other documents
*** Editable: you /can/ disable editing in some or all of the document when it loads
* Some features
** Leisure docs are WYSIWYG-editable (click here and type stuff) or markup-editable (click a martini glass)
** No install needed, your document can run from a static website or from zot.github.io
** Collaboration can use local data, per-user
** Polyglot: JavaScript, CoffeeScript, Leisure, HTML (Handlebars), CSS, YAML
** Dynamically updates as you edit code, data, views, and content
** Org-mode format, documents are just plain text
** Reactive connection between views and a collaborative data model, views update as the document changes
** Appearance is completely customizable, each document can customize its own appearance
* Test Cases
** This test case is true when App.x is the number 3
#+NAME: chet
#+BEGIN_SRC coffee :results yaml dynamic view(testCase) :observe system.code :exports results
App.x
#+END_SRC
:expected:
: 3
:end:
#+RESULTS:
: 3
** Change the value of App.x to see the test case status change
#+BEGIN_SRC coffee :results dynamic
App.x = 3
#+END_SRC
#+RESULTS:
: 3
** A test case observes code and redisplays its pass/fail status when the code changes
** It uses a view to indicate pass/fail status
** It reruns and redisplays when its observation channel triggers
** Here's the view for the test case
#+BEGIN_SRC html :defview testCase
{{#if (isExpected)}}
  <span class='test pass'>PASS</span>
{{else}}
  <span class='test fail' title='expected "{{expectedResult}}" but got "{{actualResult}}"'>FAIL</span>
{{/if}}
#+END_SRC

#+BEGIN_SRC css
.test {
  font-weight: bold;
  border: solid black 3px;
  border-radius: 20px;
  padding: 2px 10px;
}
.pass {
  color: green;
}
.fail {
  color: red;
}
#+END_SRC
* Dynamic execution
** Change this code and the results will change as you type
#+BEGIN_SRC coffee :results dynamic
3 + 7
8 * 2
#+END_SRC
#+RESULTS:
: 10
: 16
* Code result views: Change the data values, below, to see the bar chart change
** (using [[chartgo.com]] for the neato graphics)
#+BEGIN_SRC coffee :results yaml dynamic view(barChart)
title: 'Adrenaline Levels'
data: encodeURIComponent [30,89].join '\n'
labels: encodeURIComponent ['Freddy Joe', 'Mary Sue'].join '\n'
#+END_SRC
#+RESULTS:
: data: '30%0A89'
: labels: 'Freddy%20Joe%0AMary%20Sue'
: title: Adrenaline Levels
** This view is the easiest type to make -- it's just a URL that makes a server to all the hard work :)
*** You can make your own views using HTML, SVG, etc. if you want, and they can be interactive, of course (see below)
#+BEGIN_SRC html :defview barChart
<img style='width: 500px; height: 400px'
src="http://www.chartgo.com/preview.do?title={{title}}&xaxis1={{labels}}&yaxis1={{data}}&charttype=bar&width=500&height=400&chrtbkgndcolor=gradientblack&fonttypetitle=bold&fonttypelabel=bold&show3d=1&gradient=1&border=1&roundedge=1">
#+END_SRC
* Here are two rectangles connected to the same data (that you can change)
** Click the degrees value and move the slider that pops up
#+NAME: rotator
This block of data represents a rotation.
#+BEGIN_SRC yaml
type: rotator
degrees: 73
#+END_SRC
 [[leisure:rotator]] [[leisure:rotator/two]]
** Want to edit these views?  Click Show/hide or search for rot.
** Don't worry about messing things up, you can just reload the page.
* Fiddle with these view definitions and you'll see the views change.
:properties:
:hidden: true
:end:
#+BEGIN_SRC html :defview rotator
<div style='padding: 25px; display: inline-block; vertical-align: middle'>
  <div style='transform: rotate({{degrees}}deg); height: 100px;width: 100px;background: green'></div>
</div>
#+END_SRC

#+BEGIN_SRC html :defview rotator/two
<div style='padding: 25px; padding-left: 100px; display: inline-block; vertical-align: middle'>
  <div style='transform-origin: 5px 100px; transform: rotate(calc(90deg - {{degrees}}deg));height: 100px;width: 10px;background: red'></div>
</div>
#+END_SRC
* Here's that annoying shadow box button, defined as an app
This is a tiny Lounge app. Of course you can have large ones, like games or
what-have-you.  This one only displays a shadowbox and a button.

#+BEGIN_HTML :controller appController
<div name='floater'>
  <div name='background'></div>
  <button name='dismisser'></button>
</div>
#+END_HTML

** You can click Show/hide to show the button code and other goodies
* A small app
:properties:
:hidden: true
:end:
** App initialization
#+BEGIN_SRC coffee :results def
window.App = window.App ?
  shadowbox: true
  first: true
#+END_SRC
** Intro controller
#+NAME: appController
#+BEGIN_SRC coffee
@initializeView = (view)->
  view = $(view)
  floater = view.find '[name=floater]'
  configureButton view, App.shadowbox
  view.find('[name=dismisser]').button().on 'click', (e)->
    e.stopPropagation()
    configureButton view, !App.shadowbox
  floater.on 'click', -> if App.shadowbox then configureButton view, false

configureButton = (view, newState)->
  App.shadowbox = newState
  floater = view.find '[name=floater]'
  button = view.find('[name=dismisser]').button()
  if App.shadowbox = newState
    floater.addClass 'float'
    if App.first
      button.button 'option', 'label', 'Click anywhere to dismiss this annoying shadow box<br>This is just to show some app-behavior<br>More about this button, later in the document :)'
    else
      button.button 'option', 'label', 'Click anywhere to dismiss this annoying shadow box'
  else
    floater.removeClass 'float'
    if App.first
      App.first = false
      button.button 'option', 'label', 'Click to show that annoying shadow box from earlier'
    else
      button.button 'option', 'label', 'Click to show the annoying shadow box'
#+END_SRC

#+BEGIN_SRC css
.float {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 100;
}
.float [name=background] {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: black;
  opacity: 0.5;
  z-index: -1;
}
#+END_SRC
