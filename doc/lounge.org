* Introducing Lounge, an open source, illuminated programming environment
* Building on the Smalltalk Vision
** What if programs were delivered as virtual machines that were easy to checkpoint and duplicate, they included development environments, and all their source code, data, and graphic interface definitions were viewable and changeable?
** This vision was achieved and released to the world with Smalltalk-80
#+BEGIN_HTML
<a target='info' href='https://en.wikipedia.org/wiki/Smalltalk'><img src='illuminated/Smalltalk80book.jpg' title='Smalltalk pioneered a lot,<br>including object oriented programming, windows, and GUI widgets,<br>among other goodies'></a>
#+END_HTML
** Lounge builds on this vision and also mixes in elements from other sources, such as Oberon, Hypercard, Mathematica, Self, TiddlyWiki, and Org Mode
#+BEGIN_HTML
<a target='info' href='https://en.wikipedia.org/wiki/Oberon_(programming_language)'><img src='illuminated/OberonScreen.png' title='Oberon demonstrates the power of text by using text for a lot of things that other environments rely on graphics for'></a>
<a target='info' href='https://en.wikipedia.org/wiki/HyperCard'><img src='illuminated/HyperCardbird.jpg' title='Hypercard influenced the WWW'></a>
<a target='info' href='https://en.wikipedia.org/wiki/Wolfram_Mathematica'><img src='illuminated/mathematica.png' title='Mathematica notebooks are interactive, editable documents'></a>
<a target='info' href='https://en.wikipedia.org/wiki/Self_(programming_language)'><img src='illuminated/self.png' title='Self has a collaborative interface, called Kansas'></a>
<a target='info' href='https://en.wikipedia.org/wiki/TiddlyWiki'><img src='illuminated/tiddlywiki.jpg' title='TiddlyWiki runs in a browser and supports live editing'></a>
<a target='info' href='https://en.wikipedia.org/wiki/Org-mode'><img src='illuminated/orgmode.png' title='Org mode is a text-based, dynamic document environment that runs in Emacs'></a>
#+END_HTML
** Lounge provides a collaborative environment with many of Smalltalk's benefits, where each virtual machine is actually a human-readable text document that you can easily put into version control, mail to a friend, and read for yourself /(click the martini glass icon above to see)/
** Collaborators can interact with shared Lounge documents and even work together on code while a document is in use.
* Illuminated programs are documents that are
** Enlightened: like the ancient concept of illumination, special knowledge
** Enlightening: users can see the code and data... and change it!
** Enlightened: like being well-informed and up-to-date
** Enlightening: code can be media-rich, like ancient illuminated manuscripts
** Collaborative for both users and developers
** Unified and modeless, the document is the program and the program is the document
* Enlightened: like the ancient concept of illumination, special knowledge
** Illuminated programs can react to changes in their content, data, and code
** These views reflect the data and definitions below
[[leisure:rotator]] [[leisure:rotator/two]]
* Enlightening: users can see the code and data... and change it!
** Here is  data for the views, change the degrees and see the views reflect your changes
#+NAME: rotator
#+BEGIN_SRC yaml
type: rotator
degrees: 98
#+END_SRC
** Here are definitions for the views, change them and see the views change as well
#+BEGIN_SRC html :defview rotator
<div style='padding: 25px; display: inline-block; vertical-align: middle'>
  <div style='transform: rotate({{degrees}}deg); height: 100px;width: 100px;background: green'></div>
</div>
#+END_SRC

#+BEGIN_SRC html :defview rotator/two
<div style='padding: 25px; padding-left: 100px; display: inline-block; vertical-align: middle'>
  <div style='transform-origin: 5px 100px; transform: rotate(calc(90deg - {{degrees}}deg));height: 100px;width: 10px;background: red'></div>
</div>
#+END_SRC
* Enlightened: like being well-informed and up-to-date
** They can contain custom behavior
** They can interact with the reader
** They support modern techniques
** They contain their own development and diagnostic tools
:properties:
:import: minimap.org
:end:
*** Here is a heatmap of the document.  Change the document and watch it update...
[[lounge:blockMap//loungeMinimapData]]
* Enlightening: code can be media-rich, like ancient illuminated manuscripts
[[illuminated/Haggadah_15th_cent.jpg]]
* Collaborative for both users and developers
* Unified and modeless, the document is the program and the program is the document
** The source code is actually the program; users interact with the source document itself
** There is no disctinction between run-time and development-time
** When the program changes data, the document changes
** When a user edits data in the document, the program data changes
** Essentially, the document is a virtual machine
** Program functionality happens in the document, not on a server
*** The collaboration server only manages changes
* Edit anything and you'll see a spot in the heatmap
** Feel free to edit anything, you can just reload the document at any point to revert your changes to the document
