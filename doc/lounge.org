* Introducing Lounge, an open source, illuminated programming environment
* Building on the Smalltalk Vision
** What if programs were delivered as virtual machines that were easy to checkpoint and duplicate, each program included a development environment, and all of its source code, data, and graphic interface definitions were viewable and changeable?
** This vision was achieved and released to the world with Smalltalk-80
#+BEGIN_HTML
<a target='info' href='https://en.wikipedia.org/wiki/Smalltalk'><img src='illuminated/Smalltalk80book.jpg' title='Smalltalk pioneered a lot,<br>including object oriented programming, windows, and GUI widgets,<br>among other goodies'></a>
#+END_HTML

** Lounge builds on this vision and also mixes in elements from other sources, such as Oberon, Hypercard, Mathematica, Self, TiddlyWiki, and Org Mode
#+BEGIN_HTML
<a target='info' href='https://en.wikipedia.org/wiki/Oberon_(programming_language)'><img height='250px' src='illuminated/OberonScreen.png' title='Oberon demonstrates the power of text by using text for a lot of things that other environments rely on graphics for'></a>
<a target='info' href='https://en.wikipedia.org/wiki/HyperCard'><img height='250px' src='illuminated/HyperCardbird.jpg' title='Hypercard influenced the WWW'></a>
<a target='info' href='https://en.wikipedia.org/wiki/Wolfram_Mathematica'><img height='250px' src='illuminated/mathematica.png' title='Mathematica notebooks are interactive, editable documents'></a>
<a target='info' href='https://en.wikipedia.org/wiki/Self_(programming_language)'><img height='250px' src='illuminated/self.png' title='Self has a collaborative interface, called Kansas'></a>
<a target='info' href='https://en.wikipedia.org/wiki/TiddlyWiki'><img height='250px' src='illuminated/tiddlywiki.jpg' title='TiddlyWiki runs in a browser and supports live editing'></a>
<a target='info' href='https://en.wikipedia.org/wiki/Org-mode'><img height='250px' src='illuminated/orgmode.png' title='Org mode is a text-based, dynamic document environment that runs in Emacs'></a>
#+END_HTML

** Lounge provides a collaborative, illuminated programming environment with many of Smalltalk's benefits, where the virtual machine's memory is actually a human-readable text document that you can easily put into version control, mail to a friend, and read for yourself
** Collaborators can interact with shared Lounge documents and even work together on code while a document is in use
** Some other recent environments share some of Lounge's ideals, such as [[https://jupyter.org/][Jupyter]] and [[http://www.apple.com/swift/playgrounds/][Apple's Swift Playgrounds]]
* Illuminated programs are documents that are
** Enlightened: well-informed and intelligent
** Enlightened: like the ancient concept of illumination, they have "special knowledge"
** Enlightening: users can access the code and data and change it
** Enlightening: the code itself is media-rich, like ancient illuminated manuscripts
** Collaborative for both users and developers
** Unified and modeless, the document is the program
* Enlightened: well-informed and intelligent
** They can have custom behavior and alter or disable standard Lounge behavior
** They can interact with the reader
** They support modern techniques, like showing results as you change code
*** Change some of this code to see the results update:
#+BEGIN_SRC coffee :results dynamic
3 + 4
#+END_SRC
#+RESULTS:
: 7
** They can connect to Emacs and Atom, allowing you to edit live documents in all three environments
** They contain their own development and diagnostic tools
:properties:
:import: minimap.org
:end:
*** This block imports a heatmap into the document.  Change the document and you'll spots change in the heatmap
[[lounge:blockMap//loungeMinimapData]]

**** Feel free to edit anything, you can just reload the document at any point to revert your changes to the document
*** Test Cases
**** This test case is true when App.x is the number 3
#+NAME: chet
#+BEGIN_SRC coffee :results view(testCase) :observe system.code :exports results
App.x
#+END_SRC
:expected:
: 3
:end:
#+RESULTS:
: 2

#+BEGIN_SRC coffee :results dynamic
App.x = 2
#+END_SRC
#+RESULTS:
: 2
* More info on test cases
:properties:
:hidden: true
:end:
*** A test case observes code and redisplays its pass/fail status when the code changes
*** It uses a view to indicate pass/fail status
*** It reruns and redisplays when its observation channel triggers
*** Here's the view for the test case
#+BEGIN_SRC html :defview testCase
{{#if (isExpected)}}
  <span class='test pass'>PASS</span>
{{else}}
  <span class='test fail' title='expected &amp;lt;{{expectedResult}}&amp;gt; but got &amp;lt;{{actualResult}}&amp;gt;'>FAIL</span>
{{/if}}
#+END_SRC

#+BEGIN_SRC css
.test {
  font-weight: bold;
  border: solid black 3px;
  border-radius: 20px;
  padding: 2px 10px;
}
.pass {
  color: green;
}
.fail {
  color: red;
}
#+END_SRC
* Enlightened: like the ancient concept of illumination, special knowledge
** Illuminated programs can react to changes in their content, data, and code
** These views reflect the data and definitions below
[[leisure:rotator]] [[leisure:rotator/two]]
* Enlightening: users can access the code and data and change it
** Click a martini glass to see the code in a document block
** Here is data for the views above, change the degrees and see the views reflect your changes
#+NAME: rotator
#+BEGIN_SRC yaml
type: rotator
degrees: 0
#+END_SRC
** Here are definitions for the views above, change them and see the views change as well
#+BEGIN_SRC html :defview rotator
<div style='padding: 25px; display: inline-block; vertical-align: middle'>
  <div style='transform: rotate({{degrees}}deg); height: 100px;width: 100px;background: green'></div>
</div>
#+END_SRC

#+BEGIN_SRC html :defview rotator/two
<div style='padding: 25px; padding-left: 100px; display: inline-block; vertical-align: middle'>
  <div style='transform-origin: 0px 5px; transform: rotate(calc(0deg - {{degrees}}deg));height: 10px;width: 100px;background: red'></div>
</div>
#+END_SRC
* Enlightening: code can be media-rich, like ancient illuminated manuscripts
#+BEGIN_HTML
<img src='illuminated/Haggadah_15th_cent.jpg' style='height: 15em; float: left; margin-right: 2ex'>
#+END_HTML
** This document is an illuminated program (of course)
In ancient times, documents were hand-written and took a lot of labor to
produce. "[[https://en.wikipedia.org/wiki/Illuminated_manuscript][Illuminated manuscripts]]" date back to as early as the [[https://en.wikipedia.org/wiki/Miniature_(illuminated_manuscript)#Italy_and_Byzantium.2C_3rd.E2.80.936th_centuries][3rd century]] and
contained lavish illustrations

#+BEGIN_HTML
<div style='display: block; clear: both'>
  <img src='https://upload.wikimedia.org/wikipedia/commons/8/8e/KellsFol292rIncipJohn.jpg' style='height: 15em'>
  <img src='illuminated/illuminated-alphabet.jpg' style='height: 15em'>
</div>
#+END_HTML
* Collaborative for both users and developers
** Click "Collaboration" above, create a session, and send the URL to a friend so you can collaborate on this document
** Collaboration is not always the same as storage, it depends on the approach
*** Google's uses on stored documents, keeping them up-to-date as you make changes
*** Lounge's built-in one uses a private copy, letting you save the document only when you desire
*** Both approachs are useful, depending on your requirements
* Unified and modeless, the document is the program and the program is the document
** The document is a kind of virtual machine
** The source code is actually the program; users interact with the source document itself
** There is no disctinction between run-time and development-time
** When the program changes data, the document changes
** When a user edits data in the document, the program data changes
** Program functionality happens in the document, not on a server
*** The collaboration server only manages changes
* CSS Stuff
:properties:
:hidden: true
:end:
#+BEGIN_SRC coffee :results def
window.App = window.App
App.x = 2
if !App.gothicFont
  App.gothicFont = true
  this.opts.data.getFile('illuminated/GrusskartenGotisch.woff').then (contents)->
    debugger
    #font = Leisure.makeBlobUrl contents, 'application/font-woff'
    font = "data:application/font-woff;base64,#{btoa contents}"
    $('#gothicFont').remove()
    $(document.head).append """
      <style id='gothicFont'>
        @font-face {
          font-family: "Grusskarten Gotisch";
          src: url("#{font}");
        }
      </style>
    """
  for l in "W"
    name = "illuminated/dropCaps/#{l}.png"
    this.opts.data.getFile(name).then (contents)->
      img = Leisure.makeImageBlob name, contents
      $(document.head).append """
        <style id='letter-#{l}'>
          .letter-#{l}.first-text:first-letter {
            color: rgba(0,0,0,0);
            background: url("#{img}") 0 0 / 100% 100%;
          }
        </style>
      """
#+END_SRC

#+BEGIN_SRC css
.first-text {
  display: block;
  min-height: 4em;
}
.first-text:first-letter {
  float: left;
  color: #660;
  font-size: 250%;
  margin-top: 0.1em;
  margin-right: 0.1em;
  vertical-align: top;
  font-family: "Grusskarten Gotisch";
}
#+END_SRC
