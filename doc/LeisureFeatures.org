#+TITLE:Leisure Features
* Scratch
:properties:
:hidden: true
:end:
#+BEGIN_SRC leisure :results dynamic
#+END_SRC

* An experimental, dynamically typed, lazy, functional language with strong metaprogramming
Leisure is an attempt to make a dynamically typed, lazy language that is
- *fun* to use
- *easy* to use
- convenient
- powerful
* "Lazy" (call-by-need)
Among other things, it lets you write infinitely recursive functions and make infinite structures that are actually useful.

#+BEGIN_SRC leisure :results dynamic
ones = [1 | ones]
take 4 ones
#+END_SRC
#+RESULTS:
: 
: [1 1 1 1]
* Dynamically typed
#+BEGIN_SRC leisure :results dynamic
flatten [1 'hello' [2]]
#+END_SRC
#+RESULTS:
: [1 "hello" 2]
** Defining new types simply by returning a lambda
#+BEGIN_SRC leisure :results dynamic
newType x = \f . f x
getType (newType 3)
#+END_SRC
#+RESULTS:
: 
: "newType"
* Extend functions with new cases
#+BEGIN_SRC leisure :results dynamic
frobnicate x = x + 1
frobnicate 'hello'
defCase frobnicate.string s | isString s -> (strLen s) + 1
frobnicate 'hello'
#+END_SRC
#+RESULTS:
: 
: "hello1"
: 
: 6
* Metaprogramming
** macros (like LISP macros)
"do" is a macro
** parse filters (a bit like #lang in Racket)
** Infix notation is implemented as a parse filter
#+BEGIN_SRC leisure :results dynamic
1 + 2 * 3
#+END_SRC
#+RESULTS:
: 7
* Partial application, meaningfully displayed
#+BEGIN_SRC leisure :results dynamic
[(cons 'a') 'b' (cons 'c') (cons 'd' nil)]
#+END_SRC
#+RESULTS:
: [<span class="partial-application">(cons "a")</span> "b" <span class="partial-application">(cons "c")</span> ["d"]]
* Monadic IO make asynchronous code straightforward
#+BEGIN_SRC leisure :results dynamic
do
  name <- prompt 'What is your name?'
  name
#+END_SRC
#+RESULTS:
: (some "Fred")
* Powerful "do" blocks
** Dynamically typed
#+BEGIN_SRC leisure :results dynamic
a = do
  x <- 1
  x + 1
b = do
  x <- run prompt 'What is the number?'
  1 + (number x)
getType a
getType b
a
b
#+END_SRC
#+RESULTS:
: 
: 
: "*number"
: "*Monad2"
: 2
: 4
** Mapping over lists (also: options, booleans, eithers)
#+BEGIN_SRC leisure :results dynamic
do
  x <- [4 5 6]
  x + 1
#+END_SRC
#+RESULTS:
: [5 6 7]
** wrap items to prevent binding behavior
#+BEGIN_SRC leisure :results dynamic
do
  i <- wrap [1 2 3]
  i
#+END_SRC
#+RESULTS:
: [1 2 3]
** lifting macros run, for, flat, fold
*** run
#+BEGIN_SRC leisure :results dynamic
do
  setValue 'xOption' (some 3)
  x <- run getValue 'xOption'
  x + 5
#+END_SRC
#+RESULTS:
: 8
*** for
#+BEGIN_SRC leisure :results dynamic
do
  x <- for repeat 3
  x + 5
#+END_SRC
#+RESULTS:
: [5 6 7]
*** flat
#+BEGIN_SRC leisure :results dynamic
do
  x <- flat [1 2 3]
  y <- flat [4 5 6]
  [x y]
#+END_SRC
#+RESULTS:
: [1 4 1 5 1 6 2 4 2 5 2 6 3 4 3 5 3 6]
*** fold
#+BEGIN_SRC leisure :results dynamic
do
  x i <- fold [1 2 3 4] 0
  i + x
#+END_SRC
#+RESULTS:
: 10

* Powerful built-in data types
** Sequences
*** Sequence functions work on sequence types: head, tail, append, map, and the fold functions
** Lists
#+BEGIN_SRC leisure :results dynamic
[1 2]
head [1 2]
tail [1 2]
#+END_SRC
#+RESULTS:
: [1 2]
: 1
: [2]
** Difference lists
#+BEGIN_SRC leisure :results dynamic
dl[1]
dl[1 | dl[2]]
tail dl[1 2]
#+END_SRC
#+RESULTS:
: dl[1]
: dl[1 2]
: dl[2]

** Association lists
#+BEGIN_SRC leisure :results dynamic
{'a':1 'b':2}
set 'c' 3 {'a':1 'b':2}
get 'b' {'a':1 'b':2}
getOpt 'a' {'a':1 'b':2}
#+END_SRC
#+RESULTS:
: {"a":1 "b":2}
: {"c":3 "a":1 "b":2}
: 2
: (some 1)
** Maps, sets, and vectors (courtesy of [[http://facebook.github.io/immutable-js/][immutable.js]])
#+BEGIN_SRC leisure :results dynamic
map{}
map{'a':1 'c':2 'b':3}
get 'a' map{'a':1 'c':2 'b':3}
set 'a' 4 map{'a':1 'c':2 'b':3}
getOpt 'a' map{'a':1 'c':2 'b':3}
set{1 2 3}
append set{1 2} set{2 3}
append vec{1 2} vec{2 3}
#+END_SRC
#+RESULTS:
: map{}
: map{"a":1 "c":2 "b":3}
: 1
: map{"a":4 "c":2 "b":3}
: (some 1)
: set{1 2 3}
: set{3 1 2}
: vec{1 2 2 3}

* JavaScript integration
** The "js" Leisure function returns an IO value
*** It will auto-convert returned JS functions into Leisure functions that properly handle call-by-need
** JS code can call Leisure functions
** The JS runMonad() function will run monadic Leisure values
*** runMonad returns a promise if the code was determined to be asynchronous
** JSON support
#+BEGIN_SRC leisure :results dynamic
do
  f <- run js['(function(j){return JSON.stringify(resolve(j))})']
  r <- run f (toJson {'a':1 'b':2})
  write r
#+END_SRC

#+RESULTS:
: {&quot;a&quot;:1,&quot;b&quot;:2}
: 
