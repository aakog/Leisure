* Defs
#+BEGIN_SRC coffee :results def
App = window.App = window.App ? {}
if !window.App.blockMinimap then window.App.blockMinimap =
  heatMapColors: [
    'black'
    'blue'
    'cyan'
    'green'
    'yellow'
    'red'
    'white'
  ]
#+END_SRC

* Lounge block activity minimap
Show Lounge block editing/data activity
* Data
#+NAME: testMapData
This is just test data
#+BEGIN_SRC yaml
- x0000000000000
- x0000001000000
- x0000012100000
- x0000123210000
- x0001234321000
- x0012345432100
- x0123456543210
- x0012345432100
- x0001234321000
- x0000123210000
- x0000012100000
- x0000001000000
- x0000000000000
#+END_SRC
[[lounge:testMapData//loungeMinimapData]]

[[lounge:blockMap//loungeMinimapData]]
* View
#+BEGIN_SRC html :defview loungeMinimapData
<div style='height: 15em'>
  <canvas style='border: solid black; width: 100%; height: 100%'></canvas>
</div>
#+END_SRC
* Controller
#+BEGIN_SRC coffee :control loungeMinimapData
@initializeView = (view, data)->
  App.blockMinimap.minimaps[view[0].id] = data
  render view, data

if !App.blockMinimap.minimaps
  App.blockMinimap.minimaps = {}
  window.onresize = _.throttle (->
    cleanMaps()
    for view, data of minimaps
      render $("##{view}"), data), 10

minimaps = App.blockMinimap.minimaps

dataDo = (data, func)->
  for row in data
    for col in row.substring 1
      func Number col
  null

cleanMaps = ->
  newMaps = {}
  for view, data of minimaps
    if (v = $("##{view}")).length && v.is '[data-view=loungeMinimapData]' then newMaps[view] = data
  App.blockMinimap.minimaps = minimaps = newMaps

render = (view, data)->
  cnv = view.find('canvas')[0]
  w = cnv.offsetWidth
  h = cnv.offsetHeight
  r = w / h
  totBlocks = 0
  for row in data
    totBlocks += row.length - 1
  rows = Math.ceil Math.sqrt totBlocks / r
  cols = Math.floor totBlocks / rows
  ctx = cnv.getContext "2d"
  cnv.setAttribute 'width', cols * 10
  cnv.setAttribute 'height', rows * 10
  ctx.fillStyle = 'black'
  ctx.fillRect 0, 0, cols * 10, rows * 10
  row = 0
  col = 0
  dataDo data, (item)->
    col++
    if col >= cols
      col = 0
      row++
    ctx.fillStyle = App.blockMinimap.heatMapColors[item]
    ctx.fillRect col * 10, row * 10, 10, 10
#+END_SRC
* Block map

#+NAME:blockMap
This is a Data block for observer to use
#+BEGIN_SRC yaml
[]
#+END_SRC

This is an observer that populates the blockMap
#+BEGIN_SRC coffee :observe system.document
@observer = (block)->
  console.log "CHANGED: #{block._id}"
  #observerFunc()

if !App.blockMinimap.blockHistory
  App.blockMinimap.blockHistory =
    timeStamp: 0
    lastActivity: []
  populateMap()

observerFunc = _.throttle populateMap, 100, leading: false

populateMap = ->

#+END_SRC
