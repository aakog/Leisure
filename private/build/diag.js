// Generated by CoffeeScript 1.9.3
(function() {
  var bindCount, checkStructure, createEditorDisplay, createStructureDisplay, displayStructure, lineInfo, numSpan, posFor;

  bindCount = 0;

  posFor = LeisureEditCore.posFor;

  createEditorDisplay = function(editor) {
    var status;
    status = $("<div class='selectionInfo'>No selection</div>");
    editor.node.after(status);
    return editor.on('moved', (function(_this) {
      return function() {
        var block, blockLine, col, left, line, offset, ref, ref1, top;
        ref = editor.getSelectedBlockRange(), block = ref.block, offset = ref.offset;
        if (block) {
          ref1 = lineInfo(editor.options, block, offset), line = ref1.line, col = ref1.col, blockLine = ref1.blockLine, top = ref1.top, left = ref1.left;
          if (line) {
            return status.html("line: " + (numSpan(line)) + " col: " + (numSpan(col)) + " block: " + block._id + ":" + (numSpan(blockLine)) + " top: " + (numSpan(top)) + " left: " + (numSpan(left)));
          }
        }
        return status.html("No selection");
      };
    })(this));
  };

  numSpan = function(n) {
    return "<span class='status-num'>" + n + "</span>";
  };

  lineInfo = function(options, block, offset) {
    var col, docLine, holder, line, p, ref, startBlock;
    if (block) {
      ref = options.blockLine(block, offset), line = ref.line, col = ref.col;
      startBlock = block;
      docLine = line;
      while (block.prev) {
        block = options.getBlock(block.prev);
        docLine += block.text.split('\n').length - 1;
      }
      holder = options.nodeForId(startBlock._id);
      p = posFor(options.editor.domCursorForTextPosition(holder, offset));
      return {
        line: docLine,
        col: col,
        blockLine: line,
        top: Math.round(p.top),
        left: Math.round(p.left)
      };
    } else {
      return {};
    }
  };

  createStructureDisplay = function(data, stop) {
    var div;
    if (!$(".structure").length) {
      div = $("<div class='structure'></div>");
      $(document.body).append(div);
      return data.on('change', function(changes) {
        return displayStructure(data, div);
      }).on('load', function() {
        return displayStructure(data, div);
      });
    }
  };

  displayStructure = function(data, div) {
    var bad, check, checks, cur, i, info, level, p, parentStack, prev, prevParent;
    parentStack = [];
    info = "";
    level = 0;
    cur = data.getBlock(data.first);
    prevParent = null;
    checks = {
      nextSibling: {},
      previousSibling: {},
      prev: {}
    };
    check = cur;
    prev = null;
    while (check) {
      checks.nextSibling[check.previousSibling] = check._id;
      checks.previousSibling[check.nextSibling] = check._id;
      checks.prev[check.next] = check._id;
      prev = check;
      check = data.getBlock(check.next);
    }
    while (cur) {
      bad = [];
      if (cur.nextSibling !== checks.nextSibling[cur._id]) {
        bad.push('nextSibling');
      }
      if (cur.previousSibling !== checks.previousSibling[cur._id]) {
        bad.push('previousSibling');
      }
      if (cur.prev !== checks.prev[cur._id]) {
        bad.push('prev');
      }
      if (!cur.previousSibling) {
        p = cur;
        while (p = data.parent(p)) {
          level++;
        }
      }
      info += "" + (((function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = level; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push('   ');
        }
        return results;
      })()).join('')) + cur._id + " " + cur.type + (checkStructure(cur, bad)) + ": " + (JSON.stringify(cur.text)) + "\n";
      if (!cur.nextSibling) {
        level = 0;
      }
      cur = data.getBlock(cur.next);
    }
    return $(div).html(info);
  };

  checkStructure = function(block, bad) {
    var err;
    if (bad.length) {
      return ' <span class="err">[' + ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = bad.length; j < len; j++) {
          err = bad[j];
          results.push(err + ": " + block[err]);
        }
        return results;
      })()).join(', ') + ']</span>';
    } else {
      return '';
    }
  };

  Leisure.createStructureDisplay = createStructureDisplay;

  Leisure.createEditorDisplay = createEditorDisplay;

}).call(this);

//# sourceMappingURL=diag.js.map
