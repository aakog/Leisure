// Generated by CoffeeScript 1.9.3

/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
 */

(function() {
  var Leisure_anno, Leisure_apply, Leisure_lambda, Leisure_let, Leisure_lit, Leisure_ref, Nil, SourceMapConsumer, SourceNode, _, _false, _true, addLambdaProperties, addUniq, arrayify, assocListProps, booleanFor, check, checkChild, collectArgs, cons, consFrom, currentFile, currentFuncName, curryCall, define, dumpAnno, findName, functionInfo, gen, genApplyArg, genArifiedApply, genArifiedLambda, genLambda, genLetAssign, genLets, genMap, genNode, genRefName, genSource, genUniq, getAnnoBody, getAnnoData, getAnnoName, getApplyArg, getApplyFunc, getAssocListProps, getLambdaArgs, getLambdaBody, getLambdaProperties, getLambdaVar, getLastLetBody, getLetBody, getLetName, getLetValue, getLitVal, getNArgs, getNthLambdaBody, getPos, getRefName, isNil, lacons, lazify, lazy, lc, lcons, lconsFrom, left, letList, locateAst, location, lz, makeSyncMonad, nameSub, newConsFrom, nsLog, parseErr, ref1, ref2, ref3, ref4, ref5, ref6, ref7, resolve, right, root, runMonad, rz, setDataType, setType, simpyCons, sm, sn, specialAnnotations, strRepeat, uniqName, useArity, varNameSub, verboseMsg, withFile,
    slice = [].slice;

  ref1 = root = (typeof module !== "undefined" && module !== null ? module : {}).exports = require('15-base'), simpyCons = ref1.simpyCons, resolve = ref1.resolve, lazy = ref1.lazy, verboseMsg = ref1.verboseMsg, nsLog = ref1.nsLog;

  rz = resolve;

  lz = lazy;

  lc = Leisure_call;

  ref2 = require('16-ast'), nameSub = ref2.nameSub, getLitVal = ref2.getLitVal, getRefName = ref2.getRefName, getLambdaVar = ref2.getLambdaVar, getLambdaBody = ref2.getLambdaBody, getApplyFunc = ref2.getApplyFunc, getApplyArg = ref2.getApplyArg, getAnnoName = ref2.getAnnoName, getAnnoData = ref2.getAnnoData, getAnnoBody = ref2.getAnnoBody, getLetName = ref2.getLetName, getLetValue = ref2.getLetValue, getLetBody = ref2.getLetBody, Leisure_lit = ref2.Leisure_lit, Leisure_ref = ref2.Leisure_ref, Leisure_lambda = ref2.Leisure_lambda, Leisure_apply = ref2.Leisure_apply, Leisure_let = ref2.Leisure_let, Leisure_anno = ref2.Leisure_anno, setType = ref2.setType, setDataType = ref2.setDataType, cons = ref2.cons, Nil = ref2.Nil, define = ref2.define, functionInfo = ref2.functionInfo, getPos = ref2.getPos, isNil = ref2.isNil;

  ref3 = require('17-runtime'), makeSyncMonad = ref3.makeSyncMonad, runMonad = ref3.runMonad, _true = ref3._true, _false = ref3._false, left = ref3.left, right = ref3.right, booleanFor = ref3.booleanFor, newConsFrom = ref3.newConsFrom;

  _ = ((ref4 = Leisure.require) != null ? ref4 : require)('lodash.min');

  consFrom = newConsFrom;

  sm = typeof sourceMap !== "undefined" && sourceMap !== null ? sourceMap : (typeof module !== "undefined" && module !== null ? require : Leisure.require)("source-map");

  ref6 = (ref5 = sm.sourceMap) != null ? ref5 : sm, SourceNode = ref6.SourceNode, SourceMapConsumer = ref6.SourceMapConsumer;

  varNameSub = function(n) {
    return "L_" + (nameSub(n));
  };

  useArity = true;

  collectArgs = function(args, result) {
    var i, j, len;
    for (j = 0, len = args.length; j < len; j++) {
      i = args[j];
      if (Array.isArray(i)) {
        collectArgs(i, result);
      } else {
        result.push(i);
      }
    }
    return result;
  };

  locateAst = function(ast) {
    var col, line, pos, ref7;
    ref7 = pos = getPos(ast).toArray(), line = ref7[0], col = ref7[1];
    return [line, col];
  };

  check = function(bool, arg) {
    if (!bool) {
      return console.log(new Error("Bad sourcemap arg: " + arg).stack);
    }
  };

  checkChild = function(child) {
    var c, j, len, results;
    if (Array.isArray(child)) {
      results = [];
      for (j = 0, len = child.length; j < len; j++) {
        c = child[j];
        results.push(checkChild(c));
      }
      return results;
    } else {
      return check((typeof child === 'string') || (child instanceof SourceNode), c);
    }
  };

  currentFile = 'NEVERGIVENFILE.lsr';

  currentFuncName = void 0;

  withFile = function(file, name, block) {
    var oldFileName, oldFuncName;
    oldFileName = currentFile;
    oldFuncName = currentFuncName;
    currentFile = file;
    currentFuncName = name;
    try {
      return block();
    } finally {
      currentFile = oldFileName;
      currentFuncName = oldFuncName;
    }
  };

  sn = function() {
    var ast, line, offset, ref7, str;
    ast = arguments[0], str = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    ref7 = locateAst(ast), line = ref7[0], offset = ref7[1];
    check(typeof line === 'number', 'line');
    check(typeof offset === 'number', 'offset');
    checkChild(str);
    if (line < 1) {
      line = 1;
    }
    if (currentFile === 'NEVERGIVENFILE.lsr') {
      console.log(new Error("SN CALLED WITHOUT FILE").stack);
    }
    if (currentFuncName != null) {
      return new SourceNode(line, offset, currentFile, str, currentFuncName);
    } else {
      return new SourceNode(line, offset, currentFile, str);
    }
  };

  genNode = function(ast) {
    return genUniq(ast, Nil, [Nil, 0]);
  };

  gen = function(ast) {
    return genMap(ast).toStringWithSourceMap({
      file: currentFile
    }).code;
  };

  genSource = function(source, ast) {
    var funcname;
    funcname = ast instanceof Leisure_anno && getAnnoName(ast) === 'leisureName' ? getAnnoData(ast) : null;
    return withFile("dynamic code with source", funcname, function() {
      var code, map;
      sm = genNode(ast).prepend("\n").toStringWithSourceMap({
        file: "dynamic code with source"
      });
      map = JSON.parse(sm.map.toString());
      map.sourcesContent = [source];
      code = "(" + sm.code + ")\n//# sourceMappingURL=data:application/json;utf-8;base64," + (btoa(JSON.stringify(map))) + "\n";
      return code;
    });
  };

  genMap = function(ast) {
    var filename, funcname, hasFile, line, nameAst, offset, ref7, sub;
    hasFile = ast instanceof Leisure_anno && getAnnoName(ast) === 'filename';
    filename = hasFile ? getAnnoData(ast) : 'GENFORUNKNOWNFILE.lsr';
    nameAst = hasFile ? getAnnoBody(ast) : null;
    funcname = nameAst instanceof Leisure_anno && getAnnoName(nameAst) === 'leisureName' ? getAnnoData(nameAst) : currentFuncName;
    sub = withFile(filename, null, function() {
      return genNode(ast);
    });
    ref7 = locateAst(ast), line = ref7[0], offset = ref7[1];
    if (funcname) {
      return new SourceNode(line, offset, filename, sub, funcname);
    } else {
      return sub;
    }
  };

  findName = function(name) {
    var i, j, ref7, ref8;
    for (i = j = ref7 = root.nameSpacePath.length - 1; ref7 <= 0 ? j <= 0 : j >= 0; i = ref7 <= 0 ? ++j : --j) {
      if ((ref8 = LeisureNameSpaces[root.nameSpacePath[i]]) != null ? ref8[name] : void 0) {
        return root.nameSpacePath[i];
      }
    }
    if (root.currentNameSpace && LeisureNameSpaces[root.currentNameSpace][name]) {
      return root.currentNameSpace;
    } else {
      return null;
    }
  };

  location = function(ast) {
    var col, line, ref7;
    ref7 = locateAst(ast), line = ref7[0], col = ref7[1];
    return line + ":" + col;
  };

  genRefName = function(ref, uniq, names) {
    var name, ns, val;
    name = getRefName(ref);
    if (isNil((val = names.find(function(el) {
      return el === name;
    })))) {
      ns = findName(nameSub(name));
      if (ns === root.currentNameSpace) {
        nsLog("LOCAL NAME: " + name + " FOR " + root.currentNameSpace + " " + (location(ref)));
      } else if (!ns) {
        nsLog("GUESSING LOCAL NAME " + name + " FOR " + root.currentNameSpace + " " + (location(ref)));
      }
      return varNameSub(name);
    } else {
      return uniqName(name, uniq);
    }
  };

  genUniq = function(ast, names, uniq, count) {
    var arity, data, funcName, genned, name, ref7, src;
    switch (ast.constructor) {
      case Leisure_lit:
        return sn(ast, JSON.stringify(getLitVal(ast)));
      case Leisure_ref:
        return sn(ast, "resolve(", genRefName(ast, uniq, names), ")");
      case Leisure_lambda:
        return genLambda(ast, names, uniq, count != null ? count : 0);
      case Leisure_apply:
        if (useArity) {
          return genArifiedApply(ast, names, uniq, arity);
        } else {
          return sn(ast, genUniq(getApplyFunc(ast), names, uniq), "(", genApplyArg(getApplyArg(ast), names, uniq), ")");
        }
        break;
      case Leisure_let:
        return sn(ast, "(function(){\n", genLets(ast, names, uniq), "})()");
      case Leisure_anno:
        name = getAnnoName(ast);
        data = getAnnoData(ast);
        if (name === 'arity' && useArity && data > 1) {
          return genArifiedLambda(getAnnoBody(ast), names, uniq, data);
        } else {
          genned = genUniq(getAnnoBody(ast), names, uniq);
          switch (name) {
            case 'type':
              return sn(ast, "setType(", genned, ", '", data, "')");
            case 'dataType':
              return sn(ast, "setDataType(", genned, ", '", data, "')");
            case 'define':
              ref7 = data.toArray(), funcName = ref7[0], arity = ref7[1], src = ref7[2];
              return sn(ast, "define('", funcName, "', (function(){return ", genned, "}), ", arity, ", ", JSON.stringify(src), ")");
            case 'leisureName':
              return genned;
            default:
              return genned;
          }
        }
        break;
      default:
        return "CANNOT GENERATE CODE FOR UNKNOWN AST TYPE: " + ast + ", " + ast.constructor + " " + Leisure_lambda;
    }
  };

  define('newGen', makeSyncMonad(function(env, cont) {
    console.log("CALL TO OBSOLETE NEWGEN");
    return cont(_true);
  }), null, null, null, 'parser');

  genArifiedApply = function(ast, names, uniq) {
    var argCode, args, arity, func, i, info, j, m, ref7, ref8, ref9;
    args = [];
    func = ast;
    while (dumpAnno(func) instanceof Leisure_apply) {
      args.push(getApplyArg(dumpAnno(func)));
      func = getApplyFunc(dumpAnno(func));
    }
    args.reverse();
    info = functionInfo[getRefName(func)];
    if (dumpAnno(func) instanceof Leisure_ref && (info != null ? info.newArity : void 0) && (arity = info != null ? info.arity : void 0) && arity <= args.length) {
      argCode = [];
      argCode.push(ast);
      argCode.push(genUniq(func, names, uniq));
      argCode.push('(');
      for (i = j = 0, ref7 = arity; 0 <= ref7 ? j < ref7 : j > ref7; i = 0 <= ref7 ? ++j : --j) {
        if (i > 0) {
          argCode.push(', ');
        }
        argCode.push(sn(args[i], genApplyArg(args[i], names, uniq)));
      }
      argCode.push(')');
      for (i = m = ref8 = arity, ref9 = args.length; m < ref9; i = m += 1) {
        argCode.push('(', sn(args[i], genApplyArg(args[i], names, uniq)), ')');
      }
      return sn.apply(null, argCode);
    } else {
      ast = dumpAnno(ast);
      return sn(ast, genUniq(getApplyFunc(ast), names, uniq), "(", genApplyArg(getApplyArg(ast), names, uniq), ")");
    }
  };

  genLambda = function(ast, names, uniq, count) {
    var n, name, u;
    name = getLambdaVar(ast);
    u = addUniq(name, names, uniq);
    n = cons(name, names);
    return addLambdaProperties(ast, sn(ast, "function(", uniqName(name, u), "){return ", genUniq(getLambdaBody(ast), n, u, 1), "}"));
  };

  getLambdaArgs = function(ast) {
    var args;
    args = [];
    while (ast instanceof Leisure_lambda) {
      args.push(getLambdaVar(ast));
      ast = getLambdaBody(ast);
    }
    return [args, ast];
  };

  genArifiedLambda = function(ast, names, uniq, arity) {
    var annoAst, argList, args, data, mainFunc, name, result;
    if (arity < 2) {
      return genLambda(ast, names, uniq, 0);
    } else {
      args = getNArgs(arity, ast).toArray();
      argList = _.map(args, (function(x) {
        return 'L_' + x;
      })).join(', ');
      mainFunc = sn(ast, "(function(" + argList + ") {\n    return arguments.callee.length != arguments.length\n        ? Leisure_primCall(arguments.callee, 0, arguments)\n        : ", genUniq(getNthLambdaBody(ast, arity), names, uniq), ";\n})");
      result = addLambdaProperties(ast, sn(ast, mainFunc));
      annoAst = ast;
      while (annoAst instanceof Leisure_anno) {
        name = getAnnoName(annoAst);
        data = getAnnoData(annoAst);
        switch (name) {
          case 'type':
            result = sn(ast, "setType(", result, ", '", data, "')");
            break;
          case 'dataType':
            result = sn(ast, "setDataType(", result, ", '", data, "')");
        }
        annoAst = getAnnoBody(annoAst);
      }
      return result;
    }
  };

  getNthLambdaBody = function(ast, n) {
    var d;
    if (n === 0) {
      return ast;
    } else if ((d = dumpAnno(ast)) instanceof Leisure_lambda) {
      return getNthLambdaBody(getLambdaBody(d), n - 1);
    } else {
      throw new Error("Expected lambda but got " + ast);
    }
  };

  strRepeat = function(string, n) {
    var i, j, ref7, result;
    result = string;
    for (i = j = 1, ref7 = n; 1 <= ref7 ? j < ref7 : j > ref7; i = 1 <= ref7 ? ++j : --j) {
      result += string;
    }
    return result;
  };

  ((ref7 = typeof window !== "undefined" && window !== null ? window : global) != null ? ref7 : {}).curryCall = curryCall = function(args, func) {
    var f, i, j, ref7;
    f = func(args[0]);
    for (i = j = 1, ref7 = args.length; 1 <= ref7 ? j < ref7 : j > ref7; i = 1 <= ref7 ? ++j : --j) {
      f = f(args[i]);
    }
    return f;
  };

  getNArgs = function(n, ast) {
    var d;
    d = dumpAnno(ast);
    if (!n) {
      return Nil;
    } else {
      return cons(getLambdaVar(d), getNArgs(n - 1, getLambdaBody(d)));
    }
  };

  specialAnnotations = ['type', 'dataType', 'define'];

  arrayify = function(cons) {
    if (cons instanceof Leisure_cons) {
      return cons.map(function(el) {
        return arrayify(el);
      }).toArray();
    } else {
      return cons;
    }
  };

  getLambdaProperties = function(body, props) {
    var value;
    if (body instanceof Leisure_anno) {
      if (!_.contains(specialAnnotations, getAnnoName(body))) {
        if (!props) {
          props = {};
        }
        value = getAnnoData(body);
        props[getAnnoName(body)] = arrayify(value);
      }
      getLambdaProperties(getAnnoBody(body), props);
    }
    return props;
  };

  addLambdaProperties = function(ast, def, extras) {
    var p, props;
    props = getLambdaProperties(getLambdaBody(ast));
    if (props || extras) {
      p = {};
      if (props) {
        _.merge(p, props);
      }
      if (extras) {
        _.merge(p, extras);
      }
      return sn(ast, "setLambdaProperties(", def, ", ", JSON.stringify(p), ")");
    } else {
      return def;
    }
  };

  lcons = function(a, b) {
    return rz(L_cons)(lz(a))(lz(b));
  };

  parseErr = function(a, b) {
    return rz(L_parseErr)(a)(b);
  };

  lconsFrom = function(array) {
    var el, j, len, p, ref8;
    if (array instanceof Array) {
      p = rz(L_nil);
      ref8 = array.reverse();
      for (j = 0, len = ref8.length; j < len; j++) {
        el = ref8[j];
        p = lcons(lconsFrom(el), p);
      }
      return p;
    } else {
      return array;
    }
  };

  assocListProps = null;

  getAssocListProps = function() {
    if (!assocListProps) {
      assocListProps = lcons(lcons('assoc', 'true'), rz(L_nil));
      assocListProps.properties = assocListProps;
    }
    return assocListProps;
  };

  lacons = function(key, value, list) {
    var alist;
    alist = lcons(lcons(key, value), list);
    alist.properties = getAssocListProps();
    return alist;
  };

  (typeof window !== "undefined" && window !== null ? window : global).setLambdaProperties = function(def, props) {
    var k, p, v;
    p = rz(L_nil);
    for (k in props) {
      v = props[k];
      p = lacons(k, lconsFrom(v), p);
    }
    def.properties = p;
    return def;
  };

  lazify = function(ast, func) {
    return sn(ast, "function(){return ", func, "}");
  };

  dumpAnno = function(ast) {
    if (ast instanceof Leisure_anno) {
      return dumpAnno(getAnnoBody(ast));
    } else {
      return ast;
    }
  };

  genApplyArg = function(arg, names, uniq) {
    var d;
    d = dumpAnno(arg);
    if (d instanceof Leisure_apply) {
      return lazify(d, genUniq(arg, names, uniq));
    } else if (d instanceof Leisure_ref) {
      return genRefName(d, uniq, names);
    } else if (d instanceof Leisure_lit) {
      return sn(arg, JSON.stringify(getLitVal(d)));
    } else if (d instanceof Leisure_let) {
      return sn(arg, "function(){return", genUniq(arg, names, uniq), ";}");
    } else if (d instanceof Leisure_lambda) {
      return sn(arg, "lazy(", genUniq(arg, names, uniq), ")");
    } else {
      return sn(arg, "function(){return ", genUniq(arg, names, uniq), "}");
    }
  };

  genLetAssign = function(arg, names, uniq) {
    if (dumpAnno(arg) instanceof Leisure_let) {
      return sn(arg, "function(){", genLets(arg, names, uniq), "}");
    } else {
      return sn(arg, "function(){return ", genUniq(arg, names, uniq), "}");
    }
  };

  genLets = function(ast, names, uniq) {
    var assigns, bindings, decs, letNames, letUniq, ref8;
    bindings = letList(ast, []);
    letNames = _.foldl(bindings, (function(n, l) {
      return cons(getLetName(l), n);
    }), names);
    ref8 = _.foldl(bindings, (function(result, l) {
      var assigns, code, letName, newU, u;
      u = result[0], code = result[1], assigns = result[2];
      newU = addUniq(getLetName(l), letNames, u);
      letName = uniqName(getLetName(l), newU);
      return [newU, cons(sn(ast, letName + ' = ', genLetAssign(getLetValue(l), letNames, u)), code), cons(letName, assigns)];
    }), [uniq, Nil, Nil]), letUniq = ref8[0], decs = ref8[1], assigns = ref8[2];
    return sn(ast, "  var ", assigns.reverse().join(', '), ";\n  ", decs.reverse().intersperse(';\n  ').toArray(), ";\n\n  return ", genUniq(getLastLetBody(ast), letNames, letUniq));
  };

  addUniq = function(name, names, uniq) {
    var num, overrides;
    if ((names.find(function(el) {
      return el === name;
    })) !== Nil) {
      overrides = uniq[0], num = uniq[1];
      return [cons(cons(name, name + "_" + num), overrides), num + 1];
    } else {
      return uniq;
    }
  };

  uniqName = function(name, uniq) {
    var kv;
    uniq = uniq[0];
    kv = uniq.find((function(el) {
      return el.head() === name;
    }), uniq);
    return varNameSub((kv !== Nil ? kv.tail() : name));
  };

  letList = function(ast, buf) {
    if (ast instanceof Leisure_let) {
      buf.push(ast);
      return letList(getLetBody(ast), buf);
    } else {
      return buf;
    }
  };

  getLastLetBody = function(ast) {
    if (ast instanceof Leisure_let) {
      return getLastLetBody(getLetBody(ast));
    } else {
      return ast;
    }
  };

  define('runAst', (function(code) {
    return function(ast) {
      var codeMsg, err, jsCode, msg;
      jsCode = null;
      try {
        jsCode = gen(rz(ast));
        return eval("(" + jsCode + ")");
      } catch (_error) {
        err = _error;
        codeMsg = (jsCode ? "CODE: \n" + jsCode + "\n" : "");
        msg = "\n\nParse error: " + err.toString() + ("\n" + codeMsg + "AST: ");
        console.log(msg + ast() + "\n" + err.stack);
        return parseErr(lz("\n\nParse error: " + err.toString() + ("\n" + codeMsg + "AST: ")), ast);
      }
    };
  }), null, null, null, 'parser');

  define('genAst', (function(ast) {
    var codeMsg, err, jsCode;
    jsCode = null;
    try {
      return gen(rz(ast));
    } catch (_error) {
      err = _error;
      codeMsg = (jsCode ? "CODE: \n" + jsCode + "\n" : "");
      return parseErr(lz("\n\nParse error: " + err.toString() + ("\n" + codeMsg + "AST: ")), ast);
    }
  }), null, null, null, 'parser');

  root.gen = gen;

  root.genMap = genMap;

  root.genSource = genSource;

  root.genNode = genNode;

  root.sourceNode = sn;

  root.withFile = withFile;

  root.curryCall = curryCall;

  root.SourceNode = SourceNode;

  root.SourceMapConsumer = SourceMapConsumer;

}).call(this);

//# sourceMappingURL=gen.js.map
