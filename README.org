# Leisure

* Getting started with changing the Leisure codebase
** Fetch the repo
** Make sure you have coffeescript installed
- make sure node is installed
- make sure coffeescript is installed
  - npm install -g coffee-script
** Have coffeescript compile in the background as you edit files
- open a command prompt/terminal
- change directories to the Leisure project
- make coffeescript compile the files in src into build and watch them
  - coffee -cmw -o build src
  - this is a very quick command but it won't return because of the -w
  - the -w puts coffee in 'watch' mode, so it will sit there
  - it will sit there and wait for you to change files, comipling them as you do
** test using a chrome profile that allows local file access
- put this into a shortcut/alias
- run chrome with special chrome arguments
   - --allow-file-access-from-files --user-data-dir=CHROME_DEVELOPMENT_DIR
   - CHROME_DEVELOPMENT_DIR should start as an empty directory
     - it will contain the settings, bookmarks, etc. for your Chrome Leisure development
   - use slashes in CHROME_DEVELOPMENT_DIR, NOT BACKSLASHES
** Open the index.html file in the Leisure project in your special chrome instance
* BELOW HERE IS THE OLD README, PRESERVED UNTIL WE GET THE NEW ONE FINISHED
* Welcome to Leisure,

Leisure is a purely functional, lazy, dynamically typed homoiconic
language with a persistent, live, literate, document-based programming
environment running on the web.

Leisure is for novices and experts and explores

- document-based computing: each document acts like a virtual machine image
- ways to reveal internals to users, like pop-up, interactive AST diagrams
- using social media techniques within a document to connect authors with users

Leisure's environment is a virtual machine where the machine is a live document:

- self-contained and made of human-readable text (you can email them to other people)
- contains content, code, and persistent data (they act like a webpage, program, and database)
- combines development and runtime
- allows collaboration (but can be private)

By the way, Leisure is in active development and not ready for normal use.  It is
janky, slow, and buggy.  If you demand smooth, fast, and robust, Leisure will get
there, but right now, it's *definitely* not for you.

** Convenient language
Leisure provides a convenient syntax and powerful tools to help people
try things out quickly, be productive, and customize the language to
suit their needs.  Leisure's syntax is based on Lambda Calculus and
borrows things from Haskell and other languages while still remaining
very small.  It also includes metaprogramming facilities to allow
powerful customization.

** Notebook Style Interactive Development

For decades, programming has been done primarily in glorified text
editors, completely ignoring *major* advances from the /*seventies*/, in
Smalltalk and LISP machines!  Some great strides have been made in
various IDEs, but typically the programmer is still burdened with a
neverending "write, compile, debug, test, repeat" development cycle.
Why do you keep settling for this when clearly we can do better?

LISP programmers know the REPL -- the command line interactive
programming interface.  While still heavily under development, Leisure
is meant to push this envelope and provide a fully interactive,
document-based development environment where your code is executed,
errors show when you make them, tests execute as you write your code,
and documentation is rich and interactive, as well.  Functional
programming is quite foreign to newcomers, but what if you could
instantly view the parse tree of the code you wrote? Or specify test
arguments to your function and see the results live as you make
changes to your code in real time?  Our goal is to show programmers
there has to be a better way, and we've settled for the status quo for
far too long.

* Getting Started

Here are a few demo links you can try.  For now, Leisure only works in Chrome.

- http://textcraft.org:3333/#load=/demo/game.lorg
- http://textcraft.org:3333/#load=/demo/code.lorg
- http://textcraft.org:3333/#load=/demo/script.lorg
- http://textcraft.org:3333/#load=/demo/cards.lorg

We use a posix environment and [[https://www.meteor.com/][Meteor]] to develop Leisure, so you can use Linux, OS X,
or cygwin to run or modify Leisure.  If you want to run Leisure on your computer,
make sure you have Meteor installed.

To run the Leisure server, switch to the top-level project diretory and run meteor:

#+BEGIN_SRC shell
meteor run
#+END_SRC

Once meteor is running, you can use [[localhost:3000/game.lorg]] to test it.  *.lorg files
are stored in the /private/ directory.  [[localhost:3000/code.lorg]] and
[[localhost:3000/cards.lorg]] are some other ones to try.

To run the command-line Leisure repl, switch to packages/leisure/build and run

#+BEGIN_SRC shell
npm install
#+END_SRC

then you can switch back to the top level directory and the repl
command, located there, should work.

* Packages we use
- Prism
- Lazy.js
- Lodash
- Meteor
- Handlebars
- jQuery
- jQueryUI
- js-yaml
- CoffeeScript
- source-map
- persistent-hash-trie
- utf8
- github
- base64
- sha256
- adiff
- diff

* Contact
If you want to get in touch, you can email me at bill dot burdick at gmail.
