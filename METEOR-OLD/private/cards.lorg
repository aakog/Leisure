* Cards

#+NAME: proto1
#+BEGIN_SRC yaml
type: card-proto
image: /images/cthulhu_test_green.png
name: Card 1
text: Some <large><b>text</b></large> for<br>card 1
#+END_SRC
#+NAME: proto2
#+BEGIN_SRC yaml
type: card-proto
image: /images/cthulhu_test_white.png
name: Card 2
text: Some <large><b>text</b></large> for<br>card 2
#+END_SRC


#+NAME: player1
#+BEGIN_SRC yaml
type: player
name: Fred
#+END_SRC
#+NAME: player2
#+BEGIN_SRC yaml
type: player
name: George
#+END_SRC


#+NAME: card1
#+BEGIN_SRC yaml
type: card
proto: proto1
player: player1
#+END_SRC
#+NAME: card2
#+BEGIN_SRC yaml
type: card
proto: proto2
player: player1
#+END_SRC
#+NAME: card3
#+BEGIN_SRC yaml
type: card
proto: proto1
player: player2
#+END_SRC


#+NAME: d1
#+BEGIN_SRC yaml
type: dragger
item: card1
left: 150
top: 30
#+END_SRC
#+NAME: d2
#+BEGIN_SRC yaml
type: dragger
item: card2
left: 250
top: 60
#+END_SRC
#+NAME: d3
#+BEGIN_SRC yaml
type: dragger
item: card3
left: 350
top: 90
#+END_SRC


#+NAME: dl
#+BEGIN_SRC yaml
type: draggerList
draggers:
- d1
- d2
- d3
#+END_SRC


[[leisure:dl]]
* Views

#+BEGIN_SRC html :defview card-proto
<div class='card-frame'>
  <div><b>{{name}}</b></div>
  <table class='card-image'><tr><td><img src="{{image}}"></td></tr></table>
  {{{text}}}
</div>
#+END_SRC
#+BEGIN_SRC html :defview player/cardLabel
<div class='owner-label'>{{name}}</div>
#+END_SRC


#+BEGIN_SRC html :defview card
{{{view player "cardLabel"}}}
{{{view proto}}}
#+END_SRC
#+BEGIN_SRC html :defview dragger
{{{view item}}}
#+END_SRC


#+BEGIN_SRC html :defview draggerList
<div class='card-shared'>
  <div name='container' class='card-shared-contents'>
    {{#each draggers}}
    {{{view this}}}
    {{/each}}
  </div>
</div>
#+END_SRC
* Styles

#+BEGIN_SRC css
  * .card-shared {
    position: fixed;
    top: 50px;
    right: 10px;
    border: solid red 1px;
    display: inline-block;
    z-index: 100000;
  }
  * .card-shared-contents {
    display: inline-block;
    width: 800px;
    height: 800px;
    position: relative;
  }
  * .owner-label {
    text-align: center;
    border: solid green 3px;
    border-radius: 10px;
    background: lightgray;
  }
  * .card-frame {
    display: inline-block;
    border-radius: 10px;
    border: solid blue 3px;
    padding: 5px;
    width: 300px;
    height: 400px;
    background: white;
  }
  * .card-image {
    min-height: 100px;
    width: 100%;
  }
  * .card-image td {
    text-align: center;
    vertical-align: middle;
  }
#+END_SRC
* Support code
:PROPERTIES:
:hidden: true
:END:

We can indicate movement, here, with another view that's a line connected
to the original center that disappears on mouse up.  Each player could get
their own view.

#+BEGIN_SRC coffee :control dragger
@initializeView = (view)->
  id = view.getAttribute 'data-view-block'
  data = Leisure.getBlock(id).yaml
  #link = $(view).closest '[data-view-link]'
  link = $(Templating.currentViewLink)
  App.drag view,
    init: ->
      $(view)
        .css 'top', "#{data.top}px"
        .css 'left', "#{data.left}px"
    containment: $(view).closest "[name='container']"
    scroll: false
    update: (image, id, data)->
      data.left = image.offsetLeft
      data.top = image.offsetTop
      # block updates because dragging a view doesn't change its contents
      Leisure.noRenderWhile $("[data-view-block~='#{id}']"), ->
        Leisure.setData id, data
  $(view).on 'mousedown', -> $(view).parent().append $(view)
#+END_SRC


#+BEGIN_SRC coffee :control draggerList
@initializeView = (el)->
  el = $(el).find("[name='container']")[0]
  el.addEventListener 'dragover', (e)->
    e.preventDefault()
    e.dataTransfer.dropEffect = 'copy'
  el.addEventListener 'drop', (e)->
    e.preventDefault()
    e.stopPropagation()
    console.log "DROPPING..."
    t = e.dataTransfer
    if 'text/html' in t.types
      item = $(t.getData('text/html'))
      if item.length == 1 && item.is 'img'
        e.preventDefault()
        console.log "dropped: ", item
#+END_SRC


View dragging -- sliding views around.

#+BEGIN_SRC coffee :results def
dragUpdate = Lodash.throttle ((view, func)->
  id = view.getAttribute 'data-view-block'
  data = Leisure.getBlock(id).yaml
  func view, id, data
  ), 250, leading: true, trailing: true

App.drag = (el, options)->
  if !el.isDraggable
    pos = $(el).position()
    offset = $(el).offset()
    el.isDraggable = true
    el.style.position = 'absolute'
    options.init()
    options = options ? {}
    oldStart = options.start
    options.start = ->
      el.isDragging = true
      oldStart?()
    options.drag = (event, ui)-> if options.update? then dragUpdate el, options.update; true
    oldStop = options.stop
    options.stop = ->
      if options.update? then dragUpdate el, options.update
      setTimeout (-> el.isDragging = false), 300
      oldStop?()
      true
    $(el).draggable options
  else if !el.isDragging then options.init()
#+END_SRC
