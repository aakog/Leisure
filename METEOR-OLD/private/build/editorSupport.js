// Generated by CoffeeScript 1.9.3
(function() {
  var DataStore, DataStoreEditingOptions, FancyEditing, Fragment, LeisureEditCore, Lodash, Nil, OrgData, OrgEditing, PlainEditing, actualSelectionUpdate, blockAttrs, blockCodeItems, blockEnvMaker, blockLabel, blockOrg, blockText, configureMenu, contentSpan, copy, createBlockEnv, createLocalData, defaultEnv, escapeAttr, escapeHtml, findEditor, getCodeItems, getId, greduce, installSelectionMenu, isContentEditable, isDynamic, languageEnvMaker, last, linkAllSiblings, monitorSelectionChange, orgDoc, parseOrgMode, plainEditDiv, posFor, ref, root, selectionActive, selectionMenu, setHtml, throttledUpdateSelection, updateSelection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('10-namespace');

  root = module.exports = require('15-base');

  orgDoc = Leisure.orgDoc, parseOrgMode = Leisure.parseOrgMode, Fragment = Leisure.Fragment, getCodeItems = Leisure.getCodeItems, languageEnvMaker = Leisure.languageEnvMaker, defaultEnv = Leisure.defaultEnv, Nil = Leisure.Nil;

  ref = LeisureEditCore = window.LeisureEditCore, last = ref.last, DataStore = ref.DataStore, DataStoreEditingOptions = ref.DataStoreEditingOptions, blockText = ref.blockText, posFor = ref.posFor, escapeHtml = ref.escapeHtml, copy = ref.copy, setHtml = ref.setHtml, findEditor = ref.findEditor;

  Lodash = _;

  selectionActive = true;

  blockOrg = function(blockOrText) {
    var org, text;
    text = typeof blockOrText === 'string' ? blockOrText : blockOrText.text;
    org = parseOrgMode(text);
    if (org.children.length > 1) {
      org = new Fragment(org.offset, org.children);
    }
    org.linkNodes();
    return org;
  };

  OrgData = (function(superClass) {
    extend(OrgData, superClass);

    function OrgData() {
      return OrgData.__super__.constructor.apply(this, arguments);
    }

    OrgData.prototype.getBlock = function(thing) {
      if (typeof thing === 'string') {
        return OrgData.__super__.getBlock.call(this, thing);
      } else {
        return thing;
      }
    };

    OrgData.prototype.load = function(first, blocks) {
      if (first) {
        linkAllSiblings(first, blocks, {
          sets: {},
          old: {}
        });
      }
      return OrgData.__super__.load.call(this, first, blocks);
    };

    OrgData.prototype.parseBlocks = function(text) {
      if (text === '') {
        return [];
      } else {
        return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
      }
    };

    OrgData.prototype.nextSibling = function(thing) {
      return this.getBlock(this.getBlock(thing).nextSibling);
    };

    OrgData.prototype.previousSibling = function(thing) {
      return this.getBlock(this.getBlock(thing).previousSibling);
    };

    OrgData.prototype.reducePreviousSiblings = function(thing, func, arg) {
      return greduce(this.getBlock(thing), func, arg, (function(_this) {
        return function(b) {
          return _this.getBlock(b.previousSibling);
        };
      })(this));
    };

    OrgData.prototype.reduceNextSiblings = function(thing, func, arg) {
      return greduce(this.getBlock(thing), func, arg, (function(_this) {
        return function(b) {
          return _this.getBlock(b.nextSibling);
        };
      })(this));
    };

    OrgData.prototype.lastSibling = function(thing) {
      return this.reduceNextSiblings(thing, (function(x, y) {
        return y;
      }), null);
    };

    OrgData.prototype.firstSibling = function(thing) {
      return this.reducePreviousSiblings(thing, (function(x, y) {
        return y;
      }), null);
    };

    OrgData.prototype.parent = function(thing) {
      var ref1;
      return this.getBlock((ref1 = this.firstSibling(thing)) != null ? ref1.prev : void 0);
    };

    OrgData.prototype.firstChild = function(thing) {
      var block, n;
      if ((block = this.getBlock(thing)) && (n = this.getBlock(block.next)) && !n.previousSibling) {
        return n;
      }
    };

    OrgData.prototype.lastChild = function(thing) {
      return this.lastSibling(this.firstChild(thing));
    };

    OrgData.prototype.children = function(thing) {
      var c;
      c = [];
      this.reduceNextSiblings(this.firstChild(thing), (function(x, y) {
        return c.push(y);
      }), null);
      return c;
    };

    OrgData.prototype.makeChange = function(changes) {
      changes = OrgData.__super__.makeChange.call(this, changes);
      linkAllSiblings(this.first, this.blocks, changes);
      return changes;
    };

    return OrgData;

  })(DataStore);

  greduce = function(thing, func, arg, next) {
    if (thing && typeof arg === 'undefined') {
      arg = thing;
      thing = next(thing);
    }
    while (thing) {
      arg = func(arg, thing);
      thing = next(thing);
    }
    return arg;
  };

  getId = function(thing) {
    if (typeof thing === 'string') {
      return thing;
    } else {
      return thing._id;
    }
  };

  linkAllSiblings = function(first, blocks, changes) {
    var block, change, cur, curParent, emptyNexts, id, parentStack, prev, previousSibling, results, siblingStack;
    change = function(block) {
      if (!changes.old[block._id]) {
        changes.old[block._id] = copy(block);
      }
      return changes.sets[block._id] = block;
    };
    parentStack = ['TOP'];
    siblingStack = [null];
    emptyNexts = {};
    cur = blocks[first];
    while (cur) {
      if (cur.nextSibling) {
        emptyNexts[cur._id] = cur;
      }
      curParent = blocks[last(parentStack)];
      if (cur.type === 'headline') {
        while (curParent && cur.level <= curParent.level) {
          parentStack.pop();
          siblingStack.pop();
          curParent = blocks[last(parentStack)];
        }
      }
      if (previousSibling = last(siblingStack)) {
        delete emptyNexts[previousSibling];
        if ((prev = blocks[previousSibling]).nextSibling !== cur._id) {
          change(prev).nextSibling = cur._id;
        }
        if (cur.previousSibling !== previousSibling) {
          change(cur).previousSibling = previousSibling;
        }
      } else if (cur.previousSibling) {
        delete change(cur).previousSibling;
      }
      siblingStack[siblingStack.length - 1] = cur._id;
      if (cur.type === 'headline') {
        parentStack.push(cur._id);
        siblingStack.push(null);
      }
      cur = blocks[cur.next];
    }
    results = [];
    for (id in emptyNexts) {
      block = emptyNexts[id];
      results.push(delete change(block).nextSibling);
    }
    return results;
  };

  OrgEditing = (function(superClass) {
    extend(OrgEditing, superClass);

    function OrgEditing(data) {
      OrgEditing.__super__.constructor.call(this, data);
      data.on('load', (function(_this) {
        return function() {
          return setHtml(_this.editor.node[0], _this.renderBlocks());
        };
      })(this));
    }

    OrgEditing.prototype.blockLineFor = function(node, offset) {
      var block, ref1;
      ref1 = this.editor.blockOffset(node, offset), block = ref1.block, offset = ref1.offset;
      return this.blockLine(block, offset);
    };

    OrgEditing.prototype.blockLine = function(block, offset) {
      var lines, text;
      text = block.text.substring(0, offset);
      lines = text.split('\n');
      return {
        line: lines.length,
        col: last(lines).length
      };
    };

    OrgEditing.prototype.change = function(changes) {
      var change, env, envM, hasChange, id, newResults, newSource, oldBlock, oldSource, ref1, ref2, ref3, result, sync;
      ref1 = changes.sets;
      for (id in ref1) {
        change = ref1[id];
        if (change.type === 'code' && isDynamic(change) && (envM = blockEnvMaker(change))) {
          ref2 = blockCodeItems(change), newSource = ref2.source, newResults = ref2.results;
          oldBlock = this.getBlock(change._id);
          hasChange = !oldBlock || oldBlock.type !== 'code' || oldBlock.codeAttributes.results !== 'dynamic' || (oldBlock ? ((ref3 = blockCodeItems(oldBlock), oldSource = ref3.source, ref3), newSource.content !== oldSource.content) : void 0);
          if (hasChange) {
            if (!newResults) {
              console.log("insert new result for " + newSource.content);
            } else {
              console.log("update result for " + newSource.content);
            }
            result = '';
            sync = true;
            env = envM({
              __proto__: defaultEnv
            });
            env.write = function(str) {
              if (sync) {
                return result += str + '\n';
              } else {
                return console.log("NEW ASYNC RESULT: " + str);
              }
            };
            env.executeText(newSource.content, Nil, function() {});
            console.log("CODE RESULTS: " + result);
            sync = false;
          }
        }
      }
      return OrgEditing.__super__.change.call(this, changes);
    };

    return OrgEditing;

  })(DataStoreEditingOptions);

  isDynamic = function(block) {
    var ref1;
    return ((ref1 = block.codeAttributes) != null ? ref1.results : void 0) === 'dynamic';
  };

  blockEnvMaker = function(block) {
    return languageEnvMaker(block.language);
  };

  createBlockEnv = function(block, envMaker) {};

  blockCodeItems = function(block) {
    var org;
    if (block) {
      org = blockOrg(block);
      if (org instanceof Fragment) {
        org = org.children[0];
      }
      return getCodeItems(org);
    }
  };

  PlainEditing = (function(superClass) {
    extend(PlainEditing, superClass);

    function PlainEditing() {
      return PlainEditing.__super__.constructor.apply(this, arguments);
    }

    PlainEditing.prototype.nodeForId = function(id) {
      return $("#plain-" + id);
    };

    PlainEditing.prototype.idForNode = function(node) {
      var ref1;
      return (ref1 = node.id.match(/^plain-(.*)$/)) != null ? ref1[1] : void 0;
    };

    PlainEditing.prototype.parseBlocks = function(text) {
      return this.data.parseBlocks(text);
    };

    PlainEditing.prototype.renderBlock = function(block) {
      return ["<span id='plain-" + block._id + "' data-block='" + block.type + "'>" + (escapeHtml(block.text)) + "</span>", block.next];
    };

    return PlainEditing;

  })(OrgEditing);

  FancyEditing = (function(superClass) {
    extend(FancyEditing, superClass);

    function FancyEditing() {
      return FancyEditing.__super__.constructor.apply(this, arguments);
    }

    FancyEditing.prototype.changed = function(changes) {
      var block, i, id, len, ref1, ref2, ref3, rendered, results;
      rendered = {};
      ref1 = changes.removes;
      for (id in ref1) {
        block = ref1[id];
        this.removeBlock(block);
      }
      ref2 = changes.newBlocks;
      for (i = 0, len = ref2.length; i < len; i++) {
        block = ref2[i];
        rendered[block._id] = true;
        this.updateBlock(block, changes.old[block._id]);
      }
      ref3 = changes.sets;
      results = [];
      for (id in ref3) {
        block = ref3[id];
        if (!rendered[id]) {
          results.push(this.updateBlock(block, changes.old[block._id]));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    FancyEditing.prototype.nodeForId = function(id) {
      return id && $("#fancy-" + (getId(id)));
    };

    FancyEditing.prototype.idForNode = function(node) {
      var ref1;
      return (ref1 = node.id.match(/^fancy-(.*)$/)) != null ? ref1[1] : void 0;
    };

    FancyEditing.prototype.parseBlocks = function(text) {
      return this.data.parseBlocks(text);
    };

    FancyEditing.prototype.removeBlock = function(block) {
      var content, node;
      if ((node = this.nodeForId(block._id)).length) {
        if (block.type === 'headline') {
          content = node.children().filter('[data-content]');
          content.children().filter('[data-block]').insertAfter(node);
        }
        return node.remove();
      }
    };

    FancyEditing.prototype.updateBlock = function(block, old) {
      var child, content, html, i, len, node, ref1, results;
      if ((node = this.nodeForId(block._id)).length) {
        content = node.children().filter('[data-content]');
        if (block.type !== (old != null ? old.type : void 0) || block.nextSibling !== (old != null ? old.nextSibling : void 0) || block.previousSibling !== (old != null ? old.previousSibling : void 0) || block.prev !== (old != null ? old.prev : void 0)) {
          if (block.type !== 'headline' && old.type === 'headline') {
            content.children().filter('[data-block]').insertAfter(node);
          }
          this.insertUpdateNode(block, node);
        }
        if (block.text !== (old != null ? old.text : void 0)) {
          if (node.is('[data-headline]')) {
            content.children().filter('[data-block]').insertAfter(node);
          }
          html = this.renderBlock(block, true)[0];
          node = $(setHtml(node[0], html, true));
          content = node.children().filter('[data-content]');
          if (block.type === 'headline') {
            ref1 = this.data.children(block);
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              child = ref1[i];
              results.push(content.append(this.nodeForId(child._id)));
            }
            return results;
          }
        }
      } else {
        node = $("<div></div>");
        this.insertUpdateNode(block, node);
        html = this.renderBlock(block, true)[0];
        return setHtml(node[0], html, true);
      }
    };

    FancyEditing.prototype.insertUpdateNode = function(block, node) {
      var next, parentNode, prev, ref1, ref2, ref3;
      if ((ref1 = (prev = this.nodeForId(this.data.previousSibling(block)))) != null ? ref1.length : void 0) {
        return prev.after(node);
      } else if (!block.prev) {
        return this.editor.node.prepend(node);
      } else if (!block.previousSibling && ((ref2 = (parentNode = this.nodeForId(block.prev))) != null ? ref2.is("[data-headline]") : void 0)) {
        return parentNode.children().filter("[data-content]").children().first().after(node);
      } else if ((ref3 = (next = this.nodeForId(this.data.nextSibling(block)))) != null ? ref3.length : void 0) {
        return next.before(node);
      } else {
        return this.editor.node.append(node);
      }
    };

    FancyEditing.prototype.renderBlock = function(block, skipChildren) {
      var child, html, ref1;
      html = block.type === 'headline' ? "<div " + (blockAttrs(block)) + " contenteditable='false'>" + (blockLabel(block)) + "<div contenteditable='true' data-content>" + (contentSpan(block.text, 'text')) + (!skipChildren ? ((function() {
        var i, len, ref1, ref2, results;
        ref2 = (ref1 = this.data.children(block)) != null ? ref1 : [];
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          child = ref2[i];
          results.push(this.renderBlock(child)[0]);
        }
        return results;
      }).call(this)).join('') : '') + "</div></div>" : block.type === 'code' ? "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>" : "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>";
      return [html, ((ref1 = this.data.nextSibling(block)) != null ? ref1._id : void 0) || !this.data.firstChild(block) && block.next];
    };

    return FancyEditing;

  })(OrgEditing);

  blockLabel = function(block) {
    return "<span class='blockLabel' contenteditable='false' data-noncontent>[" + block.type + " " + block._id + "]</span>";
  };

  blockAttrs = function(block) {
    var extra;
    extra = '';
    if (block.type === 'headline') {
      extra += " data-headline='" + (escapeAttr(block.level)) + "'";
    }
    return "id='fancy-" + (escapeAttr(block._id)) + "' data-block='" + (escapeAttr(block._id)) + "' data-type='" + (escapeAttr(block.type)) + "'" + extra;
  };

  contentSpan = function(str, type) {
    str = escapeHtml(str);
    if (str) {
      return "<span" + (type ? " data-org-type='" + (escapeAttr(type)) + "'" : '') + ">" + str + "</span>";
    } else {
      return '';
    }
  };

  escapeAttr = function(str) {
    if (typeof str === 'string') {
      return str.replace(/['"&]/g, function(c) {
        switch (c) {
          case '"':
            return '&quot;';
          case "'":
            return '&#39;';
          case '&':
            return '&amp;';
        }
      });
    } else {
      return str;
    }
  };

  createLocalData = function() {
    return new OrgData();
  };

  plainEditDiv = function(div, data) {
    $(div).addClass('plain');
    return new LeisureEditCore($(div), new PlainEditing(data));
  };

  monitorSelectionChange = function() {
    $(document).on('selectionchange', updateSelection);
    $(window).on('scroll', updateSelection);
    return $(window).on('blur focus', function(e) {
      selectionActive = e.type === 'focus';
      return updateSelection();
    });
  };

  installSelectionMenu = function() {
    $(document.body).append("<div id='selectionBubble' contenteditable='false'></div>").append("<div id='topCaretBox' contenteditable='false'></div>").append("<div id='bottomCaretBox' contenteditable='false'></div>");
    $("#selectionBubble").html(selectionMenu).on('mouseenter', function() {
      return configureMenu($("#selectionBubble ul"));
    });
    $("#selectionBubble ul").menu({
      select: function(event, ui) {
        console.log("MENU SELECT");
        return false;
      }
    });
    return monitorSelectionChange();
  };

  selectionMenu = "<div>\n<ul>\n  <li name='insert'><a href='javascript:void(0)'><span>Insert</span></a>\n    <ul>\n      <li><a href='javascript:void(0)'><span>Leisure</span></a></li>\n      <li><a href='javascript:void(0)'><span>YAML</span></a></li>\n      <li><a href='javascript:void(0)'><span>HTML</span></a></li>\n      <li><a href='javascript:void(0)'><span>CoffeeScript</span></a></li>\n      <li><a href='javascript:void(0)'><span>JavaScript</span></a></li>\n    </ul>\n  </li>\n</ul>\n</div>";

  configureMenu = function(menu) {
    return console.log("configure menu");
  };

  throttledUpdateSelection = Lodash.throttle((function() {
    return actualSelectionUpdate();
  }), 30, {
    leading: true,
    trailing: true
  });

  updateSelection = function() {
    return throttledUpdateSelection();
  };

  actualSelectionUpdate = function() {
    var bubble, c, editor, left, p, top;
    if (selectionActive) {
      if (editor = findEditor(getSelection().focusNode)) {
        c = editor.domCursorForCaret();
        if (!c.isEmpty() && (p = c.textPosition()) && isContentEditable(c.node)) {
          left = p.left;
          top = p.top;
          bubble = $("#selectionBubble")[0];
          bubble.style.left = left + "px";
          bubble.style.top = (top - bubble.offsetHeight) + "px";
          $(document.body).addClass('selection');
          return;
        }
      }
    }
    return $(document.body).removeClass('selection');
  };

  isContentEditable = function(node) {
    return (node instanceof Element ? node : node.parentElement).isContentEditable;
  };

  Leisure.createLocalData = createLocalData;

  Leisure.plainEditDiv = plainEditDiv;

  Leisure.OrgData = OrgData;

  Leisure.installSelectionMenu = installSelectionMenu;

  Leisure.blockOrg = blockOrg;

}).call(this);

//# sourceMappingURL=editorSupport.js.map
