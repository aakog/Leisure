* Leisure Intro
Leisure documents are a combination of runtime, development, and debug environments
all rolled into one.  A Leisure doc can contain any sort of web application,
say a classic game like Connect Four...

[[http://www.abstractstrategy.com/connect-four.jpg]]










* Game
:properties:
:note: sidebar
:end:
[[leisure:player1]][[leisure:board1]]
* Views and Data
:properties:
:hidden: true
:end:

Views let you build a templated UI for various components of your application.  Leisure
supports HTML blocks where you can insert any HTML you need to create your application.

Here we create a simple view for letting players type in their name and start a new game.

#+BEGIN_SRC html :defview player
<table style='width: 100%; white-space: nowrap'>
  <tr>
    <td style='width: 1px'>Name:</td>
    <td><input type='text' data-value='name'></input></td>
    <td style='width: 1px'>
      <button onclick="App.newGame(this)">New Game</button>
    </td>
  </tr>
</table>
#+END_SRC
#+NAME: player1
#+BEGIN_SRC yaml :local
type: player
color: r
number: -1
name: Anonymous
#+END_SRC

The block next to the view is a data block that contains information about the current player.
It is local data that is not shared with other users.
* Shared Data
:properties:
:hidden: true
:end:
This data block is the shared Connect Four board data. This block is a YAML data block which means you can define any
data types easily in plain text.  Since it's a shared block, any changes are automagically synced up to all players.

w = white, b = black, r = red

#+NAME: board1
#+BEGIN_SRC yaml :flowLevel 2
type: board
pieces:
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
cols: 7
rows: 6
players: []
turn: 0
#+END_SRC

The code ties these together; type in a name above the board to see them both update, as well as the "Players" list under the board.
* Templates
:properties:
:hidden: true
:end:

Views use the Handlebars library for templates so you can define a view that takes an object and
dynamically creates the HTML as needed.

Here is the game board's view.  The templating is powerful enough to loop over multi-dimensional
arrays and even call out to custom functions you can define on your own if required.

#+BEGIN_SRC html :defview board
<div board onmousedown='App.handleClick(event)'>
  <div id='boardDiv'>
    <table>
      {{#each pieces}}
      <tr>
        {{#each this}}
          <td>
            <img src='/connect4/{{this}}Piece.svg' onerror='this.src="/connect4/gPiece.svg"'>
          </td>
        {{/each}}
      </tr>
      {{/each}}
    </table>
  </div>
  <h2>Players</h2>
  <div>
    {{#each players}}
      <span class='player' style='{{playerStyle @index}}'>{{this.name}}</span>
    {{/each}}
  </div>
</div>
#+END_SRC

* View Helpers
:properties:
:hidden: true
:end:

Leisure supports multiple web languages, Javascript, CoffeeSript, and of course, our namesake functional language
called Leisure.  This demo is using CoffeeScript.

As we just mentioned on the previous slide, we can create a custom Handlebars helper to compute the style to be
used for displaying each player's name.  At last, we get to do some actual coding!

#+BEGIN_SRC coffee :results def
Handlebars.registerHelper 'playerStyle', (index)->
  color = if index % 2 == 0 then 'black' else 'red'
  if App.isPlayersTurn index then "color: white; background-color: #{color}"
  else "color: #{color}; background-color: white"
#+END_SRC

Finally, we need to add some audio controls for sound effects by inserting some HTML for the audio controls required.

#+BEGIN_HTML
<div style='padding-left: 5ex; color: orange'>
  <i>HIDDEN AUDIO ELEMENTS HERE THAT LOOK LIKE THESE</i><br>
  &lt;audio id="clickSound" src="sounds/click.wav">&lt;/audio><br>
  &lt;audio id="buzzerSound" src="sounds/buzz.wav">&lt;/audio>
</div>
<audio id="clickSound" src="sounds/click.wav"></audio>
<audio id="buzzerSound" src="sounds/buzz.wav"></audio>
#+END_HTML

* Data Observers
:properties:
:hidden: true
:end:
Data Observers are special code blocks that trigger whenever an object changes.

This code block is flagged as an observer, that means it will be triggered when the local player object has been modified.
We need to update the player's data in the shared board's list of players.  It will then propagate out to all other
players.

#+BEGIN_SRC coffee :results def :observe player
@update = App.updatePlayer = (player)->
  board = Leisure.getDataNamed 'board1'
  board.players[player.number] = player
  Leisure.setDataNamed 'board1', board
#+END_SRC

This observer code block keeps the shared board valid, making sure the board is a proper size and each element has a
legal value.

#+BEGIN_SRC coffee :results def :observe board
@update = (board, block)->
  player = Leisure.getDataNamed 'player1'
  if player.number > 1 then return
  changed = false
  if !(board.pieces instanceof Array) then (changed = board).pieces = []
  if typeof board.rows != 'number' then (changed = board).rows = 6
  if typeof board.cols != 'number' then (changed = board).cols = 7
  while board.pieces.length < board.rows then (changed = board).pieces.unshift []
  while board.pieces.length > board.rows then (changed = board).pieces.shift()
  for row in [0 ... board.rows]
    if !(r = board.pieces[row]) instanceof Array then r = (changed = board).pieces[row] = []
    while r.length < board.cols then (changed = r).push 'w'
    while r.length > board.cols then (changed = r).pop()
    for col in [0 ... board.cols]
      if !(board.pieces[row][col] in 'wrb') then (changed = board).pieces[row][col] = 'w'
  if changed then Leisure.setDataNamed 'board1', board
#+END_SRC
* Game play
:properties:
:hidden: true
:end:

Now that the data and views are squared away, we need to write the actual code for our application.

As a turn-based game, we need to track whose turn it is at any point in time.

#+BEGIN_SRC coffee :results def
App.isPlayersTurn = (index)->
  board = Leisure.getDataNamed 'board1'
  return board.turn % board.players.length == index
#+END_SRC

Reset the game board for a new game

#+BEGIN_SRC coffee :results def
App.newGame = (node)->
  data = Leisure.getDataNamed 'board1'
  data.pieces = for row in [0 ... data.rows]
    'w' for col in [0 ... data.cols]
  data.turn = 0
  Leisure.setDataNamed 'board1', data
#+END_SRC

Process a player clicking the board and provide audio feedback

          [[http://imgs.xkcd.com/comics/incision.png][At one point, by force of childhood habit, the doctor accidentally removed three or four organs.]]

#+BEGIN_SRC coffee :results def
App.handleClick = (e)->
  sound = if App.takeTurn e then '#clickSound' else '#buzzerSound'
  $('[data-org-html]').find(sound)[0].play()
#+END_SRC

Add a piece to the board on the column clicked (if there's room for it) Return success or failure

#+BEGIN_SRC coffee :results def
App.takeTurn = (e)->
  player = Leisure.getDataNamed 'player1'
  if player.number >= 0 && App.isPlayersTurn player.number
    data = Leisure.getDataNamed 'board1'
    col = e.target.parentElement.cellIndex
    if col? && empties = L(data.pieces).takeWhile((row)-> row[col] == 'w').size()
      data.pieces[empties - 1][col] = player.color
      ++data.turn
      Leisure.setDataNamed 'board1', data
      true
#+END_SRC
* Initialization
:properties:
:hidden: true
:end:
Set the game attribute so we can float the board.  The controller gets called
right after the view is created

#+BEGIN_SRC coffee :control board
@initializeView = (view)->
  $(view).closest("[data-org-headline='1']").attr 'game', ''
#+END_SRC

Each time a new player connects, we need to initialize them and add them into the game Just use a random delay to
prevent contention, for now.

#+BEGIN_SRC coffee :results def
player = Leisure.getDataNamed 'player1'
if player.number == -1
  setTimeout (->
    board = Leisure.getDataNamed 'board1'
    player.number = board.players.length
    player.color = if 0 == player.number % 2 then 'b' else 'r'
    Leisure.setDataNamed 'player1', player
    App.updatePlayer player), Math.random() * 500
#+END_SRC
* Appearance
:properties:
:hidden: true
:end:
Splice in some special CSS for the board so it floats and looks nice with diff themes

#+BEGIN_SRC coffee :results def
Leisure.addStyles 'gameBoard', """
[game] {
  position: fixed !important;
  top: 50px !important;
  right: 10px !important;
  z-index: 10000 !important;
}
.slides [game] { left: auto !important; }
.googie.slides [game] { top: 200px !important; }
.cthulhu.slides [game] { top: 264px !important; }
.steampunk.slides [game] { top: 150px !important; }
.flat.slides [game] { top: 182px !important; }
.console.slides [game] { top: 182px !important; }
.slides [game] [data-org-type='text'] { display: none; }
.slides .slideholder.firstSlide {
  display: inherit;
}
.slides .slideholder.firstSlide:not(.currentSlide) > * {
  display: none;
}
.slides .slideholder.firstSlide:not(.currentSlide) /deep/ .border {
  border: none;
}
.slides .slideholder.firstSlide:not(.currentSlide) > [game] {
  display: inherit;
}
"""
#+END_SRC


Styles for views
#+BEGIN_SRC css
[data-edit-mode='fancy'][data-org-headline='1'][data-org-note='main'],
.slides [data-edit-mode='fancy'][data-org-headline='1'][data-org-note='main'] {
  padding-right: 600px;
}
* /deep/ input[data-value='name'] {
  width: 100%;
  margin-left: 5px;
  margin-right: 5px;
}
* /deep/ #boardDiv {
  background: url(/connect4/board.svg) 0 0 / 100% 100% no-repeat;
  padding: 8px;
  display: inline-block;
}
* /deep/ #boardDiv table {
  text-align: center;
}
* /deep/ #boardDiv td {
  padding: 5px;
}
* /deep/ #boardDiv img {
  vertical-align: middle;
}
* /deep/ [board] h2 {
  margin-top: 0;
}
* /deep/ .player {
  padding: 10px;
}
#+END_SRC

Adjust Leisure settings on startup.  Delay so it happens after the page draws

#+BEGIN_SRC coffee :results def
setTimeout (->
  Leisure.toggleLeisureBar()
  Leisure.setTheme 'googie'
  Leisure.toggleSlides()
  Leisure.toggleShowHidden()
  ), 1
#+END_SRC
