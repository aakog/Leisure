# primitives
#
# eq a b -> true if they are equal or false otherwise
#
# getType value -> an option containing the type
#
# is value type -> true if the value has type type, false otherwise
#
# eval ast -> evaluates ast and returns the result
#
# parse string -> an Either with ast or error msg (give it two functions)
#
# pretty value -> pretty print a value
#
# funcSource func -> option with function's src or none if no source (e.g. primitive or lambda)
#
#    MONADS
#
# bind m binding -> transform a monad with a function and continue with result of function
#
# print string -> print a string and continue with false
#
# prompt string -> ask user for input and continue with value
#
# return value -> continus with value
#
# js string -> run JS code and continue with value
#
# createS -> create a new state variable and continue with it
#
# getS var -> get the value from the state variable var and continue with it
#
# setS var val -> set the state variable var to val and continue with false
#
#    STRING functions
#
# concat list -> string
#
#    AST-constructors
#
# lit value -> a lit AST node, containing value
#
# ref var-name -> a ref AST node, containing var-name
#
# lambda var-name body-ast -> a lambda AST node, with var-name and the body AST
#
# apply func-ast body-ast -> an apply AST node, with func and body ASTs
#
# prim arg rest-ast -> a prim AST node, rest-ast should either be a ref or a prim
#
#    List functions
#
# MORE DOCUMETATION NEEDED :)
#

afetch k alist  = alist (\h t D . h \key value . eq key k value (afetch k t)) nil

#TODO a when macro would be nice inside do, instead of using caseResult, below
#but this old definition doesn't do it right
#defMacro 'when' \line . line \cond rest . [cond 'do':rest 'nil']

addTokenGroup 'js[' ']'

defMacro 'js[' \list . ['js' ['strCat' ['flatten' [(listify (head list))]]]]

html x = \f . f x
getHtml x = x \h . h

# numerics

iszero = eq 0
positive = 0 <

addToken '--'
addToken '++'

-- = (flip (-)) 1
++ = (1 +)

# Strings
intercalate x l = strCat (intersperse x l)
string = show

# Simplification
visit func l = \\
  result = func func l
  .
  isCons result
    result \h t . cons (visit func h) (visit func t)
    result

simplify exprString = do
  list <- scanLineM exprString
  visit (\func x . isToken x (tokenString x) ((isParens x) (visit func (parensContent x)) x)) list

#######################
## Monads
#######################

range a b = \f . f a b

upto n = range 0 n

repeat n = \f . f n

isRepeat r = hasType r repeat

isRange r = hasType r range

requireJS file = primBind (getValue 'requiredFiles')
  \files . contains files file
    false
    primBind (loadJS file)
      \result . result
        \x . left x
        \_ . primBind (setValue 'requiredFiles' (cons file files))
          \_ . right true

loadJS file = primBind (readFile file)
  \result . result
    \err . err
    \contents . js contents

#######################
## More list stuff
#######################

findOption func list = do
  result = func (head list)
  isNil list
    none
    isNone result
      findOption func (tail list)
      result

## difference lists
dlempty = id
dl item = \rest . item:rest
dlPush list item = dlAppend list (dl item)
dlAppend a b = \rest . a (b rest)

# remove any x's found in list
remove x l = removeIf (eq x) l

# remove any elements where f evals to true, f must take exactly one argument
removeIf f l = filter (compose not f) l

take n list = positive n
  list
    \h t D . cons h (take (-- n) t)
    nil
  nil

takeWhile predicate list = list
  \h t D . predicate (head list)
    cons h (takeWhile predicate t)
    nil
  nil

drop x list = positive x
  list
    \h t D . drop (-- x) t
    nil
  list

dropWhile predicate list = list
  \h t D . predicate h
    dropWhile predicate t
    list
  nil

dropLast n list = reverse (drop n (reverse list))

box n list = list == nil
  nil
  [(take n list) | box n (drop n list)]

at l x = (x == 0) (head l) (at (tail l) (-- (x) ) )

series func n = n:(series func (func n))
from n = series ++ n
fromBy n inc = series ((+) inc) n
fromTo n m = takeWhile ((>) m) (from n)
fromToBy n m inc = takeWhile ((>) m) (fromBy n inc)

# count returns the number of times x appears in l
count x l = countIf (eq x) l

# countIf returns the number of times x satifies f in l, f must take a single argument
# eg. countIf odd? [3 1] gives number: 2
countIf f l = (eq l nil) 0
  + (f (head l) 1 0) (countIf f (tail l))
countIfNot f l = countIf (\x. not (f x)) l

# list sorting
sort l = sortBy (<=) l
sortBy cmp l = mergeSort cmp l

#################
# YAML and JSON
#################

toJson obj = isAlist obj
  toJsonObject (map (\pair . cons (head pair) (toJson (tail pair))) (reverse obj))
  isCons obj
    toJsonArray (map (\item . toJson item) obj)
    obj

toYaml jsonStuff = jsonToYaml (toJson jsonStuff)

#######################
## Cases
#######################

addToken '->'

mkStr tok = concat['"' (tokenString tok) '"']

defMacro 'defCase' \list . \\
  h1 = head list
  t1 = tail list
  h2 = head t1
  t2 = tail t1
  h3 = head t2
  t3 = tail t2
  .
  and[
    isCons list
    isCons t1
    isCons t2
    isTokenString h2 '.']
      makeCaseArgs list (mkStr h1) (mkStr h3) t3 id
      parseErr "Error in case definition -- expected func.name args | condition -> action, but got " list

makeCaseArgs orig funcName altName rest args = rest
  \h t D . isTokenString h '|'
    makeCaseCondition orig funcName altName (args nil) t id
    makeCaseArgs orig funcName altName t (dlPush args h)
  parseErr "Error in case definition -- expected func.name args | condition -> action, but got " orig

makeCaseCondition orig funcName altName args rest cond = rest
  \h t D . isTokenString h '->'
    foldr1 append [['advise' funcName altName (length args) '\\'] args ['.' (cond nil) ['some' t] 'none']]
    makeCaseCondition orig funcName altName args t (dlPush cond h)
 parseErr "Error in case definition -- expected func.name args | condition -> action, but got " orig

######################
# equality
######################

defCase equal.cons a b | and (isCons a) (isCons b) -> and
  equal (head a) (head b)
  equal (tail a) (tail b)

# show
## Generic presentation

showBase func obj = func obj

defCase showBase.unit func obj | hasType obj unit -> ''

defCase showBase.some func obj | hasType obj some -> concat["(some " (showBase func (obj id false)) ")"]

defCase showBase.some2 func obj | hasType obj some2 -> concat["(some2 " (obj (\a b . showBase func [a ', ' b]) false) ")"]

defCase showBase.err func obj | hasType obj err -> concat["(err " (obj id) ")"]

defCase showBase.token func obj | hasType obj token -> obj \str pos .
  isFilepos pos
    pos \file line offset . concat['token ' str ' ' file ' ' line ' ' offset]
    concat['(token ' str ' ' pos ')']

defCase showBase.filepos func obj | hasType obj filepos -> obj \file line offset . concat['(filepos ' file ' ' line ' ' offset ')']

defCase showBase.cons func obj | hasType obj cons -> concatFlat['[' (showBase func (head obj)) (showConsElements func (tail obj))  ']']

showConsElements func list = isCons list
  [' ' (showBase func (head list)) (showConsElements func (tail list))]
  isNil list
    ''
    [' | ' (showBase func list)]

defCase showBase.range func obj | hasType obj range -> obj \start end .
  concat['(range ' start ' ' end ')']

defCase showBase.repeat func obj | hasType obj repeat -> concat['(repeat ' (obj id) ')']

defCase showBase.hamt func obj | hasType obj hamt -> concatFlat[
  'hamt{'
  intersperse (map (\item . [(showBase func (head item)) ':' (showBase func (tail item))]) (hamtPairs obj)) ' '
  '}']

defCase showBase.assoc func obj | isAlist obj -> concatFlat[
  '{'
  intersperse (map (\item . [(showBase func (head item)) ':' (showBase func (tail item))]) obj) ' '
  '}']

defCase showBase.left func obj | hasType obj left -> concat["(left " (showBase func (obj id id)) ")"]

defCase showBase.right func obj | hasType obj right -> concat["(right " (showBase func (obj id id)) ")"]

## presentation

showHtml x = showBase presentHtml x

show x = showBase present x

present x = x

presentHtml x = escapeHtml (present x)

defCase present.string obj | (getType obj) == '*string' -> jsonStringify obj id id

defCase present.func obj | (getType obj) == '*function' -> presentFunction obj

presentFunction obj = do
  info = funcInfo obj
  guts = isNil info
    [(funcName obj
      id
      'unknown')]
    and (> (length info) 1) (getFunction (head info) (\func . hasProperty func 'infix') false)
      [(present (head (tail info))) (head info) | map present (tail (tail info))]
      cons (head info) (map present (tail info))
  concat["(" (join guts ' ') ")"]

defCase presentHtml.func obj | (getType obj) == '*function' ->
  concat['<span class="partial-application">' (presentFunction obj) '</span>']

defCase present.nil obj | hasType obj nil -> 'nil'

defCase present.none obj | hasType obj none -> "none"

defCase presentHtml.html obj | hasType obj html -> obj id

## bind
# If the cont result is not the same type as the monad, we call unit
# We could raise an error but for now we'll just auto-convert
#
# At this point, boolean monads return unit for "false" values
# and the list monad ellides unit values from results
#
# This makes bind useful for list comprehensions, like this:
#
# do
#   x <- [1 2 3]
#   x > 1
#   x + 2

#wrapped -- make a value bindable without interpretation
wrapped x = \f . f x

defCase showBase.wrapped func v | hasType v wrapped -> concat['wrapped ' (showBase func (v id))]

defCase bind.wrapped v cont | hasType v wrapped -> cont (v id)

defCase bind.bool opt cont | or (opt == true) (opt == false) -> opt
  cont true
  unit

defCase bind.option opt cont | isOption opt -> opt
  \value . cont value
  unit

defCase bind.either either cont | isEither either -> either
  \_ . either
  \value . cont value

# when/unless and caseResults
# binding a caseResult exits with the value

caseResult x = \f . f x

isCaseResult v = hasType v caseResult

case test res = test (caseResult res) unit

defCase bind.caseResult data cont | isCaseResult data -> data id

# the first def is for if we can get IO to auto-convert values...
#defCase bind.cons list cont | hasType list cons -> map cont list
defCase bind.cons list cont | hasType list cons -> map cont list
defCase bind.range r cont | hasType r range -> map cont r
defCase bind.repeat r cont | hasType r repeat -> map (cont nil) r

subbind m cont = bind (wrapped m) cont

defCase subbind.monad m cont | or (hasType m '*Monad2') (hasType m 'monad') -> bind m cont
defCase subbind.boolean m cont | m == false -> cont unit
defCase subbind.option m cont | hasType m none -> cont unit
defCase subbind.either m cont | hasType m left -> cont unit

#######################
## monadic iteration
#######################

runRepeat count limit f = count < limit
  [(f count) | runRepeat (count + 1) limit f]
  []

defCase map.range func r | isRange r -> r \a b . runRepeat a b func

defCase map.repeat item r | isRepeat r -> r \n . runRepeat 0 n \x . item

doubleBind x = \f . f x

defCase bind.doubleBind fe cont | hasType fe doubleBind ->
  bind (fe id) \x . bind x cont

defMacro 'if' \list . ['doubleBind' list]

defMacro 'foreach' \list . ['doubleBind' list]

#######################
## pre/postconditions
#######################

# defWrapper func realFunc x y -> log "Calling func" realFunc x y
defMacro 'defWrapper' \list . grabLeftOfArrow list nil \left right .
  ['override' concat["'" (strTokenString (head left)) "'"] (append ['\\' | tail left] ['.' | right])]

grabLeftOfArrow list left cont = isTokenString (head list) '->'
  cont (reverse left) (tail list)
  grabLeftOfArrow (tail list) (head list) : left cont

defWrapper head oldHead list -> assertType 'head argument' cons list \h t . h
defWrapper tail oldTail list -> assertType 'tail argument' cons list \h t . t
defWrapper hamtWith oldHamtWith key value hamt -> oldHamtWith
  assertType 'hamtWith key' '*string' key
  value
  hamt

#######################
## output tag functions
#######################

html x = \f . f x

#forward 'getURI'
#
#save = do
#  uri <- getURI
#  doc <- getDocument
#  write uri doc
#
#saveAs newUri = do
#  doc <- getDocument
#  write newUri doc
#
#open uri = do
#  contents? <- read uri
#  contents?
#    \data. do
#      setURI uri
#      replaceDocument data
#    \err . print concat['Error: ' err]

defTokenPack 'util' [['->' '--' '++'] ['js[':']'] []]
addStdTokenPacks ['util']

#####
# AST funcs
#####
_1of2 s = s \a b . a
_2of2 s = s \a b . b
_1of3 s = s \a b c . a
_2of3 s = s \a b c . b
_3of3 s = s \a b c . c
_1of4 s = s \a b c d . a
_2of4 s = s \a b c d . b
_3of4 s = s \a b c d . c
_4of4 s = s \a b c d . d
getLitValue ast = _1of2 ast
getLitRange ast = _2of2 ast
getRefName ast = _1of2 ast
getRefRange ast = _2of2 ast
getLambdaName ast = _1of3 ast
getLambdaBody ast = _2of3 ast
getLambdaRange ast = _3of3 ast
getApplyFunc ast = _1of2 ast
getApplyArg ast = _2of2 ast
getLetName ast = _1of4 ast
getLetValue ast = _2of4 ast
getLetBody ast = _3of4 ast
getLetRange ast = _4of4 ast
getAnnoName ast = _1of3 ast
getAnnoData ast = _2of3 ast
getAnnoBody ast = _3of3 ast


####
# Util funcs
####

definitionList = do
  f <- funcList
  m <- getValue 'macroDefs'
  sort (append f (map head m))

eval str = do
  ast <- newParseLine 0 nil str
  ifNotErr ast (runAst ast)
