{
  "version": 3,
  "file": "simpleParseJS.js",
  "sourceRoot": "..",
  "sources": [
    "src/simpleParseJS.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\r\nCopyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\r\n\r\n(licensed with ZLIB license)\r\n\r\nThis software is provided 'as-is', without any express or implied\r\nwarranty. In no event will the authors be held liable for any damages\r\narising from the use of this software.\r\n\r\nPermission is granted to anyone to use this software for any purpose,\r\nincluding commercial applications, and to alter it and redistribute it\r\nfreely, subject to the following restrictions:\r\n\r\n1. The origin of this software must not be misrepresented; you must not\r\nclaim that you wrote the original software. If you use this software\r\nin a product, an acknowledgment in the product documentation would be\r\nappreciated but is not required.\r\n\r\n2. Altered source versions must be plainly marked as such, and must not be\r\nmisrepresented as being the original software.\r\n\r\n3. This notice may not be removed or altered from any source distribution.\r\n###\r\n\r\npath = require 'path'\r\n\r\nbaseDir = path.resolve path.dirname(module.filename) + '/../../../build'\r\n\r\nrequirejs = require('requirejs').config\r\n  baseUrl: baseDir\r\n  paths:\r\n    lib: baseDir + '/lib'\r\n    immutable: baseDir + '/lib/immutable-3.8.1.min'\r\n\r\n((typeof window != 'undefined' && window) || global).Lazy = requirejs('lib/lazy')\r\n\r\n{\r\n  newCall\r\n} = requirejs 'base'\r\n{\r\n  cons,\r\n  Nil,\r\n  consFrom,\r\n  head,\r\n  tail,\r\n  define,\r\n  setDataType,\r\n  setType,\r\n  ensureLeisureClass,\r\n  ref,\r\n  lit,\r\n  apply,\r\n  lambda,\r\n  llet,\r\n  anno,\r\n  ast2Json,\r\n  resolve,\r\n  lazy,\r\n  dummyPosition,\r\n} = root = module.exports = requirejs './ast'\r\n\r\nrz = resolve\r\nlz = lazy\r\nlc = Leisure_call\r\n{\r\n  runMonad2,\r\n  defaultEnv,\r\n  identity,\r\n} = requirejs './runtime'\r\n{gen} = requirejs './gen'\r\n_ = requirejs 'lodash.min'\r\n\r\ndelimiterListPrefix = /\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\n *|#.*/.source\r\n\r\ndelimiterList = [\r\n  '\\\\(',\r\n  '\\\\)',\r\n  ' +',\r\n  '\\\\.',\r\n  '\\\\\\\\\\\\\\\\',\r\n  '\\\\\\\\@',\r\n  '\\\\\\\\',\r\n]\r\n\r\ndelimiters = _.zipObject(_.map(delimiterList, (x)->[x, true]))\r\n\r\ndelimiterPat = null\r\n\r\ngetDelimiterInfo = -> _.clone delimiterList\r\n\r\nsetDelimiterInfo = (info)->\r\n  delimiterList = info\r\n  delimiters = _.zipObject(_.map(delimiterList, (x)->[x, true]))\r\n  makeDelimterPat()\r\n\r\ndefPat = /^([^ =]+).*=/\r\n\r\nmakeDelimterPat = ->\r\n  # reverse sorting by length is important for tokens that prefixe other tokens\r\n  _.sortBy delimiters, (x)->-x.length\r\n  root.delimiterPat = delimiterPat = new RegExp \"(#{delimiterListPrefix}|#{delimiterList.join('|')})\"\r\n\r\nregexpEscapePat = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g\r\n\r\naddDelimiter = (del)->\r\n  if !delimiters[del]\r\n    delimiters[del] = true\r\n    delimiterList.push(del.replace regexpEscapePat, \"\\\\$&\")\r\n    makeDelimterPat()\r\n\r\nmakeDelimterPat()\r\n\r\n############\r\n# TOKENS\r\n############\r\n\r\nif newCall\r\n  L_token = setDataType ((txt, pos)-> setType ((f)-> lc rz(f), txt, pos), 'token'), 'token'\r\n  tokenPos = (t)-> t(lz (txt, pos)-> lz pos)\r\n  token = (str, pos)-> L_token (lz str), (lz pos)\r\n  tokenString = (t)-> t(lz (txt, pos)-> rz txt)\r\nelse\r\n  L_token = setDataType ((txt)->(pos)-> setType ((f)-> rz(f)(txt)(pos)), 'token'), 'token'\r\n  tokenPos = (t)-> t(lz (txt)->(pos)-> lz pos)\r\n  token = (str, pos)-> L_token(lz str)(lz pos)\r\n  tokenString = (t)-> t(lz (txt)->(pos)-> rz txt)\r\n\r\n#ensureLeisureClass 'token'\r\n#Leisure_token.prototype.toString = -> \"Token(#{JSON.stringify(tokenString(@))}, #{tokenPos(@)})\"\r\n\r\nisToken = (t)-> t instanceof Leisure_token\r\n\r\nif newCall\r\n  L_parens = setDataType ((left, right, content)-> setType ((f)-> lc rz(f), left, right, content), 'parens'), 'parens'\r\n  parens = (start, end, content)->\r\n    if content instanceof Leisure_cons && tail(content) == Nil then parens start, end, head(content)\r\n    else if isToken content then content\r\n    else\r\n      lc L_parens, (lz start), (lz end), (lz content)\r\n  parensFromToks = (left, right, content)->\r\n    start = tokenPos left\r\n    end = tokenPos(right) + tokenString(right).length\r\n    lc L_parens, (lz start), (lz end), (lz content)\r\n  parensStart = (p)-> p(lz (s, e, l)-> rz s)\r\n  parensEnd = (p)-> p(lz (s, e, l)-> e)\r\n  parensContent = (p)-> p(lz (s, e, l)-> rz l)\r\n  isParens = (p)-> p instanceof Leisure_parens\r\n  stripParens = (p)-> if isParens p then parensContent p else p\r\nelse\r\n  L_parens = setDataType ((left)->(right)->(content)-> setType ((f)-> rz(f)(left)(right)(content)), 'parens'), 'parens'\r\n  parens = (start, end, content)->\r\n    if content instanceof Leisure_cons && tail(content) == Nil then parens start, end, head(content)\r\n    else if isToken content then content\r\n    else\r\n      L_parens(lz start)(lz end)(lz content)\r\n  parensFromToks = (left, right, content)->\r\n    start = tokenPos left\r\n    end = tokenPos(right) + tokenString(right).length\r\n    L_parens(lz start)(lz end)(lz content)\r\n  parensStart = (p)-> p(lz (s)->(e)->(l)-> rz s)\r\n  parensEnd = (p)-> p(lz (s)->(e)->(l)-> e)\r\n  parensContent = (p)-> p(lz (s)->(e)->(l)-> rz l)\r\n  isParens = (p)-> p instanceof Leisure_parens\r\n  stripParens = (p)-> if isParens p then parensContent p else p\r\n\r\n\r\n#ensureLeisureClass 'parens'\r\n#Leisure_parens.prototype.toString = -> \"Parens(#{parensStart @}, #{parensEnd @}, #{parensContent @})\"\r\n\r\n\r\nL_parseErr = setDataType ((msg)-> setType ((f)-> rz(f)(msg)), 'parseErr'), 'parseErr'\r\nensureLeisureClass 'parseErr'\r\nLeisure_parseErr.prototype.toString = -> \"ParseErr(#{JSON.stringify(parseErrMsg(@))})\"\r\n\r\nparseErr = (msg)->\r\n  #L_parseErr(lz msg)\r\n  throw new Error msg\r\nparseErrMsg = (e)-> e(lz (msg)-> rz msg)\r\n\r\nmakeTokens = (strings, start)->\r\n  if strings == Nil then Nil\r\n  else makeMoreTokens strings, start\r\n\r\nmakeMoreTokens = (strings, start)->\r\n  first = head strings\r\n  if first[0] in ' #' then makeTokens(tail(strings), start + first.length)\r\n  else if first[0] == '\\n' and (head tail strings)[0] == '#' then makeTokens(tail(tail strings), start + first.length + (head(tail strings).length))\r\n  else cons token(first, start), makeTokens(tail(strings), start + first.length)\r\n\r\nsplitTokens = (str)-> consFrom(_.filter str.split(delimiterPat), (s)-> s.length)\r\n\r\ntokens = (str)-> makeTokens splitTokens(str), 0\r\n\r\n#############\r\n## Parsing\r\n#############\r\n\r\nisTokenString = (t, str)-> isToken(t) && tokenString(t) == str\r\nisTokenStart = (t, str)-> isToken(t) && tokenString(t).substring(0, str.length) == str\r\n\r\nwithCons = (l, nilCase, cont)-> if l instanceof Leisure_cons then cont head(l), tail(l) else nilCase()\r\n\r\nparseToks = (toks, cont)->\r\n  if toks == Nil then cont Nil\r\n  else parseTok toks, (h, t)->\r\n    parseToks t, (res)->\r\n      cont cons h, res\r\n\r\nparseTok = (toks, cont)->\r\n  withCons toks, (->Nil), (h, t)->\r\n    if isTokenString h, '(' then parseGroup h, t, Nil, cont\r\n    else if isTokenStart h, '\\n' then parseIndent h, t, Nil, cont\r\n    else cont h, t\r\n\r\nparseGroup = (left, toks, gr, cont)->\r\n  withCons toks, (->parseErr \"Unterminated group starting at #{tokenPos left}\"), (h, t)->\r\n    if isTokenString h, ')' then cont parensFromToks(left, h, gr.reverse()), t\r\n    else parseTok toks, (restH, restT)->\r\n      parseGroup left, restT, cons(restH, gr), cont\r\n\r\nparseIndent = (indent, toks, gr, cont)->\r\n  withCons toks, (-> cont parens(tokenPos(indent), lexEnd(head gr), gr.reverse()), Nil), (h, t)->\r\n    if isTokenString(h, ')') || (isTokenStart(h, '\\n') && tokenString(h).length <= tokenString(indent).length) then cont parens(tokenPos(indent), tokenPos(h), gr.reverse()), toks\r\n    else parseTok toks, (restH, restT)->\r\n      parseIndent indent, restT, cons(restH, gr), cont\r\n\r\nidentity = (x)-> x\r\n\r\n#parse = (str)-> parseToks tokens(str), identity\r\nparse = (str)-> parseIndent token('\\n', 0), tokens(str), Nil, (h, t)-> stripParens h\r\n\r\n#################\r\n## Creating ASTs\r\n#################\r\n\r\n#\r\n# The CPS-like technique, here, seems very close to monads\r\n# if it's really just monads, maybe this could be done with do\r\n# Need to learn monads a little deeper, I think\r\n\r\nparseToAst = (str)-> createAst parse(str), Nil, identity\r\n\r\nwithToken = (tok, nonTokenCase, cont)-> if isToken tok then cont (tokenString tok) else nonTokenCase()\r\n\r\nwithParens = (p, err, cont)-> if isParens p then cont parensContent p else err()\r\n\r\nstrip = (list, cont)-> withParens list, (->cont list), (c)-> strip c, cont\r\n\r\nposition = (thing)->\r\n  if isToken thing then tokenPos thing\r\n  else if isParens thing then parensStart thing\r\n  else if thing instanceof Leisure_cons then position head thing\r\n  else -1\r\n\r\nlexEnd = (thing)->\r\n  if isToken thing then tokenPos(thing) + tokenString(thing).length\r\n  else if isParens thing then parensEnd(thing)\r\n  else if thing instanceof Leisure_cons then lexEnd thing.last()\r\n  else -1\r\n\r\nloc = (thing)->\r\n  p = position thing\r\n  \"at #{if p == -1 then 'an unknown location' else p}\"\r\n\r\ncreateAst = (inList, names, cont)-> strip inList, (list)->\r\n  if isToken(list) then createLitOrRef tokenString(list), names, cont\r\n  else withCons list, (-> cont Nil), (h, t)->\r\n    if isTokenString(h, '\\\\\\\\') then createLet h, t, names, cont\r\n    else if isTokenString(h, '\\\\@') then createAnno h, t, names, cont\r\n    else if isTokenString(h, '\\\\') then createLambda h, t, names, cont\r\n    else createApply list, names, cont\r\n\r\ncreateLitOrRef = (tok, names, cont)->\r\n  if names.find((el)-> el == tok) != Nil then cont ref tok, dummyPosition\r\n  else\r\n    try\r\n      if tok[0] in \"\\\"'\" then cont lit (parseString tok.substring 1, tok.length - 1), dummyPosition\r\n      else if (tok[0] >= '0' and tok[0] <= '9') or tok[0] == '-' then cont lit (JSON.parse tok), dummyPosition\r\n      else cont ref tok, dummyPosition\r\n    catch err\r\n      cont ref tok, dummyPosition\r\n\r\ncharCodes =\r\n  \"b\": '\\b'\r\n  \"f\": '\\f'\r\n  \"n\": '\\n'\r\n  \"r\": '\\r'\r\n  \"t\": '\\t'\r\n  \"v\": '\\v'\r\n  \"'\": '\\''\r\n  \"\\\"\": '\\\"'\r\n  \"\\\\\": '\\\\'\r\n\r\nparseString = (str)->\r\n  res = ''\r\n  i = 0\r\n  parseCode = (pat, radix)->\r\n    code = str.substring(i).match(pat)[0]\r\n    res += String.fromCharCode parseInt code, radix\r\n    i += code.length\r\n  while i < str.length\r\n    if str[i] == '\\\\'\r\n      i++\r\n      if str[i] >= '0' && str[i] <= '9' then parseCode /[0-9]+/, 8\r\n      else if str[i] == 'x'\r\n        i++\r\n        parseCode /[0-9a-fA-F][0-9a-fA-F]/, 16\r\n      else if str[i] == 'u'\r\n        i++\r\n        parseCode /[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]/, 16\r\n      else if !charCodes[str[i]] then throw new Error \"Unknown character escape: \\\\#{str[i]}\"\r\n      else res += charCodes[str[i++]]\r\n    else res += str[i++]\r\n  res\r\n\r\ncreateLambda = (start, list, names, cont)->\r\n  withCons list, (-> parseErr \"No variable or body for lambda #{loc start}\"), (name, rest)->\r\n    withCons rest, (-> parseErr \"No body for lambda #{loc start}\"), (dot, body)->\r\n      withToken name, (-> parseErr \"Expecting name for lambda #{loc start}\"), (n)->\r\n        if isTokenString dot, '.' then createAst body, cons(n, names), (bodyAst)->\r\n          cont lambda n, bodyAst, dummyPosition\r\n        else createLambda start, rest, cons(n, names), (bodyAst)->\r\n          cont lambda n, bodyAst, dummyPosition\r\n\r\ncreateAnno = (start, list, names, cont)->\r\n  withCons list, (-> parseErr \"No annotation name or data in annotation #{loc start}\"), (name, rest)->\r\n    withCons rest, (-> parseErr \"No data for annotation #{loc start}\"), (data, rest)->\r\n      finish = (data, body)-> createAst body, names, (bodyAst)->\r\n        cleanTokens start, name, (name)->\r\n          cleanTokens start, data, (data)->\r\n            cont anno(name, data, bodyAst, dummyPosition)\r\n      if isTokenString data, '.' then finish Nil, rest\r\n      else\r\n        strip data, (data)->\r\n          withCons rest, (-> parseErr \"No body for annotation #{loc start}\"), (dot, body)->\r\n            if isTokenString dot, '.' then finish data, body\r\n            else parseErr \"Annotation expected dot after name and data\"\r\n\r\ncleanTokens = (start, toks, cont)->\r\n  if isToken toks then cont tokenString toks\r\n  else withCons toks, (->cont toks), (head, tail)->\r\n    cleanTokens start, head, (head)->\r\n      cleanTokens start, tail, (tail)->\r\n        cont cons head, tail\r\n\r\ncreateApply = (inList, names, cont)-> strip inList, (list)->\r\n  withCons list, (-> parseErr \"Expecting a non-empty list #{loc inList}\"), (h, t)->\r\n    createAst h, names, (func)-> chainApply func, t, names, cont\r\n\r\nchainApply = (func, list, names, cont)->\r\n  withCons list, (-> cont func), (argItem, rest)->\r\n    if isToken(argItem) and tokenString(argItem) in ['\\\\', '\\\\\\\\', '\\\\@'] then createAst list, names, (arg)->\r\n      cont apply(func, arg, dummyPosition)\r\n    else\r\n      createAst argItem, names, (arg)->\r\n        chainApply apply(func, arg, dummyPosition), rest, names, cont\r\n\r\n# let structures allow mutual recursion\r\n# the syntax is similar to the top level\r\n# they are a series of bindings followed by a single expression\r\n# \\\\ (a = b) (d e f = g h) . expr\r\n# the first case binds a variable to an expression\r\n# the second case binds a variable to a lambda\r\ncreateLet = (start, list, names, cont)->\r\n  withCons list, (-> parseErr \"No variable or body for let #{loc start}\"), (binding, body)->\r\n    if body == Nil then createAst binding, names, cont\r\n    else getLetNames start, list, names, (newNames)->\r\n      createSublets start, binding, body, newNames, cont\r\n\r\ngetLetNames = (start, list, names, cont)->\r\n  withCons list, (-> cont names), (binding, body)->\r\n    if isTokenString binding, '.' then cont names\r\n    else withParens binding, (-> parseErr \"Let expected binding, but no parens or indented line at #{loc start}\"), (def)->\r\n      withCons def, (-> parseErr \"Let expected binding, but no list #{loc start}\"), (name, rest)->\r\n        withToken name, (-> parseErr \"Let expected binding but no name #{loc start}\"), (str)->\r\n          getLetNames start, body, cons(str, names), cont\r\n\r\ncreateSublets = (start, binding, body, names, cont)->\r\n  if isTokenString binding, '.' then createAst body, names, cont\r\n  else withCons body, (-> parseErr \"Let expected a body\"), (bodyH, bodyT)->\r\n    getNameAndDef parensStart(binding), parensContent(binding), names, (name, def)->\r\n      createSublets start, bodyH, bodyT, names, (bodyAst)->\r\n        cont llet (tokenString name), def, bodyAst, dummyPosition\r\n\r\ngetNameAndDef = (pos, binding, names, cont)->\r\n  withCons tail(binding), (-> parseErr \"Let expected binding at #{pos}\"), (snd, sndT)->\r\n    if isTokenString snd, '=' then createAst sndT, names, (def)-> cont head(binding), def\r\n    else getLetLambda pos, tail(binding), Nil, names, (lamb)-> cont head(binding), lamb\r\n\r\ngetLetLambda = (pos, def, args, names, cont)->\r\n  withCons def, (-> parseErr \"Let expected binding at #{pos}\"), (arg, rest)->\r\n    if !isToken arg then parseErr \"Let expected binding at #{pos}\"\r\n    else if isTokenString arg, '=' then createAst cons(token('\\\\', pos), args.reverse()).append(cons(token('.', position(arg)), rest)), names, cont\r\n    else getLetLambda pos, rest, cons(arg, args), names, cont\r\n\r\n###############\r\n# Compiling\r\n###############\r\n\r\nscanLine = (str, isDef, isExpr)->\r\n  try\r\n    toks = tokens str\r\n    if str.match defPat\r\n      name = head toks\r\n      func = if isTokenString (head tail toks), '='\r\n        if isTokenString (head tail tail toks), '\\\\' then setTypeAnno (head tail tail toks), (tail tail toks), tokenString name\r\n        else tail tail toks\r\n      else cons token('\\\\', position(head tail toks) - 1), transformDef name, tail toks\r\n      parseToks checkSetDataType(func, tail(toks), name), (list)->\r\n        isDef createDef(list, name, arity(tail(toks), 0), str)\r\n    else\r\n      parseToks toks, (list)->\r\n        isExpr list\r\n  catch err\r\n    console.log \"Error parsing <#{str}>, #{err.message}\"\r\n    err.message = \"Error parsing <#{str}>, #{err.message}\"\r\n    throw err\r\n\r\nparseLine = (str, names, isDef, isExpr)->\r\n  astCallback = (cb)-> (list)-> createAst list, names, (ast)-> cb ast\r\n  scanLine str, astCallback(isDef), astCallback(isExpr)\r\n\r\ngenLine = (str, names, isDef, isExpr)->\r\n  parseLine str,\r\n    names,\r\n    ((ast)-> isDef gen ast),\r\n    ((ast)-> isExpr gen ast)\r\n\r\ncompileLine = (str, names, isDef, isExpr)->\r\n  genLine str,\r\n    names,\r\n    ((code)-> runMonad2 (eval \"(#{code})\"), defaultEnv, isDef),\r\n    ((code)-> runMonad2 (eval \"(#{code})\"), defaultEnv, isExpr)\r\n\r\ntransformDef = (name, toks)->\r\n  if isTokenString head(toks), '='\r\n    if isTokenString head(tail toks), '\\\\' then cons token('.', position(head toks)), setTypeAnno head(tail toks), tail(toks), tokenString name\r\n    else cons token('.', position(head toks)), tail toks\r\n  else cons head(toks), transformDef name, tail toks\r\n\r\nsetTypeAnno = (start, toks, name)->\r\n  pos = position start\r\n  tok = (str)-> token(str, pos)\r\n  cons tok('\\\\@'), cons tok('type'), cons tok(name), cons tok('.'), toks\r\n\r\ncreateDef = (def, name, arity, src)->\r\n  tok = (str)-> token(str, (position def))\r\n  cons tok('define'), cons tok(JSON.stringify tokenString name), cons tok(String(arity)), cons tok(JSON.stringify src), cons (cons def, Nil), Nil\r\n\r\ncheckSetDataType = (toks, curToks, name)->\r\n  if isTokenString(head(curToks), '=')\r\n    if isTokenString (head tail curToks), '\\\\' then setDataTypeAnno toks, name else toks\r\n  else checkSetDataType toks, tail(curToks), name\r\n\r\nsetDataTypeAnno = (toks, name)->\r\n  pos = position toks\r\n  cons token('\\\\@', pos), cons token('dataType', pos), cons token(tokenString(name), pos), cons token('.', pos), toks\r\n\r\narity = (toks, n)-> if isTokenString head(toks), '=' then n else arity tail(toks), n + 1\r\n\r\ntokListStr = (toks)-> JSON.stringify toks.map((t)->tokenString t).join(' ')\r\n\r\nlinesForFile = (text)-> _.filter text.replace(/\\r/g, '').split(/\\n(?=[^ ]|$)/), (line)-> not line.match /^[ \\i]*\\#.*|^[ \\i]*$|^\\n[ \\i]*$/\r\n\r\nnamesForLines = (lines)-> _.reduce lines,\r\n  ((result, line)-> if m = line.match defPat then cons m[1], result else result),\r\n  Nil\r\n\r\ncompileFile = (text, filename)->\r\n  id = (x)-> x\r\n  lines = linesForFile text\r\n  names = namesForLines lines\r\n  #\"if (typeof module != 'undefined') require('source-map-support').install();\\n\" +\r\n  #   _.map(lines, (line)-> \"runMonad2(#{genLine line.trim(), names, id, id}, null, function(){});\\n\").join('') +\r\n  #  (if filename then \"\\n//@ sourceURL=#{filename}\\n\" else \"\")\r\n  \"'use strict';\\ndefine([], function(){\\n  if (typeof module != 'undefined') require('source-map-support').install();\\n  return L_runMonads([\\n    \" +\r\n     _.map(lines, (line)-> \"function(){return #{genLine line.trim(), names, id, id};}\").join(', \\n    ') +\r\n    (if filename then \"\\n  ]);\\n});\\n//@ sourceURL=#{filename}\\n\" else \"\")\r\n\r\njsonForFile = (text)->\r\n  id = (x)-> x\r\n  lines = linesForFile text\r\n  names = namesForLines lines\r\n  _.map(lines, (line)-> JSON.stringify ast2Json parseLine line, names, id, id).join('\\n')\r\n\r\nroot.splitTokens = splitTokens\r\nroot.tokens = tokens\r\nroot.tokenString = tokenString\r\nroot.parse = parse\r\nroot.parseToAst = parseToAst\r\nroot.compileLine = compileLine\r\nroot.parseLine = parseLine\r\nroot.scanLine = scanLine\r\nroot.genLine = genLine\r\nroot.compileFile = compileFile\r\nroot.jsonForFile = jsonForFile\r\nroot.linesForFile = linesForFile\r\nroot.getDelimiterInfo = getDelimiterInfo\r\nroot.setDelimiterInfo = setDelimiterInfo\r\nroot.addDelimiter = addDelimiter\r\n"
  ]
}