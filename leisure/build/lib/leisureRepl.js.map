{
  "version": 3,
  "file": "leisureRepl.js",
  "sourceRoot": "..",
  "sources": [
    "src/leisureRepl.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\nrequire('source-map-support').install()\n\npath = require 'path'\n\nbaseDir = path.resolve path.dirname(module.filename) + '/../../../build'\nbaseLeisureDir = baseDir + '/leisure/'\nquiet = false\n\nrequirejs = require('requirejs').config\n  baseUrl: baseDir\n  paths:\n    lib: baseDir + '/lib'\n    #immutable: baseDir + '/lib/immutable-3.8.1.min'\n    immutable: 'lib/immutable-3.8.1.min'\n    acorn: 'lib/acorn-3.2.0'\n    acorn_loose: 'lib/acorn_loose-3.2.0'\n    acorn_walk: 'lib/acorn_walk-3.2.0'\n    handlebars: 'lib/handlebars-v4.0.5'\n    lispyscript: 'lib/lispyscript/leisureReplPatch'\n    lodash:      'lib/lodash.full-4.14.1'\n    bluebird:    'lib/bluebird-3.5.0'\n    fingertree:  'lib/fingertree'\n    \"browser-source-map-support\": 'lib/browser-source-map-support-0.4.14'\n\n#(window ? global).requirejs = requirejs\n((typeof window != 'undefined' && window) || global).Lazy = requirejs('lib/lazy')\n\n#require '10-namespace'\n\nError.stackTraceLimit = Infinity\n#Error.stackTraceLimit = 50\n{\n  newCall\n  resolve\n  lazy\n  defaultEnv\n} = root = module.exports = requirejs './base'\nglobal.Leisure_generateDebuggingCode = false\nrz = resolve\nlz = lazy\nlc = Leisure_call\n_ = requirejs 'lodash'\nfs = require 'fs'\n#compiler = require 'compiler'\ngenFilePrefix = null\ngennedLsrFile = null\nroot.batchMode = false\n\nif _.includes process.argv, '-x' then global.L_DEBUG = true\n\n{\n  getType\n  setType\n  setDataType\n  ast2Json\n  json2Ast\n  Nil\n} = requirejs './ast'\nglobal.btoa = require 'btoa'\n{\n  gen\n  genMap\n  genSource\n  withFile\n  sourceNode\n  SourceNode\n  setMegaArity\n  CodeGenerator\n  jsCodeFor\n} = requirejs './gen'\n{\n  readFile\n  writeFile\n#} = requirejs './node'\n} = require './node'\n{\n  identity\n  runMonad2\n  isIO\n  asyncMonad\n  replaceErr\n  getMonadSyncMode\n  setWarnAsync\n  requireFiles\n  getValue\n} = requirejs './runtime'\n{\n  Promise\n} = requirejs 'bluebird'\n{\n  tangle\n} = requirejs './tangle'\n\nglobal.setType = setType\nglobal.setDataType = setDataType\nglobal.defaultEnv = defaultEnv\nglobal.identity = identity\n#global.Leisure = root\n\n# compilation stage\n# 0: use CoffeeScript Leisure compiler\n# 1: use only SimpleParse.lsr\n# 2: use generatedPrelude.lsr\n#\nstage = 2\nstd = true\nstages = ['simpleParseJS', 'simpleParse', 'generatedPrelude']\nshouldNsLog = false\npargs = null\n\ndiag = false\ninErr = false\n\nreadline = require('readline')\nroot.inputProcessor = null # function to process input, defaults to evalInput\n\nroot.replEnv = replEnv =\n  prompt: (msg, cont)->\n    rl?.question(msg, (x)->\n      try\n        cont x\n      catch err\n        console.log \"ERROR HANDLING PROMPT: #{err.stack}\"\n    )\n  #presentValue: (x)-> show(x) + '\\n'\n  presentValue: (x)-> show(x)\n\nreplEnv.__proto__ = defaultEnv\n\ngetParseErr = (x)-> x lz (value)->rz value\n\nerrorString = (err)-> err.stack ? err.toString()\n\nprocess.on 'uncaughtException', (err)->\n  console.log \"Uncaught Exception: #{err.stack || errorString err}\"\n\nroot.evalInput = evalInput = (text, cont, noErrHandling)->\n  if text\n    source = null\n    try\n      if newCall\n        result = lc L_newParseLine, 0, Nil, text\n      else\n        result = rz(L_newParseLine)(0)(lz Nil)(lz text)\n      runMonad2 result, replEnv, (ast)->\n        try\n          if getType(ast) == 'err'\n            cont \"PARSE ERORR: #{getParseErr ast}\"\n          else\n            if diag\n              if L_simplify?\n                runMonad2 (rz(L_simplify) lz text), replEnv, (result)-> console.log \"\\nSIMPLIFIED: #{result}\"\n              console.log \"\\nAST: #{ast}\"\n            source = genSource text, ast\n            if diag\n              console.log \"\\nCODE: #{source}\"\n            result = eval source\n            #if isIO result then console.log \"(processing IO monad)\"\n            runMonad2 result, replEnv, cont\n        catch err\n          #console.log \"caught error evaluating source:\\n#{source}\"\n          #cont rz(L_err)(lz (errorString err))\n          inErr = true\n          if noErrHandling then throw err\n          else global.handleError err, cont, text, source\n    catch err\n      #console.log \"caught error evaluating source:\\n#{source}\"\n      #cont rz(L_err)(lz (errorString err))\n      if !inErr\n        inErr = true\n        if noErrHandling then throw err\n        else global.handleError err, cont, text, source\n    finally\n      inErr = false\n  else cont ''\n\nglobal.handleError = (err, cont, text, source)->\n  console.log \"ERROR!!!!\"\n  console.log \"caught error evaluating source:\\n#{source}\"\n  cont rz(L_err)(lz (errorString err))\n  \n\nhelp = ->\n  console.log \"\"\"\n  Welcome to the Leisure REPL!\n\n  Here are the commands:\n  :d -- toggle diagnostics\n  :s expr -- simplify an expression\n  :{ -- start multiline input\n  :} -- end multiline input\n  :h -- print this message\n  ! -- evaluate JavaScript expression (after the !)\n  funcs -- list all known functions (this is really just a monad)\n  (anything else) -- evaluate Leisure code\n\n\"\"\"\n\noldFunctionCount = 0\nleisureFunctions = null\n\nupdateCompleter = (rl)->\n  if root.functionCount != oldFunctionCount\n    oldFunctionCount = root.functionCount\n    leisureFunctions = global.leisureFuncNames.toArray().concat (getValue('macroDefs')?.map.keySeq().toArray() ? [])\n\ntokenString = (t)-> t(lz (txt)->(pos)-> rz txt)\nrl = null\nmultiline = false\nlines = null\nhistoryFile = null\nleisureDir = null\n\nleisureCompleter = (line)->\n  if newCall\n    tokens = lc(L_tokens, line, getValue 'tokenPat').toArray()\n  else\n    tokens = rz(L_tokens)(lz line)(lz getValue 'tokenPat').toArray()\n  if tokens.length > 0\n    origLast = tokenString(tokens[tokens.length - 1])\n    last = origLast.toLowerCase()\n    completions = _.filter(leisureFunctions, (el)->el.toLowerCase().indexOf(last) == 0)\n    if completions.length == 1\n      newLast = completions[0].substring 0, last.length\n      rl.line = line.substring(0, line.length - last.length) + newLast\n      [completions, newLast]\n    else [_.filter(leisureFunctions, (el)->el.toLowerCase().indexOf(last) == 0), origLast]\n  else [[], line]\n\ninterrupted = false\n\nroot.promptText = 'Leisure> '\n\nroot.processLine = null\n\nroot.nextLine = -> ''\n\nroot.prompt = prompt = ->\n  if root.batchMode then root.nextLine()\n  else\n    updateCompleter()\n    rl.setPrompt root.promptText\n    rl.prompt()\n\nroot.show = show = (obj, handler)-> if L_show? then rz(L_show)(lz obj) else String obj\n\nroot.defaultEnv.err = (err)->\n  console.log \"REPL Error: #{err.stack ? err}\"\n  multiline = false\n  prompt()\n\nstartMultiline = ->\n  if multiline then console.log 'Already reading multiline input'\n  else\n    multiline = true\n    lines = []\n    rl?.setPrompt '... '\n\nfinishMultiline = (dumpInput)->\n  multiline = false\n  line = lines.join '\\n'\n  l = lines\n  lines = []\n  if dumpInput\n    prompt()\n  else\n    try\n      if line.substring(0,2) == ':s'\n        if L_simplify?\n          runMonad2 (rz(L_simplify) line.substring(2)), replEnv, (result)->\n            console.log \"\\n#{result}\"\n        else console.log 'No simplify function.  Load std.lsr'\n      else if line.match /^!/ then console.log eval line.substring 1\n      else\n        root.inputProcessor line, (result)->\n          #console.log 'RESULT: ' + show(result)\n          if !(result instanceof Leisure_unit) then console.log show(result)\n          prompt()\n        return\n    catch err\n      console.log \"ERROR: #{err.stack}\"\n    prompt()\n\nroot.processLine = (line)->\n  interrupted = false\n  if !root.batchMode && rl.history[0] == rl.history[1] then rl.history.shift()\n  else if line.trim() then fs.appendFile historyFile, \"#{line}\\n\", (->)\n  switch line.trim()\n    when ':d'\n      diag = !diag\n      console.log \"Diag: #{if diag then 'on' else 'off'}\"\n    when ':{'\n      startMultiline()\n    when ':}'\n      if ! multiline then console.log \"Not reading multiline input.\"\n      else\n        finishMultiline()\n    when ':h' then help()\n    else\n      if m = line.match /^:{(.*)$/\n        startMultiline()\n        if m[1] then lines.push m[1]\n      else if multiline\n        if !line then finishMultiline()\n        else lines.push line\n      else\n        lines = [line]\n        finishMultiline()\n\nrepl = (config)->\n  evalInput 'resetStdTokenPacks', (->)\n  lines = null\n  leisureDir = path.join config.home, '.leisure'\n  historyFile = path.join(leisureDir, 'history')\n  if !root.batchMode\n    rl = readline.createInterface\n      input: process.stdin\n      output: process.stdout\n      completer: leisureCompleter\n  fs.exists historyFile, (exists)->\n    ((cont)->\n      if exists then readFile historyFile, (err, contents)->\n        if !err && !root.batchMode then rl.history = contents.trim().split('\\n').reverse()\n        cont()\n      else fs.exists leisureDir, (exists)->\n        if exists then cont()\n        else fs.mkdir leisureDir, (err)->\n          if err\n            console.log 'Could not create leisure dir!'\n            process.exit 1\n          cont()) ()->\n      if !quiet then help()\n      multiline = false\n      prompt()\n      if !root.batchMode\n        rl.on 'line', (line)-> root.processLine line\n        rl.on 'close', ->\n          #console.log \"EXITING 1\"\n          process.exit 0\n        rl.on 'SIGINT', ->\n          if interrupted then process.exit()\n          else if multiline then finishMultiline true\n          else\n            console.log \"\\n(^C again to quit)\"\n            interrupted = true\n\nverbose = false\ngennedAst = false\ngennedJs = false\nnewOptions = true\naction = null\noutDir = null\nrecompiled = false\nloadedParser = false\nprocessedFiles = false\ncreateAstFile = false\ncreateJsFile = false\n\nrunFile = (file, cont)->\n  try\n    runMonad2 rz(L_protect)(lz rz(L_require)(lz file)), defaultEnv, (result)->\n      cont []\n  catch err\n    console.log \"ERROR LOADING FILE: #{file}...\\n#{err.stack}\"\n    cont []\n\ntangleOrgFile = (file, cont)->\n  fs.readFile file, 'utf8', (err, data)->\n    if err then console.log err.stack\n    else\n      tangle(data)\n        .then (result)->\n          fs.writeFile file + \".tangle\", result, (err)->\n            if err then throw err\n            #console.log \"TANGLE #{file}...\"\n            #console.log jsCodeFor result\n            #console.log \"SOURCE MAP\\n#{JSON.stringify result.map.toJSON()}\"\n            #OUTPUT TANGLED JS jsCodeFor result\n            cont []\n        .catch (err)->\n          console.error err.stack\n          throw err\n\n#genCreateCompilerContext = -> \"++Leisure_traceContext\"\ngenCreateCompilerContext = ->\n  if gennedLsrFile then \"Leisure_addContext({source:#{JSON.stringify gennedLsrFile}})\"\n  else '++Leisure_traceContext'\n\ncompile = (file, cont)->\n  defaultEnv.errorHandlers?.push (e)-> process.exit 1\n  ext = path.extname file\n  runMonad2 rz(L_baseLoad)(lz file), defaultEnv, (result)->\n    if verbose then console.log \"Preparing to write code for #{file}\"\n    errors = []\n    asts = _.map result.toArray(), (lineData)->\n      if newCall\n        result = lc lineData.tail(), (lz (x)->rz x), (lz (x)-> rz x)\n      else\n        result = lineData.tail()(lz (x)->rz x)(lz (x)-> rz x)\n      if result instanceof Error\n        result = replaceErr result, \"Error compiling line: #{lineData.head()}...\\n#{ast.message}\"\n        errors.push[result]\n      lineData.head()\n    if errors.length\n      for err in errors\n        console.log err.stack\n      return\n    if createAstFile\n      outputFile = (if ext == file then file else file.substring(0, file.length - ext.length)) + \".ast\"\n      if outDir then outputFile = path.join(outDir, path.basename(outputFile))\n      if verbose then console.log \"AST FILE: #{outputFile}\"\n      writeFile outputFile, \"[\\n  #{_(asts).map((item)-> JSON.stringify ast2Json item).join ',\\n  '}\\n]\", (err)->\n        if err\n          console.log \"Error writing AST file: #{outputFile}\"\n          cont replaceErr err, \"Error writing AST file: #{outputFile}...\\n#{err.message}\"\n        else if !createJsFile then cont(asts)\n    if createJsFile\n      outputFileBase = (if ext == file then file else file.substring(0, file.length - ext.length))\n      outputFile = outputFileBase + \".js\"\n      outputMap = outputFileBase + \".map\"\n      bareFile = outputFileBase.replace /^.*\\/([^/]*$)/, '$1'\n      bareJs = bareFile + \".js\"\n      bareLsr = bareFile + \".lsr\"\n      bareOutputMap = bareFile + \".map\"\n      gennedLsrFile = (if genFilePrefix then genFilePrefix + path.basename(bareFile)\n      else bareFile) + \".lsr\"\n      gennedMapFile = (if genFilePrefix then genFilePrefix + path.basename(bareFile)\n      else bareFile) + \".map\"\n      if outDir\n        outputFile = path.join(outDir, path.basename(outputFile))\n        outputMap = path.join(outDir, path.basename(outputMap))\n      if verbose then console.log \"JS FILE: #{outputFile}\"\n      #console.log \"FIRST AST: #{asts[0]}\"\n      codeGen = new CodeGenerator gennedLsrFile, false, false, true\n      codeGen.sourceMap = true\n      codeGen.createContext = false\n      try\n        lastArgs = null\n        result = withFile path.basename(bareLsr), null, ->\n          nodes = (new SourceNode 1, 0, bareLsr, [\n            intersperse(lastArgs = _.map(asts, (ast)->\n              sourceNode ast, 'function(){return ', (codeGen.genMap ast), '}'), ',\\n    '),\n            '\\n  ]);\\n});'\n          ])\n          (new SourceNode 1, 0, bareLsr, [\n            '\"use strict\";\\n',\n            \"\"\"\n            define([], function(){#{if codeGen.decls.length then codeGen.genContext() else 'var L$context = null;\\n  ' + codeGen.genFuncInfo()}\n              return L_runMonads([\n                \n            \"\"\",\n            nodes]).toStringWithSourceMap(file: path.basename(bareJs))\n      catch err\n        inspect = require?('util').inspect ? (x)-> x\n        console.log \"Error in source node,\\nargs: #{inspect lastArgs, depth: 128}\\nError: #{err.stack}\"\n        throw err\n      #writeFile outputFile, \"L_runMonads([\\n  \" + _(asts).map((item)-> \"function(){return #{gen item}}\").join(',\\n  ') + \"]);\\n\", (err)->\n      if verbose then console.log \"FILE: #{outputFile}, MAP: #{outputMap}\"\n      writeFile outputFile, jsCodeFor(result, 'external', gennedMapFile), (err)->\n        if !err\n          writeFile outputMap, JSON.stringify(result.map, null, \"  \"), (err)->\n            if !err then cont(asts)\n            else\n              console.log \"Error writing map file: #{outputMap}\"\n              cont replaceErr err, \"Error writing map file: #{outputMap}...\\n#{err.message}\"\n        else\n          console.log \"Error writing JS file: #{outputFile}\"\n          cont replaceErr err, \"Error writing JS file: #{outputFile}...\\n#{err.message}\"\n    else cont []\n\nintersperse = (array, element)->\n  if array.length < 2 then array\n  else\n    result = [array[0]]\n    for i in [1...array.length]\n      result.push element, array[i]\n    result\n\nprimCompile = (file, cont)->\n  #if stage < 2 then root.shouldNsLog = false\n  root.shouldNsLog = shouldNsLog\n  {\n    parseLine,\n    compileFile,\n  } = requirejs './leisure/' + stages[stage]\n  ext = path.extname file\n  readFile file, (err, contents)->\n    if !err\n      compiled = compileFile contents, file\n      outputFile = (if ext == file then file else file.substring(0, file.length - ext.length)) + \".js\"\n      if outDir then outputFile = path.join(outDir, path.basename(outputFile))\n      if verbose then console.log \"JS FILE: #{outputFile}\"\n      writeFile outputFile, compiled, (err)-> if !err then cont(compiled)\n    else console.log \"ERROR COMPILING: #{err}\"\n\ngenJsFromAst = (file, cont)->\n  readFile file, (err, contents)->\n    if !err then genJs _(JSON.parse(contents)).map((json)-> json2Ast json), cont\n\nusage = ->\n  console.log \"\"\"\n  Usage repl [-v | -t | -a | -0 | -1 | -c | -coffee | -j | -d DIR] [FILE ...]\n\n  -v            verbose\n  -g            generate debugging code\n  -t            tangle, FILE is interpreted as an org file\n  -a            only parse to AST\n  -0            use CoffeeScript parser\n  -1            use simple Leisure parser\n  -2            use normal Leisure parser but don't load std\n  -c            for -0, compile to JS using CoffeeScript compiler\n                for -1, or normal case, create AST and JS file\n  -r FILE       require JS FILE\n  -d DIR        specify output directory for .ast and .js files\n  -j            run JavaScript interactively after requiring Leisure files\n  -coffee       run CoffeeScript interactively after requiring Leisure files\n  -prefix       filename prefix for code generation file references\n  -q            quiet, suppress startup messages\n\n  With no FILE arguments, runs interactive REPL\n  \"\"\"\n  process.exit 0\n\ninteractive = false\n\nrequireList = []\n\ndoRequirements = (cont)->\n  if verbose then console.log \"DO REQUIREMENTS.  loaded: #{loadedParser}\"\n  if std then requireList.unshift 'leisure/std'\n  if !loadedParser\n    #if stage < 2 then root.shouldNsLog = false\n    root.shouldNsLog = shouldNsLog\n    requirejs ['./leisure/' + stages[stage]], (promise)->\n      loadedParser = true\n      if stage == 1 then root.lockGen = false\n      if promise instanceof Promise\n        promise.then -> requireFiles requireList, cont, verbose\n      else\n        requireFiles requireList, cont, verbose\n  else requireFiles requireList, cont, verbose\n\n#loadRequirements = (req, cont)->\n#  if req.length\n#    if verbose then console.log \"LOADING REQUIREMENT: #{req[0]}\"\n#    contStack = require req.shift()\n#    if Array.isArray(contStack) && contStack.length then contStack.unshift ->\n#      loadRequirements req, cont\n#    else loadRequirements req, cont\n#  else\n#    cont()\n\nprocessArg = (config, pos)->\n  #console.log \"Process args: #{pargs.join ', '}, pos: #{pos}\"\n  if pos >= pargs.length\n    if processedFiles && !interactive\n      #console.log \"EXITING 2\"\n      process.exit 0\n    else\n      if verbose then console.log \"STARTING REPL\"\n      #if !loadedParser\n      #  #console.log \"REQUIRING #{stages[stage]}\"\n      #  require stages[stage]\n      doRequirements ->\n        repl config\n      return\n  #console.log \"Processing arg: #{pargs[pos]}\"\n  if pargs[pos][0] == '-' and !newOptions\n    actions = []\n    newOptions = true\n    gennedAst = gennedJs = false\n  switch pargs[pos]\n    when '-p'\n      root.promptText = pargs[pos + 1]\n      pos++\n    when '-b' then root.batchMode = true\n    when '-x' then #ignore because processed above\n    when '-g' then global.Leisure_generateDebuggingCode = true\n    when '-v'\n      verbose = true\n      global.verbose.gen = true\n      setWarnAsync true\n    when '-t'\n      action = tangleOrgFile\n    when '-a'\n      action = compile\n      createAstFile = true\n    when '-c'\n      if stage == 0\n        action = primCompile\n        loadedParser = true\n      else\n        #setMegaArity true\n        action = compile\n        createAstFile = createJsFile = true\n    when '-d'\n      outDir = pargs[pos + 1]\n      pos++\n    when '-0'\n      stage = 0\n      std = false\n      root.lockGen = true\n    when '-1'\n      stage = 1\n      std = false\n      root.lockGen = true\n    when '-2'\n      std = false\n    when '-i'\n      interactive = true\n    when '--nslog' then shouldNsLog = true\n    when '-r'\n      if verbose then console.log \"PUSHING REQUIREMENT: #{pargs[pos + 1]}\"\n      requireList.push pargs[pos + 1]\n      pos++\n    when '-prefix' then genFilePrefix = pargs[++pos]\n    when '-q' then quiet = true\n    else\n      if !quiet then console.log \"BASE DIR: #{baseDir}\"\n      newOptions = true\n      if pargs[pos] == '-coffee'\n        processedFiles = true\n        requireUtils()\n        require('coffee-script/lib/coffee-script/repl').start useGlobal: true\n        return\n      if pargs[pos] == '-j'\n        processedFiles = true\n        requireUtils()\n        doRequirements -> require('repl').start useGlobal: true\n        return\n      #console.log \"Process #{pargs.join ', '}\"\n      if pargs[pos][0] == '-' then usage()\n      else\n        processedFiles = true\n        #if !loadedParser\n        #  #console.log \"REQUIRING #{stages[stage]}\"\n        #  require stages[stage]\n        #  if stage == 1 then root.lockGen = false\n        #  for f in requireList\n        #    require f\n        doRequirements ->\n          #console.log \"PROCESSING #{pargs[pos]} with #{action}\"\n          action pargs[pos], -> processArg config, pos + 1\n      return\n  processArg config, pos + 1\n\nrequireUtils = ->\n  global.Leisure = root\n  global.Lazy = require '10-lazy'\n  global.Org = require '11-org'\n\nrun = (args, config)->\n  pargs = args\n  action = runFile\n  if !(a for a in args when a == '-q').length then console.log \"Run: #{args.join ', '}\"\n  if args.length == 2\n    #if stage < 2 then root.shouldNsLog = false\n    root.shouldNsLog = shouldNsLog\n    #require baseLeisureDir + stages[stage]\n    #requirejs ['./leisure/' + stages[stage]], (promise)->\n    #  if promise instanceof Promise\n    #    console.log 'GOT PROMISE IN RUN'\n    #    promise.then -> repl config\n    #  else\n    #    console.log 'NO PROMISE IN RUN'\n    #    repl config\n    doRequirements -> repl config\n  else processArg config, 2\n\nroot.runFile = runFile\nroot.run = run\nroot.nwrun = (line)-> run line.split(' '), home: process.env.HOME\n\nroot.inputProcessor = evalInput\n\nif verbose then console.log \"ARGS: #{JSON.stringify pargs}\"\n\nif process.versions['node-webkit']? then console.log \"HELLO\"\nelse\n  prog = path.basename(process.argv[1])\n  switch prog.toLowerCase()\n    when 'repl' , 'runrepl' , 'leisure'\n      if verbose then console.log \"RUNNING REPL\"\n      run process.argv, home: process.env.HOME\n    else\n      #if stage < 2 then root.shouldNsLog = false\n      root.shouldNsLog = shouldNsLog\n      requirejs ['./leisure/' + stages[stage]], \n"
  ]
}