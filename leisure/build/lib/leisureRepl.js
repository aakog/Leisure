// Generated by CoffeeScript 2.3.0
(function() {
  /*
  Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

  (licensed with ZLIB license)

  This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
  claim that you wrote the original software. If you use this software
  in a product, an acknowledgment in the product documentation would be
  appreciated but is not required.

  2. Altered source versions must be plainly marked as such, and must not be
  misrepresented as being the original software.

  3. This notice may not be removed or altered from any source distribution.
  */
  var CodeGenerator, Nil, Promise, SourceNode, _, action, ast2Json, asyncMonad, baseDir, baseLeisureDir, compile, createAstFile, createJsFile, defaultEnv, diag, doRequirements, errorString, evalInput, finishMultiline, fs, gen, genCreateCompilerContext, genFilePrefix, genJsFromAst, genMap, genSource, gennedAst, gennedJs, gennedLsrFile, getMonadSyncMode, getParseErr, getType, getValue, help, historyFile, identity, inErr, interactive, interrupted, intersperse, isIO, jsCodeFor, json2Ast, lazy, lc, leisureCompleter, leisureDir, leisureFunctions, lines, loadedParser, lz, multiline, newCall, newOptions, oldFunctionCount, outDir, pargs, path, primCompile, processArg, processedFiles, prog, prompt, quiet, readFile, readline, recompiled, repl, replEnv, replaceErr, requireFiles, requireList, requireUtils, requirejs, resolve, rl, root, run, runFile, runMonad2, rz, setDataType, setMegaArity, setType, setWarnAsync, shouldNsLog, show, sourceNode, stage, stages, startMultiline, std, tangle, tangleOrgFile, tokenString, updateCompleter, usage, verbose, withFile, writeFile;

  require('source-map-support').install();

  path = require('path');

  baseDir = path.resolve(path.dirname(module.filename) + '/../../../build');

  baseLeisureDir = baseDir + '/leisure/';

  quiet = false;

  requirejs = require('requirejs').config({
    baseUrl: baseDir,
    paths: {
      lib: baseDir + '/lib',
      //immutable: baseDir + '/lib/immutable-3.8.1.min'
      immutable: 'lib/immutable-3.8.1.min',
      acorn: 'lib/acorn-3.2.0',
      acorn_loose: 'lib/acorn_loose-3.2.0',
      acorn_walk: 'lib/acorn_walk-3.2.0',
      handlebars: 'lib/handlebars-v4.0.5',
      lispyscript: 'lib/lispyscript/leisureReplPatch',
      lodash: 'lib/lodash.full-4.14.1',
      bluebird: 'lib/bluebird-3.5.0',
      fingertree: 'lib/fingertree',
      "browser-source-map-support": 'lib/browser-source-map-support-0.4.14'
    }
  });

  //(window ? global).requirejs = requirejs
  ((typeof window !== 'undefined' && window) || global).Lazy = requirejs('lib/lazy');

  //require '10-namespace'
  Error.stackTraceLimit = 2e308;

  //Error.stackTraceLimit = 50
  ({newCall, resolve, lazy, defaultEnv} = root = module.exports = requirejs('./base'));

  global.Leisure_generateDebuggingCode = false;

  rz = resolve;

  lz = lazy;

  lc = Leisure_call;

  _ = requirejs('lodash');

  fs = require('fs');

  //compiler = require 'compiler'
  genFilePrefix = null;

  gennedLsrFile = null;

  root.batchMode = false;

  if (_.includes(process.argv, '-x')) {
    global.L_DEBUG = true;
  }

  ({getType, setType, setDataType, ast2Json, json2Ast, Nil} = requirejs('./ast'));

  global.btoa = require('btoa');

  ({gen, genMap, genSource, withFile, sourceNode, SourceNode, setMegaArity, CodeGenerator, jsCodeFor} = requirejs('./gen'));

  //} = requirejs './node'
  ({readFile, writeFile} = require('./node'));

  ({identity, runMonad2, isIO, asyncMonad, replaceErr, getMonadSyncMode, setWarnAsync, requireFiles, getValue} = requirejs('./runtime'));

  ({Promise} = requirejs('bluebird'));

  ({tangle} = requirejs('./tangle'));

  global.setType = setType;

  global.setDataType = setDataType;

  global.defaultEnv = defaultEnv;

  global.identity = identity;

  //global.Leisure = root

  // compilation stage
  // 0: use CoffeeScript Leisure compiler
  // 1: use only SimpleParse.lsr
  // 2: use generatedPrelude.lsr

  stage = 2;

  std = true;

  stages = ['simpleParseJS', 'simpleParse', 'generatedPrelude'];

  shouldNsLog = false;

  pargs = null;

  diag = false;

  inErr = false;

  readline = require('readline');

  root.inputProcessor = null; // function to process input, defaults to evalInput

  root.replEnv = replEnv = {
    prompt: function(msg, cont) {
      return typeof rl !== "undefined" && rl !== null ? rl.question(msg, function(x) {
        var err;
        try {
          return cont(x);
        } catch (error) {
          err = error;
          return console.log(`ERROR HANDLING PROMPT: ${err.stack}`);
        }
      }) : void 0;
    },
    //presentValue: (x)-> show(x) + '\n'
    presentValue: function(x) {
      return show(x);
    }
  };

  replEnv.__proto__ = defaultEnv;

  getParseErr = function(x) {
    return x(lz(function(value) {
      return rz(value);
    }));
  };

  errorString = function(err) {
    var ref;
    return (ref = err.stack) != null ? ref : err.toString();
  };

  process.on('uncaughtException', function(err) {
    return console.log(`Uncaught Exception: ${err.stack || errorString(err)}`);
  });

  root.evalInput = evalInput = function(text, cont, noErrHandling) {
    var err, result, source;
    if (text) {
      source = null;
      try {
        if (newCall) {
          result = lc(L_newParseLine, 0, Nil, text);
        } else {
          result = rz(L_newParseLine)(0)(lz(Nil))(lz(text));
        }
        return runMonad2(result, replEnv, function(ast) {
          var err;
          try {
            if (getType(ast) === 'err') {
              return cont(`PARSE ERORR: ${getParseErr(ast)}`);
            } else {
              if (diag) {
                if (typeof L_simplify !== "undefined" && L_simplify !== null) {
                  runMonad2(rz(L_simplify)(lz(text)), replEnv, function(result) {
                    return console.log(`\nSIMPLIFIED: ${result}`);
                  });
                }
                console.log(`\nAST: ${ast}`);
              }
              source = genSource(text, ast);
              if (diag) {
                console.log(`\nCODE: ${source}`);
              }
              result = eval(source);
              //if isIO result then console.log "(processing IO monad)"
              return runMonad2(result, replEnv, cont);
            }
          } catch (error) {
            err = error;
            //console.log "caught error evaluating source:\n#{source}"
            //cont rz(L_err)(lz (errorString err))
            inErr = true;
            if (noErrHandling) {
              throw err;
            } else {
              return global.handleError(err, cont, text, source);
            }
          }
        });
      } catch (error) {
        err = error;
        if (!inErr) {
          inErr = true;
          if (noErrHandling) {
            throw err;
          } else {
            return global.handleError(err, cont, text, source);
          }
        }
      } finally {
        inErr = false;
      }
    } else {
      return cont('');
    }
  };

  global.handleError = function(err, cont, text, source) {
    console.log("ERROR!!!!");
    console.log(`caught error evaluating source:\n${source}`);
    return cont(rz(L_err)(lz(errorString(err))));
  };

  help = function() {
    return console.log("Welcome to the Leisure REPL!\n\nHere are the commands:\n:d -- toggle diagnostics\n:s expr -- simplify an expression\n:{ -- start multiline input\n:} -- end multiline input\n:h -- print this message\n! -- evaluate JavaScript expression (after the !)\nfuncs -- list all known functions (this is really just a monad)\n(anything else) -- evaluate Leisure code\n");
  };

  oldFunctionCount = 0;

  leisureFunctions = null;

  updateCompleter = function(rl) {
    var ref, ref1;
    if (root.functionCount !== oldFunctionCount) {
      oldFunctionCount = root.functionCount;
      return leisureFunctions = global.leisureFuncNames.toArray().concat((ref = (ref1 = getValue('macroDefs')) != null ? ref1.map.keySeq().toArray() : void 0) != null ? ref : []);
    }
  };

  tokenString = function(t) {
    return t(lz(function(txt) {
      return function(pos) {
        return rz(txt);
      };
    }));
  };

  rl = null;

  multiline = false;

  lines = null;

  historyFile = null;

  leisureDir = null;

  leisureCompleter = function(line) {
    var completions, last, newLast, origLast, tokens;
    if (newCall) {
      tokens = lc(L_tokens, line, getValue('tokenPat')).toArray();
    } else {
      tokens = rz(L_tokens)(lz(line))(lz(getValue('tokenPat'))).toArray();
    }
    if (tokens.length > 0) {
      origLast = tokenString(tokens[tokens.length - 1]);
      last = origLast.toLowerCase();
      completions = _.filter(leisureFunctions, function(el) {
        return el.toLowerCase().indexOf(last) === 0;
      });
      if (completions.length === 1) {
        newLast = completions[0].substring(0, last.length);
        rl.line = line.substring(0, line.length - last.length) + newLast;
        return [completions, newLast];
      } else {
        return [
          _.filter(leisureFunctions,
          function(el) {
            return el.toLowerCase().indexOf(last) === 0;
          }),
          origLast
        ];
      }
    } else {
      return [[], line];
    }
  };

  interrupted = false;

  root.promptText = 'Leisure> ';

  root.processLine = null;

  root.nextLine = function() {
    return '';
  };

  root.prompt = prompt = function() {
    if (root.batchMode) {
      return root.nextLine();
    } else {
      updateCompleter();
      rl.setPrompt(root.promptText);
      return rl.prompt();
    }
  };

  root.show = show = function(obj, handler) {
    if (typeof L_show !== "undefined" && L_show !== null) {
      return rz(L_show)(lz(obj));
    } else {
      return String(obj);
    }
  };

  root.defaultEnv.err = function(err) {
    var ref;
    console.log(`REPL Error: ${(ref = err.stack) != null ? ref : err}`);
    multiline = false;
    return prompt();
  };

  startMultiline = function() {
    if (multiline) {
      return console.log('Already reading multiline input');
    } else {
      multiline = true;
      lines = [];
      return rl != null ? rl.setPrompt('... ') : void 0;
    }
  };

  finishMultiline = function(dumpInput) {
    var err, l, line;
    multiline = false;
    line = lines.join('\n');
    l = lines;
    lines = [];
    if (dumpInput) {
      return prompt();
    } else {
      try {
        if (line.substring(0, 2) === ':s') {
          if (typeof L_simplify !== "undefined" && L_simplify !== null) {
            runMonad2(rz(L_simplify)(line.substring(2)), replEnv, function(result) {
              return console.log(`\n${result}`);
            });
          } else {
            console.log('No simplify function.  Load std.lsr');
          }
        } else if (line.match(/^!/)) {
          console.log(eval(line.substring(1)));
        } else {
          root.inputProcessor(line, function(result) {
            if (!(result instanceof Leisure_unit)) {
              console.log(show(result));
            }
            return prompt();
          });
          return;
        }
      } catch (error) {
        err = error;
        console.log(`ERROR: ${err.stack}`);
      }
      return prompt();
    }
  };

  root.processLine = function(line) {
    var m;
    interrupted = false;
    if (!root.batchMode && rl.history[0] === rl.history[1]) {
      rl.history.shift();
    } else if (line.trim()) {
      fs.appendFile(historyFile, `${line}\n`, (function() {}));
    }
    switch (line.trim()) {
      case ':d':
        diag = !diag;
        return console.log(`Diag: ${(diag ? 'on' : 'off')}`);
      case ':{':
        return startMultiline();
      case ':}':
        if (!multiline) {
          return console.log("Not reading multiline input.");
        } else {
          return finishMultiline();
        }
        break;
      case ':h':
        return help();
      default:
        if (m = line.match(/^:{(.*)$/)) {
          startMultiline();
          if (m[1]) {
            return lines.push(m[1]);
          }
        } else if (multiline) {
          if (!line) {
            return finishMultiline();
          } else {
            return lines.push(line);
          }
        } else {
          lines = [line];
          return finishMultiline();
        }
    }
  };

  repl = function(config) {
    evalInput('resetStdTokenPacks', (function() {}));
    lines = null;
    leisureDir = path.join(config.home, '.leisure');
    historyFile = path.join(leisureDir, 'history');
    if (!root.batchMode) {
      rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        completer: leisureCompleter
      });
    }
    return fs.exists(historyFile, function(exists) {
      return (function(cont) {
        if (exists) {
          return readFile(historyFile, function(err, contents) {
            if (!err && !root.batchMode) {
              rl.history = contents.trim().split('\n').reverse();
            }
            return cont();
          });
        } else {
          return fs.exists(leisureDir, function(exists) {
            if (exists) {
              return cont();
            } else {
              return fs.mkdir(leisureDir, function(err) {
                if (err) {
                  console.log('Could not create leisure dir!');
                  process.exit(1);
                }
                return cont();
              });
            }
          });
        }
      })(function() {
        if (!quiet) {
          help();
        }
        multiline = false;
        prompt();
        if (!root.batchMode) {
          rl.on('line', function(line) {
            return root.processLine(line);
          });
          rl.on('close', function() {
            //console.log "EXITING 1"
            return process.exit(0);
          });
          return rl.on('SIGINT', function() {
            if (interrupted) {
              return process.exit();
            } else if (multiline) {
              return finishMultiline(true);
            } else {
              console.log("\n(^C again to quit)");
              return interrupted = true;
            }
          });
        }
      });
    });
  };

  verbose = false;

  gennedAst = false;

  gennedJs = false;

  newOptions = true;

  action = null;

  outDir = null;

  recompiled = false;

  loadedParser = false;

  processedFiles = false;

  createAstFile = false;

  createJsFile = false;

  runFile = function(file, cont) {
    var err;
    try {
      return runMonad2(rz(L_protect)(lz(rz(L_require)(lz(file)))), defaultEnv, function(result) {
        return cont([]);
      });
    } catch (error) {
      err = error;
      console.log(`ERROR LOADING FILE: ${file}...\n${err.stack}`);
      return cont([]);
    }
  };

  tangleOrgFile = function(file, cont) {
    return fs.readFile(file, 'utf8', function(err, data) {
      if (err) {
        return console.log(err.stack);
      } else {
        return tangle(data).then(function(result) {
          return fs.writeFile(file + ".tangle", result, function(err) {
            if (err) {
              throw err;
            }
            //console.log "TANGLE #{file}..."
            //console.log jsCodeFor result
            //console.log "SOURCE MAP\n#{JSON.stringify result.map.toJSON()}"
            //OUTPUT TANGLED JS jsCodeFor result
            return cont([]);
          });
        }).catch(function(err) {
          console.error(err.stack);
          throw err;
        });
      }
    });
  };

  //genCreateCompilerContext = -> "++Leisure_traceContext"
  genCreateCompilerContext = function() {
    if (gennedLsrFile) {
      return `Leisure_addContext({source:${JSON.stringify(gennedLsrFile)}})`;
    } else {
      return '++Leisure_traceContext';
    }
  };

  compile = function(file, cont) {
    var ext, ref;
    if ((ref = defaultEnv.errorHandlers) != null) {
      ref.push(function(e) {
        return process.exit(1);
      });
    }
    ext = path.extname(file);
    return runMonad2(rz(L_baseLoad)(lz(file)), defaultEnv, function(result) {
      var asts, bareFile, bareJs, bareLsr, bareOutputMap, codeGen, err, errors, gennedMapFile, inspect, j, lastArgs, len, outputFile, outputFileBase, outputMap, ref1;
      if (verbose) {
        console.log(`Preparing to write code for ${file}`);
      }
      errors = [];
      asts = _.map(result.toArray(), function(lineData) {
        if (newCall) {
          result = lc(lineData.tail(), lz(function(x) {
            return rz(x);
          }), lz(function(x) {
            return rz(x);
          }));
        } else {
          result = lineData.tail()(lz(function(x) {
            return rz(x);
          }))(lz(function(x) {
            return rz(x);
          }));
        }
        if (result instanceof Error) {
          result = replaceErr(result, `Error compiling line: ${lineData.head()}...\n${ast.message}`);
          errors.push[result];
        }
        return lineData.head();
      });
      if (errors.length) {
        for (j = 0, len = errors.length; j < len; j++) {
          err = errors[j];
          console.log(err.stack);
        }
        return;
      }
      if (createAstFile) {
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".ast";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log(`AST FILE: ${outputFile}`);
        }
        writeFile(outputFile, `[\n  ${_(asts).map(function(item) {
          return JSON.stringify(ast2Json(item));
        }).join(',\n  ')}\n]`, function(err) {
          if (err) {
            console.log(`Error writing AST file: ${outputFile}`);
            return cont(replaceErr(err, `Error writing AST file: ${outputFile}...\n${err.message}`));
          } else if (!createJsFile) {
            return cont(asts);
          }
        });
      }
      if (createJsFile) {
        outputFileBase = (ext === file ? file : file.substring(0, file.length - ext.length));
        outputFile = outputFileBase + ".js";
        outputMap = outputFileBase + ".map";
        bareFile = outputFileBase.replace(/^.*\/([^\/]*$)/, '$1');
        bareJs = bareFile + ".js";
        bareLsr = bareFile + ".lsr";
        bareOutputMap = bareFile + ".map";
        gennedLsrFile = (genFilePrefix ? genFilePrefix + path.basename(bareFile) : bareFile) + ".lsr";
        gennedMapFile = (genFilePrefix ? genFilePrefix + path.basename(bareFile) : bareFile) + ".map";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
          outputMap = path.join(outDir, path.basename(outputMap));
        }
        if (verbose) {
          console.log(`JS FILE: ${outputFile}`);
        }
        //console.log "FIRST AST: #{asts[0]}"
        codeGen = new CodeGenerator(gennedLsrFile, false, false, true);
        codeGen.sourceMap = true;
        codeGen.createContext = false;
        try {
          lastArgs = null;
          result = withFile(path.basename(bareLsr), null, function() {
            var nodes;
            nodes = new SourceNode(1, 0, bareLsr, [
              intersperse(lastArgs = _.map(asts,
              function(ast) {
                return sourceNode(ast,
              'function(){return ',
              codeGen.genMap(ast),
              '}');
              }),
              ',\n    '),
              '\n  ]);\n});'
            ]);
            return (new SourceNode(1, 0, bareLsr, ['"use strict";\n', `define([], function(){${(codeGen.decls.length ? codeGen.genContext() : 'var L$context = null;\n  ' + codeGen.genFuncInfo())}\n  return L_runMonads([\n    `, nodes])).toStringWithSourceMap({
              file: path.basename(bareJs)
            });
          });
        } catch (error) {
          err = error;
          inspect = (ref1 = typeof require === "function" ? require('util').inspect : void 0) != null ? ref1 : function(x) {
            return x;
          };
          console.log(`Error in source node,\nargs: ${inspect(lastArgs, {
            depth: 128
          })}\nError: ${err.stack}`);
          throw err;
        }
        //writeFile outputFile, "L_runMonads([\n  " + _(asts).map((item)-> "function(){return #{gen item}}").join(',\n  ') + "]);\n", (err)->
        if (verbose) {
          console.log(`FILE: ${outputFile}, MAP: ${outputMap}`);
        }
        return writeFile(outputFile, jsCodeFor(result, 'external', gennedMapFile), function(err) {
          if (!err) {
            return writeFile(outputMap, JSON.stringify(result.map, null, "  "), function(err) {
              if (!err) {
                return cont(asts);
              } else {
                console.log(`Error writing map file: ${outputMap}`);
                return cont(replaceErr(err, `Error writing map file: ${outputMap}...\n${err.message}`));
              }
            });
          } else {
            console.log(`Error writing JS file: ${outputFile}`);
            return cont(replaceErr(err, `Error writing JS file: ${outputFile}...\n${err.message}`));
          }
        });
      } else {
        return cont([]);
      }
    });
  };

  intersperse = function(array, element) {
    var i, j, ref, result;
    if (array.length < 2) {
      return array;
    } else {
      result = [array[0]];
      for (i = j = 1, ref = array.length; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
        result.push(element, array[i]);
      }
      return result;
    }
  };

  primCompile = function(file, cont) {
    var compileFile, ext, parseLine;
    //if stage < 2 then root.shouldNsLog = false
    root.shouldNsLog = shouldNsLog;
    ({parseLine, compileFile} = requirejs('./leisure/' + stages[stage]));
    ext = path.extname(file);
    return readFile(file, function(err, contents) {
      var compiled, outputFile;
      if (!err) {
        compiled = compileFile(contents, file);
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log(`JS FILE: ${outputFile}`);
        }
        return writeFile(outputFile, compiled, function(err) {
          if (!err) {
            return cont(compiled);
          }
        });
      } else {
        return console.log(`ERROR COMPILING: ${err}`);
      }
    });
  };

  genJsFromAst = function(file, cont) {
    return readFile(file, function(err, contents) {
      if (!err) {
        return genJs(_(JSON.parse(contents)).map(function(json) {
          return json2Ast(json);
        }), cont);
      }
    });
  };

  usage = function() {
    console.log("Usage repl [-v | -t | -a | -0 | -1 | -c | -coffee | -j | -d DIR] [FILE ...]\n\n-v            verbose\n-g            generate debugging code\n-t            tangle, FILE is interpreted as an org file\n-a            only parse to AST\n-0            use CoffeeScript parser\n-1            use simple Leisure parser\n-2            use normal Leisure parser but don't load std\n-c            for -0, compile to JS using CoffeeScript compiler\n              for -1, or normal case, create AST and JS file\n-r FILE       require JS FILE\n-d DIR        specify output directory for .ast and .js files\n-j            run JavaScript interactively after requiring Leisure files\n-coffee       run CoffeeScript interactively after requiring Leisure files\n-prefix       filename prefix for code generation file references\n-q            quiet, suppress startup messages\n\nWith no FILE arguments, runs interactive REPL");
    return process.exit(0);
  };

  interactive = false;

  requireList = [];

  doRequirements = function(cont) {
    if (verbose) {
      console.log(`DO REQUIREMENTS.  loaded: ${loadedParser}`);
    }
    if (std) {
      requireList.unshift('leisure/std');
    }
    if (!loadedParser) {
      //if stage < 2 then root.shouldNsLog = false
      root.shouldNsLog = shouldNsLog;
      return requirejs(['./leisure/' + stages[stage]], function(promise) {
        loadedParser = true;
        if (stage === 1) {
          root.lockGen = false;
        }
        if (promise instanceof Promise) {
          return promise.then(function() {
            return requireFiles(requireList, cont, verbose);
          });
        } else {
          return requireFiles(requireList, cont, verbose);
        }
      });
    } else {
      return requireFiles(requireList, cont, verbose);
    }
  };

  //loadRequirements = (req, cont)->
  //  if req.length
  //    if verbose then console.log "LOADING REQUIREMENT: #{req[0]}"
  //    contStack = require req.shift()
  //    if Array.isArray(contStack) && contStack.length then contStack.unshift ->
  //      loadRequirements req, cont
  //    else loadRequirements req, cont
  //  else
  //    cont()
  processArg = function(config, pos) {
    var actions;
    //console.log "Process args: #{pargs.join ', '}, pos: #{pos}"
    if (pos >= pargs.length) {
      if (processedFiles && !interactive) {
        //console.log "EXITING 2"
        process.exit(0);
      } else {
        if (verbose) {
          console.log("STARTING REPL");
        }
        //if !loadedParser
        //  #console.log "REQUIRING #{stages[stage]}"
        //  require stages[stage]
        doRequirements(function() {
          return repl(config);
        });
        return;
      }
    }
    //console.log "Processing arg: #{pargs[pos]}"
    if (pargs[pos][0] === '-' && !newOptions) {
      actions = [];
      newOptions = true;
      gennedAst = gennedJs = false;
    }
    switch (pargs[pos]) {
      case '-p':
        root.promptText = pargs[pos + 1];
        pos++;
        break;
      case '-b':
        root.batchMode = true;
        break;
      case '-x':
        break;
      case '-g':
        global.Leisure_generateDebuggingCode = true;
        break;
      case '-v':
        verbose = true;
        global.verbose.gen = true;
        setWarnAsync(true);
        break;
      case '-t':
        action = tangleOrgFile;
        break;
      case '-a':
        action = compile;
        createAstFile = true;
        break;
      case '-c':
        if (stage === 0) {
          action = primCompile;
          loadedParser = true;
        } else {
          //setMegaArity true
          action = compile;
          createAstFile = createJsFile = true;
        }
        break;
      case '-d':
        outDir = pargs[pos + 1];
        pos++;
        break;
      case '-0':
        stage = 0;
        std = false;
        root.lockGen = true;
        break;
      case '-1':
        stage = 1;
        std = false;
        root.lockGen = true;
        break;
      case '-2':
        std = false;
        break;
      case '-i':
        interactive = true;
        break;
      case '--nslog':
        shouldNsLog = true;
        break;
      case '-r':
        if (verbose) {
          console.log(`PUSHING REQUIREMENT: ${pargs[pos + 1]}`);
        }
        requireList.push(pargs[pos + 1]);
        pos++;
        break;
      case '-prefix':
        genFilePrefix = pargs[++pos];
        break;
      case '-q':
        quiet = true;
        break;
      default:
        if (!quiet) {
          console.log(`BASE DIR: ${baseDir}`);
        }
        newOptions = true;
        if (pargs[pos] === '-coffee') {
          processedFiles = true;
          requireUtils();
          require('coffee-script/lib/coffee-script/repl').start({
            useGlobal: true
          });
          return;
        }
        if (pargs[pos] === '-j') {
          processedFiles = true;
          requireUtils();
          doRequirements(function() {
            return require('repl').start({
              useGlobal: true
            });
          });
          return;
        }
        //console.log "Process #{pargs.join ', '}"
        if (pargs[pos][0] === '-') {
          usage();
        } else {
          processedFiles = true;
          //if !loadedParser
          //  #console.log "REQUIRING #{stages[stage]}"
          //  require stages[stage]
          //  if stage == 1 then root.lockGen = false
          //  for f in requireList
          //    require f
          doRequirements(function() {
            //console.log "PROCESSING #{pargs[pos]} with #{action}"
            return action(pargs[pos], function() {
              return processArg(config, pos + 1);
            });
          });
        }
        return;
    }
    return processArg(config, pos + 1);
  };

  requireUtils = function() {
    global.Leisure = root;
    global.Lazy = require('10-lazy');
    return global.Org = require('11-org');
  };

  run = function(args, config) {
    var a;
    pargs = args;
    action = runFile;
    if (!((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = args.length; j < len; j++) {
        a = args[j];
        if (a === '-q') {
          results.push(a);
        }
      }
      return results;
    })()).length) {
      console.log(`Run: ${args.join(', ')}`);
    }
    if (args.length === 2) {
      //if stage < 2 then root.shouldNsLog = false
      root.shouldNsLog = shouldNsLog;
      //require baseLeisureDir + stages[stage]
      //requirejs ['./leisure/' + stages[stage]], (promise)->
      //  if promise instanceof Promise
      //    console.log 'GOT PROMISE IN RUN'
      //    promise.then -> repl config
      //  else
      //    console.log 'NO PROMISE IN RUN'
      //    repl config
      return doRequirements(function() {
        return repl(config);
      });
    } else {
      return processArg(config, 2);
    }
  };

  root.runFile = runFile;

  root.run = run;

  root.nwrun = function(line) {
    return run(line.split(' '), {
      home: process.env.HOME
    });
  };

  root.inputProcessor = evalInput;

  if (verbose) {
    console.log(`ARGS: ${JSON.stringify(pargs)}`);
  }

  if (process.versions['node-webkit'] != null) {
    console.log("HELLO");
  } else {
    prog = path.basename(process.argv[1]);
    switch (prog.toLowerCase()) {
      case 'repl':
      case 'runrepl':
      case 'leisure':
        if (verbose) {
          console.log("RUNNING REPL");
        }
        run(process.argv, {
          home: process.env.HOME
        });
        break;
      default:
        //if stage < 2 then root.shouldNsLog = false
        root.shouldNsLog = shouldNsLog;
        requirejs(['./leisure/' + stages[stage]]);
    }
  }

}).call(this);

//# sourceMappingURL=leisureRepl.js.map
