#+TITLE: Data access
* Scratch
#+NAME: bubba
#+BEGIN_SRC yaml
name: bubba
number: 34
#+END_SRC

#+NAME: fred
#+BEGIN_SRC yaml
name: fred
number: 2
#+END_SRC

#+BEGIN_SRC leisure :results dynamic
#currentTransaction
set 1 + 2 -435 map{} 
#+END_SRC
#+RESULTS:
: map{3:-435}

#+BEGIN_SRC leisure
#defTypeCase toJson.transaction ->
#  tr \c r u d data errs .
#    toJsonObject {
#      'type':'transaction'
#      'creates':(toJson c)
#      'reads':(toJson r)
#      'updates':(toJson u)
#      'deletes':(toJson d)
#      'errs':(toJson errs)}

set 'a' 1 {}
currentTransaction
do
  b <- trRead 'bubba'
  b = set 'number' 2 b
  trUpdate 'bubba' b
  #print s['b: ' b]
  #currentTransaction
  #b
#do
#  tr <- currentTransaction
#+END_SRC
#+RESULTS:
: {a:1}
: (transaction)
: (transaction [] [bubba] [bubba] [])

#+BEGIN_SRC leisure
tfoldr func finalValue trackFunc trackValue list = do
  a = 1
  subfold finalValue trackValue list = isNil list
    finalValue
    func (head list) (subfold finalValue (trackFunc trackValue) (tail list)) trackValue
  b = 2
  subfold finalValue trackValue list
33
tfoldr (\el rest track . el == 3 track rest) nil (1+) 0 [0 1 3 4 5]

#+END_SRC
#+RESULTS:
: unit
: 33
: 2

* Tests
#+BEGIN_SRC leisure :results def
#testTr1 = transaction
  set[]
  map{}
  set[]
  set[]
  map{}
  dl[]
#+END_SRC

* Transaction Objects
#+BEGIN_SRC leisure :results def
declareType transaction
 
transaction creates reads updates deletes data errors = \f .
  f creates reads updates deletes data errors

emptyTransaction = transaction set[] map{} set[] set[] map{} dl[]

isTransaction t = hasType t transaction

trEmpty transaction = transaction \c r u d data errs .
  and[
    empty c
    empty r
    empty u
    empty d
    empty errs]

trCreates transaction = transaction \c r u d data errs . c
trReads transaction = transaction \c r u d data errs . r
trUpdates transaction = transaction \c r u d data errs . u
trDeletes transaction = transaction \c r u d data errs . d
trData transaction = transaction \c r u d data errs . data
trErrs transaction = transaction \c r u d data errs . errs

trNoErrs transaction = empty (trErrs transaction)
  true
  err s['Errors in transaction: ' (intercalate (tolist (trErrs)) '\n')]

trSetData data tr = tr \c r u d data errs .
  transaction c r u d data errs
  unit

nlist l = s['[' (join (tolist l) ' ') ']']

defTypeCase showBase.transaction obj func ->
  (trEmpty obj) '(transaction)'
    obj \c r u d data errs . do
      r = map head (tolist r)
      s = s['(transaction ' (nlist c) ' ' (nlist r) ' ' (nlist u) ' ' (nlist d)]
      s[s ((empty errs) '' s[' ' (showBase (tolist errs) func)]) ')']

defTypeCase toJson.transaction tr ->
  tr \c r u d data errs .
    toJsonObject {
      'type':'transaction'
      'creates':(toJson c)
      'reads':(toJson r)
      'updates':(toJson u)
      'deletes':(toJson d)
      'errs':(toJson errs)}

currentTransaction = do
  tr <- envGetOpt 'transaction'
  tr id (setTransaction emptyTransaction)

setTransaction trans = do
  envSet 'transaction' trans
  trans

trCreate name value = do
  trans <- currentTransaction
  trNoErrs trans
  trans \c r u d data errs . setTransaction
    transaction (conj name c) r u d (set name value data) errs

trRead name = do
  trans <- currentTransaction
  trNoErrs trans
  valueOpt = getOpt (trData trans) name
  valueOpt id
    do
      value <- getDataUnsafe name
      trans \c r u d data errs . setTransaction
        transaction c (set name value r) u d (set name value data) errs
      value

trUpdate name value = do
  trans <- currentTransaction
  trNoErrs trans
  trans \c r u d data errs .
    setTransaction (transaction c r (conj u name) d (set name value data) errs)

trDelete name value = do
  trans <- currentTransaction
  trNoErrs trans
  trans \c r u d data errs . setTransaction
    transaction (delete name c) r (delete name u) (conj name d) (delete name data) errs
#+END_SRC

* Parsing
#+BEGIN_SRC leisure :results def
defTokenPack 'mud' [[] ['es[':']'] []]
addStdTokenPacks ['mud']
#+END_SRC

* Running a transaction
#+BEGIN_SRC leisure :results defx
defMacro 'defTransactionOld' \list . partition (flip isTokenString '->') list \def arrow body . do
  funcName = tokenString (head def)
  args = map tokenString (tail def)
  ['do'
    ['define' s['"transaction_local_' funcName '"'] (length args) (tokenSrc list)
      append ['\\' | args] ['.' | body]]
    ['define' s['"' funcName '"'] (length args) s[funcName ' ' (join args ' ') ' = bind (transaction_local_' funcName ' ' (join args ' ') ') \t . runTransaction "' funcName '" t']
      append ['\\' | args] ['.' 'bind' [s['transaction_local_' funcName] | args] '\\' 't' '.' 'runTransaction' s['"' funcName '"'] 't']]]

getString s =
  cond
    (isString s) s
    (isToken s) (tokenString s)
    true (show s)

escapeString s = jsonStringify s id id

defMacro 'es[' \list . `(escapeString (strCat (map getString ~(listify (head list)))))

defMacro 'defTransaction' \list . partition (flip isTokenString '->') list \decl arrow body . do
  funcName = getString (head decl)
  localTrans = s['transaction_local_' funcName]
  args = tail decl
  arity = length args
  src = tokenSrc list
  `(do
      define ~es[localTrans] ~arity ~src \~@args . ~@body
      define ~es[funcName] ~arity
        ~es[funcName ' ' (join args ' ') ' = do\n  t <- ' localTrans ' ' (join args ' ') '\n  runTransaction ' es[funcName] ' t']
        \~@args . do
          t <- ~localTrans ~@args
          runTransaction ~es[funcName] t)

#trCommit = do
#  trOpt <- envGetOpt 'transaction'
#  flip trOpt (error 'Attempt to commit with no active transaction') \tr . do
    
#+END_SRC

#+BEGIN_SRC leisure :results dynamic
isSet (setAdd 'a' amtSet)
#+END_SRC
#+ERROR: 0, ReferenceError: err is not defined
#+RESULTS:
: ERROR: 
: 
: Parse error: L_isSet is not defined
: CODE: 
: (
: resolve(L_isSet)(function(){&quot;use strict&quot;;return resolve(L_setAdd)(&quot;a&quot;, L_amtSet);}))
: //# sourceMappingURL=data:application/json;utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImR5bmFtaWMgY29kZSB3aXRoIHNvdXJjZSAyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLGlCQUFPLGlEQUFPLEdBQVAsRUFBVyxRQUFYLEdBQVAiLCJmaWxlIjoiZHluYW1pYyBjb2RlIHdpdGggc291cmNlIiwic291cmNlc0NvbnRlbnQiOlsiaXNTZXQgKHNldEFkZCAnYScgYW10U2V0KSJdfQ==
: 
: AST: anno(\@filename notebook-39 . isSet (setAdd a amtSet))

* Collaborative code
#+BEGIN_SRC leisure :results def
mungeBubbaNumber env n = do
  debug
  b <- getData 'bubba'
  setData 'bubba' (set 'number' n b)
makeCollaborative mungeBubbaNumber
#+END_SRC

#+BEGIN_SRC leisure :results dynamic
mungeBubbaNumber 28
#+END_SRC


#+BEGIN_SRC leisure :results dynamic
do
  b <- getDataUnsafe 'bubba'
  c = set 'number' 5 b
  print c
#+END_SRC
#+RESULTS:
: {"number":5 "name":"bubba"}
: 

#+BEGIN_SRC leisure :results dynamic
set 'a' 1 {}
#+END_SRC
#+RESULTS:
: {"a":1}

#+BEGIN_SRC leisure :results dynamic
do
  i <- for repeat 4
  print i
  i
#+END_SRC
#+RESULTS:
: 0
: 1
: 2
: 3
: [0 1 2 3]


#+BEGIN_SRC leisure :results dynamic
#+END_SRC


* Transactions
Minimalistic collaborative transactions. Since we execute collaborative code on
the master peer, we'd like to execute as much code on the slave peers as possible. So,
we have a transaction object that records the assumptions in a transaction, along with
transaction
