#+TITLE:CthulhuMUD
* Setup
:properties:
:hidden: true
:end:
** Import utilities
:properties:
:import: utilities.org
:end:

* GUI
#+BEGIN_HTML :controller consoleController
<div class="worldContainer">
    <div class="leftSide">
        rooms
    </div>
    <div class="rightSide">
        <div class="textLog">
            Text log
        </div>
        <div class="commandEntry">
            Enter command:<br>
            <input class="commandInput" type="text">
        </div>
    </div>
</div>
#+END_HTML

* Test
:properties:
:namespace: mud.core
:end:
#+BEGIN_SRC wisp :results dynamic
  ;(macroexpand `(doseq [x [1]] derp)) 
  ;(doseq [x [1 2]] (print x))
  ;(map #(list 'a %) '(a b c))
  ;(conj '(a) 'b)
  (map first (reverse '((1 2) (3 4))))
  (zip (ivec '(1 2)) (ivec '(3 4)))
  (seq (ivec [1 2]))
  (unzip (zip (ivec '(1 2)) (ivec '(3 4)))) 
  ;(reduce (fn [r x] (cons x r)) () '(1 2 3))
  ;(list? ())
  ;(conj (conj () 'a) 'b)
#+END_SRC
#+RESULTS:
: (3 1)
: List [ List [ 1, 3 ], List [ 2, 4 ] ]
: 1,2
: List [ List [ 1, 2 ], List [ 3, 4 ] ]




* Sample MUD Object
#+BEGIN_SRC yaml :index location location
id: mud-10
type: thing
name: fred
prefix: hungry
title: the barbarian
description: Fred is a nice guy.  Tea and crumpets at your place?
activity: Looking for food
location: mud-3
#+END_SRC
* Plumbing
:properties:
:namespace: mud.core
:end:
** Mud state
#+NAME: mudState
#+BEGIN_SRC yaml
currentId: 0
#+END_SRC
** Basics
#+NAME: Basics
#+BEGIN_SRC wisp :results def
  (defmacro collaboratively [name & args] `(.doCollaboratively data (.-name ~name) ~args))
  (defn registerCollaborativeFuncs [funcs] (map #(.registerCollaborativeCode data %1) funcs))
  (defn nextId []
    (let [game (.getData data "mudState")
          id (+ 1 (:currentId game))]
      (.log window.console "currentId: " id)
      (set! (:currentId game) id)
      (.setData data "gameState" game)
      id))
#+END_SRC

#+NAME: DataBasics
#+BEGIN_SRC wisp :results def
  (def data-headline "data-items")
  (def location-index "location")
  (def location-property "location")
  (defn createObject [object]
    (.appendDataToHeadline data
                           data-headline object.id
                           object
                           {:flowLevel 3 :index "location location"}))
  (defn updateObject [object]
    (.setData data
              object.id
              object
              {:flowLevel 3 :index "#{location-index} #{location-property}"}))
  (defn deleteObject [id] (.removeData data id))
  (defn getObject [id] (.getData data id))
  (defn getContents [id] (.find data location-index id))
#+END_SRC

** Transactions
#+BEGIN_SRC wisp :results def
  (defn- Transaction
    "Transaction type"
    [updates deletes gets]
    (set! this.updates (or updates (imap [])))
    (set! this.deletes (or deletes (iset [])))
    (set! this.gets (or gets (imap [])))
    this)

  (set! Transaction.transactionNumber 0)

  (defn- tcopy
    "Copy a transaction"
    [updates deletes gets]
    (Transaction. (or updates this.updates) (or deletes this.deletes) (or gets this.gets)))
  (set! Transaction.prototype.copy tcopy)

  (defn transaction
    "Create a transaction"
    [] (Transaction.))
  (defn transaction<-update
    "Update or insert data"
    [trans object]
    (.copy trans
     (.set (:updates this) (:_id object) object)
     (.delete (:deletes this) (:_id object))))
  (defn transaction<-remove
    "Remove data"
    [trans id]
    (let [id (if (dictionary? id) (:_id id) id)]
      (.copy trans
       (.delete (:updates this) id)
       (.add (:deletes this) id))))
  (defn transaction<-retrieve
    "Retrieve data into the transaction"
    [trans id]
    (.copy trans null null (.set (:gets trans) id (.getData data id true))))
  (defn transaction<-retrieveAll
    "Retrieve data for all of the ids into the transaction"
    [trans ids]
    (reduce retrieveIntoTransaction trans ids))
  (defn transaction<-find
    "Find data in an index"
    [trans index key]
    (.find data index key))
  (defn transaction<-clearIndex [trans indexName]
    (reduce remove trans (.find data indexName)))
  (defn transaction-access
    "Access data in the transaction"
    [trans id]
    (.get (:gets trans) id))
  (defn transaction-accessAll
    "Access all requested data in the transaction"
    [trans ids]
    (map #(transaction-access trans %) ids))
  (defn transaction-check
    "If an object is a transaction, return it, otherwise raise an error"
    [trans]
    (if (instance? Transaction trans) trans
        (throw (Error. (str "Object returned in transaction-> is not a Transaction: " trans)))))
  (defmacro transaction->
    "Do expressions with a new transaction"
    [& body]
    (let [body (reverse body)
          altered (reduce (fn [result x] (cons x (cons '(transaction-check) result))) () body)]
      `(-> (Transaction.) trans ~@altered)))
  (defn transaction-valid?
    "Verify that all of a transaction's gets are still valid"
    [trans]
    (every (fn [block]
             (let [curBlock (.getBlock data (:_id block))]
               (and curBlock
                    (== (:text block) (:text curBlock)))))
           (values (:gets trans))))
  (defn transaction-commit
    "Commit a transaction"
    [trans]
    )
#+END_SRC
** Examples
#+BEGIN_SRC wisp
  (defn test1
    "Move an object from one place to another"
    []
    (-> (transaction)
     (clearIndex "id")
     (update )))
#+END_SRC
* GUI
:properties:
:namespace: mud.core
:end:
#+BEGIN_SRC css
    .worldContainer {
        height: 480px;
        position: relative;
        width: 640px;
    }
    .leftSide {
        border: 1px solid #777;
        height: 470px;
        left: 5px;
        position: absolute;
        top: 5px;
        width: 310px;
    }
    .rightSide {
        border: 1px solid #777;
        height: 470px;
        position: absolute;
        right: 5px;
        top: 5px;
        width: 310px;
    }
    .textLog {
        border: 1px solid #777;
        height: 385px;
        margin: 5px;
        padding: 5px;
        position: absolute;
        width: 290px;
    }
    .commandEntry {
        border: 1px solid #777;
        height: 50px;
        margin: 5px;
        padding: 5px;
        position: absolute;
        top: 400px;
        width: 290px;
    }
    input.commandInput {
        width: 290px;
    }
#+END_SRC

#+NAME: consoleController
#+BEGIN_SRC wisp
 (defn init [view]
   (let [input (aget (.find ($ view) ".commandInput") 0)]
     (.addEventListener
      input "keydown"
      (fn [e]
        (.stop-propagation e)))
     (.addEventListener
      input "keypress"
      (fn [e]
        (.stop-propagation e)))))

 (set! this.initializeView init)
#+END_SRC

#+BEGIN_HTML :controller consoleController
<div class="worldContainer">
    <div class="leftSide">
        rooms
    </div>
    <div class="rightSide">
        <div class="textLog">
            Text log
        </div>
        <div class="commandEntry">
            Enter command:<br>
            <input class="commandInput" type="text">
        </div>
    </div>
</div>
#+END_HTML

* Parser
:properties:
:namespace: mud.core
:end:
* Utilites
* Data
:properties:
:name: data-items
:end:
