* Settings
:properties:
:hidden: true
:end:

#+BEGIN_SRC coffee :results def
window.FT = require './lib/fingertree'
window.app = {}
Lounge.opts.setTheme 'googie'
Lounge.opts.hideToolbar()
Lounge.opts.toggleSlides()
window.ED = Lounge.opts.editor
ED.node.focus()
#+END_SRC

#+BEGIN_SRC cssX
.slides [data-org-headline='1'] > .maincontent > span + div + div {
  display: inline-block;
  margin: auto;
}
#+END_SRC

* Fun With Finger Trees!
** (Page Down / Page Up changes slides)
#+BEGIN_HTML
<button onclick='document.body.webkitRequestFullscreen(); ED.node.focus()'>Full screen</button>
#+END_HTML

[[2-3_finger_tree,_sample_tree.svg.png]]
* Weird name, what is it?
[[Anatomy-of-a-finger-tree.png]]
* What? That name...
** Take a tree...
[[finger-tree-1.png]]
* What? That name...
** Fold it in half along the spine...
[[finger-tree-2.png]]

* What? That name...
** Index the path with "fingers"
[[finger-tree-3.png]]

* Why do people use them?
* Why? Decent performance
** Random access

** Very good performance for these operations:
*** push at both ends: O(1)

*** pop at both ends: O(1)

*** insert: O(log N)

*** delete: O(log N)

*** reverse: O(1)

*** split based on a value: O(log N)

*** concat: O(log N)
* Why? Wait, concatenate trees?  Huh?
** Do we normally think of splitting and concatenating trees?

** "Search trees" are not the only type of trees

** Trees can also be used for sequences
* Why? Concat...
** Finger trees are *SEQUENCES* that are just implemented as trees

** Bulk operations on finger trees perform well (split/concat)
* Why? Concat...
** Concat for large stock sequences tends to be wasteful

*** Lisp cons-list concat: O(N)

*** Clojure vector concat: O(N)

** Finger tree concat is fast

*** Finger tress: O(log N)

* Why? Concat...
** Remember Lisp?
[[consAppend.png]]
* Why? Concat...
** Now with finger trees...

** Get ready to feel the performance...
* Why? Wait, concatenate trees?  Huh?
** Are you ready?
* Why? Wait, concatenate trees?  Huh?
** BOOM!
[[ftAppend.png]]
* Why? Wait, concatenate trees?  Huh?
** Skeptical?
* Why? Wait, concatenate trees?  Huh?
** Well, that's roughly what happens, anyway
* Why? Wait, concatenate trees?  Huh?
** There's more finagling and laziness involved
* Why? Wait, concatenate trees?  Huh?
** It's even better for really big trees: most ops are O(log N) or better
* Why? Sequence, split...
** Split gives you random access!

** Returns two trees
*** 1) All of the first items that failed the test


*** 2) The rest of the tree (starting with the first successful item)


** You can randomly access and alter each tree (of course!)
* Why? Sequence, split...
** Insert is easy: Split + push + concat

** DELETE is easy: Split + pop + concat

* Why? Sequence, split...
** Repeat: DELETE IS EASY!

*** No fear and loathing!!!
* Why? Disclaimer
** 3-5 times slower than the best balanced binary search trees

** According to the [[http://www.staff.city.ac.uk/~ross/papers/FingerTree.pdf][Hinze-Paterson paper]] (QR code at end)
* What? THREE to FIVE times slower?!?
[[grumpyCat.jpg]]
* Why? THREE to FIVE times slower?!?
** Do you need trees that aren't just for SEARCH?


** Do you need a search tree but don't have one on hand the QUITE does what you need?
* Why? Why? Why? Swiss Army, baby!
** You can haz pluggable!
[[Happy-cat.jpg]]
* Why? Why? Why? Swiss Army, baby!
** They are FANTASTIC for ad hoc measured sequences

** Many people just use lists/vectors for ad hoc structures

*** better performance
* What?  "Measured sequence"?
** Caches "measurements" of subsequences for faster access and modification
* Why? Sequence, "measured"?
** Caches a "measurement" at each level, providing O(log N) lookup
[[finger-tree-1.png]]
* Why? Sequence, "measured"?
** Measurements merge and cascade up
[[finger-tree-1-measured.png]]
* How do you use it?  You provide...
** Measure(element): produce a measurement based on a sequence element

** Identity(): the "zero" measurement for empty trees

** Sum(measure1, measure2): produce a measurement based on two other measurements

(FYI: these last two make it a monoid)
* How? Split...
** Given a measurement test function, it returns two finger trees

*** All of the initial items that don't pass the test

*** The rest of the tree (starting with the first that passes the test)

** You provide the measurement function at creation

*** Each finger tree has specialized access
* How? Access the Nth element?  Easy!
** Here's a "get nth element-able" measurement definition
#+BEGIN_SRC cs :results def
app.t = FT.fromArray 'abcdefghijklmnopqrstuvwxy',
  measure: (n)-> 1
  identity: -> 0
  sum: (a, b)-> a + b

app.getNth = (tree, i)->
  [first, rest] = tree.split (n)-> n > i
  rest.peekFirst()
#+END_SRC

** Test it...
#+BEGIN_SRC cs :results dynamic
app.getNth app.t, 2
#+END_SRC

* How? Ropes...
#+BEGIN_SRC cs :results def
app.s = FT.fromArray ['aaa', 'bbbb', 'ccccc', 'dd', 'eeee', 'f', 'gg', 'hhhh', 'iiiii', 'jjj'],
  measure: (n)-> n.length
  identity: -> 0
  sum: (a, b)-> a + b

app.stringAtPos = (tree, pos)->
  [first, rest] = tree.split (p)-> p > pos
  rest.peekFirst()
#+END_SRC

#+BEGIN_SRC cs :results dynamic
app.stringAtPos app.s, 0
#+END_SRC

* How? Ropes AND get Nth string?
#+BEGIN_SRC cs :results def
app.s2 = FT.fromArray ['aaa', 'bbbb', 'ccccc', 'dd', 'eeee', 'f', 'gg', 'hhhh', 'iiiii', 'jjj'],
  measure: (n)-> count: 1, length: n.length
  identity: -> count: 0, length: 0
  sum: (a, b)-> count: a.count + b.count, length: a.length + b.length

app.getNth2 = (tree, i)->
  [first, rest] = tree.split ({count})-> count > i
  rest.peekFirst()
app.stringAtPos2 = (tree, pos)->
  [first, rest] = tree.split ({length})-> length > pos
  rest.peekFirst()
#+END_SRC

#+BEGIN_SRC cs :results dynamic
app.getNth2 app.s2, 5
app.stringAtPos2 app.s2, 16
#+END_SRC
#+RESULTS:
: f
: eeee

* Back to "Why?" Good performance
** split/concat: O(log N)

** push/pop at either end: O(1)

** insert: O(log N) (split + push + concat)

** delete: O(log N) (split + pop + concat)

** reverse: O(1)
* Why? Performance comparison
** This slide is from the [[http://comonad.com/reader/2010/finger-trees/#more-174][Comonad Reader Finger Tree talk]] (QR code at end)
[[FingerTrees-performance.png]]
* What? Persistent?
** persistent data structures are "functional"

** old versions don't change

** modifying them produces a new data structure that reuses old parts

** very useful for concurrency

** works well in functional environments
* What do peeps use them for?
** Yi (Haskell Emacs-like editor) uses them to implement text buffers

** Leisure uses it
* Use? Implement many (all?) of Okasaki's structures
** [[http://www.staff.city.ac.uk/~ross/papers/FingerTree.pdf][Finger trees: a simple general-purpose data structure]], by Hinze & Paterson
* Me? Leisure uses them in several places
** Block index
*** Find block ID by offset
#+BEGIN_SRC cs :results dynamic
ED.options.data.blockForOffset 67
#+END_SRC
*** Find block offset by ID
#+BEGIN_SRC cs :results dynamic
ED.options.data.offsetForBlock 'block2'
#+END_SRC
** Floating marks
*** Like EMACS floating marks

*** Needed by value sliders (to continue working during collaboration)

** Sets of textual replacements
* How does the block index work?
** Leisure relies heavily on finger trees for its "block index"

** One tree converts two-ways between character offset and block ID
* How does the block index work?
#+BEGIN_SRC cs
identity: -> ids: Set(), length: 0
measure: (v)-> ids: Set([v.id]), length: v.length
sum: (a, b)-> ids: a.ids.union(b.ids), length: a.length + b.length
#+END_SRC
** "length" makes a rope structure

** "ids" keeps successive sets of all IDs
* How does the block index work?
** Successive sets of ALL IDs sounds expensive!
[[grumpyCat.jpg]]
* How does the block index work?
** Actually, it's not too bad...
* How does the block index work?
** Becuz functional tekneex!
[[Happy-cat.jpg]]
* How does the block index work?
** It looks kind of like this
[[BlockIndex.png]]
* History
** First published in 1977
*** by Guibas, McCreight, Plass, and Roberts

*** An alternative representation for lists (as opposed to cons-lists)

** Refined here and there

** 2006: Hinze/Paterson publish measured finger trees
* Measurements are monoidal!
** MONOIDS!
[[Happy-cat.jpg]]
* Monoids!
** It mostly just means you can combine measurements
* Monoids!
** Monoids are like monads

** Monads are like bananas

** Monads are like space suits

** You can read all kinds of tutorials on them

** Really, people are confused about them because the IO monad is a clever hack
*** That's a topic for another talk
* Monoids!
** A type

** An associative operation

** An identity
* QR Codes
** This talk

** Hinze-Paterson paper
[[FingerTree-paper-url.png]]
** Comonad Reader Finger Tree Talk
[[FingerTrees-performance-url.png]]
