* Settings
:properties:
:hidden: true
:end:

#+BEGIN_SRC coffee :results def
window.FT = require './lib/fingertree'
window.app = {}
Lounge.opts.setTheme 'googie'
Lounge.opts.hideToolbar()
Lounge.opts.toggleSlides()
window.ED = Lounge.opts.editor
ED.node.focus()
#+END_SRC

#+BEGIN_SRC css
body {
  cursor: pointer;
}
#+END_SRC

* Fun With Finger Trees!
** (Page Down / Page Up changes slides)
#+BEGIN_HTML
<button onclick='document.body.webkitRequestFullscreen(); ED.node.focus()'>Full screen</button>
#+END_HTML

[[2-3_finger_tree,_sample_tree.svg.png]]
* Who am I?
** Bill Burdick

** TEAM CTHULHU (Roy Riggs, Gilan Israel, and me)

** We make [[github.com/zot/Leisure][Leisure]] and other stuff
* Weird name, what is it?
[[Anatomy-of-a-finger-tree.png]]
* What? That name...
** Take a tree...
[[finger-tree-1.png]]
* What? That name...
** Fold it in half along the spine...
[[finger-tree-2.png]]

* What? That name...
** Index the path with "fingers"
[[finger-tree-3.png]]

* Why do people use them?
** Decent performance

** Persistent

** Pluggable
* Why? Decent performance
** Random access

** Very good performance for these operations:
*** push at both ends: O(1)

*** pop at both ends: O(1)

*** reverse: O(1)

*** insert: O(log N)

*** delete: O(log N)

*** split based on a predicate (test functino): O(log N)

*** concat: O(log N)
* Why? Wait, concatenate trees?  Huh?
** Do we normally think of splitting and concatenating trees?

** "Search trees" are not the only type of trees

** Trees can also be used for sequences

** Like lists in Lisp

** Like vectors in Clojure
* Why? Concat...
** Finger trees are random-access *SEQUENCES* that are just implemented as trees

** Bulk operations on finger trees perform well (split/concat)
* Why? Concat...
** Concat for large, stock-implemented sequences tends to be time consuming

*** Lisp cons-list concat: O(N)

*** Clojure vector concat: O(N)

** Finger tree concat is fast

*** Finger tress: O(log N)

* Why? Concat...
** Appending in Lisp and Clojure copies one of the lists
[[consAppend.png]]
* Why? Concat...
** Now with finger trees...

** Get ready to feel the performance...
* Why? Concat...
** Are you ready?
* Why? Concat...
** BOOM!
** O(log N) concat!
[[ftAppend.png]]
* Why? Concat...
** Skeptical?
* Why? Concat...
** Well, that's roughly what happens, anyway
* Why? Concat...
** There's more finagling and laziness involved

** But it's really O(log N)
* Why? Concat...
** O(log N) makes it even better for really big trees, of course

** As we saw above, most ops are O(log N) or better
* Why? Sequence, split...
** Split gives you random access!

** Returns two finger trees
*** 1) All of the first items that failed the test


*** 2) The rest of the tree (starting with the first successful item)


** You can randomly access and alter each finger tree (of course!)
* Why? Sequence, split...
** Insert is easy: Split + push + concat

** DELETE is easy: Split + pop + concat

* Why? Sequence, split...
** Have you written your own collection libraries before?
* Why? Sequence, split...
** Repeat: DELETE IS EASY!


** No fear and loathing!!!
* Why? Persistent?
** Persistent data structures are "functional"

** Old collection values don't change

** "Modifying" them produces a new data structure that reuses old parts

** Very useful in concurrent and asynchronous programs

** Works well in functional environments
* Why? Time for a disclaimer
** 3-5 times slower than the best balanced binary search trees

** According to the [[http://www.staff.city.ac.uk/~ross/papers/FingerTree.pdf][Hinze-Paterson paper]] (QR code at end)
* What? THREE to FIVE times slower?!?
[[grumpyCat.jpg]]
* Why? THREE to FIVE times slower?!?
** Do you need trees that aren't just for SEARCH?

** Do you need a search tree but don't have one on hand that QUITE does what you need?
* Why? Why? Why? Swiss Army, baby!
** You can haz pluggable!
[[Happy-cat.jpg]]
* Why? Why? Why? Swiss Army, baby!
** They are FANTASTIC for ad hoc measured sequences

** Many people just use lists/vectors for ad hoc structures

*** better performance
* What?  "Measured sequence"?
** Finger trees use "measurements" you provide to help with searching the structure
* What?  "Measured sequence"?
** Caches "measurements" of subsequences for faster access and modification
* Why? Sequence, "measured"?
** Caches a "measurement" at each level, providing O(log N) lookup
[[finger-tree-1.png]]
* Why? Sequence, "measured"?
** Measurements merge and cascade up
[[finger-tree-1-measured.png]]
* How do you use it?  You provide...
** So how do you use a finger tree?
* How do you use it?  You provide...
** Measure(element): produce a measurement based on a sequence element

** Identity(): the "zero" measurement for empty trees

** Sum(measure1, measure2): produce a measurement based on two other measurements

*** (FYI: these last two make it a monoid)
* How? Split...
** Given a measurement test function, it returns two finger trees

*** All of the initial items that don't pass the test

*** The rest of the tree (starting with the first that passes the test)

** You provide the measurement function at creation

*** Each finger tree has specialized access
* How?  Let's define a couple finger trees
** One that lets you get the nth element
*** Split on the nth element

** Ropes, quickly-modifiable strings made of a bunch of substrings
*** Split on the nth CHARACTER (as opposed to the nth string)

** Combine the two, ropes with random-access substrings
*** Split on the nth string

*** Split on string containing the nth character from the start
* How? Access the Nth element?  Easy!
** Here's a "get nth element"-able measurement definition
#+BEGIN_SRC cs :results def
app.t = FT.fromArray 'abcdefghijklmnopqrstuvwxyz',
  measure: (n)-> 1
  identity: -> 0
  sum: (a, b)-> a + b

app.getNth = (tree, i)->
  [first, rest] = tree.split (n)-> n > i
  rest.peekFirst()
#+END_SRC

[[Get-nth.png]]
* How? Access the Nth element?  Easy!
** Test it...
#+BEGIN_SRC cs :results dynamic
#app.t = FT.fromArray 'abcdefghijklmnopqrstuvwxyz',
#  measure: (n)-> 1
#  identity: -> 0
#  sum: (a, b)-> a + b

app.getNth app.t, 0
#+END_SRC
#+RESULTS:
: a
* How? Ropes...
** Ropes are a modern approach to strings (used by JavaScript and other systems)

** Java's strings are just immutable arrays of characters
*** Substring: O(1), pre-Java 7 (according to [[http://stackoverflow.com/a/4679775][John Skeet's]] StackOverflow answer)
**** Can cause leaks.  Becuz shared.

*** Substring: O(N), Java 7+ (according to [[http://stackoverflow.com/a/4679775][John Skeet's]] StackOverflow answer)

*** Concatenating: O(N)

** Ropes can provide better overall performance
*** Substring: O(log N)

*** Concatenation: O(log N)
* How? Ropes...
** Ropes done with finger trees (rough impl)
#+BEGIN_SRC cs :results def
app.s = FT.fromArray ['aaa', 'bbbb', 'ccccc', 'dd', 'eeee', 'f', 'gg', 'hhhh', 'iiiii', 'jjj'],
  measure: (n)-> n.length
  identity: -> 0
  sum: (a, b)-> a + b

app.stringAtPos = (tree, pos)->
  [first, rest] = tree.split (p)-> p > pos
  if rest.isEmpty() then first
  else first.addLast rest.peekFirst()
#+END_SRC

[[Rope.png]]
* How? Ropes...
** Test it...
#+BEGIN_SRC cs :results dynamic
t = app.stringAtPos app.s, 0
res = if t.isEmpty() then '' else t.peekLast()
t.toArray().join ''
#+END_SRC
#+RESULTS:
: [object Object]
: aaa
: aaa
* How? Ropes AND get Nth string?
** Both at once!
** Measurements are objects instead of numbers
#+BEGIN_SRC cs :results def
app.s2 = FT.fromArray ['aaa', 'bbbb', 'ccccc', 'dd', 'eeee', 'f', 'gg', 'hhhh', 'iiiii', 'jjj'],
  measure: (n)-> count: 1, length: n.length
  identity: -> count: 0, length: 0
  sum: (a, b)-> count: a.count + b.count, length: a.length + b.length

app.getNth2 = (tree, i)->
  [first, rest] = tree.split ({count})-> count > i
  rest.peekFirst()

app.stringAtPos2 = (tree, pos)->
  [first, rest] = tree.split ({length})-> length > pos
  if rest.isEmpty() then first
  else first.addLast rest.peekFirst()
#+END_SRC
** Test it...
#+BEGIN_SRC cs :results dynamic
app.getNth2 app.s2, 5
app.stringAtPos2(app.s2, 16).toArray().join ''
#+END_SRC
#+RESULTS:
: f
: eeee
* Let's review: Both at once
** Measurements can be complex

** They can serve several purposes

** They can act like multiple indexes in a single finger tree
* Back to "Why?" Good performance
** split/concat: O(log N)

** push/pop at either end: O(1)

** reverse: O(1)

** insert: O(log N) (split + push + concat)

** delete: O(log N) (split + pop + concat)
* Why? Performance comparison
** This slide is from the [[http://comonad.com/reader/2010/finger-trees/#more-174][Comonad Reader Finger Tree talk]] (QR code at end)
*** Note that this is for non-lazy, so reverse is O(N) instead of O(1)
[[FingerTrees-performance.png]]
* What peeps use them?
** Yi (Haskell Emacs-like editor) uses them to implement text buffers

** Leisure uses them
* Use? Implement many (all?) of Okasaki's structures
** [[http://www.staff.city.ac.uk/~ross/papers/FingerTree.pdf][Finger trees: a simple general-purpose data structure]], by Hinze & Paterson
* Me? Leisure uses them in several places
** Block index
*** Find block ID by offset
#+BEGIN_SRC cs :results dynamic
ED.options.data.blockForOffset 1000
#+END_SRC
*** Find block offset by ID
#+BEGIN_SRC cs :results dynamic
ED.options.data.offsetForBlock 'block2'
#+END_SRC
** Floating marks
*** Like EMACS floating marks

*** Needed by value sliders (to continue working during collaboration)

** Sets of textual replacements
* How does the block index work?
** Leisure relies heavily on finger trees for its "block index"

** One tree converts two-ways between character offset and block ID
* How does the block index work?
** Uses Facebook's [[http://facebook.github.io/immutable-js/][Immutable JS library]] (highly recommended)
#+BEGIN_SRC cs
identity: -> ids: Set(), length: 0
measure: (v)-> ids: Set([v.id]), length: v.length
sum: (a, b)-> ids: a.ids.union(b.ids), length: a.length + b.length
#+END_SRC
** "length" makes a rope structure

** "ids" keeps successive sets of all IDs
* How does the block index work?
** Successive sets of ALL IDs sounds expensive!
[[grumpyCat.jpg]]
* How does the block index work?
** Actually, it's not too bad...
* How does the block index work?
** Becuz persistent!
[[Happy-cat.jpg]]
* How does the block index work?
** It looks kind of like this
[[BlockIndex.png]]
* Floating Marks
** They're just names and offsets!
* Floating Marks
** Well, offset is stored relative to the previous mark

** That makes it easy to move them around

** A finger tree manages lookup, and manipulation
* Sets of textual replacements
** Combine (and merge) successive string replacements

** Compute the initial and final string length

** Important for collaboration
* Sets of textual replacements
** Items are stored as {offset, length, text}

** Offset is from end of preceding replacement (after application)
#+BEGIN_SRC cs :results dynamic
reps = Leisure.Replacements.replacements [
  {start: 5, end: 15, text: 'hello'},
  {start: 3, end: 7, text: 'burp'}
]
_.at reps.initialBounds(), ['start', 'end']
_.at reps.finalBounds(), ['start', 'end']
#+END_SRC
* History
** First published in 1977
*** by Guibas, McCreight, Plass, and Roberts

*** An alternative representation for lists (as opposed to cons-lists)

** Refined here and there

** 2006: Hinze/Paterson publish measured finger trees
* Measurements are monoidal!
** MONOIDS!
[[Happy-cat.jpg]]
* Monoids!
** It mostly just means you can combine the measurements
* Monoids!
** Monoids are like monads

** Monads are like bananas

** Monads are like space suits

** You can read all kinds of tutorials on them

** Really, people are confused about them because the IO monad is a clever hack
*** That's a topic for another talk
* Monoids!
** A type for the items

** An identity item (or function)
*** The "zero" item

** An associative operation
*** A "plus" operator

*** Combines two items to produce another item of the same type
* QR Codes
** [[http://www.staff.city.ac.uk/~ross/papers/FingerTree.pdf][Hinze-Paterson paper]]
[[FingerTree-paper-url.png]]
** [[http://comonad.com/reader/2010/finger-trees/#more-174][Comonad Reader Finger Tree Talk]]
[[FingerTrees-performance-url.png]]
* Finger tree library
** [[http://zot.github.io/Leisure/index.html?load=demo/fingerTrees/fingerTrees.lorg][This talk]]
[[ThisTalk.png]]
** Using Xueqiao (Joe) Xu's [[https://github.com/qiao/fingertree.js/][JavaScript library]]
** (well, my CoffeeScript port of it)
[[fingerTreeLibrary-url.png]]
