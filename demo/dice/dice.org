* Dice roller
:properties:
:note: sidbar
:end:
#+BEGIN_HTML
{{{view 'player-ui' 'name'}}}{{{view 'player-ui' 'header'}}}{{{view 'player-ui'}}}
#+END_HTML
* Shared Data
:properties:
:hidden: true
:end:
#+NAME: player-ui
#+BEGIN_SRC yaml :flowLevel 3 :local
type: player-ui
selections:
  - size: 4
    selected: 3
  - size: 6
    selected: 0
  - size: 8
    selected: 0
  - size: 10
    selected: 0
  - size: 12
    selected: 0
player: null
#+END_SRC

The dice log is a list of rolls.
Each roll is a list of values: {size: S angle: A value: V}.

#+NAME: roll-count
#+BEGIN_SRC yaml
count: 0
#+END_SRC
* Player Data
:properties:
:name: PlayerData
:hidden: true
:end:
#+NAME: player-Bubba
#+BEGIN_SRC yaml :flowLevel 3 :index players name
name: Bubba
type: player
#+END_SRC
* Roll Data
:properties:
:hidden: true
:name: rolls
:end:
* Monadic examples
:properties:
:hidden: true
:end:

Iteration/filtering:

- this produces an IO value that prints [1 4], [2 3], and [3 4]
- lifting is implicit because the bind function is polymorphic on the run time data type
- the list monad does a Haskell/Scala-like flat map, except that it's runtime polymorphic
- the value, if you don't run the monad, is an IO value (a bind command)
- the value when you run it is [1 4 2 3 3 4] (not a list of IO values)

#+BEGIN_SRC leisure
do
  p <- run getData 'player-ui'
  print p
#+END_SRC

List comprehensions:

- the boolean acts as an "if"
- the expression's value is the list [3 4], like you might expect
- you can also format the expr like this:do (x <- for [1 2 3]) (x > 1) (x + 1)
- not all of the parens are strictly necessary: do (x <- for [1 2 3]) x > 1 x + 1

#+BEGIN_SRC leisure
do
  x <- for [1 2 3]
  x > 1
  x + 1
#+END_SRC
* Importing lens code
:properties:
:import: ../lenses.org
:hidden: true
:end:
* SCRATCH
:properties:
:hidden: true
:end:

#+BEGIN_SRC leisure :results dynamic
getData 'roll-count'
#+END_SRC
* Code
:properties:
:hidden: true
:end:

#+BEGIN_SRC leisure :results def
selectionList sel = map (\el . [(afetch 'size' el) | (afetch 'selected' el)]) sel

roll = do
  #debug
  print 'ROLL'
  player <- run getData 'player-ui'
  print['Player: ' player]
  selections = selectionList (afetch 'selections' player)
  result <- do
    sizeCount <- forFlat repeat 5
    size = (sizeCount + 2) * 2
    dice <- for repeat (afetch size selections)
    valueRand <- rand
    angleRand <- rand
    #print['roll die #' dice ': ' valueRand]
    {'size':size 'value':(ceil valueRand * size) 'angle':(floor angleRand * 24)}
  print['roll: ' result]
  #debug
  changeData
    count <- run getData 'roll-count'
    print['Count: ' count]
    nextCount = (assoc 'count' count id nil) + 1
    print['Next Count: ' nextCount ' (' (assoc 'count' count) ' + 1)']
    setData 'roll-count' {'count' : nextCount}
    newRoll = {'type':'roll' 'number':nextCount 'player':(afetch 'player' player) 'roll':result}
    appendDataWithAttrs 'rolls' nil ':flowLevel 3 :index rolls number' newRoll

playerLens = lensBuilder lensKey 'player'

checkPlayer = do
  js['console.log("checking player")']
  player <- run getData 'player-ui'
  js["console.log('player: " (show player) "')"]
  playerId = playerLens lensGet player
  isNil playerId
  name <- run prompt 'Player id?'
  js['$(body).addClass("inactive")']
  changeData
    playerName = concat['player-' name]
    setData 'player-ui' (playerLens lensSet player playerName)
    current <- getData playerName
    isNone current
    appendDataWithAttrs 'PlayerData' playerName ':flowLevel 3 :index players name' {"type":"player" "name":name}

reset = changeData
  player <- run getData 'player-ui'
  setData 'player-ui' (lensBuilder lensKey 'selections' lensSet player [{'size':4 'selected':0}{'size':6 'selected':0}{'size':8 'selected':0}{'size':10 'selected':0}{'size':12 'selected':0}])

rollAndReset = do
  roll
  reset
#+END_SRC
* test
:properties:
:hidden: true
:end:

#+BEGIN_SRC leisure :results def
changeData (player <- run getData 'player-ui') (print player)
#+END_SRC
* Data functions
:properties:
:hidden: true
:end:

#+BEGIN_SRC leisure :results def
lastBlockId = js["$('[data-shared]').last()[0].id"]

sel = lensBuilder lensKey 'selections'

select size count = changeData
  print ['LEISURE SELECT ' size count]
  data <- run getData 'player-ui'
  setSelected sel data (number size) (number count)

notNil = compose not isNil

setSelected sel data size count = do
  notNil (sel lensGet data)
  h = sel lensHead
  (h lensKey 'size' lensGet data) == size
    setData 'player-ui' (h lensKey 'selected' lensSet data count)
    setSelected (sel lensTail) data size count
#+END_SRC

#+BEGIN_SRC coffee :results def
console.log "BURP"
{Handlebars, evalLeisure} = Leisure
window.run = (str)->
  #debugger
  old = Leisure.defaultEnv.opts
  Leisure.defaultEnv.opts = Lounge?.env.opts ? Leisure.findEditor(event?.srcElement)?.options
  try
    evalLeisure str
  finally
    Leisure.defaultEnv.opts = old

Handlebars.registerHelper 'equals', (item1, item2)->
  if String(Number(item1)) == String(item1) then Number(item1) == Number(item2) else item1 == item2

Handlebars.registerHelper 'range', (from, to, options)->
  res = ''
  for i in [from..to]
    res += options.fn String(i)
  res
#+END_SRC

#+BEGIN_SRC index
name: rolls
order: desc
#+END_SRC

* Views and Data
:properties:
:hidden: true
:end:

#+BEGIN_SRC html :defview player
<b>{{name}}</b>
#+END_SRC

#+BEGIN_SRC html :defview player/edit
<label>Name:</label> <input type='text' placeholder="Name" data-value='name'>
#+END_SRC

Rewrite this in Leisure!

#+BEGIN_SRC coffee :control player-ui
lz = window.lazy
rz = window.resolve
runMonad = (m)-> Leisure.runMonad m, fancyEnv, (->)
##fancyEnv = Leisure.fancyEnv()
fancyEnv = _.clone Lounge
fancyEnv.presentValue = (x)-> x

#window.run = run = (value)->
#  debugger
#  fancyEnv.opts = Leisure.findEditor('[data-view="player-ui/name"]').options
#  runMonad value, fancyEnv, ->

window.selectDie = (e)->
  console.log "SELECT #{e.target.name} #{e.target.value}"
  runMonad rz(L_select)(e.target.name, e.target.value)

@initializeView = (view)->
  fancyEnv.opts = Leisure.UI.context.opts
  #debugger
  holder = $(view).closest("[data-org-headline='1']")
  holder.attr 'game', ''
  h = $(holder).find("[data-view='player-ui/name']")?[0].offsetTop ? 0
  r = $(view).find('.results')[0]
  count = 3
  scrollIt = ->
    if count-- > 0
      console.log "SCROLLING DOWN..."
      r?.scrollTop = r.scrollHeight
      setTimeout scrollIt, 250
  scrollIt()
#+END_SRC

#+BEGIN_SRC coffee :control player-ui/header
@initializeView = (view)->
  $(view).find('input [type="radio"]').buttonset()
#+END_SRC

This is template that defines how the dice log displays.  See the dice log for more info.

#+BEGIN_SRC html :defview roll
<table>
  <tr><td><label class='playerLabel'>{{{view player}}}:</label></td>
  <td><div class='roll'>{{#each roll}}
    <img src="images/d{{size}}-{{value}}-{{angle}}.png">
  {{/each}}</div></td></tr>
</table>
#+END_SRC

#+BEGIN_SRC html :defview player-ui/name
{{{view player 'edit'}}}
#+END_SRC

#+BEGIN_SRC html :defview player-ui/header
  <table>
    <tr style='height: 1px'>
      <td style='width: 1px; white-space: nowrap'>
        <button onclick='run("roll")'>Roll</button>
        <button onclick='run("rollAndReset")'>Roll and Reset</button>
        <button onclick='run("reset")'>Reset</button>
        <br>
        {{#each selections}}
        <div class='selector'>
          <div><input type="radio" id="radio{{size}}" name="mainTrait"></div>
          <div class='label'>d{{size}}</div>
          <div class='selectClip'><select name="{{size}}" onchange='selectDie(event)' size='6'>
            {{#range 0 5}}
              <option{{#if (equals this ../selected)}} selected{{/if}}>{{this}}</option>
            {{/range}}
          </select>
          </div>
        </div>
        {{/each}}
      </td>
      <td>
        {{#find 'players'}}<div>{{{view this}}}</div>{{/find}}
      </td>
    </tr>
  </table>
#+END_SRC

#+BEGIN_SRC html :defview player-ui
<div class='results-box'>
  <div class='results'>
    {{#find 'rolls'}}{{{view this}}}{{/find}}
  </div>
</div>
#+END_SRC

#+BEGIN_SRC css
body:not(.bar_collapse) .results-box {
  position: absolute;
}
body.inactive .results-box {
  display: none;
}
.results-box {
  min-width: 768px;
  position: relative;
  height: calc(100% - 8em - 2em * 4);
  width: calc(100% - 4ex);
}
.results-box > table {
  height: 100%;
  width: 100%;
}
.results-box td {
  vertical-align: top;
}
.results {
  background: white;
  display: inline-block;
  padding: 10px;
  border: solid black 2px;
  position: relative;
  width: calc(100% - 20px);
  height: calc(100% - 20px);
  top: 0;
  left: 0;
  overflow: auto;
}
input {
  border: solid gray 2px !important;
}
.results td {
  vertical-align: middle;
}
.results td img {
  width: 128px;
}
.selector {
  display: inline-block;
  margin-left: 0.5ex;
  margin-right: 0.5ex;
}
.playerLabel {
  display: inline-block;
  min-width: 10ex
}
.selector .label {
  text-align: center;
  font-weight: bold;
}
.selectClip {
  display: inline-block;
  vertical-align: top;
  overflow: hidden;
  border: solid gray 1px;
}
.selectClip select {
  padding:10px;
  margin:-5px -25px -5px -5px;
}
.tc-banner {
  display: none;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 100;
  white-space: nowrap;
}
[data-view=leisure-toolbar].collapse ~ .tc-banner {
  display: initial;
}
[data-view=leisure-toolbar] {
  z-index: 2;
}
[data-edit-mode=fancy][game] {
  min-height: 500px;
  position: relative;
}
[data-view=leisure-toolbar].collapse + [maindoc] [game] {
  position: fixed !important;
  top: 10px !important;
  bottom: 0px !important;
  right: 10px !important;
  left: 10px !important;
  z-index: 10000 !important;
  background: white;
  border: 4px solid black;
  border-radius: 10px;
}

[data-view=leisure-toolbar].collapse + [maindoc] [data-edit-mode=fancy][game] [data-org-type='text'],
[data-view=leisure-toolbar].collapse + [maindoc] [data-edit-mode=fancy][game] .toggle_edit {
  display: none;
}

label {
  white-space: nowrap;
}

.roll {
  border: solid gray 3px;
}

.inline-block {
  display: inline-block;
}

#+END_SRC

#+BEGIN_SRC leisure :results def
#toggleLeisureBar
#debug
checkPlayer
do
  player <- run getData 'player-ui'
  js['console.log("Current player: ' (playerLens lensGet player) '")']
  js["Leisure.findEditor($('[maindoc]')[0]).options.hideToolbar()"]
  js["$('[name=p2pHost]').val('textcraft.org:1999')"]
#+END_SRC

#+BEGIN_SRC cs
window.diceLounge = Lounge
#+END_SRC
